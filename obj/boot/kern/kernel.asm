
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 17 00 	lgdtl  0x171018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 17 f0       	mov    $0xf0170fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 a4 40 3f f0 01 	movl   $0x1,0xf03f40a4
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 64 40 3f f0 01 	movl   $0x1,0xf03f4064
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba ec 67 45 f0       	mov    $0xf04567ec,%edx
f010006a:	b8 dd 34 3f f0       	mov    $0xf03f34dd,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 dd 34 3f f0       	push   $0xf03f34dd
f010007e:	e8 4f 1c 02 00       	call   f0121cd2 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 9c 40 3f f0 ff 	movl   $0xffffffff,0xf03f409c
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 4e 0d 00 00       	call   f0100de3 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 07 01 00 00       	call   f01001a1 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d4 6b 00 00       	call   f0106c73 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 a0 67 00 00       	call   f0106844 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 ee 6e 00 00       	call   f0106f97 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 86 a6 00 00       	call   f010a734 <env_init>
	idt_init();
f01000ae:	e8 2d b7 00 00       	call   f010b7e0 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 af e1 00 00       	call   f010e267 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 ec d1 00 00       	call   f010d2b3 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 7a 46 00 00       	call   f0104749 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_kheap_dynamic_allocator(KERNEL_HEAP_START, PAGE_SIZE, KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE);
f01000d2:	83 ec 04             	sub    $0x4,%esp
f01000d5:	68 00 00 00 f8       	push   $0xf8000000
f01000da:	68 00 10 00 00       	push   $0x1000
f01000df:	68 00 00 00 f6       	push   $0xf6000000
f01000e4:	e8 ac 82 00 00       	call   f0108395 <initialize_kheap_dynamic_allocator>
f01000e9:	83 c4 10             	add    $0x10,%esp
		int freeFrames_after = sys_calculate_free_frames() ;
f01000ec:	e8 c2 d1 00 00       	call   f010d2b3 <sys_calculate_free_frames>
f01000f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000f4:	e8 50 46 00 00       	call   f0104749 <pf_calculate_free_frames>
f01000f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000fc:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ff:	ff 75 ec             	pushl  -0x14(%ebp)
f0100102:	ff 75 f0             	pushl  -0x10(%ebp)
f0100105:	ff 75 f4             	pushl  -0xc(%ebp)
f0100108:	e8 08 06 02 00       	call   f0120715 <test_initialize_dyn_block_system>
f010010d:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f0100110:	c7 05 5c 40 3f f0 61 	movl   $0x61,0xf03f405c
f0100117:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f010011a:	c7 05 f8 3f 3f f0 59 	movl   $0x59,0xf03f3ff8
f0100121:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f0100124:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
f0100129:	83 ec 0c             	sub    $0xc,%esp
f010012c:	50                   	push   %eax
f010012d:	e8 0e 7b 00 00       	call   f0107c40 <create_shares_array>
f0100132:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100135:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010013a:	83 ec 0c             	sub    $0xc,%esp
f010013d:	50                   	push   %eax
f010013e:	e8 6b e4 00 00       	call   f010e5ae <create_semaphores_array>
f0100143:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f0100146:	83 ec 0c             	sub    $0xc,%esp
f0100149:	6a 00                	push   $0x0
f010014b:	e8 14 e2 00 00       	call   f010e364 <enableBuffering>
f0100150:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	6a 00                	push   $0x0
f0100158:	e8 ef e1 00 00       	call   f010e34c <enableModifiedBuffer>
f010015d:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f0100160:	83 ec 0c             	sub    $0xc,%esp
f0100163:	68 e8 03 00 00       	push   $0x3e8
f0100168:	e8 0f e2 00 00       	call   f010e37c <setModifiedBufferLength>
f010016d:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100170:	e8 49 65 00 00       	call   f01066be <pic_init>
	sched_init() ;
f0100175:	e8 db 60 00 00       	call   f0106255 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010017a:	83 ec 0c             	sub    $0xc,%esp
f010017d:	68 80 33 12 f0       	push   $0xf0123380
f0100182:	e8 14 0d 00 00       	call   f0100e9b <cprintf>
f0100187:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010018a:	83 ec 0c             	sub    $0xc,%esp
f010018d:	68 ac 33 12 f0       	push   $0xf01233ac
f0100192:	e8 04 0d 00 00       	call   f0100e9b <cprintf>
f0100197:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010019a:	e8 1b 1a 00 00       	call   f0101bba <run_command_prompt>
	}
f010019f:	eb d9                	jmp    f010017a <FOS_initialize+0x11b>

f01001a1 <print_welcome_message>:
}


void print_welcome_message()
{
f01001a1:	55                   	push   %ebp
f01001a2:	89 e5                	mov    %esp,%ebp
f01001a4:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f01001a7:	83 ec 0c             	sub    $0xc,%esp
f01001aa:	68 d1 33 12 f0       	push   $0xf01233d1
f01001af:	e8 e7 0c 00 00       	call   f0100e9b <cprintf>
f01001b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001b7:	83 ec 0c             	sub    $0xc,%esp
f01001ba:	68 d8 33 12 f0       	push   $0xf01233d8
f01001bf:	e8 d7 0c 00 00       	call   f0100e9b <cprintf>
f01001c4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001c7:	83 ec 0c             	sub    $0xc,%esp
f01001ca:	68 20 34 12 f0       	push   $0xf0123420
f01001cf:	e8 c7 0c 00 00       	call   f0100e9b <cprintf>
f01001d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001d7:	83 ec 0c             	sub    $0xc,%esp
f01001da:	68 68 34 12 f0       	push   $0xf0123468
f01001df:	e8 b7 0c 00 00       	call   f0100e9b <cprintf>
f01001e4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001e7:	83 ec 0c             	sub    $0xc,%esp
f01001ea:	68 20 34 12 f0       	push   $0xf0123420
f01001ef:	e8 a7 0c 00 00       	call   f0100e9b <cprintf>
f01001f4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001f7:	83 ec 0c             	sub    $0xc,%esp
f01001fa:	68 d8 33 12 f0       	push   $0xf01233d8
f01001ff:	e8 97 0c 00 00       	call   f0100e9b <cprintf>
f0100204:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100207:	83 ec 0c             	sub    $0xc,%esp
f010020a:	68 ad 34 12 f0       	push   $0xf01234ad
f010020f:	e8 87 0c 00 00       	call   f0100e9b <cprintf>
f0100214:	83 c4 10             	add    $0x10,%esp
}
f0100217:	90                   	nop
f0100218:	c9                   	leave  
f0100219:	c3                   	ret    

f010021a <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f010021a:	55                   	push   %ebp
f010021b:	89 e5                	mov    %esp,%ebp
f010021d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100220:	8b 45 10             	mov    0x10(%ebp),%eax
f0100223:	a3 e0 34 3f f0       	mov    %eax,0xf03f34e0

	va_start(ap, fmt);
f0100228:	8d 45 10             	lea    0x10(%ebp),%eax
f010022b:	83 c0 04             	add    $0x4,%eax
f010022e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100231:	83 ec 04             	sub    $0x4,%esp
f0100234:	ff 75 0c             	pushl  0xc(%ebp)
f0100237:	ff 75 08             	pushl  0x8(%ebp)
f010023a:	68 b2 34 12 f0       	push   $0xf01234b2
f010023f:	e8 57 0c 00 00       	call   f0100e9b <cprintf>
f0100244:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100247:	8b 45 10             	mov    0x10(%ebp),%eax
f010024a:	83 ec 08             	sub    $0x8,%esp
f010024d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100250:	50                   	push   %eax
f0100251:	e8 1c 0c 00 00       	call   f0100e72 <vcprintf>
f0100256:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100259:	83 ec 0c             	sub    $0xc,%esp
f010025c:	68 cb 34 12 f0       	push   $0xf01234cb
f0100261:	e8 35 0c 00 00       	call   f0100e9b <cprintf>
f0100266:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100269:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 12                	je     f0100284 <_panic+0x6a>
f0100272:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0100277:	8b 40 54             	mov    0x54(%eax),%eax
f010027a:	83 f8 02             	cmp    $0x2,%eax
f010027d:	75 05                	jne    f0100284 <_panic+0x6a>
	{
		//2015
		env_exit();
f010027f:	e8 a5 a3 00 00       	call   f010a629 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f0100284:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f0100289:	83 f8 ff             	cmp    $0xffffffff,%eax
f010028c:	74 1b                	je     f01002a9 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f010028e:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f0100293:	83 ec 08             	sub    $0x8,%esp
f0100296:	50                   	push   %eax
f0100297:	68 cd 34 12 f0       	push   $0xf01234cd
f010029c:	e8 fa 0b 00 00       	call   f0100e9b <cprintf>
f01002a1:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f01002a4:	e8 f6 5f 00 00       	call   f010629f <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002a9:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f01002b0:	00 00 00 
		lcr3(phys_page_directory);
f01002b3:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f01002b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002be:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002c1:	83 ec 0c             	sub    $0xc,%esp
f01002c4:	6a 00                	push   $0x0
f01002c6:	e8 ef 18 00 00       	call   f0101bba <run_command_prompt>
f01002cb:	83 c4 10             	add    $0x10,%esp
f01002ce:	eb f1                	jmp    f01002c1 <_panic+0xa7>

f01002d0 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002d0:	55                   	push   %ebp
f01002d1:	89 e5                	mov    %esp,%ebp
f01002d3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002d6:	8b 45 10             	mov    0x10(%ebp),%eax
f01002d9:	a3 e0 34 3f f0       	mov    %eax,0xf03f34e0

	va_start(ap, fmt);
f01002de:	8d 45 10             	lea    0x10(%ebp),%eax
f01002e1:	83 c0 04             	add    $0x4,%eax
f01002e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002e7:	83 ec 04             	sub    $0x4,%esp
f01002ea:	ff 75 0c             	pushl  0xc(%ebp)
f01002ed:	ff 75 08             	pushl  0x8(%ebp)
f01002f0:	68 b2 34 12 f0       	push   $0xf01234b2
f01002f5:	e8 a1 0b 00 00       	call   f0100e9b <cprintf>
f01002fa:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002fd:	8b 45 10             	mov    0x10(%ebp),%eax
f0100300:	83 ec 08             	sub    $0x8,%esp
f0100303:	ff 75 f4             	pushl  -0xc(%ebp)
f0100306:	50                   	push   %eax
f0100307:	e8 66 0b 00 00       	call   f0100e72 <vcprintf>
f010030c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010030f:	83 ec 0c             	sub    $0xc,%esp
f0100312:	68 cb 34 12 f0       	push   $0xf01234cb
f0100317:	e8 7f 0b 00 00       	call   f0100e9b <cprintf>
f010031c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010031f:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f0100324:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100327:	74 27                	je     f0100350 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100329:	e8 ef 5c 00 00       	call   f010601d <sched_exit_all_ready_envs>
		if (curenv != NULL)
f010032e:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0100333:	85 c0                	test   %eax,%eax
f0100335:	74 14                	je     f010034b <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100337:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010033c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010033f:	83 ec 0c             	sub    $0xc,%esp
f0100342:	50                   	push   %eax
f0100343:	e8 2c 51 00 00       	call   f0105474 <sched_exit_env>
f0100348:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f010034b:	e8 4f 5f 00 00       	call   f010629f <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100350:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f0100357:	00 00 00 
		lcr3(phys_page_directory);
f010035a:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f010035f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100362:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100365:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100368:	83 ec 0c             	sub    $0xc,%esp
f010036b:	6a 00                	push   $0x0
f010036d:	e8 48 18 00 00       	call   f0101bba <run_command_prompt>
f0100372:	83 c4 10             	add    $0x10,%esp
f0100375:	eb f1                	jmp    f0100368 <_panic_all+0x98>

f0100377 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100377:	55                   	push   %ebp
f0100378:	89 e5                	mov    %esp,%ebp
f010037a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010037d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100380:	a3 e0 34 3f f0       	mov    %eax,0xf03f34e0

	va_start(ap, fmt);
f0100385:	8d 45 10             	lea    0x10(%ebp),%eax
f0100388:	83 c0 04             	add    $0x4,%eax
f010038b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010038e:	83 ec 04             	sub    $0x4,%esp
f0100391:	ff 75 0c             	pushl  0xc(%ebp)
f0100394:	ff 75 08             	pushl  0x8(%ebp)
f0100397:	68 b2 34 12 f0       	push   $0xf01234b2
f010039c:	e8 fa 0a 00 00       	call   f0100e9b <cprintf>
f01003a1:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003a4:	8b 45 10             	mov    0x10(%ebp),%eax
f01003a7:	83 ec 08             	sub    $0x8,%esp
f01003aa:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ad:	50                   	push   %eax
f01003ae:	e8 bf 0a 00 00       	call   f0100e72 <vcprintf>
f01003b3:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003b6:	83 ec 0c             	sub    $0xc,%esp
f01003b9:	68 cb 34 12 f0       	push   $0xf01234cb
f01003be:	e8 d8 0a 00 00       	call   f0100e9b <cprintf>
f01003c3:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003c6:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01003cb:	85 c0                	test   %eax,%eax
f01003cd:	74 28                	je     f01003f7 <_panic_into_prompt+0x80>
f01003cf:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01003d4:	8b 40 54             	mov    0x54(%eax),%eax
f01003d7:	83 f8 02             	cmp    $0x2,%eax
f01003da:	75 1b                	jne    f01003f7 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003dc:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01003e1:	83 ec 0c             	sub    $0xc,%esp
f01003e4:	50                   	push   %eax
f01003e5:	e8 04 4f 00 00       	call   f01052ee <sched_insert_exit>
f01003ea:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003ed:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f01003f4:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003f7:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f01003fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100402:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f0100405:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f010040a:	83 f8 ff             	cmp    $0xffffffff,%eax
f010040d:	74 0a                	je     f0100419 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f010040f:	c7 05 9c 40 3f f0 00 	movl   $0x0,0xf03f409c
f0100416:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100419:	83 ec 0c             	sub    $0xc,%esp
f010041c:	6a 00                	push   $0x0
f010041e:	e8 97 17 00 00       	call   f0101bba <run_command_prompt>
f0100423:	83 c4 10             	add    $0x10,%esp
f0100426:	eb f1                	jmp    f0100419 <_panic_into_prompt+0xa2>

f0100428 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100428:	55                   	push   %ebp
f0100429:	89 e5                	mov    %esp,%ebp
f010042b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f010042e:	8d 45 10             	lea    0x10(%ebp),%eax
f0100431:	83 c0 04             	add    $0x4,%eax
f0100434:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100437:	83 ec 04             	sub    $0x4,%esp
f010043a:	ff 75 0c             	pushl  0xc(%ebp)
f010043d:	ff 75 08             	pushl  0x8(%ebp)
f0100440:	68 e2 34 12 f0       	push   $0xf01234e2
f0100445:	e8 51 0a 00 00       	call   f0100e9b <cprintf>
f010044a:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010044d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100450:	83 ec 08             	sub    $0x8,%esp
f0100453:	ff 75 f4             	pushl  -0xc(%ebp)
f0100456:	50                   	push   %eax
f0100457:	e8 16 0a 00 00       	call   f0100e72 <vcprintf>
f010045c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010045f:	83 ec 0c             	sub    $0xc,%esp
f0100462:	68 cb 34 12 f0       	push   $0xf01234cb
f0100467:	e8 2f 0a 00 00       	call   f0100e9b <cprintf>
f010046c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010046f:	90                   	nop
f0100470:	c9                   	leave  
f0100471:	c3                   	ret    

f0100472 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100472:	55                   	push   %ebp
f0100473:	89 e5                	mov    %esp,%ebp
f0100475:	83 ec 10             	sub    $0x10,%esp
f0100478:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010047f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100482:	89 c2                	mov    %eax,%edx
f0100484:	ec                   	in     (%dx),%al
f0100485:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100488:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010048b:	0f b6 c0             	movzbl %al,%eax
f010048e:	83 e0 01             	and    $0x1,%eax
f0100491:	85 c0                	test   %eax,%eax
f0100493:	75 07                	jne    f010049c <serial_proc_data+0x2a>
		return -1;
f0100495:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010049a:	eb 16                	jmp    f01004b2 <serial_proc_data+0x40>
f010049c:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004a6:	89 c2                	mov    %eax,%edx
f01004a8:	ec                   	in     (%dx),%al
f01004a9:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01004ac:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01004af:	0f b6 c0             	movzbl %al,%eax
}
f01004b2:	c9                   	leave  
f01004b3:	c3                   	ret    

f01004b4 <serial_intr>:

void
serial_intr(void)
{
f01004b4:	55                   	push   %ebp
f01004b5:	89 e5                	mov    %esp,%ebp
f01004b7:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004ba:	a1 04 35 3f f0       	mov    0xf03f3504,%eax
f01004bf:	85 c0                	test   %eax,%eax
f01004c1:	74 10                	je     f01004d3 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004c3:	83 ec 0c             	sub    $0xc,%esp
f01004c6:	68 72 04 10 f0       	push   $0xf0100472
f01004cb:	e8 58 07 00 00       	call   f0100c28 <cons_intr>
f01004d0:	83 c4 10             	add    $0x10,%esp
}
f01004d3:	90                   	nop
f01004d4:	c9                   	leave  
f01004d5:	c3                   	ret    

f01004d6 <serial_init>:

void
serial_init(void)
{
f01004d6:	55                   	push   %ebp
f01004d7:	89 e5                	mov    %esp,%ebp
f01004d9:	83 ec 40             	sub    $0x40,%esp
f01004dc:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004e3:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004e7:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004ed:	ee                   	out    %al,(%dx)
f01004ee:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004f5:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004f9:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004fc:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ff:	ee                   	out    %al,(%dx)
f0100500:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100507:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010050b:	8a 45 d0             	mov    -0x30(%ebp),%al
f010050e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100511:	ee                   	out    %al,(%dx)
f0100512:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100519:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f010051d:	8a 45 d1             	mov    -0x2f(%ebp),%al
f0100520:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100523:	ee                   	out    %al,(%dx)
f0100524:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010052b:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010052f:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100532:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100535:	ee                   	out    %al,(%dx)
f0100536:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f010053d:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f0100541:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0100544:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100547:	ee                   	out    %al,(%dx)
f0100548:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010054f:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f0100553:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100556:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100559:	ee                   	out    %al,(%dx)
f010055a:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100561:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100564:	89 c2                	mov    %eax,%edx
f0100566:	ec                   	in     (%dx),%al
f0100567:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f010056a:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f010056d:	3c ff                	cmp    $0xff,%al
f010056f:	0f 95 c0             	setne  %al
f0100572:	0f b6 c0             	movzbl %al,%eax
f0100575:	a3 04 35 3f f0       	mov    %eax,0xf03f3504
f010057a:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100581:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100584:	89 c2                	mov    %eax,%edx
f0100586:	ec                   	in     (%dx),%al
f0100587:	88 45 d6             	mov    %al,-0x2a(%ebp)
f010058a:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100591:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100594:	89 c2                	mov    %eax,%edx
f0100596:	ec                   	in     (%dx),%al
f0100597:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f010059a:	90                   	nop
f010059b:	c9                   	leave  
f010059c:	c3                   	ret    

f010059d <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f010059d:	55                   	push   %ebp
f010059e:	89 e5                	mov    %esp,%ebp
f01005a0:	83 ec 20             	sub    $0x20,%esp
f01005a3:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01005aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005ad:	89 c2                	mov    %eax,%edx
f01005af:	ec                   	in     (%dx),%al
f01005b0:	88 45 ec             	mov    %al,-0x14(%ebp)
f01005b3:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005bd:	89 c2                	mov    %eax,%edx
f01005bf:	ec                   	in     (%dx),%al
f01005c0:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005c3:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005cd:	89 c2                	mov    %eax,%edx
f01005cf:	ec                   	in     (%dx),%al
f01005d0:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005d3:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005dd:	89 c2                	mov    %eax,%edx
f01005df:	ec                   	in     (%dx),%al
f01005e0:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005e3:	90                   	nop
f01005e4:	c9                   	leave  
f01005e5:	c3                   	ret    

f01005e6 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005e6:	55                   	push   %ebp
f01005e7:	89 e5                	mov    %esp,%ebp
f01005e9:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005ec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005f3:	eb 08                	jmp    f01005fd <lpt_putc+0x17>
		delay();
f01005f5:	e8 a3 ff ff ff       	call   f010059d <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005fa:	ff 45 fc             	incl   -0x4(%ebp)
f01005fd:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100604:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f010060d:	8a 45 eb             	mov    -0x15(%ebp),%al
f0100610:	84 c0                	test   %al,%al
f0100612:	78 09                	js     f010061d <lpt_putc+0x37>
f0100614:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010061b:	7e d8                	jle    f01005f5 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f010061d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100620:	0f b6 c0             	movzbl %al,%eax
f0100623:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f010062a:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010062d:	8a 45 e8             	mov    -0x18(%ebp),%al
f0100630:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100633:	ee                   	out    %al,(%dx)
f0100634:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010063b:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010063f:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100642:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100645:	ee                   	out    %al,(%dx)
f0100646:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f010064d:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100651:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100654:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100657:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100658:	90                   	nop
f0100659:	c9                   	leave  
f010065a:	c3                   	ret    

f010065b <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010065b:	55                   	push   %ebp
f010065c:	89 e5                	mov    %esp,%ebp
f010065e:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100661:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100668:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066b:	66 8b 00             	mov    (%eax),%ax
f010066e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100672:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100675:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f010067a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010067d:	66 8b 00             	mov    (%eax),%ax
f0100680:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100684:	74 13                	je     f0100699 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100686:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f010068d:	c7 05 08 35 3f f0 b4 	movl   $0x3b4,0xf03f3508
f0100694:	03 00 00 
f0100697:	eb 14                	jmp    f01006ad <cga_init+0x52>
	} else {
		*cp = was;
f0100699:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010069c:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01006a0:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01006a3:	c7 05 08 35 3f f0 d4 	movl   $0x3d4,0xf03f3508
f01006aa:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01006ad:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f01006b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006b5:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006b9:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006bf:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006c0:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f01006c5:	40                   	inc    %eax
f01006c6:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006cc:	89 c2                	mov    %eax,%edx
f01006ce:	ec                   	in     (%dx),%al
f01006cf:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006d2:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006d5:	0f b6 c0             	movzbl %al,%eax
f01006d8:	c1 e0 08             	shl    $0x8,%eax
f01006db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006de:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f01006e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006e6:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006ea:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006ed:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006f0:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006f1:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f01006f6:	40                   	inc    %eax
f01006f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006fd:	89 c2                	mov    %eax,%edx
f01006ff:	ec                   	in     (%dx),%al
f0100700:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100703:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100706:	0f b6 c0             	movzbl %al,%eax
f0100709:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010070c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010070f:	a3 0c 35 3f f0       	mov    %eax,0xf03f350c
	crt_pos = pos;
f0100714:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100717:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
}
f010071d:	90                   	nop
f010071e:	c9                   	leave  
f010071f:	c3                   	ret    

f0100720 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f0100720:	55                   	push   %ebp
f0100721:	89 e5                	mov    %esp,%ebp
f0100723:	53                   	push   %ebx
f0100724:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100727:	8b 45 08             	mov    0x8(%ebp),%eax
f010072a:	b0 00                	mov    $0x0,%al
f010072c:	85 c0                	test   %eax,%eax
f010072e:	75 07                	jne    f0100737 <cga_putc+0x17>
		c |= 0x0700;
f0100730:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100737:	8b 45 08             	mov    0x8(%ebp),%eax
f010073a:	0f b6 c0             	movzbl %al,%eax
f010073d:	83 f8 0a             	cmp    $0xa,%eax
f0100740:	74 77                	je     f01007b9 <cga_putc+0x99>
f0100742:	83 f8 0a             	cmp    $0xa,%eax
f0100745:	7f 13                	jg     f010075a <cga_putc+0x3a>
f0100747:	83 f8 08             	cmp    $0x8,%eax
f010074a:	74 2e                	je     f010077a <cga_putc+0x5a>
f010074c:	83 f8 09             	cmp    $0x9,%eax
f010074f:	0f 84 a8 00 00 00    	je     f01007fd <cga_putc+0xdd>
f0100755:	e9 22 01 00 00       	jmp    f010087c <cga_putc+0x15c>
f010075a:	3d e4 00 00 00       	cmp    $0xe4,%eax
f010075f:	0f 84 de 00 00 00    	je     f0100843 <cga_putc+0x123>
f0100765:	3d e5 00 00 00       	cmp    $0xe5,%eax
f010076a:	0f 84 f1 00 00 00    	je     f0100861 <cga_putc+0x141>
f0100770:	83 f8 0d             	cmp    $0xd,%eax
f0100773:	74 5d                	je     f01007d2 <cga_putc+0xb2>
f0100775:	e9 02 01 00 00       	jmp    f010087c <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f010077a:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100780:	66 85 c0             	test   %ax,%ax
f0100783:	0f 84 4f 01 00 00    	je     f01008d8 <cga_putc+0x1b8>
			crt_pos--;
f0100789:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f010078f:	48                   	dec    %eax
f0100790:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100796:	8b 15 0c 35 3f f0    	mov    0xf03f350c,%edx
f010079c:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f01007a2:	0f b7 c0             	movzwl %ax,%eax
f01007a5:	01 c0                	add    %eax,%eax
f01007a7:	01 c2                	add    %eax,%edx
f01007a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01007ac:	b0 00                	mov    $0x0,%al
f01007ae:	83 c8 20             	or     $0x20,%eax
f01007b1:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01007b4:	e9 1f 01 00 00       	jmp    f01008d8 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f01007b9:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f01007bf:	83 c0 50             	add    $0x50,%eax
f01007c2:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
		text_length = 0;
f01007c8:	c7 05 00 35 3f f0 00 	movl   $0x0,0xf03f3500
f01007cf:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01007d2:	66 8b 0d 10 35 3f f0 	mov    0xf03f3510,%cx
f01007d9:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f01007df:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01007e9:	66 f7 f3             	div    %bx
f01007ec:	89 d0                	mov    %edx,%eax
f01007ee:	29 c1                	sub    %eax,%ecx
f01007f0:	89 c8                	mov    %ecx,%eax
f01007f2:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
		break;
f01007f8:	e9 e5 00 00 00       	jmp    f01008e2 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01007fd:	83 ec 0c             	sub    $0xc,%esp
f0100800:	6a 20                	push   $0x20
f0100802:	e8 ba 05 00 00       	call   f0100dc1 <cons_putc>
f0100807:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010080a:	83 ec 0c             	sub    $0xc,%esp
f010080d:	6a 20                	push   $0x20
f010080f:	e8 ad 05 00 00       	call   f0100dc1 <cons_putc>
f0100814:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100817:	83 ec 0c             	sub    $0xc,%esp
f010081a:	6a 20                	push   $0x20
f010081c:	e8 a0 05 00 00       	call   f0100dc1 <cons_putc>
f0100821:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100824:	83 ec 0c             	sub    $0xc,%esp
f0100827:	6a 20                	push   $0x20
f0100829:	e8 93 05 00 00       	call   f0100dc1 <cons_putc>
f010082e:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100831:	83 ec 0c             	sub    $0xc,%esp
f0100834:	6a 20                	push   $0x20
f0100836:	e8 86 05 00 00       	call   f0100dc1 <cons_putc>
f010083b:	83 c4 10             	add    $0x10,%esp
		break;
f010083e:	e9 9f 00 00 00       	jmp    f01008e2 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f0100843:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100849:	66 85 c0             	test   %ax,%ax
f010084c:	0f 84 89 00 00 00    	je     f01008db <cga_putc+0x1bb>
		     crt_pos--;
f0100852:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100858:	48                   	dec    %eax
f0100859:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
		     break;
f010085f:	eb 7a                	jmp    f01008db <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100861:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100867:	66 3d cf 07          	cmp    $0x7cf,%ax
f010086b:	77 71                	ja     f01008de <cga_putc+0x1be>
			     crt_pos++;
f010086d:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100873:	40                   	inc    %eax
f0100874:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
			     break;
f010087a:	eb 62                	jmp    f01008de <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010087c:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100883:	74 5c                	je     f01008e1 <cga_putc+0x1c1>
f0100885:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010088c:	74 53                	je     f01008e1 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f010088e:	8b 0d 0c 35 3f f0    	mov    0xf03f350c,%ecx
f0100894:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f010089a:	8d 50 01             	lea    0x1(%eax),%edx
f010089d:	66 89 15 10 35 3f f0 	mov    %dx,0xf03f3510
f01008a4:	0f b7 c0             	movzwl %ax,%eax
f01008a7:	01 c0                	add    %eax,%eax
f01008a9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01008ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01008af:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f01008b2:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f01008b8:	0f b7 c0             	movzwl %ax,%eax
f01008bb:	8b 15 00 35 3f f0    	mov    0xf03f3500,%edx
f01008c1:	81 c2 80 07 00 00    	add    $0x780,%edx
f01008c7:	39 d0                	cmp    %edx,%eax
f01008c9:	7e 16                	jle    f01008e1 <cga_putc+0x1c1>
				text_length++;
f01008cb:	a1 00 35 3f f0       	mov    0xf03f3500,%eax
f01008d0:	40                   	inc    %eax
f01008d1:	a3 00 35 3f f0       	mov    %eax,0xf03f3500
		}
		break;
f01008d6:	eb 09                	jmp    f01008e1 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01008d8:	90                   	nop
f01008d9:	eb 07                	jmp    f01008e2 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01008db:	90                   	nop
f01008dc:	eb 04                	jmp    f01008e2 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01008de:	90                   	nop
f01008df:	eb 01                	jmp    f01008e2 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01008e1:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01008e2:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f01008e8:	66 3d cf 07          	cmp    $0x7cf,%ax
f01008ec:	76 58                	jbe    f0100946 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01008ee:	a1 0c 35 3f f0       	mov    0xf03f350c,%eax
f01008f3:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01008f9:	a1 0c 35 3f f0       	mov    0xf03f350c,%eax
f01008fe:	83 ec 04             	sub    $0x4,%esp
f0100901:	68 00 0f 00 00       	push   $0xf00
f0100906:	52                   	push   %edx
f0100907:	50                   	push   %eax
f0100908:	e8 f5 13 02 00       	call   f0121d02 <memcpy>
f010090d:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100910:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100917:	eb 15                	jmp    f010092e <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f0100919:	8b 15 0c 35 3f f0    	mov    0xf03f350c,%edx
f010091f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100922:	01 c0                	add    %eax,%eax
f0100924:	01 d0                	add    %edx,%eax
f0100926:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010092b:	ff 45 f4             	incl   -0xc(%ebp)
f010092e:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100935:	7e e2                	jle    f0100919 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100937:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f010093d:	83 e8 50             	sub    $0x50,%eax
f0100940:	66 a3 10 35 3f f0    	mov    %ax,0xf03f3510
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100946:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f010094b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010094e:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100952:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100955:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100958:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100959:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f010095f:	66 c1 e8 08          	shr    $0x8,%ax
f0100963:	0f b6 c0             	movzbl %al,%eax
f0100966:	8b 15 08 35 3f f0    	mov    0xf03f3508,%edx
f010096c:	42                   	inc    %edx
f010096d:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100970:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100973:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100976:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100979:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010097a:	a1 08 35 3f f0       	mov    0xf03f3508,%eax
f010097f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100982:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100986:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100989:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010098c:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f010098d:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100993:	0f b6 c0             	movzbl %al,%eax
f0100996:	8b 15 08 35 3f f0    	mov    0xf03f3508,%edx
f010099c:	42                   	inc    %edx
f010099d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01009a0:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01009a3:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01009a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01009a9:	ee                   	out    %al,(%dx)
}
f01009aa:	90                   	nop
f01009ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01009ae:	c9                   	leave  
f01009af:	c3                   	ret    

f01009b0 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01009b0:	55                   	push   %ebp
f01009b1:	89 e5                	mov    %esp,%ebp
f01009b3:	83 ec 28             	sub    $0x28,%esp
f01009b6:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01009bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01009c0:	89 c2                	mov    %eax,%edx
f01009c2:	ec                   	in     (%dx),%al
f01009c3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01009c6:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01009c9:	0f b6 c0             	movzbl %al,%eax
f01009cc:	83 e0 01             	and    $0x1,%eax
f01009cf:	85 c0                	test   %eax,%eax
f01009d1:	75 0a                	jne    f01009dd <kbd_proc_data+0x2d>
		return -1;
f01009d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01009d8:	e9 2a 02 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
f01009dd:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01009e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01009e7:	89 c2                	mov    %eax,%edx
f01009e9:	ec                   	in     (%dx),%al
f01009ea:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01009ed:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01009f0:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01009f3:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01009f7:	75 17                	jne    f0100a10 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01009f9:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f01009fe:	83 c8 40             	or     $0x40,%eax
f0100a01:	a3 28 37 3f f0       	mov    %eax,0xf03f3728
		return 0;
f0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a0b:	e9 f7 01 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100a10:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100a13:	84 c0                	test   %al,%al
f0100a15:	79 44                	jns    f0100a5b <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100a17:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100a1c:	83 e0 40             	and    $0x40,%eax
f0100a1f:	85 c0                	test   %eax,%eax
f0100a21:	75 08                	jne    f0100a2b <kbd_proc_data+0x7b>
f0100a23:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100a26:	83 e0 7f             	and    $0x7f,%eax
f0100a29:	eb 03                	jmp    f0100a2e <kbd_proc_data+0x7e>
f0100a2b:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100a2e:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100a31:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a35:	8a 80 20 10 17 f0    	mov    -0xfe8efe0(%eax),%al
f0100a3b:	83 c8 40             	or     $0x40,%eax
f0100a3e:	0f b6 c0             	movzbl %al,%eax
f0100a41:	f7 d0                	not    %eax
f0100a43:	89 c2                	mov    %eax,%edx
f0100a45:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100a4a:	21 d0                	and    %edx,%eax
f0100a4c:	a3 28 37 3f f0       	mov    %eax,0xf03f3728
		return 0;
f0100a51:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a56:	e9 ac 01 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100a5b:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100a60:	83 e0 40             	and    $0x40,%eax
f0100a63:	85 c0                	test   %eax,%eax
f0100a65:	74 11                	je     f0100a78 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100a67:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a6b:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100a70:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a73:	a3 28 37 3f f0       	mov    %eax,0xf03f3728
	}

	shift |= shiftcode[data];
f0100a78:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a7c:	8a 80 20 10 17 f0    	mov    -0xfe8efe0(%eax),%al
f0100a82:	0f b6 d0             	movzbl %al,%edx
f0100a85:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100a8a:	09 d0                	or     %edx,%eax
f0100a8c:	a3 28 37 3f f0       	mov    %eax,0xf03f3728
	shift ^= togglecode[data];
f0100a91:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a95:	8a 80 20 11 17 f0    	mov    -0xfe8eee0(%eax),%al
f0100a9b:	0f b6 d0             	movzbl %al,%edx
f0100a9e:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100aa3:	31 d0                	xor    %edx,%eax
f0100aa5:	a3 28 37 3f f0       	mov    %eax,0xf03f3728

	c = charcode[shift & (CTL | SHIFT)][data];
f0100aaa:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100aaf:	83 e0 03             	and    $0x3,%eax
f0100ab2:	8b 14 85 20 15 17 f0 	mov    -0xfe8eae0(,%eax,4),%edx
f0100ab9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100abd:	01 d0                	add    %edx,%eax
f0100abf:	8a 00                	mov    (%eax),%al
f0100ac1:	0f b6 c0             	movzbl %al,%eax
f0100ac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100ac7:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100ace:	0f 85 9c 00 00 00    	jne    f0100b70 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100ad4:	a1 00 35 3f f0       	mov    0xf03f3500,%eax
f0100ad9:	85 c0                	test   %eax,%eax
f0100adb:	0f 8e 85 00 00 00    	jle    f0100b66 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100ae1:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100ae7:	0f b7 c0             	movzwl %ax,%eax
f0100aea:	8b 15 00 35 3f f0    	mov    0xf03f3500,%edx
f0100af0:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100af6:	39 d0                	cmp    %edx,%eax
f0100af8:	75 0a                	jne    f0100b04 <kbd_proc_data+0x154>
				return 0;
f0100afa:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aff:	e9 03 01 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
			else {
			text_length--;
f0100b04:	a1 00 35 3f f0       	mov    0xf03f3500,%eax
f0100b09:	48                   	dec    %eax
f0100b0a:	a3 00 35 3f f0       	mov    %eax,0xf03f3500
				int crt_pos_Length = crt_pos - 1925;
f0100b0f:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100b15:	0f b7 c0             	movzwl %ax,%eax
f0100b18:	2d 85 07 00 00       	sub    $0x785,%eax
f0100b1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100b20:	66 a1 10 35 3f f0    	mov    0xf03f3510,%ax
f0100b26:	0f b7 c0             	movzwl %ax,%eax
f0100b29:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100b2c:	eb 26                	jmp    f0100b54 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100b2e:	8b 15 0c 35 3f f0    	mov    0xf03f350c,%edx
f0100b34:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100b37:	01 c0                	add    %eax,%eax
f0100b39:	01 c2                	add    %eax,%edx
f0100b3b:	a1 0c 35 3f f0       	mov    0xf03f350c,%eax
f0100b40:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100b43:	41                   	inc    %ecx
f0100b44:	01 c9                	add    %ecx,%ecx
f0100b46:	01 c8                	add    %ecx,%eax
f0100b48:	66 8b 00             	mov    (%eax),%ax
f0100b4b:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100b4e:	ff 45 e8             	incl   -0x18(%ebp)
f0100b51:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100b54:	a1 00 35 3f f0       	mov    0xf03f3500,%eax
f0100b59:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100b5c:	7e d0                	jle    f0100b2e <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b61:	e9 a1 00 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100b66:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b6b:	e9 97 00 00 00       	jmp    f0100c07 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b70:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100b75:	83 e0 08             	and    $0x8,%eax
f0100b78:	85 c0                	test   %eax,%eax
f0100b7a:	74 22                	je     f0100b9e <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b7c:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b80:	7e 0c                	jle    f0100b8e <kbd_proc_data+0x1de>
f0100b82:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b86:	7f 06                	jg     f0100b8e <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b88:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b8c:	eb 10                	jmp    f0100b9e <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b8e:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b92:	7e 0a                	jle    f0100b9e <kbd_proc_data+0x1ee>
f0100b94:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b98:	7f 04                	jg     f0100b9e <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b9a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b9e:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100ba3:	83 f8 10             	cmp    $0x10,%eax
f0100ba6:	75 13                	jne    f0100bbb <kbd_proc_data+0x20b>
f0100ba8:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100bac:	7e 0d                	jle    f0100bbb <kbd_proc_data+0x20b>
f0100bae:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100bb2:	7f 07                	jg     f0100bbb <kbd_proc_data+0x20b>
		return 0;
f0100bb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bb9:	eb 4c                	jmp    f0100c07 <kbd_proc_data+0x257>
	if (c == 255)
f0100bbb:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100bc2:	75 07                	jne    f0100bcb <kbd_proc_data+0x21b>
		return 0;
f0100bc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bc9:	eb 3c                	jmp    f0100c07 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100bcb:	a1 28 37 3f f0       	mov    0xf03f3728,%eax
f0100bd0:	f7 d0                	not    %eax
f0100bd2:	83 e0 06             	and    $0x6,%eax
f0100bd5:	85 c0                	test   %eax,%eax
f0100bd7:	75 2b                	jne    f0100c04 <kbd_proc_data+0x254>
f0100bd9:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100be0:	75 22                	jne    f0100c04 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100be2:	83 ec 0c             	sub    $0xc,%esp
f0100be5:	68 fd 34 12 f0       	push   $0xf01234fd
f0100bea:	e8 ac 02 00 00       	call   f0100e9b <cprintf>
f0100bef:	83 c4 10             	add    $0x10,%esp
f0100bf2:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100bf9:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100bfd:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100c00:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100c03:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c07:	c9                   	leave  
f0100c08:	c3                   	ret    

f0100c09 <kbd_intr>:

void
kbd_intr(void)
{
f0100c09:	55                   	push   %ebp
f0100c0a:	89 e5                	mov    %esp,%ebp
f0100c0c:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100c0f:	83 ec 0c             	sub    $0xc,%esp
f0100c12:	68 b0 09 10 f0       	push   $0xf01009b0
f0100c17:	e8 0c 00 00 00       	call   f0100c28 <cons_intr>
f0100c1c:	83 c4 10             	add    $0x10,%esp
}
f0100c1f:	90                   	nop
f0100c20:	c9                   	leave  
f0100c21:	c3                   	ret    

f0100c22 <kbd_init>:

void
kbd_init(void)
{
f0100c22:	55                   	push   %ebp
f0100c23:	89 e5                	mov    %esp,%ebp
}
f0100c25:	90                   	nop
f0100c26:	5d                   	pop    %ebp
f0100c27:	c3                   	ret    

f0100c28 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100c28:	55                   	push   %ebp
f0100c29:	89 e5                	mov    %esp,%ebp
f0100c2b:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100c2e:	eb 35                	jmp    f0100c65 <cons_intr+0x3d>
		if (c == 0)
f0100c30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c34:	75 02                	jne    f0100c38 <cons_intr+0x10>
			continue;
f0100c36:	eb 2d                	jmp    f0100c65 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100c38:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100c3d:	8d 50 01             	lea    0x1(%eax),%edx
f0100c40:	89 15 24 37 3f f0    	mov    %edx,0xf03f3724
f0100c46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100c49:	88 90 20 35 3f f0    	mov    %dl,-0xfc0cae0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100c4f:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100c54:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c59:	75 0a                	jne    f0100c65 <cons_intr+0x3d>
			cons.wpos = 0;
f0100c5b:	c7 05 24 37 3f f0 00 	movl   $0x0,0xf03f3724
f0100c62:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c68:	ff d0                	call   *%eax
f0100c6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c6d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c71:	75 bd                	jne    f0100c30 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c73:	90                   	nop
f0100c74:	c9                   	leave  
f0100c75:	c3                   	ret    

f0100c76 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c76:	55                   	push   %ebp
f0100c77:	89 e5                	mov    %esp,%ebp
f0100c79:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c7c:	e8 33 f8 ff ff       	call   f01004b4 <serial_intr>
	kbd_intr();
f0100c81:	e8 83 ff ff ff       	call   f0100c09 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c86:	8b 15 20 37 3f f0    	mov    0xf03f3720,%edx
f0100c8c:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100c91:	39 c2                	cmp    %eax,%edx
f0100c93:	74 35                	je     f0100cca <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c95:	a1 20 37 3f f0       	mov    0xf03f3720,%eax
f0100c9a:	8d 50 01             	lea    0x1(%eax),%edx
f0100c9d:	89 15 20 37 3f f0    	mov    %edx,0xf03f3720
f0100ca3:	8a 80 20 35 3f f0    	mov    -0xfc0cae0(%eax),%al
f0100ca9:	0f b6 c0             	movzbl %al,%eax
f0100cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100caf:	a1 20 37 3f f0       	mov    0xf03f3720,%eax
f0100cb4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb9:	75 0a                	jne    f0100cc5 <cons_getc+0x4f>
			cons.rpos = 0;
f0100cbb:	c7 05 20 37 3f f0 00 	movl   $0x0,0xf03f3720
f0100cc2:	00 00 00 
		return c;
f0100cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100cc8:	eb 05                	jmp    f0100ccf <cons_getc+0x59>
	}
	return 0;
f0100cca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ccf:	c9                   	leave  
f0100cd0:	c3                   	ret    

f0100cd1 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100cd1:	55                   	push   %ebp
f0100cd2:	89 e5                	mov    %esp,%ebp
f0100cd4:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100cd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100cde:	a1 04 35 3f f0       	mov    0xf03f3504,%eax
f0100ce3:	85 c0                	test   %eax,%eax
f0100ce5:	74 41                	je     f0100d28 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100ce7:	e8 86 f7 ff ff       	call   f0100472 <serial_proc_data>
f0100cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cef:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100cf3:	74 33                	je     f0100d28 <cons_getc2+0x57>
				if (c1 == 0)
f0100cf5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cf9:	74 2d                	je     f0100d28 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100cfb:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100d00:	8d 50 01             	lea    0x1(%eax),%edx
f0100d03:	89 15 24 37 3f f0    	mov    %edx,0xf03f3724
f0100d09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100d0c:	88 90 20 35 3f f0    	mov    %dl,-0xfc0cae0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100d12:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100d17:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d1c:	75 0a                	jne    f0100d28 <cons_getc2+0x57>
						cons.wpos = 0;
f0100d1e:	c7 05 24 37 3f f0 00 	movl   $0x0,0xf03f3724
f0100d25:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100d28:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100d2f:	e8 7c fc ff ff       	call   f01009b0 <kbd_proc_data>
f0100d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100d37:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100d3b:	74 33                	je     f0100d70 <cons_getc2+0x9f>
			if (c2 == 0)
f0100d3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d41:	74 2d                	je     f0100d70 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100d43:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100d48:	8d 50 01             	lea    0x1(%eax),%edx
f0100d4b:	89 15 24 37 3f f0    	mov    %edx,0xf03f3724
f0100d51:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d54:	88 90 20 35 3f f0    	mov    %dl,-0xfc0cae0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100d5a:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100d5f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d64:	75 0a                	jne    f0100d70 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100d66:	c7 05 24 37 3f f0 00 	movl   $0x0,0xf03f3724
f0100d6d:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d74:	7e 44                	jle    f0100dba <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d76:	8b 15 20 37 3f f0    	mov    0xf03f3720,%edx
f0100d7c:	a1 24 37 3f f0       	mov    0xf03f3724,%eax
f0100d81:	39 c2                	cmp    %eax,%edx
f0100d83:	74 35                	je     f0100dba <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d85:	a1 20 37 3f f0       	mov    0xf03f3720,%eax
f0100d8a:	8d 50 01             	lea    0x1(%eax),%edx
f0100d8d:	89 15 20 37 3f f0    	mov    %edx,0xf03f3720
f0100d93:	8a 80 20 35 3f f0    	mov    -0xfc0cae0(%eax),%al
f0100d99:	0f b6 c0             	movzbl %al,%eax
f0100d9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d9f:	a1 20 37 3f f0       	mov    0xf03f3720,%eax
f0100da4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100da9:	75 0a                	jne    f0100db5 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100dab:	c7 05 20 37 3f f0 00 	movl   $0x0,0xf03f3720
f0100db2:	00 00 00 
			return c;
f0100db5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100db8:	eb 05                	jmp    f0100dbf <cons_getc2+0xee>
		}
	}
	return 0;
f0100dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100dc7:	ff 75 08             	pushl  0x8(%ebp)
f0100dca:	e8 17 f8 ff ff       	call   f01005e6 <lpt_putc>
f0100dcf:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100dd2:	83 ec 0c             	sub    $0xc,%esp
f0100dd5:	ff 75 08             	pushl  0x8(%ebp)
f0100dd8:	e8 43 f9 ff ff       	call   f0100720 <cga_putc>
f0100ddd:	83 c4 10             	add    $0x10,%esp
}
f0100de0:	90                   	nop
f0100de1:	c9                   	leave  
f0100de2:	c3                   	ret    

f0100de3 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100de3:	55                   	push   %ebp
f0100de4:	89 e5                	mov    %esp,%ebp
f0100de6:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100de9:	e8 6d f8 ff ff       	call   f010065b <cga_init>
	kbd_init();
f0100dee:	e8 2f fe ff ff       	call   f0100c22 <kbd_init>
	serial_init();
f0100df3:	e8 de f6 ff ff       	call   f01004d6 <serial_init>

	if (!serial_exists)
f0100df8:	a1 04 35 3f f0       	mov    0xf03f3504,%eax
f0100dfd:	85 c0                	test   %eax,%eax
f0100dff:	75 10                	jne    f0100e11 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100e01:	83 ec 0c             	sub    $0xc,%esp
f0100e04:	68 09 35 12 f0       	push   $0xf0123509
f0100e09:	e8 8d 00 00 00       	call   f0100e9b <cprintf>
f0100e0e:	83 c4 10             	add    $0x10,%esp
}
f0100e11:	90                   	nop
f0100e12:	c9                   	leave  
f0100e13:	c3                   	ret    

f0100e14 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100e14:	55                   	push   %ebp
f0100e15:	89 e5                	mov    %esp,%ebp
f0100e17:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100e1a:	83 ec 0c             	sub    $0xc,%esp
f0100e1d:	ff 75 08             	pushl  0x8(%ebp)
f0100e20:	e8 9c ff ff ff       	call   f0100dc1 <cons_putc>
f0100e25:	83 c4 10             	add    $0x10,%esp
}
f0100e28:	90                   	nop
f0100e29:	c9                   	leave  
f0100e2a:	c3                   	ret    

f0100e2b <getchar>:

int
getchar(void)
{
f0100e2b:	55                   	push   %ebp
f0100e2c:	89 e5                	mov    %esp,%ebp
f0100e2e:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100e31:	e8 40 fe ff ff       	call   f0100c76 <cons_getc>
f0100e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100e39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e3d:	74 f2                	je     f0100e31 <getchar+0x6>
		/* do nothing */;
	return c;
f0100e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e42:	c9                   	leave  
f0100e43:	c3                   	ret    

f0100e44 <iscons>:

int
iscons(int fdnum)
{
f0100e44:	55                   	push   %ebp
f0100e45:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100e47:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100e4c:	5d                   	pop    %ebp
f0100e4d:	c3                   	ret    

f0100e4e <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100e4e:	55                   	push   %ebp
f0100e4f:	89 e5                	mov    %esp,%ebp
f0100e51:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100e54:	83 ec 0c             	sub    $0xc,%esp
f0100e57:	ff 75 08             	pushl  0x8(%ebp)
f0100e5a:	e8 b5 ff ff ff       	call   f0100e14 <cputchar>
f0100e5f:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e65:	8b 00                	mov    (%eax),%eax
f0100e67:	8d 50 01             	lea    0x1(%eax),%edx
f0100e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e6d:	89 10                	mov    %edx,(%eax)
}
f0100e6f:	90                   	nop
f0100e70:	c9                   	leave  
f0100e71:	c3                   	ret    

f0100e72 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e72:	55                   	push   %ebp
f0100e73:	89 e5                	mov    %esp,%ebp
f0100e75:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e7f:	ff 75 0c             	pushl  0xc(%ebp)
f0100e82:	ff 75 08             	pushl  0x8(%ebp)
f0100e85:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e88:	50                   	push   %eax
f0100e89:	68 4e 0e 10 f0       	push   $0xf0100e4e
f0100e8e:	e8 a3 05 02 00       	call   f0121436 <vprintfmt>
f0100e93:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e99:	c9                   	leave  
f0100e9a:	c3                   	ret    

f0100e9b <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e9b:	55                   	push   %ebp
f0100e9c:	89 e5                	mov    %esp,%ebp
f0100e9e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100ea1:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100ea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eaa:	83 ec 08             	sub    $0x8,%esp
f0100ead:	ff 75 f4             	pushl  -0xc(%ebp)
f0100eb0:	50                   	push   %eax
f0100eb1:	e8 bc ff ff ff       	call   f0100e72 <vcprintf>
f0100eb6:	83 c4 10             	add    $0x10,%esp
f0100eb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100ebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100ebf:	c9                   	leave  
f0100ec0:	c3                   	ret    

f0100ec1 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100ec1:	55                   	push   %ebp
f0100ec2:	89 e5                	mov    %esp,%ebp
f0100ec4:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ece:	eb 10                	jmp    f0100ee0 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100ed0:	83 ec 0c             	sub    $0xc,%esp
f0100ed3:	6a 08                	push   $0x8
f0100ed5:	e8 3a ff ff ff       	call   f0100e14 <cputchar>
f0100eda:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100edd:	ff 45 f4             	incl   -0xc(%ebp)
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100ee8:	7f e6                	jg     f0100ed0 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100eea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100eed:	c1 e0 0a             	shl    $0xa,%eax
f0100ef0:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0100ef5:	83 ec 0c             	sub    $0xc,%esp
f0100ef8:	50                   	push   %eax
f0100ef9:	e8 e6 0b 02 00       	call   f0121ae4 <strlen>
f0100efe:	83 c4 10             	add    $0x10,%esp
f0100f01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f04:	83 ec 04             	sub    $0x4,%esp
f0100f07:	68 00 04 00 00       	push   $0x400
f0100f0c:	68 00 21 41 f0       	push   $0xf0412100
f0100f11:	ff 75 10             	pushl  0x10(%ebp)
f0100f14:	e8 e9 0d 02 00       	call   f0121d02 <memcpy>
f0100f19:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f25:	eb 52                	jmp    f0100f79 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100f27:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f2a:	8b 00                	mov    (%eax),%eax
f0100f2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100f2f:	c1 e2 0a             	shl    $0xa,%edx
f0100f32:	01 d0                	add    %edx,%eax
f0100f34:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0100f39:	8a 00                	mov    (%eax),%al
f0100f3b:	0f be c0             	movsbl %al,%eax
f0100f3e:	83 ec 0c             	sub    $0xc,%esp
f0100f41:	50                   	push   %eax
f0100f42:	e8 cd fe ff ff       	call   f0100e14 <cputchar>
f0100f47:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4d:	8b 00                	mov    (%eax),%eax
f0100f4f:	89 c2                	mov    %eax,%edx
f0100f51:	8b 45 10             	mov    0x10(%ebp),%eax
f0100f54:	01 c2                	add    %eax,%edx
f0100f56:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f59:	8b 00                	mov    (%eax),%eax
f0100f5b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100f5e:	c1 e1 0a             	shl    $0xa,%ecx
f0100f61:	01 c8                	add    %ecx,%eax
f0100f63:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0100f68:	8a 00                	mov    (%eax),%al
f0100f6a:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f6f:	8b 00                	mov    (%eax),%eax
f0100f71:	8d 50 01             	lea    0x1(%eax),%edx
f0100f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f77:	89 10                	mov    %edx,(%eax)
f0100f79:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7c:	8b 00                	mov    (%eax),%eax
f0100f7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f81:	7c a4                	jl     f0100f27 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f83:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f86:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f89:	89 10                	mov    %edx,(%eax)
}
f0100f8b:	90                   	nop
f0100f8c:	c9                   	leave  
f0100f8d:	c3                   	ret    

f0100f8e <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f8e:	55                   	push   %ebp
f0100f8f:	89 e5                	mov    %esp,%ebp
f0100f91:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9b:	eb 10                	jmp    f0100fad <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f9d:	83 ec 0c             	sub    $0xc,%esp
f0100fa0:	6a 08                	push   $0x8
f0100fa2:	e8 6d fe ff ff       	call   f0100e14 <cputchar>
f0100fa7:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100faa:	ff 45 f4             	incl   -0xc(%ebp)
f0100fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fb0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100fb3:	7c e8                	jl     f0100f9d <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100fb5:	83 ec 0c             	sub    $0xc,%esp
f0100fb8:	ff 75 0c             	pushl  0xc(%ebp)
f0100fbb:	e8 24 0b 02 00       	call   f0121ae4 <strlen>
f0100fc0:	83 c4 10             	add    $0x10,%esp
f0100fc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100fc6:	83 ec 04             	sub    $0x4,%esp
f0100fc9:	68 00 04 00 00       	push   $0x400
f0100fce:	68 00 21 41 f0       	push   $0xf0412100
f0100fd3:	ff 75 10             	pushl  0x10(%ebp)
f0100fd6:	e8 27 0d 02 00       	call   f0121d02 <memcpy>
f0100fdb:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100fde:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fe1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100fe7:	eb 46                	jmp    f010102f <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100fe9:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fec:	8b 00                	mov    (%eax),%eax
f0100fee:	89 c2                	mov    %eax,%edx
f0100ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ff3:	01 d0                	add    %edx,%eax
f0100ff5:	8a 00                	mov    (%eax),%al
f0100ff7:	0f be c0             	movsbl %al,%eax
f0100ffa:	83 ec 0c             	sub    $0xc,%esp
f0100ffd:	50                   	push   %eax
f0100ffe:	e8 11 fe ff ff       	call   f0100e14 <cputchar>
f0101003:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0101006:	8b 45 14             	mov    0x14(%ebp),%eax
f0101009:	8b 00                	mov    (%eax),%eax
f010100b:	89 c2                	mov    %eax,%edx
f010100d:	8b 45 10             	mov    0x10(%ebp),%eax
f0101010:	01 c2                	add    %eax,%edx
f0101012:	8b 45 14             	mov    0x14(%ebp),%eax
f0101015:	8b 00                	mov    (%eax),%eax
f0101017:	89 c1                	mov    %eax,%ecx
f0101019:	8b 45 0c             	mov    0xc(%ebp),%eax
f010101c:	01 c8                	add    %ecx,%eax
f010101e:	8a 00                	mov    (%eax),%al
f0101020:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0101022:	8b 45 14             	mov    0x14(%ebp),%eax
f0101025:	8b 00                	mov    (%eax),%eax
f0101027:	8d 50 01             	lea    0x1(%eax),%edx
f010102a:	8b 45 14             	mov    0x14(%ebp),%eax
f010102d:	89 10                	mov    %edx,(%eax)
f010102f:	8b 45 14             	mov    0x14(%ebp),%eax
f0101032:	8b 00                	mov    (%eax),%eax
f0101034:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101037:	7c b0                	jl     f0100fe9 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0101039:	8b 45 18             	mov    0x18(%ebp),%eax
f010103c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010103f:	89 10                	mov    %edx,(%eax)
}
f0101041:	90                   	nop
f0101042:	c9                   	leave  
f0101043:	c3                   	ret    

f0101044 <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0101044:	55                   	push   %ebp
f0101045:	89 e5                	mov    %esp,%ebp
f0101047:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f010104a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101051:	eb 21                	jmp    f0101074 <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0101053:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101056:	c1 e0 0a             	shl    $0xa,%eax
f0101059:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f010105e:	83 ec 04             	sub    $0x4,%esp
f0101061:	68 00 04 00 00       	push   $0x400
f0101066:	6a 00                	push   $0x0
f0101068:	50                   	push   %eax
f0101069:	e8 64 0c 02 00       	call   f0121cd2 <memset>
f010106e:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101071:	ff 45 f4             	incl   -0xc(%ebp)
f0101074:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0101078:	7e d9                	jle    f0101053 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f010107a:	90                   	nop
f010107b:	c9                   	leave  
f010107c:	c3                   	ret    

f010107d <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f010107d:	55                   	push   %ebp
f010107e:	89 e5                	mov    %esp,%ebp
f0101080:	57                   	push   %edi
f0101081:	53                   	push   %ebx
f0101082:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0101088:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010108c:	74 13                	je     f01010a1 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f010108e:	83 ec 08             	sub    $0x8,%esp
f0101091:	ff 75 08             	pushl  0x8(%ebp)
f0101094:	68 28 35 12 f0       	push   $0xf0123528
f0101099:	e8 fd fd ff ff       	call   f0100e9b <cprintf>
f010109e:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f01010a1:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f01010a6:	40                   	inc    %eax
f01010a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f01010aa:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f01010b1:	00 00 00 
f01010b4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01010ba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01010c0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01010c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f01010c9:	83 ec 0c             	sub    $0xc,%esp
f01010cc:	6a 00                	push   $0x0
f01010ce:	e8 71 fd ff ff       	call   f0100e44 <iscons>
f01010d3:	83 c4 10             	add    $0x10,%esp
f01010d6:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f01010d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f01010e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f01010e7:	e8 3f fd ff ff       	call   f0100e2b <getchar>
f01010ec:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f01010ef:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01010f5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01010fb:	39 c2                	cmp    %eax,%edx
f01010fd:	7e 0c                	jle    f010110b <command_prompt_readline+0x8e>
			lastIndex = i;
f01010ff:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101105:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f010110b:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f010110f:	79 22                	jns    f0101133 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f0101111:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f0101115:	0f 84 94 0a 00 00    	je     f0101baf <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f010111b:	83 ec 08             	sub    $0x8,%esp
f010111e:	ff 75 94             	pushl  -0x6c(%ebp)
f0101121:	68 2b 35 12 f0       	push   $0xf012352b
f0101126:	e8 70 fd ff ff       	call   f0100e9b <cprintf>
f010112b:	83 c4 10             	add    $0x10,%esp
			return;
f010112e:	e9 7c 0a 00 00       	jmp    f0101baf <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f0101133:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f010113a:	75 2a                	jne    f0101166 <command_prompt_readline+0xe9>
			if (commandidx)
f010113c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101140:	74 03                	je     f0101145 <command_prompt_readline+0xc8>
				commandidx--;
f0101142:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101145:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010114b:	50                   	push   %eax
f010114c:	ff 75 0c             	pushl  0xc(%ebp)
f010114f:	ff 75 f4             	pushl  -0xc(%ebp)
f0101152:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101158:	50                   	push   %eax
f0101159:	e8 63 fd ff ff       	call   f0100ec1 <clearandwritecommand>
f010115e:	83 c4 10             	add    $0x10,%esp
f0101161:	e9 32 0a 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f0101166:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f010116d:	75 3b                	jne    f01011aa <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f010116f:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101174:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101177:	7d 03                	jge    f010117c <command_prompt_readline+0xff>
				commandidx++;
f0101179:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f010117c:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101181:	85 c0                	test   %eax,%eax
f0101183:	0f 88 0f 0a 00 00    	js     f0101b98 <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101189:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010118f:	50                   	push   %eax
f0101190:	ff 75 0c             	pushl  0xc(%ebp)
f0101193:	ff 75 f4             	pushl  -0xc(%ebp)
f0101196:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f010119c:	50                   	push   %eax
f010119d:	e8 1f fd ff ff       	call   f0100ec1 <clearandwritecommand>
f01011a2:	83 c4 10             	add    $0x10,%esp
f01011a5:	e9 ee 09 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f01011aa:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f01011ae:	0f 85 6d 07 00 00    	jne    f0101921 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f01011b4:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f01011b8:	0f 84 fc 06 00 00    	je     f01018ba <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f01011be:	83 ec 08             	sub    $0x8,%esp
f01011c1:	6a 64                	push   $0x64
f01011c3:	68 00 41 3f f0       	push   $0xf03f4100
f01011c8:	e8 77 fe ff ff       	call   f0101044 <clear_prefix_list>
f01011cd:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f01011d0:	83 ec 0c             	sub    $0xc,%esp
f01011d3:	ff 75 0c             	pushl  0xc(%ebp)
f01011d6:	e8 09 09 02 00       	call   f0121ae4 <strlen>
f01011db:	83 c4 10             	add    $0x10,%esp
f01011de:	85 c0                	test   %eax,%eax
f01011e0:	0f 84 bd 09 00 00    	je     f0101ba3 <command_prompt_readline+0xb26>
f01011e6:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01011ed:	0f 84 b0 09 00 00    	je     f0101ba3 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01011f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01011fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01011fd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101203:	83 ec 08             	sub    $0x8,%esp
f0101206:	ff 75 0c             	pushl  0xc(%ebp)
f0101209:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010120f:	50                   	push   %eax
f0101210:	e8 1e 09 02 00       	call   f0121b33 <strcpy>
f0101215:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f0101218:	83 ec 0c             	sub    $0xc,%esp
f010121b:	ff 75 0c             	pushl  0xc(%ebp)
f010121e:	e8 c1 08 02 00       	call   f0121ae4 <strlen>
f0101223:	83 c4 10             	add    $0x10,%esp
f0101226:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f0101229:	8b 45 90             	mov    -0x70(%ebp),%eax
f010122c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010122f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101232:	01 d0                	add    %edx,%eax
f0101234:	8a 00                	mov    (%eax),%al
f0101236:	3c 20                	cmp    $0x20,%al
f0101238:	0f 84 6b 09 00 00    	je     f0101ba9 <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f010123e:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f0101244:	50                   	push   %eax
f0101245:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f010124b:	50                   	push   %eax
f010124c:	68 3b 35 12 f0       	push   $0xf012353b
f0101251:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101257:	50                   	push   %eax
f0101258:	e8 bb 0e 02 00       	call   f0122118 <strsplit>
f010125d:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f0101260:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f0101267:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010126d:	83 f8 01             	cmp    $0x1,%eax
f0101270:	0f 8e 28 01 00 00    	jle    f010139e <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f0101276:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010127c:	83 ec 08             	sub    $0x8,%esp
f010127f:	68 40 35 12 f0       	push   $0xf0123540
f0101284:	50                   	push   %eax
f0101285:	e8 66 09 02 00       	call   f0121bf0 <strcmp>
f010128a:	83 c4 10             	add    $0x10,%esp
f010128d:	85 c0                	test   %eax,%eax
f010128f:	74 3c                	je     f01012cd <command_prompt_readline+0x250>
f0101291:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101297:	83 ec 08             	sub    $0x8,%esp
f010129a:	68 44 35 12 f0       	push   $0xf0123544
f010129f:	50                   	push   %eax
f01012a0:	e8 4b 09 02 00       	call   f0121bf0 <strcmp>
f01012a5:	83 c4 10             	add    $0x10,%esp
f01012a8:	85 c0                	test   %eax,%eax
f01012aa:	74 21                	je     f01012cd <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f01012ac:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01012b2:	83 ec 08             	sub    $0x8,%esp
f01012b5:	68 49 35 12 f0       	push   $0xf0123549
f01012ba:	50                   	push   %eax
f01012bb:	e8 30 09 02 00       	call   f0121bf0 <strcmp>
f01012c0:	83 c4 10             	add    $0x10,%esp
f01012c3:	85 c0                	test   %eax,%eax
f01012c5:	74 06                	je     f01012cd <command_prompt_readline+0x250>
						continue;
f01012c7:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01012c8:	e9 d6 08 00 00       	jmp    f0101ba3 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f01012cd:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01012d3:	83 ec 08             	sub    $0x8,%esp
f01012d6:	68 49 35 12 f0       	push   $0xf0123549
f01012db:	50                   	push   %eax
f01012dc:	e8 0f 09 02 00       	call   f0121bf0 <strcmp>
f01012e1:	83 c4 10             	add    $0x10,%esp
f01012e4:	85 c0                	test   %eax,%eax
f01012e6:	75 09                	jne    f01012f1 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f01012e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f01012ef:	eb 07                	jmp    f01012f8 <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f01012f1:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f01012f8:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01012ff:	00 00 00 
f0101302:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101308:	b9 ff 00 00 00       	mov    $0xff,%ecx
f010130d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101312:	89 d7                	mov    %edx,%edi
f0101314:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f0101316:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010131c:	48                   	dec    %eax
f010131d:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101324:	83 ec 0c             	sub    $0xc,%esp
f0101327:	50                   	push   %eax
f0101328:	e8 b7 07 02 00       	call   f0121ae4 <strlen>
f010132d:	83 c4 10             	add    $0x10,%esp
f0101330:	8b 55 90             	mov    -0x70(%ebp),%edx
f0101333:	29 c2                	sub    %eax,%edx
f0101335:	89 d0                	mov    %edx,%eax
f0101337:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f010133a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0101341:	eb 1d                	jmp    f0101360 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f0101343:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101346:	8d 50 01             	lea    0x1(%eax),%edx
f0101349:	89 55 dc             	mov    %edx,-0x24(%ebp)
f010134c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f010134f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0101352:	01 ca                	add    %ecx,%edx
f0101354:	8a 12                	mov    (%edx),%dl
f0101356:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f010135d:	ff 45 d8             	incl   -0x28(%ebp)
f0101360:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101363:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0101366:	7c db                	jl     f0101343 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101368:	83 ec 08             	sub    $0x8,%esp
f010136b:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101371:	50                   	push   %eax
f0101372:	ff 75 0c             	pushl  0xc(%ebp)
f0101375:	e8 b9 07 02 00       	call   f0121b33 <strcpy>
f010137a:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f010137d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101383:	48                   	dec    %eax
f0101384:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f010138b:	83 ec 08             	sub    $0x8,%esp
f010138e:	50                   	push   %eax
f010138f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101395:	50                   	push   %eax
f0101396:	e8 98 07 02 00       	call   f0121b33 <strcpy>
f010139b:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f010139e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f01013a5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01013ab:	83 f8 01             	cmp    $0x1,%eax
f01013ae:	0f 85 30 01 00 00    	jne    f01014e4 <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01013b4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01013bb:	e9 0f 01 00 00       	jmp    f01014cf <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f01013c0:	83 ec 0c             	sub    $0xc,%esp
f01013c3:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01013c9:	50                   	push   %eax
f01013ca:	e8 15 07 02 00       	call   f0121ae4 <strlen>
f01013cf:	83 c4 10             	add    $0x10,%esp
f01013d2:	89 c1                	mov    %eax,%ecx
f01013d4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d7:	89 d0                	mov    %edx,%eax
f01013d9:	01 c0                	add    %eax,%eax
f01013db:	01 d0                	add    %edx,%eax
f01013dd:	c1 e0 03             	shl    $0x3,%eax
f01013e0:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01013e5:	8b 00                	mov    (%eax),%eax
f01013e7:	83 ec 04             	sub    $0x4,%esp
f01013ea:	51                   	push   %ecx
f01013eb:	50                   	push   %eax
f01013ec:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01013f2:	50                   	push   %eax
f01013f3:	e8 30 08 02 00       	call   f0121c28 <strncmp>
f01013f8:	83 c4 10             	add    $0x10,%esp
f01013fb:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f01013fe:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101402:	0f 85 c4 00 00 00    	jne    f01014cc <command_prompt_readline+0x44f>
							it_str = -1;
f0101408:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f010140f:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101416:	00 00 00 
f0101419:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010141f:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101424:	b8 00 00 00 00       	mov    $0x0,%eax
f0101429:	89 d7                	mov    %edx,%edi
f010142b:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010142d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0101434:	eb 2d                	jmp    f0101463 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f0101436:	ff 45 dc             	incl   -0x24(%ebp)
f0101439:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010143c:	89 d0                	mov    %edx,%eax
f010143e:	01 c0                	add    %eax,%eax
f0101440:	01 d0                	add    %edx,%eax
f0101442:	c1 e0 03             	shl    $0x3,%eax
f0101445:	05 40 15 17 f0       	add    $0xf0171540,%eax
f010144a:	8b 10                	mov    (%eax),%edx
f010144c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010144f:	01 d0                	add    %edx,%eax
f0101451:	8a 00                	mov    (%eax),%al
f0101453:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101459:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010145c:	01 ca                	add    %ecx,%edx
f010145e:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101460:	ff 45 cc             	incl   -0x34(%ebp)
f0101463:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101466:	89 d0                	mov    %edx,%eax
f0101468:	01 c0                	add    %eax,%eax
f010146a:	01 d0                	add    %edx,%eax
f010146c:	c1 e0 03             	shl    $0x3,%eax
f010146f:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0101474:	8b 00                	mov    (%eax),%eax
f0101476:	83 ec 0c             	sub    $0xc,%esp
f0101479:	50                   	push   %eax
f010147a:	e8 65 06 02 00       	call   f0121ae4 <strlen>
f010147f:	83 c4 10             	add    $0x10,%esp
f0101482:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0101485:	7f af                	jg     f0101436 <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101487:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010148a:	c1 e0 0a             	shl    $0xa,%eax
f010148d:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f0101492:	83 ec 04             	sub    $0x4,%esp
f0101495:	68 00 04 00 00       	push   $0x400
f010149a:	6a 00                	push   $0x0
f010149c:	50                   	push   %eax
f010149d:	e8 30 08 02 00       	call   f0121cd2 <memset>
f01014a2:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01014a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014a8:	40                   	inc    %eax
f01014a9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01014ac:	c1 e2 0a             	shl    $0xa,%edx
f01014af:	81 c2 00 41 3f f0    	add    $0xf03f4100,%edx
f01014b5:	83 ec 04             	sub    $0x4,%esp
f01014b8:	50                   	push   %eax
f01014b9:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01014bf:	50                   	push   %eax
f01014c0:	52                   	push   %edx
f01014c1:	e8 9b 06 02 00       	call   f0121b61 <strncpy>
f01014c6:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01014c9:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01014cc:	ff 45 d0             	incl   -0x30(%ebp)
f01014cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01014d2:	a1 48 19 17 f0       	mov    0xf0171948,%eax
f01014d7:	39 c2                	cmp    %eax,%edx
f01014d9:	0f 82 e1 fe ff ff    	jb     f01013c0 <command_prompt_readline+0x343>
f01014df:	e9 fe 02 00 00       	jmp    f01017e2 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f01014e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01014e8:	0f 84 7b 01 00 00    	je     f0101669 <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01014ee:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01014f5:	e9 5c 01 00 00       	jmp    f0101656 <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f01014fa:	83 ec 0c             	sub    $0xc,%esp
f01014fd:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101503:	50                   	push   %eax
f0101504:	e8 db 05 02 00       	call   f0121ae4 <strlen>
f0101509:	83 c4 10             	add    $0x10,%esp
f010150c:	89 c1                	mov    %eax,%ecx
f010150e:	8b 1d 8c 1b 17 f0    	mov    0xf0171b8c,%ebx
f0101514:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101517:	89 d0                	mov    %edx,%eax
f0101519:	01 c0                	add    %eax,%eax
f010151b:	01 d0                	add    %edx,%eax
f010151d:	c1 e0 02             	shl    $0x2,%eax
f0101520:	01 d8                	add    %ebx,%eax
f0101522:	8b 00                	mov    (%eax),%eax
f0101524:	83 ec 04             	sub    $0x4,%esp
f0101527:	51                   	push   %ecx
f0101528:	50                   	push   %eax
f0101529:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010152f:	50                   	push   %eax
f0101530:	e8 f3 06 02 00       	call   f0121c28 <strncmp>
f0101535:	83 c4 10             	add    $0x10,%esp
f0101538:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f010153b:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f010153f:	0f 85 0e 01 00 00    	jne    f0101653 <command_prompt_readline+0x5d6>
								it_str = -1;
f0101545:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f010154c:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101553:	00 00 00 
f0101556:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010155c:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101561:	b8 00 00 00 00       	mov    $0x0,%eax
f0101566:	89 d7                	mov    %edx,%edi
f0101568:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f010156a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101570:	83 f8 01             	cmp    $0x1,%eax
f0101573:	7e 39                	jle    f01015ae <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101575:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f010157c:	eb 1d                	jmp    f010159b <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f010157e:	ff 45 dc             	incl   -0x24(%ebp)
f0101581:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0101584:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101587:	01 d0                	add    %edx,%eax
f0101589:	8a 00                	mov    (%eax),%al
f010158b:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101591:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101594:	01 ca                	add    %ecx,%edx
f0101596:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101598:	ff 45 c4             	incl   -0x3c(%ebp)
f010159b:	83 ec 0c             	sub    $0xc,%esp
f010159e:	ff 75 0c             	pushl  0xc(%ebp)
f01015a1:	e8 3e 05 02 00       	call   f0121ae4 <strlen>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01015ac:	7f d0                	jg     f010157e <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01015ae:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01015b5:	eb 30                	jmp    f01015e7 <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f01015b7:	ff 45 dc             	incl   -0x24(%ebp)
f01015ba:	8b 0d 8c 1b 17 f0    	mov    0xf0171b8c,%ecx
f01015c0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015c3:	89 d0                	mov    %edx,%eax
f01015c5:	01 c0                	add    %eax,%eax
f01015c7:	01 d0                	add    %edx,%eax
f01015c9:	c1 e0 02             	shl    $0x2,%eax
f01015cc:	01 c8                	add    %ecx,%eax
f01015ce:	8b 10                	mov    (%eax),%edx
f01015d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01015d3:	01 d0                	add    %edx,%eax
f01015d5:	8a 00                	mov    (%eax),%al
f01015d7:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01015dd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01015e0:	01 ca                	add    %ecx,%edx
f01015e2:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01015e4:	ff 45 c0             	incl   -0x40(%ebp)
f01015e7:	8b 0d 8c 1b 17 f0    	mov    0xf0171b8c,%ecx
f01015ed:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015f0:	89 d0                	mov    %edx,%eax
f01015f2:	01 c0                	add    %eax,%eax
f01015f4:	01 d0                	add    %edx,%eax
f01015f6:	c1 e0 02             	shl    $0x2,%eax
f01015f9:	01 c8                	add    %ecx,%eax
f01015fb:	8b 00                	mov    (%eax),%eax
f01015fd:	83 ec 0c             	sub    $0xc,%esp
f0101600:	50                   	push   %eax
f0101601:	e8 de 04 02 00       	call   f0121ae4 <strlen>
f0101606:	83 c4 10             	add    $0x10,%esp
f0101609:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010160c:	7f a9                	jg     f01015b7 <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f010160e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101611:	c1 e0 0a             	shl    $0xa,%eax
f0101614:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f0101619:	83 ec 04             	sub    $0x4,%esp
f010161c:	68 00 04 00 00       	push   $0x400
f0101621:	6a 00                	push   $0x0
f0101623:	50                   	push   %eax
f0101624:	e8 a9 06 02 00       	call   f0121cd2 <memset>
f0101629:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010162c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010162f:	40                   	inc    %eax
f0101630:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101633:	c1 e2 0a             	shl    $0xa,%edx
f0101636:	81 c2 00 41 3f f0    	add    $0xf03f4100,%edx
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	50                   	push   %eax
f0101640:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101646:	50                   	push   %eax
f0101647:	52                   	push   %edx
f0101648:	e8 14 05 02 00       	call   f0121b61 <strncpy>
f010164d:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101650:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101653:	ff 45 c8             	incl   -0x38(%ebp)
f0101656:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f010165b:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f010165e:	0f 8c 96 fe ff ff    	jl     f01014fa <command_prompt_readline+0x47d>
f0101664:	e9 79 01 00 00       	jmp    f01017e2 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f0101669:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010166d:	0f 84 6f 01 00 00    	je     f01017e2 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101673:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f010167a:	e9 53 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f010167f:	83 ec 0c             	sub    $0xc,%esp
f0101682:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101688:	50                   	push   %eax
f0101689:	e8 56 04 02 00       	call   f0121ae4 <strlen>
f010168e:	83 c4 10             	add    $0x10,%esp
f0101691:	89 c1                	mov    %eax,%ecx
f0101693:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101696:	89 d0                	mov    %edx,%eax
f0101698:	01 c0                	add    %eax,%eax
f010169a:	01 d0                	add    %edx,%eax
f010169c:	c1 e0 02             	shl    $0x2,%eax
f010169f:	05 a0 1b 17 f0       	add    $0xf0171ba0,%eax
f01016a4:	8b 00                	mov    (%eax),%eax
f01016a6:	83 ec 04             	sub    $0x4,%esp
f01016a9:	51                   	push   %ecx
f01016aa:	50                   	push   %eax
f01016ab:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01016b1:	50                   	push   %eax
f01016b2:	e8 71 05 02 00       	call   f0121c28 <strncmp>
f01016b7:	83 c4 10             	add    $0x10,%esp
f01016ba:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f01016bd:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01016c1:	0f 85 08 01 00 00    	jne    f01017cf <command_prompt_readline+0x752>
								it_str = -1;
f01016c7:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01016ce:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01016d5:	00 00 00 
f01016d8:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01016de:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01016e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01016e8:	89 d7                	mov    %edx,%edi
f01016ea:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f01016ec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01016f2:	83 f8 01             	cmp    $0x1,%eax
f01016f5:	7e 39                	jle    f0101730 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016f7:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01016fe:	eb 1d                	jmp    f010171d <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101700:	ff 45 dc             	incl   -0x24(%ebp)
f0101703:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0101706:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101709:	01 d0                	add    %edx,%eax
f010170b:	8a 00                	mov    (%eax),%al
f010170d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101713:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101716:	01 ca                	add    %ecx,%edx
f0101718:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010171a:	ff 45 b8             	incl   -0x48(%ebp)
f010171d:	83 ec 0c             	sub    $0xc,%esp
f0101720:	ff 75 0c             	pushl  0xc(%ebp)
f0101723:	e8 bc 03 02 00       	call   f0121ae4 <strlen>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f010172e:	7f d0                	jg     f0101700 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f0101730:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f0101737:	eb 2d                	jmp    f0101766 <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f0101739:	ff 45 dc             	incl   -0x24(%ebp)
f010173c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010173f:	89 d0                	mov    %edx,%eax
f0101741:	01 c0                	add    %eax,%eax
f0101743:	01 d0                	add    %edx,%eax
f0101745:	c1 e0 02             	shl    $0x2,%eax
f0101748:	05 a0 1b 17 f0       	add    $0xf0171ba0,%eax
f010174d:	8b 10                	mov    (%eax),%edx
f010174f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0101752:	01 d0                	add    %edx,%eax
f0101754:	8a 00                	mov    (%eax),%al
f0101756:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f010175c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010175f:	01 ca                	add    %ecx,%edx
f0101761:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f0101763:	ff 45 b4             	incl   -0x4c(%ebp)
f0101766:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101769:	89 d0                	mov    %edx,%eax
f010176b:	01 c0                	add    %eax,%eax
f010176d:	01 d0                	add    %edx,%eax
f010176f:	c1 e0 02             	shl    $0x2,%eax
f0101772:	05 a0 1b 17 f0       	add    $0xf0171ba0,%eax
f0101777:	8b 00                	mov    (%eax),%eax
f0101779:	83 ec 0c             	sub    $0xc,%esp
f010177c:	50                   	push   %eax
f010177d:	e8 62 03 02 00       	call   f0121ae4 <strlen>
f0101782:	83 c4 10             	add    $0x10,%esp
f0101785:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0101788:	7f af                	jg     f0101739 <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f010178a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010178d:	c1 e0 0a             	shl    $0xa,%eax
f0101790:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f0101795:	83 ec 04             	sub    $0x4,%esp
f0101798:	68 00 04 00 00       	push   $0x400
f010179d:	6a 00                	push   $0x0
f010179f:	50                   	push   %eax
f01017a0:	e8 2d 05 02 00       	call   f0121cd2 <memset>
f01017a5:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01017a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017ab:	40                   	inc    %eax
f01017ac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01017af:	c1 e2 0a             	shl    $0xa,%edx
f01017b2:	81 c2 00 41 3f f0    	add    $0xf03f4100,%edx
f01017b8:	83 ec 04             	sub    $0x4,%esp
f01017bb:	50                   	push   %eax
f01017bc:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01017c2:	50                   	push   %eax
f01017c3:	52                   	push   %edx
f01017c4:	e8 98 03 02 00       	call   f0121b61 <strncpy>
f01017c9:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01017cc:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f01017cf:	ff 45 bc             	incl   -0x44(%ebp)
f01017d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01017d5:	a1 3c 1c 17 f0       	mov    0xf0171c3c,%eax
f01017da:	39 c2                	cmp    %eax,%edx
f01017dc:	0f 82 9d fe ff ff    	jb     f010167f <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01017e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01017e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01017e8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01017ec:	0f 84 a6 03 00 00    	je     f0101b98 <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f01017f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01017f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ff:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101806:	eb 1f                	jmp    f0101827 <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f0101808:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010180b:	8d 50 01             	lea    0x1(%eax),%edx
f010180e:	89 55 dc             	mov    %edx,-0x24(%ebp)
f0101811:	89 c2                	mov    %eax,%edx
f0101813:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101816:	01 c2                	add    %eax,%edx
f0101818:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010181b:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f0101820:	8a 00                	mov    (%eax),%al
f0101822:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101824:	ff 45 b0             	incl   -0x50(%ebp)
f0101827:	83 ec 0c             	sub    $0xc,%esp
f010182a:	68 00 41 3f f0       	push   $0xf03f4100
f010182f:	e8 b0 02 02 00       	call   f0121ae4 <strlen>
f0101834:	83 c4 10             	add    $0x10,%esp
f0101837:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010183a:	7f cc                	jg     f0101808 <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010183c:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f0101843:	eb 10                	jmp    f0101855 <command_prompt_readline+0x7d8>
						cputchar('\b');}
f0101845:	83 ec 0c             	sub    $0xc,%esp
f0101848:	6a 08                	push   $0x8
f010184a:	e8 c5 f5 ff ff       	call   f0100e14 <cputchar>
f010184f:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101852:	ff 45 ac             	incl   -0x54(%ebp)
f0101855:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0101858:	3b 45 90             	cmp    -0x70(%ebp),%eax
f010185b:	7c e8                	jl     f0101845 <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010185d:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f0101864:	eb 1c                	jmp    f0101882 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f0101866:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0101869:	8b 45 0c             	mov    0xc(%ebp),%eax
f010186c:	01 d0                	add    %edx,%eax
f010186e:	8a 00                	mov    (%eax),%al
f0101870:	0f be c0             	movsbl %al,%eax
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	50                   	push   %eax
f0101877:	e8 98 f5 ff ff       	call   f0100e14 <cputchar>
f010187c:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010187f:	ff 45 a8             	incl   -0x58(%ebp)
f0101882:	83 ec 0c             	sub    $0xc,%esp
f0101885:	ff 75 0c             	pushl  0xc(%ebp)
f0101888:	e8 57 02 02 00       	call   f0121ae4 <strlen>
f010188d:	83 c4 10             	add    $0x10,%esp
f0101890:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101893:	7f d1                	jg     f0101866 <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101895:	83 ec 0c             	sub    $0xc,%esp
f0101898:	ff 75 0c             	pushl  0xc(%ebp)
f010189b:	e8 44 02 02 00       	call   f0121ae4 <strlen>
f01018a0:	83 c4 10             	add    $0x10,%esp
f01018a3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01018a9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01018af:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01018b5:	e9 de 02 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f01018ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01018be:	0f 8e d4 02 00 00    	jle    f0101b98 <command_prompt_readline+0xb1b>
f01018c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018c7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f01018cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018d0:	40                   	inc    %eax
f01018d1:	99                   	cltd   
f01018d2:	f7 7d ec             	idivl  -0x14(%ebp)
f01018d5:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f01018d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018db:	c1 e0 0a             	shl    $0xa,%eax
f01018de:	8d 98 00 41 3f f0    	lea    -0xfc0bf00(%eax),%ebx
f01018e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01018ea:	c1 e0 0a             	shl    $0xa,%eax
f01018ed:	05 00 41 3f f0       	add    $0xf03f4100,%eax
f01018f2:	83 ec 0c             	sub    $0xc,%esp
f01018f5:	50                   	push   %eax
f01018f6:	e8 e9 01 02 00       	call   f0121ae4 <strlen>
f01018fb:	83 c4 10             	add    $0x10,%esp
f01018fe:	83 ec 0c             	sub    $0xc,%esp
f0101901:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f0101907:	52                   	push   %edx
f0101908:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f010190e:	52                   	push   %edx
f010190f:	ff 75 0c             	pushl  0xc(%ebp)
f0101912:	53                   	push   %ebx
f0101913:	50                   	push   %eax
f0101914:	e8 75 f6 ff ff       	call   f0100f8e <RoundAutoCompleteCommandWithTheSamePrefix>
f0101919:	83 c4 20             	add    $0x20,%esp
f010191c:	e9 77 02 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f0101921:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101928:	75 2e                	jne    f0101958 <command_prompt_readline+0x8db>
			if (i > 0) {
f010192a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101930:	85 c0                	test   %eax,%eax
f0101932:	0f 8e 60 02 00 00    	jle    f0101b98 <command_prompt_readline+0xb1b>
				i--;
f0101938:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193e:	48                   	dec    %eax
f010193f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101945:	83 ec 0c             	sub    $0xc,%esp
f0101948:	ff 75 94             	pushl  -0x6c(%ebp)
f010194b:	e8 c4 f4 ff ff       	call   f0100e14 <cputchar>
f0101950:	83 c4 10             	add    $0x10,%esp
f0101953:	e9 40 02 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f0101958:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010195f:	75 34                	jne    f0101995 <command_prompt_readline+0x918>
			if (i < lastIndex) {
f0101961:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0101967:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010196d:	39 c2                	cmp    %eax,%edx
f010196f:	0f 8d 23 02 00 00    	jge    f0101b98 <command_prompt_readline+0xb1b>
				i++;
f0101975:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010197b:	40                   	inc    %eax
f010197c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101982:	83 ec 0c             	sub    $0xc,%esp
f0101985:	ff 75 94             	pushl  -0x6c(%ebp)
f0101988:	e8 87 f4 ff ff       	call   f0100e14 <cputchar>
f010198d:	83 c4 10             	add    $0x10,%esp
f0101990:	e9 03 02 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101995:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f010199c:	75 4c                	jne    f01019ea <command_prompt_readline+0x96d>
f010199e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019a4:	85 c0                	test   %eax,%eax
f01019a6:	7e 42                	jle    f01019ea <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f01019a8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01019b1:	eb 1a                	jmp    f01019cd <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f01019b3:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01019b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019b9:	01 c2                	add    %eax,%edx
f01019bb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01019be:	8d 48 01             	lea    0x1(%eax),%ecx
f01019c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019c4:	01 c8                	add    %ecx,%eax
f01019c6:	8a 00                	mov    (%eax),%al
f01019c8:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f01019ca:	ff 45 a4             	incl   -0x5c(%ebp)
f01019cd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019d3:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f01019d6:	7e db                	jle    f01019b3 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f01019d8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019de:	48                   	dec    %eax
f01019df:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e5:	e9 ae 01 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f01019ea:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f01019ee:	7e 60                	jle    f0101a50 <command_prompt_readline+0x9d3>
f01019f0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f6:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f01019fb:	7f 53                	jg     f0101a50 <command_prompt_readline+0x9d3>
f01019fd:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101a04:	74 4a                	je     f0101a50 <command_prompt_readline+0x9d3>
f0101a06:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101a0d:	74 41                	je     f0101a50 <command_prompt_readline+0x9d3>
			if (echoing)
f0101a0f:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a13:	74 0e                	je     f0101a23 <command_prompt_readline+0x9a6>
				cputchar(c);
f0101a15:	83 ec 0c             	sub    $0xc,%esp
f0101a18:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a1b:	e8 f4 f3 ff ff       	call   f0100e14 <cputchar>
f0101a20:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101a23:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a29:	8d 50 01             	lea    0x1(%eax),%edx
f0101a2c:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f0101a32:	89 c2                	mov    %eax,%edx
f0101a34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a37:	01 d0                	add    %edx,%eax
f0101a39:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0101a3c:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101a3e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a44:	40                   	inc    %eax
f0101a45:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101a4b:	e9 48 01 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f0101a50:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f0101a54:	75 60                	jne    f0101ab6 <command_prompt_readline+0xa39>
f0101a56:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a5c:	85 c0                	test   %eax,%eax
f0101a5e:	7e 56                	jle    f0101ab6 <command_prompt_readline+0xa39>

			if (echoing)
f0101a60:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a64:	74 0e                	je     f0101a74 <command_prompt_readline+0x9f7>
				cputchar(c);
f0101a66:	83 ec 0c             	sub    $0xc,%esp
f0101a69:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a6c:	e8 a3 f3 ff ff       	call   f0100e14 <cputchar>
f0101a71:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a7a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a7d:	eb 1a                	jmp    f0101a99 <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a7f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a82:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a88:	01 c2                	add    %eax,%edx
f0101a8a:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a90:	01 c8                	add    %ecx,%eax
f0101a92:	8a 00                	mov    (%eax),%al
f0101a94:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a96:	ff 45 a0             	incl   -0x60(%ebp)
f0101a99:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a9f:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101aa2:	7e db                	jle    f0101a7f <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101aa4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101aaa:	48                   	dec    %eax
f0101aab:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101ab1:	e9 e2 00 00 00       	jmp    f0101b98 <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101ab6:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101aba:	74 0a                	je     f0101ac6 <command_prompt_readline+0xa49>
f0101abc:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101ac0:	0f 85 d2 00 00 00    	jne    f0101b98 <command_prompt_readline+0xb1b>

			if (echoing)
f0101ac6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101aca:	74 0e                	je     f0101ada <command_prompt_readline+0xa5d>
				cputchar(c);
f0101acc:	83 ec 0c             	sub    $0xc,%esp
f0101acf:	ff 75 94             	pushl  -0x6c(%ebp)
f0101ad2:	e8 3d f3 ff ff       	call   f0100e14 <cputchar>
f0101ad7:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101ada:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101ae0:	89 c2                	mov    %eax,%edx
f0101ae2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ae5:	01 d0                	add    %edx,%eax
f0101ae7:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101aea:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101aef:	83 f8 13             	cmp    $0x13,%eax
f0101af2:	75 56                	jne    f0101b4a <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101af4:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101afb:	eb 2d                	jmp    f0101b2a <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101afd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101b00:	40                   	inc    %eax
f0101b01:	c1 e0 0a             	shl    $0xa,%eax
f0101b04:	8d 90 00 d1 40 f0    	lea    -0xfbf2f00(%eax),%edx
f0101b0a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101b0d:	c1 e0 0a             	shl    $0xa,%eax
f0101b10:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0101b15:	83 ec 04             	sub    $0x4,%esp
f0101b18:	68 00 04 00 00       	push   $0x400
f0101b1d:	52                   	push   %edx
f0101b1e:	50                   	push   %eax
f0101b1f:	e8 de 01 02 00       	call   f0121d02 <memcpy>
f0101b24:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101b27:	ff 45 9c             	incl   -0x64(%ebp)
f0101b2a:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101b2e:	7e cd                	jle    f0101afd <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101b30:	83 ec 04             	sub    $0x4,%esp
f0101b33:	68 00 04 00 00       	push   $0x400
f0101b38:	ff 75 0c             	pushl  0xc(%ebp)
f0101b3b:	68 00 1d 41 f0       	push   $0xf0411d00
f0101b40:	e8 bd 01 02 00       	call   f0121d02 <memcpy>
f0101b45:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	eb 68                	jmp    f0101bb2 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101b4a:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101b4f:	c1 e0 0a             	shl    $0xa,%eax
f0101b52:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0101b57:	83 ec 08             	sub    $0x8,%esp
f0101b5a:	ff 75 0c             	pushl  0xc(%ebp)
f0101b5d:	50                   	push   %eax
f0101b5e:	e8 8d 00 02 00       	call   f0121bf0 <strcmp>
f0101b63:	83 c4 10             	add    $0x10,%esp
f0101b66:	85 c0                	test   %eax,%eax
f0101b68:	74 48                	je     f0101bb2 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b6a:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101b6f:	40                   	inc    %eax
f0101b70:	a3 30 15 17 f0       	mov    %eax,0xf0171530
f0101b75:	a1 30 15 17 f0       	mov    0xf0171530,%eax
f0101b7a:	c1 e0 0a             	shl    $0xa,%eax
f0101b7d:	05 00 d1 40 f0       	add    $0xf040d100,%eax
f0101b82:	83 ec 04             	sub    $0x4,%esp
f0101b85:	68 00 04 00 00       	push   $0x400
f0101b8a:	ff 75 0c             	pushl  0xc(%ebp)
f0101b8d:	50                   	push   %eax
f0101b8e:	e8 6f 01 02 00       	call   f0121d02 <memcpy>
f0101b93:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b96:	eb 1a                	jmp    f0101bb2 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b9e:	e9 44 f5 ff ff       	jmp    f01010e7 <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101ba3:	90                   	nop
f0101ba4:	e9 3e f5 ff ff       	jmp    f01010e7 <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101ba9:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101baa:	e9 38 f5 ff ff       	jmp    f01010e7 <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101baf:	90                   	nop
f0101bb0:	eb 01                	jmp    f0101bb3 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101bb2:	90                   	nop

		}
		last_c = c;
	}
}
f0101bb3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101bb6:	5b                   	pop    %ebx
f0101bb7:	5f                   	pop    %edi
f0101bb8:	5d                   	pop    %ebp
f0101bb9:	c3                   	ret    

f0101bba <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101bba:	55                   	push   %ebp
f0101bbb:	89 e5                	mov    %esp,%ebp
f0101bbd:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101bc3:	c7 05 d8 40 3f f0 00 	movl   $0x0,0xf03f40d8
f0101bca:	00 00 00 
f0101bcd:	c7 05 dc 40 3f f0 00 	movl   $0x0,0xf03f40dc
f0101bd4:	00 00 00 
f0101bd7:	c7 05 e4 40 3f f0 00 	movl   $0x0,0xf03f40e4
f0101bde:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101be1:	83 ec 04             	sub    $0x4,%esp
f0101be4:	68 00 04 00 00       	push   $0x400
f0101be9:	6a 00                	push   $0x0
f0101beb:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bf1:	50                   	push   %eax
f0101bf2:	e8 db 00 02 00       	call   f0121cd2 <memset>
f0101bf7:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101bfa:	83 ec 08             	sub    $0x8,%esp
f0101bfd:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101c03:	50                   	push   %eax
f0101c04:	68 4d 35 12 f0       	push   $0xf012354d
f0101c09:	e8 6f f4 ff ff       	call   f010107d <command_prompt_readline>
f0101c0e:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101c11:	83 ec 0c             	sub    $0xc,%esp
f0101c14:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101c1a:	50                   	push   %eax
f0101c1b:	e8 0d 00 00 00       	call   f0101c2d <execute_command>
f0101c20:	83 c4 10             	add    $0x10,%esp
f0101c23:	85 c0                	test   %eax,%eax
f0101c25:	78 02                	js     f0101c29 <run_command_prompt+0x6f>
				break;
	}
f0101c27:	eb b8                	jmp    f0101be1 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101c29:	90                   	nop
	}
}
f0101c2a:	90                   	nop
f0101c2b:	c9                   	leave  
f0101c2c:	c3                   	ret    

f0101c2d <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101c2d:	55                   	push   %ebp
f0101c2e:	89 e5                	mov    %esp,%ebp
f0101c30:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101c33:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101c36:	50                   	push   %eax
f0101c37:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101c3a:	50                   	push   %eax
f0101c3b:	68 3b 35 12 f0       	push   $0xf012353b
f0101c40:	ff 75 08             	pushl  0x8(%ebp)
f0101c43:	e8 d0 04 02 00       	call   f0122118 <strsplit>
f0101c48:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101c4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101c4e:	85 c0                	test   %eax,%eax
f0101c50:	75 0a                	jne    f0101c5c <execute_command+0x2f>
		return 0;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 a4 02 00 00       	jmp    f0101f00 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101c5c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101c5f:	83 ec 08             	sub    $0x8,%esp
f0101c62:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101c65:	52                   	push   %edx
f0101c66:	50                   	push   %eax
f0101c67:	e8 96 02 00 00       	call   f0101f02 <process_command>
f0101c6c:	83 c4 10             	add    $0x10,%esp
f0101c6f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c72:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c76:	75 19                	jne    f0101c91 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c78:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c7b:	83 ec 08             	sub    $0x8,%esp
f0101c7e:	50                   	push   %eax
f0101c7f:	68 53 35 12 f0       	push   $0xf0123553
f0101c84:	e8 12 f2 ff ff       	call   f0100e9b <cprintf>
f0101c89:	83 c4 10             	add    $0x10,%esp
f0101c8c:	e9 6a 02 00 00       	jmp    f0101efb <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c91:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c95:	75 4f                	jne    f0101ce6 <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c97:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f0101c9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c9f:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101ca3:	74 17                	je     f0101cbc <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101ca5:	83 ec 04             	sub    $0x4,%esp
f0101ca8:	68 6c 35 12 f0       	push   $0xf012356c
f0101cad:	68 3d 01 00 00       	push   $0x13d
f0101cb2:	68 bd 35 12 f0       	push   $0xf01235bd
f0101cb7:	e8 5e e5 ff ff       	call   f010021a <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101cbc:	a1 d8 40 3f f0       	mov    0xf03f40d8,%eax
f0101cc1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101cc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101cc7:	8b 50 04             	mov    0x4(%eax),%edx
f0101cca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101ccd:	8b 00                	mov    (%eax),%eax
f0101ccf:	83 ec 04             	sub    $0x4,%esp
f0101cd2:	52                   	push   %edx
f0101cd3:	50                   	push   %eax
f0101cd4:	68 d8 35 12 f0       	push   $0xf01235d8
f0101cd9:	e8 bd f1 ff ff       	call   f0100e9b <cprintf>
f0101cde:	83 c4 10             	add    $0x10,%esp
f0101ce1:	e9 15 02 00 00       	jmp    f0101efb <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101ce6:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101cea:	0f 85 e6 01 00 00    	jne    f0101ed6 <execute_command+0x2a9>
	{
		int i = 1;
f0101cf0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101cf7:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f0101cfc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101cff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101d03:	75 17                	jne    f0101d1c <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101d05:	83 ec 04             	sub    $0x4,%esp
f0101d08:	68 08 36 12 f0       	push   $0xf0123608
f0101d0d:	68 48 01 00 00       	push   $0x148
f0101d12:	68 bd 35 12 f0       	push   $0xf01235bd
f0101d17:	e8 fe e4 ff ff       	call   f010021a <_panic>
		}
		struct Command * cmd = NULL;
f0101d1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101d23:	a1 d8 40 3f f0       	mov    0xf03f40d8,%eax
f0101d28:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101d2b:	eb 28                	jmp    f0101d55 <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101d2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d30:	8b 10                	mov    (%eax),%edx
f0101d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d35:	8d 48 01             	lea    0x1(%eax),%ecx
f0101d38:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101d3b:	83 ec 04             	sub    $0x4,%esp
f0101d3e:	52                   	push   %edx
f0101d3f:	50                   	push   %eax
f0101d40:	68 32 36 12 f0       	push   $0xf0123632
f0101d45:	e8 51 f1 ff ff       	call   f0100e9b <cprintf>
f0101d4a:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101d4d:	a1 e0 40 3f f0       	mov    0xf03f40e0,%eax
f0101d52:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101d55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d59:	74 08                	je     f0101d63 <execute_command+0x136>
f0101d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d5e:	8b 40 10             	mov    0x10(%eax),%eax
f0101d61:	eb 05                	jmp    f0101d68 <execute_command+0x13b>
f0101d63:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d68:	a3 e0 40 3f f0       	mov    %eax,0xf03f40e0
f0101d6d:	a1 e0 40 3f f0       	mov    0xf03f40e0,%eax
f0101d72:	85 c0                	test   %eax,%eax
f0101d74:	75 b7                	jne    f0101d2d <execute_command+0x100>
f0101d76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d7a:	75 b1                	jne    f0101d2d <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d7c:	83 ec 08             	sub    $0x8,%esp
f0101d7f:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d82:	68 3c 36 12 f0       	push   $0xf012363c
f0101d87:	e8 0f f1 ff ff       	call   f0100e9b <cprintf>
f0101d8c:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d8f:	e8 97 f0 ff ff       	call   f0100e2b <getchar>
f0101d94:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d97:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d9b:	83 ec 0c             	sub    $0xc,%esp
f0101d9e:	50                   	push   %eax
f0101d9f:	e8 70 f0 ff ff       	call   f0100e14 <cputchar>
f0101da4:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101da7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101dae:	eb 40                	jmp    f0101df0 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101db0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101db3:	89 d0                	mov    %edx,%eax
f0101db5:	c1 e0 02             	shl    $0x2,%eax
f0101db8:	01 d0                	add    %edx,%eax
f0101dba:	01 c0                	add    %eax,%eax
f0101dbc:	89 c2                	mov    %eax,%edx
f0101dbe:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101dc2:	83 e8 30             	sub    $0x30,%eax
f0101dc5:	01 d0                	add    %edx,%eax
f0101dc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101dca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101dce:	7e 2c                	jle    f0101dfc <execute_command+0x1cf>
f0101dd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dd3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101dd6:	7f 24                	jg     f0101dfc <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101dd8:	e8 4e f0 ff ff       	call   f0100e2b <getchar>
f0101ddd:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101de0:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101de4:	83 ec 0c             	sub    $0xc,%esp
f0101de7:	50                   	push   %eax
f0101de8:	e8 27 f0 ff ff       	call   f0100e14 <cputchar>
f0101ded:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101df0:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101df4:	7e 06                	jle    f0101dfc <execute_command+0x1cf>
f0101df6:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101dfa:	7e b4                	jle    f0101db0 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101dfc:	83 ec 0c             	sub    $0xc,%esp
f0101dff:	6a 0a                	push   $0xa
f0101e01:	e8 0e f0 ff ff       	call   f0100e14 <cputchar>
f0101e06:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101e09:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101e0d:	0f 8e e8 00 00 00    	jle    f0101efb <execute_command+0x2ce>
f0101e13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e16:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101e19:	0f 8f dc 00 00 00    	jg     f0101efb <execute_command+0x2ce>
		{
			int c = 1;
f0101e1f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101e26:	a1 d8 40 3f f0       	mov    0xf03f40d8,%eax
f0101e2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e2e:	eb 75                	jmp    f0101ea5 <execute_command+0x278>
			{
				if (c++ == selection)
f0101e30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e33:	8d 50 01             	lea    0x1(%eax),%edx
f0101e36:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101e39:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101e3c:	75 5f                	jne    f0101e9d <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e41:	8b 40 0c             	mov    0xc(%eax),%eax
f0101e44:	85 c0                	test   %eax,%eax
f0101e46:	75 31                	jne    f0101e79 <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e4b:	8b 00                	mov    (%eax),%eax
f0101e4d:	83 ec 08             	sub    $0x8,%esp
f0101e50:	50                   	push   %eax
f0101e51:	68 9f 36 12 f0       	push   $0xf012369f
f0101e56:	e8 40 f0 ff ff       	call   f0100e9b <cprintf>
f0101e5b:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e61:	8b 40 08             	mov    0x8(%eax),%eax
f0101e64:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e67:	83 ec 08             	sub    $0x8,%esp
f0101e6a:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e6d:	51                   	push   %ecx
f0101e6e:	52                   	push   %edx
f0101e6f:	ff d0                	call   *%eax
f0101e71:	83 c4 10             	add    $0x10,%esp
f0101e74:	e9 87 00 00 00       	jmp    f0101f00 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e7c:	8b 50 04             	mov    0x4(%eax),%edx
f0101e7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e82:	8b 00                	mov    (%eax),%eax
f0101e84:	83 ec 04             	sub    $0x4,%esp
f0101e87:	52                   	push   %edx
f0101e88:	50                   	push   %eax
f0101e89:	68 a8 36 12 f0       	push   $0xf01236a8
f0101e8e:	e8 08 f0 ff ff       	call   f0100e9b <cprintf>
f0101e93:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e96:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e9b:	eb 63                	jmp    f0101f00 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e9d:	a1 e0 40 3f f0       	mov    0xf03f40e0,%eax
f0101ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ea5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101ea9:	74 08                	je     f0101eb3 <execute_command+0x286>
f0101eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101eae:	8b 40 10             	mov    0x10(%eax),%eax
f0101eb1:	eb 05                	jmp    f0101eb8 <execute_command+0x28b>
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101eb8:	a3 e0 40 3f f0       	mov    %eax,0xf03f40e0
f0101ebd:	a1 e0 40 3f f0       	mov    0xf03f40e0,%eax
f0101ec2:	85 c0                	test   %eax,%eax
f0101ec4:	0f 85 66 ff ff ff    	jne    f0101e30 <execute_command+0x203>
f0101eca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101ece:	0f 85 5c ff ff ff    	jne    f0101e30 <execute_command+0x203>
f0101ed4:	eb 25                	jmp    f0101efb <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101ed6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ed9:	89 d0                	mov    %edx,%eax
f0101edb:	01 c0                	add    %eax,%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	c1 e0 03             	shl    $0x3,%eax
f0101ee2:	05 48 15 17 f0       	add    $0xf0171548,%eax
f0101ee7:	8b 00                	mov    (%eax),%eax
f0101ee9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101eec:	83 ec 08             	sub    $0x8,%esp
f0101eef:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101ef2:	51                   	push   %ecx
f0101ef3:	52                   	push   %edx
f0101ef4:	ff d0                	call   *%eax
f0101ef6:	83 c4 10             	add    $0x10,%esp
f0101ef9:	eb 05                	jmp    f0101f00 <execute_command+0x2d3>
	}
	return 0;
f0101efb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f00:	c9                   	leave  
f0101f01:	c3                   	ret    

f0101f02 <process_command>:


int process_command(int number_of_arguments, char** arguments)
{
f0101f02:	55                   	push   %ebp
f0101f03:	89 e5                	mov    %esp,%ebp
f0101f05:	53                   	push   %ebx
f0101f06:	83 ec 24             	sub    $0x24,%esp
	bool found=0;
f0101f09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_INIT(&foundCommands);
f0101f10:	c7 05 d8 40 3f f0 00 	movl   $0x0,0xf03f40d8
f0101f17:	00 00 00 
f0101f1a:	c7 05 dc 40 3f f0 00 	movl   $0x0,0xf03f40dc
f0101f21:	00 00 00 
f0101f24:	c7 05 e4 40 3f f0 00 	movl   $0x0,0xf03f40e4
f0101f2b:	00 00 00 
	int index;
		//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
		//Comment the following line before start coding...
		//panic("process_command is not implemented yet");
	for(int i=0;i<NUM_OF_COMMANDS;i++){
f0101f2e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101f35:	eb 3b                	jmp    f0101f72 <process_command+0x70>

	if(strcmp(arguments[0],commands[i].name)==0){
f0101f37:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101f3a:	89 d0                	mov    %edx,%eax
f0101f3c:	01 c0                	add    %eax,%eax
f0101f3e:	01 d0                	add    %edx,%eax
f0101f40:	c1 e0 03             	shl    $0x3,%eax
f0101f43:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0101f48:	8b 10                	mov    (%eax),%edx
f0101f4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f4d:	8b 00                	mov    (%eax),%eax
f0101f4f:	83 ec 08             	sub    $0x8,%esp
f0101f52:	52                   	push   %edx
f0101f53:	50                   	push   %eax
f0101f54:	e8 97 fc 01 00       	call   f0121bf0 <strcmp>
f0101f59:	83 c4 10             	add    $0x10,%esp
f0101f5c:	85 c0                	test   %eax,%eax
f0101f5e:	75 0f                	jne    f0101f6f <process_command+0x6d>

	index=i;
f0101f60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101f63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	found=1;
f0101f66:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	break;
f0101f6d:	eb 0f                	jmp    f0101f7e <process_command+0x7c>
	LIST_INIT(&foundCommands);
	int index;
		//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
		//Comment the following line before start coding...
		//panic("process_command is not implemented yet");
	for(int i=0;i<NUM_OF_COMMANDS;i++){
f0101f6f:	ff 45 ec             	incl   -0x14(%ebp)
f0101f72:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101f75:	a1 48 19 17 f0       	mov    0xf0171948,%eax
f0101f7a:	39 c2                	cmp    %eax,%edx
f0101f7c:	72 b9                	jb     f0101f37 <process_command+0x35>
	index=i;
	found=1;
	break;
	}
		}
	if(found==1){
f0101f7e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f82:	0f 85 95 01 00 00    	jne    f010211d <process_command+0x21b>

	if((number_of_arguments-1==commands[index].num_of_args)||(commands[index].num_of_args==-1&& number_of_arguments-1>=1)){
f0101f88:	8b 45 08             	mov    0x8(%ebp),%eax
f0101f8b:	8d 48 ff             	lea    -0x1(%eax),%ecx
f0101f8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101f91:	89 d0                	mov    %edx,%eax
f0101f93:	01 c0                	add    %eax,%eax
f0101f95:	01 d0                	add    %edx,%eax
f0101f97:	c1 e0 03             	shl    $0x3,%eax
f0101f9a:	05 4c 15 17 f0       	add    $0xf017154c,%eax
f0101f9f:	8b 00                	mov    (%eax),%eax
f0101fa1:	39 c1                	cmp    %eax,%ecx
f0101fa3:	74 20                	je     f0101fc5 <process_command+0xc3>
f0101fa5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101fa8:	89 d0                	mov    %edx,%eax
f0101faa:	01 c0                	add    %eax,%eax
f0101fac:	01 d0                	add    %edx,%eax
f0101fae:	c1 e0 03             	shl    $0x3,%eax
f0101fb1:	05 4c 15 17 f0       	add    $0xf017154c,%eax
f0101fb6:	8b 00                	mov    (%eax),%eax
f0101fb8:	83 f8 ff             	cmp    $0xffffffff,%eax
f0101fbb:	75 10                	jne    f0101fcd <process_command+0xcb>
f0101fbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0101fc0:	48                   	dec    %eax
f0101fc1:	85 c0                	test   %eax,%eax
f0101fc3:	7e 08                	jle    f0101fcd <process_command+0xcb>
	return index;
f0101fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fc8:	e9 6e 03 00 00       	jmp    f010233b <process_command+0x439>
	}

	else{
		if(LIST_SIZE((&foundCommands))==0){
f0101fcd:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f0101fd2:	85 c0                	test   %eax,%eax
f0101fd4:	0f 85 9f 00 00 00    	jne    f0102079 <process_command+0x177>
		LIST_INSERT_HEAD(&foundCommands,&commands[index]);
f0101fda:	8b 15 d8 40 3f f0    	mov    0xf03f40d8,%edx
f0101fe0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101fe3:	89 c8                	mov    %ecx,%eax
f0101fe5:	01 c0                	add    %eax,%eax
f0101fe7:	01 c8                	add    %ecx,%eax
f0101fe9:	c1 e0 03             	shl    $0x3,%eax
f0101fec:	05 50 15 17 f0       	add    $0xf0171550,%eax
f0101ff1:	89 10                	mov    %edx,(%eax)
f0101ff3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101ff6:	89 d0                	mov    %edx,%eax
f0101ff8:	01 c0                	add    %eax,%eax
f0101ffa:	01 d0                	add    %edx,%eax
f0101ffc:	c1 e0 03             	shl    $0x3,%eax
f0101fff:	05 50 15 17 f0       	add    $0xf0171550,%eax
f0102004:	8b 00                	mov    (%eax),%eax
f0102006:	85 c0                	test   %eax,%eax
f0102008:	74 1c                	je     f0102026 <process_command+0x124>
f010200a:	8b 15 d8 40 3f f0    	mov    0xf03f40d8,%edx
f0102010:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102013:	89 c8                	mov    %ecx,%eax
f0102015:	01 c0                	add    %eax,%eax
f0102017:	01 c8                	add    %ecx,%eax
f0102019:	c1 e0 03             	shl    $0x3,%eax
f010201c:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102021:	89 42 14             	mov    %eax,0x14(%edx)
f0102024:	eb 16                	jmp    f010203c <process_command+0x13a>
f0102026:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102029:	89 d0                	mov    %edx,%eax
f010202b:	01 c0                	add    %eax,%eax
f010202d:	01 d0                	add    %edx,%eax
f010202f:	c1 e0 03             	shl    $0x3,%eax
f0102032:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102037:	a3 dc 40 3f f0       	mov    %eax,0xf03f40dc
f010203c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010203f:	89 d0                	mov    %edx,%eax
f0102041:	01 c0                	add    %eax,%eax
f0102043:	01 d0                	add    %edx,%eax
f0102045:	c1 e0 03             	shl    $0x3,%eax
f0102048:	05 40 15 17 f0       	add    $0xf0171540,%eax
f010204d:	a3 d8 40 3f f0       	mov    %eax,0xf03f40d8
f0102052:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102055:	89 d0                	mov    %edx,%eax
f0102057:	01 c0                	add    %eax,%eax
f0102059:	01 d0                	add    %edx,%eax
f010205b:	c1 e0 03             	shl    $0x3,%eax
f010205e:	05 54 15 17 f0       	add    $0xf0171554,%eax
f0102063:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102069:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f010206e:	40                   	inc    %eax
f010206f:	a3 e4 40 3f f0       	mov    %eax,0xf03f40e4
f0102074:	e9 9a 00 00 00       	jmp    f0102113 <process_command+0x211>
		}
		else{
		LIST_INSERT_TAIL(&foundCommands,&commands[index] );
f0102079:	8b 15 dc 40 3f f0    	mov    0xf03f40dc,%edx
f010207f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102082:	89 c8                	mov    %ecx,%eax
f0102084:	01 c0                	add    %eax,%eax
f0102086:	01 c8                	add    %ecx,%eax
f0102088:	c1 e0 03             	shl    $0x3,%eax
f010208b:	05 54 15 17 f0       	add    $0xf0171554,%eax
f0102090:	89 10                	mov    %edx,(%eax)
f0102092:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102095:	89 d0                	mov    %edx,%eax
f0102097:	01 c0                	add    %eax,%eax
f0102099:	01 d0                	add    %edx,%eax
f010209b:	c1 e0 03             	shl    $0x3,%eax
f010209e:	05 54 15 17 f0       	add    $0xf0171554,%eax
f01020a3:	8b 00                	mov    (%eax),%eax
f01020a5:	85 c0                	test   %eax,%eax
f01020a7:	74 1c                	je     f01020c5 <process_command+0x1c3>
f01020a9:	8b 15 dc 40 3f f0    	mov    0xf03f40dc,%edx
f01020af:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020b2:	89 c8                	mov    %ecx,%eax
f01020b4:	01 c0                	add    %eax,%eax
f01020b6:	01 c8                	add    %ecx,%eax
f01020b8:	c1 e0 03             	shl    $0x3,%eax
f01020bb:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01020c0:	89 42 10             	mov    %eax,0x10(%edx)
f01020c3:	eb 16                	jmp    f01020db <process_command+0x1d9>
f01020c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020c8:	89 d0                	mov    %edx,%eax
f01020ca:	01 c0                	add    %eax,%eax
f01020cc:	01 d0                	add    %edx,%eax
f01020ce:	c1 e0 03             	shl    $0x3,%eax
f01020d1:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01020d6:	a3 d8 40 3f f0       	mov    %eax,0xf03f40d8
f01020db:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020de:	89 d0                	mov    %edx,%eax
f01020e0:	01 c0                	add    %eax,%eax
f01020e2:	01 d0                	add    %edx,%eax
f01020e4:	c1 e0 03             	shl    $0x3,%eax
f01020e7:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01020ec:	a3 dc 40 3f f0       	mov    %eax,0xf03f40dc
f01020f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f4:	89 d0                	mov    %edx,%eax
f01020f6:	01 c0                	add    %eax,%eax
f01020f8:	01 d0                	add    %edx,%eax
f01020fa:	c1 e0 03             	shl    $0x3,%eax
f01020fd:	05 50 15 17 f0       	add    $0xf0171550,%eax
f0102102:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102108:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f010210d:	40                   	inc    %eax
f010210e:	a3 e4 40 3f f0       	mov    %eax,0xf03f40e4
		}

		return CMD_INV_NUM_ARGS;
f0102113:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102118:	e9 1e 02 00 00       	jmp    f010233b <process_command+0x439>
	}
	}


	else{
	int count=0;
f010211d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int index;
	bool isexist=0;
f0102124:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	char**ccad;
		ccad=arguments;
f010212b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010212e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	for(int i=0 ;i<NUM_OF_COMMANDS;i++){
f0102131:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0102138:	e9 dc 01 00 00       	jmp    f0102319 <process_command+0x417>
count=0;
f010213d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
for(int z=0;z<strlen(ccad[0]);z++){
f0102144:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010214b:	eb 5c                	jmp    f01021a9 <process_command+0x2a7>

	if(strfind(commands[i].name,' ')!=strfind(commands[i].name,ccad[0][z])){
f010214d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102150:	89 d0                	mov    %edx,%eax
f0102152:	01 c0                	add    %eax,%eax
f0102154:	01 d0                	add    %edx,%eax
f0102156:	c1 e0 03             	shl    $0x3,%eax
f0102159:	05 40 15 17 f0       	add    $0xf0171540,%eax
f010215e:	8b 00                	mov    (%eax),%eax
f0102160:	83 ec 08             	sub    $0x8,%esp
f0102163:	6a 20                	push   $0x20
f0102165:	50                   	push   %eax
f0102166:	e8 3b fb 01 00       	call   f0121ca6 <strfind>
f010216b:	83 c4 10             	add    $0x10,%esp
f010216e:	89 c3                	mov    %eax,%ebx
f0102170:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102173:	8b 10                	mov    (%eax),%edx
f0102175:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102178:	01 d0                	add    %edx,%eax
f010217a:	8a 00                	mov    (%eax),%al
f010217c:	0f be d0             	movsbl %al,%edx
f010217f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102182:	89 c8                	mov    %ecx,%eax
f0102184:	01 c0                	add    %eax,%eax
f0102186:	01 c8                	add    %ecx,%eax
f0102188:	c1 e0 03             	shl    $0x3,%eax
f010218b:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102190:	8b 00                	mov    (%eax),%eax
f0102192:	83 ec 08             	sub    $0x8,%esp
f0102195:	52                   	push   %edx
f0102196:	50                   	push   %eax
f0102197:	e8 0a fb 01 00       	call   f0121ca6 <strfind>
f010219c:	83 c4 10             	add    $0x10,%esp
f010219f:	39 c3                	cmp    %eax,%ebx
f01021a1:	74 03                	je     f01021a6 <process_command+0x2a4>

count++;
f01021a3:	ff 45 e8             	incl   -0x18(%ebp)
	bool isexist=0;
	char**ccad;
		ccad=arguments;
	for(int i=0 ;i<NUM_OF_COMMANDS;i++){
count=0;
for(int z=0;z<strlen(ccad[0]);z++){
f01021a6:	ff 45 dc             	incl   -0x24(%ebp)
f01021a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01021ac:	8b 00                	mov    (%eax),%eax
f01021ae:	83 ec 0c             	sub    $0xc,%esp
f01021b1:	50                   	push   %eax
f01021b2:	e8 2d f9 01 00       	call   f0121ae4 <strlen>
f01021b7:	83 c4 10             	add    $0x10,%esp
f01021ba:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01021bd:	7f 8e                	jg     f010214d <process_command+0x24b>

count++;
//index=i;
	}
	}
if(count>=3){
f01021bf:	83 7d e8 02          	cmpl   $0x2,-0x18(%ebp)
f01021c3:	0f 8e 4d 01 00 00    	jle    f0102316 <process_command+0x414>
	if(LIST_SIZE((&foundCommands))==0){
f01021c9:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f01021ce:	85 c0                	test   %eax,%eax
f01021d0:	0f 85 9f 00 00 00    	jne    f0102275 <process_command+0x373>
		LIST_INSERT_HEAD(&foundCommands,&commands[i]);
f01021d6:	8b 15 d8 40 3f f0    	mov    0xf03f40d8,%edx
f01021dc:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01021df:	89 c8                	mov    %ecx,%eax
f01021e1:	01 c0                	add    %eax,%eax
f01021e3:	01 c8                	add    %ecx,%eax
f01021e5:	c1 e0 03             	shl    $0x3,%eax
f01021e8:	05 50 15 17 f0       	add    $0xf0171550,%eax
f01021ed:	89 10                	mov    %edx,(%eax)
f01021ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01021f2:	89 d0                	mov    %edx,%eax
f01021f4:	01 c0                	add    %eax,%eax
f01021f6:	01 d0                	add    %edx,%eax
f01021f8:	c1 e0 03             	shl    $0x3,%eax
f01021fb:	05 50 15 17 f0       	add    $0xf0171550,%eax
f0102200:	8b 00                	mov    (%eax),%eax
f0102202:	85 c0                	test   %eax,%eax
f0102204:	74 1c                	je     f0102222 <process_command+0x320>
f0102206:	8b 15 d8 40 3f f0    	mov    0xf03f40d8,%edx
f010220c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010220f:	89 c8                	mov    %ecx,%eax
f0102211:	01 c0                	add    %eax,%eax
f0102213:	01 c8                	add    %ecx,%eax
f0102215:	c1 e0 03             	shl    $0x3,%eax
f0102218:	05 40 15 17 f0       	add    $0xf0171540,%eax
f010221d:	89 42 14             	mov    %eax,0x14(%edx)
f0102220:	eb 16                	jmp    f0102238 <process_command+0x336>
f0102222:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102225:	89 d0                	mov    %edx,%eax
f0102227:	01 c0                	add    %eax,%eax
f0102229:	01 d0                	add    %edx,%eax
f010222b:	c1 e0 03             	shl    $0x3,%eax
f010222e:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102233:	a3 dc 40 3f f0       	mov    %eax,0xf03f40dc
f0102238:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010223b:	89 d0                	mov    %edx,%eax
f010223d:	01 c0                	add    %eax,%eax
f010223f:	01 d0                	add    %edx,%eax
f0102241:	c1 e0 03             	shl    $0x3,%eax
f0102244:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102249:	a3 d8 40 3f f0       	mov    %eax,0xf03f40d8
f010224e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102251:	89 d0                	mov    %edx,%eax
f0102253:	01 c0                	add    %eax,%eax
f0102255:	01 d0                	add    %edx,%eax
f0102257:	c1 e0 03             	shl    $0x3,%eax
f010225a:	05 54 15 17 f0       	add    $0xf0171554,%eax
f010225f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102265:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f010226a:	40                   	inc    %eax
f010226b:	a3 e4 40 3f f0       	mov    %eax,0xf03f40e4
f0102270:	e9 9a 00 00 00       	jmp    f010230f <process_command+0x40d>
		}
		else{
		LIST_INSERT_TAIL(&foundCommands,&commands[i] );
f0102275:	8b 15 dc 40 3f f0    	mov    0xf03f40dc,%edx
f010227b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010227e:	89 c8                	mov    %ecx,%eax
f0102280:	01 c0                	add    %eax,%eax
f0102282:	01 c8                	add    %ecx,%eax
f0102284:	c1 e0 03             	shl    $0x3,%eax
f0102287:	05 54 15 17 f0       	add    $0xf0171554,%eax
f010228c:	89 10                	mov    %edx,(%eax)
f010228e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102291:	89 d0                	mov    %edx,%eax
f0102293:	01 c0                	add    %eax,%eax
f0102295:	01 d0                	add    %edx,%eax
f0102297:	c1 e0 03             	shl    $0x3,%eax
f010229a:	05 54 15 17 f0       	add    $0xf0171554,%eax
f010229f:	8b 00                	mov    (%eax),%eax
f01022a1:	85 c0                	test   %eax,%eax
f01022a3:	74 1c                	je     f01022c1 <process_command+0x3bf>
f01022a5:	8b 15 dc 40 3f f0    	mov    0xf03f40dc,%edx
f01022ab:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01022ae:	89 c8                	mov    %ecx,%eax
f01022b0:	01 c0                	add    %eax,%eax
f01022b2:	01 c8                	add    %ecx,%eax
f01022b4:	c1 e0 03             	shl    $0x3,%eax
f01022b7:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01022bc:	89 42 10             	mov    %eax,0x10(%edx)
f01022bf:	eb 16                	jmp    f01022d7 <process_command+0x3d5>
f01022c1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01022c4:	89 d0                	mov    %edx,%eax
f01022c6:	01 c0                	add    %eax,%eax
f01022c8:	01 d0                	add    %edx,%eax
f01022ca:	c1 e0 03             	shl    $0x3,%eax
f01022cd:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01022d2:	a3 d8 40 3f f0       	mov    %eax,0xf03f40d8
f01022d7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01022da:	89 d0                	mov    %edx,%eax
f01022dc:	01 c0                	add    %eax,%eax
f01022de:	01 d0                	add    %edx,%eax
f01022e0:	c1 e0 03             	shl    $0x3,%eax
f01022e3:	05 40 15 17 f0       	add    $0xf0171540,%eax
f01022e8:	a3 dc 40 3f f0       	mov    %eax,0xf03f40dc
f01022ed:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01022f0:	89 d0                	mov    %edx,%eax
f01022f2:	01 c0                	add    %eax,%eax
f01022f4:	01 d0                	add    %edx,%eax
f01022f6:	c1 e0 03             	shl    $0x3,%eax
f01022f9:	05 50 15 17 f0       	add    $0xf0171550,%eax
f01022fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102304:	a1 e4 40 3f f0       	mov    0xf03f40e4,%eax
f0102309:	40                   	inc    %eax
f010230a:	a3 e4 40 3f f0       	mov    %eax,0xf03f40e4
		}
	isexist=1;
f010230f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	int count=0;
	int index;
	bool isexist=0;
	char**ccad;
		ccad=arguments;
	for(int i=0 ;i<NUM_OF_COMMANDS;i++){
f0102316:	ff 45 e0             	incl   -0x20(%ebp)
f0102319:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010231c:	a1 48 19 17 f0       	mov    0xf0171948,%eax
f0102321:	39 c2                	cmp    %eax,%edx
f0102323:	0f 82 14 fe ff ff    	jb     f010213d <process_command+0x23b>


	}

	}
	if(!isexist){
f0102329:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010232d:	75 07                	jne    f0102336 <process_command+0x434>
	return CMD_INVALID;
f010232f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102334:	eb 05                	jmp    f010233b <process_command+0x439>
		}
	else{
		return CMD_MATCHED;
f0102336:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
	}



}
f010233b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010233e:	c9                   	leave  
f010233f:	c3                   	ret    

f0102340 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102340:	55                   	push   %ebp
f0102341:	89 e5                	mov    %esp,%ebp
f0102343:	c7 05 a4 40 3f f0 00 	movl   $0x0,0xf03f40a4
f010234a:	00 00 00 
f010234d:	90                   	nop
f010234e:	5d                   	pop    %ebp
f010234f:	c3                   	ret    

f0102350 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102350:	55                   	push   %ebp
f0102351:	89 e5                	mov    %esp,%ebp
f0102353:	c7 05 a4 40 3f f0 01 	movl   $0x1,0xf03f40a4
f010235a:	00 00 00 
f010235d:	90                   	nop
f010235e:	5d                   	pop    %ebp
f010235f:	c3                   	ret    

f0102360 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102360:	55                   	push   %ebp
f0102361:	89 e5                	mov    %esp,%ebp
f0102363:	c7 05 a4 40 3f f0 02 	movl   $0x2,0xf03f40a4
f010236a:	00 00 00 
f010236d:	90                   	nop
f010236e:	5d                   	pop    %ebp
f010236f:	c3                   	ret    

f0102370 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102370:	55                   	push   %ebp
f0102371:	89 e5                	mov    %esp,%ebp
f0102373:	c7 05 a4 40 3f f0 03 	movl   $0x3,0xf03f40a4
f010237a:	00 00 00 
f010237d:	90                   	nop
f010237e:	5d                   	pop    %ebp
f010237f:	c3                   	ret    

f0102380 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102380:	55                   	push   %ebp
f0102381:	89 e5                	mov    %esp,%ebp
f0102383:	c7 05 a4 40 3f f0 04 	movl   $0x4,0xf03f40a4
f010238a:	00 00 00 
f010238d:	90                   	nop
f010238e:	5d                   	pop    %ebp
f010238f:	c3                   	ret    

f0102390 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102390:	55                   	push   %ebp
f0102391:	89 e5                	mov    %esp,%ebp
f0102393:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f0102398:	85 c0                	test   %eax,%eax
f010239a:	75 04                	jne    f01023a0 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010239c:	b0 01                	mov    $0x1,%al
f010239e:	eb 02                	jmp    f01023a2 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01023a0:	b0 00                	mov    $0x0,%al
f01023a2:	5d                   	pop    %ebp
f01023a3:	c3                   	ret    

f01023a4 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01023a4:	55                   	push   %ebp
f01023a5:	89 e5                	mov    %esp,%ebp
f01023a7:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f01023ac:	83 f8 01             	cmp    $0x1,%eax
f01023af:	75 04                	jne    f01023b5 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01023b1:	b0 01                	mov    $0x1,%al
f01023b3:	eb 02                	jmp    f01023b7 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01023b5:	b0 00                	mov    $0x0,%al
f01023b7:	5d                   	pop    %ebp
f01023b8:	c3                   	ret    

f01023b9 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01023b9:	55                   	push   %ebp
f01023ba:	89 e5                	mov    %esp,%ebp
f01023bc:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f01023c1:	83 f8 02             	cmp    $0x2,%eax
f01023c4:	75 04                	jne    f01023ca <isKHeapPlacementStrategyBESTFIT+0x11>
f01023c6:	b0 01                	mov    $0x1,%al
f01023c8:	eb 02                	jmp    f01023cc <isKHeapPlacementStrategyBESTFIT+0x13>
f01023ca:	b0 00                	mov    $0x0,%al
f01023cc:	5d                   	pop    %ebp
f01023cd:	c3                   	ret    

f01023ce <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01023ce:	55                   	push   %ebp
f01023cf:	89 e5                	mov    %esp,%ebp
f01023d1:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f01023d6:	83 f8 03             	cmp    $0x3,%eax
f01023d9:	75 04                	jne    f01023df <isKHeapPlacementStrategyNEXTFIT+0x11>
f01023db:	b0 01                	mov    $0x1,%al
f01023dd:	eb 02                	jmp    f01023e1 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01023df:	b0 00                	mov    $0x0,%al
f01023e1:	5d                   	pop    %ebp
f01023e2:	c3                   	ret    

f01023e3 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01023e3:	55                   	push   %ebp
f01023e4:	89 e5                	mov    %esp,%ebp
f01023e6:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f01023eb:	83 f8 04             	cmp    $0x4,%eax
f01023ee:	75 04                	jne    f01023f4 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01023f0:	b0 01                	mov    $0x1,%al
f01023f2:	eb 02                	jmp    f01023f6 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01023f4:	b0 00                	mov    $0x0,%al
f01023f6:	5d                   	pop    %ebp
f01023f7:	c3                   	ret    

f01023f8 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01023f8:	55                   	push   %ebp
f01023f9:	89 e5                	mov    %esp,%ebp
f01023fb:	c7 05 64 40 3f f0 01 	movl   $0x1,0xf03f4064
f0102402:	00 00 00 
f0102405:	90                   	nop
f0102406:	5d                   	pop    %ebp
f0102407:	c3                   	ret    

f0102408 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102408:	55                   	push   %ebp
f0102409:	89 e5                	mov    %esp,%ebp
f010240b:	c7 05 64 40 3f f0 02 	movl   $0x2,0xf03f4064
f0102412:	00 00 00 
f0102415:	90                   	nop
f0102416:	5d                   	pop    %ebp
f0102417:	c3                   	ret    

f0102418 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102418:	55                   	push   %ebp
f0102419:	89 e5                	mov    %esp,%ebp
f010241b:	c7 05 64 40 3f f0 03 	movl   $0x3,0xf03f4064
f0102422:	00 00 00 
f0102425:	90                   	nop
f0102426:	5d                   	pop    %ebp
f0102427:	c3                   	ret    

f0102428 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102428:	55                   	push   %ebp
f0102429:	89 e5                	mov    %esp,%ebp
f010242b:	c7 05 64 40 3f f0 04 	movl   $0x4,0xf03f4064
f0102432:	00 00 00 
f0102435:	90                   	nop
f0102436:	5d                   	pop    %ebp
f0102437:	c3                   	ret    

f0102438 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102438:	55                   	push   %ebp
f0102439:	89 e5                	mov    %esp,%ebp
f010243b:	a1 64 40 3f f0       	mov    0xf03f4064,%eax
f0102440:	83 f8 01             	cmp    $0x1,%eax
f0102443:	75 04                	jne    f0102449 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102445:	b0 01                	mov    $0x1,%al
f0102447:	eb 02                	jmp    f010244b <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0102449:	b0 00                	mov    $0x0,%al
f010244b:	5d                   	pop    %ebp
f010244c:	c3                   	ret    

f010244d <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010244d:	55                   	push   %ebp
f010244e:	89 e5                	mov    %esp,%ebp
f0102450:	a1 64 40 3f f0       	mov    0xf03f4064,%eax
f0102455:	83 f8 02             	cmp    $0x2,%eax
f0102458:	75 04                	jne    f010245e <isUHeapPlacementStrategyBESTFIT+0x11>
f010245a:	b0 01                	mov    $0x1,%al
f010245c:	eb 02                	jmp    f0102460 <isUHeapPlacementStrategyBESTFIT+0x13>
f010245e:	b0 00                	mov    $0x0,%al
f0102460:	5d                   	pop    %ebp
f0102461:	c3                   	ret    

f0102462 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102462:	55                   	push   %ebp
f0102463:	89 e5                	mov    %esp,%ebp
f0102465:	a1 64 40 3f f0       	mov    0xf03f4064,%eax
f010246a:	83 f8 03             	cmp    $0x3,%eax
f010246d:	75 04                	jne    f0102473 <isUHeapPlacementStrategyNEXTFIT+0x11>
f010246f:	b0 01                	mov    $0x1,%al
f0102471:	eb 02                	jmp    f0102475 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102473:	b0 00                	mov    $0x0,%al
f0102475:	5d                   	pop    %ebp
f0102476:	c3                   	ret    

f0102477 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102477:	55                   	push   %ebp
f0102478:	89 e5                	mov    %esp,%ebp
f010247a:	a1 64 40 3f f0       	mov    0xf03f4064,%eax
f010247f:	83 f8 04             	cmp    $0x4,%eax
f0102482:	75 04                	jne    f0102488 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102484:	b0 01                	mov    $0x1,%al
f0102486:	eb 02                	jmp    f010248a <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102488:	b0 00                	mov    $0x0,%al
f010248a:	5d                   	pop    %ebp
f010248b:	c3                   	ret    

f010248c <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010248c:	55                   	push   %ebp
f010248d:	89 e5                	mov    %esp,%ebp
f010248f:	53                   	push   %ebx
f0102490:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102493:	8b 45 08             	mov    0x8(%ebp),%eax
f0102496:	c1 e8 0c             	shr    $0xc,%eax
f0102499:	89 c2                	mov    %eax,%edx
f010249b:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01024a0:	39 c2                	cmp    %eax,%edx
f01024a2:	72 14                	jb     f01024b8 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01024a4:	83 ec 04             	sub    $0x4,%esp
f01024a7:	68 b0 36 12 f0       	push   $0xf01236b0
f01024ac:	6a 55                	push   $0x55
f01024ae:	68 d8 36 12 f0       	push   $0xf01236d8
f01024b3:	e8 62 dd ff ff       	call   f010021a <_panic>
	return &frames_info[PPN(physical_address)];
f01024b8:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01024be:	8b 45 08             	mov    0x8(%ebp),%eax
f01024c1:	c1 e8 0c             	shr    $0xc,%eax
f01024c4:	89 c2                	mov    %eax,%edx
f01024c6:	89 d0                	mov    %edx,%eax
f01024c8:	01 c0                	add    %eax,%eax
f01024ca:	01 d0                	add    %edx,%eax
f01024cc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01024d3:	01 d8                	add    %ebx,%eax
f01024d5:	01 d0                	add    %edx,%eax
f01024d7:	01 c8                	add    %ecx,%eax
}
f01024d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024dc:	c9                   	leave  
f01024dd:	c3                   	ret    

f01024de <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01024de:	55                   	push   %ebp
f01024df:	89 e5                	mov    %esp,%ebp
f01024e1:	53                   	push   %ebx
f01024e2:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01024e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01024ec:	eb 3b                	jmp    f0102529 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01024ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01024f1:	89 d0                	mov    %edx,%eax
f01024f3:	01 c0                	add    %eax,%eax
f01024f5:	01 d0                	add    %edx,%eax
f01024f7:	c1 e0 03             	shl    $0x3,%eax
f01024fa:	05 44 15 17 f0       	add    $0xf0171544,%eax
f01024ff:	8b 10                	mov    (%eax),%edx
f0102501:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102504:	89 c8                	mov    %ecx,%eax
f0102506:	01 c0                	add    %eax,%eax
f0102508:	01 c8                	add    %ecx,%eax
f010250a:	c1 e0 03             	shl    $0x3,%eax
f010250d:	05 40 15 17 f0       	add    $0xf0171540,%eax
f0102512:	8b 00                	mov    (%eax),%eax
f0102514:	83 ec 04             	sub    $0x4,%esp
f0102517:	52                   	push   %edx
f0102518:	50                   	push   %eax
f0102519:	68 5b 3f 12 f0       	push   $0xf0123f5b
f010251e:	e8 78 e9 ff ff       	call   f0100e9b <cprintf>
f0102523:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102526:	ff 45 f4             	incl   -0xc(%ebp)
f0102529:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010252c:	a1 48 19 17 f0       	mov    0xf0171948,%eax
f0102531:	39 c2                	cmp    %eax,%edx
f0102533:	72 b9                	jb     f01024ee <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	68 64 3f 12 f0       	push   $0xf0123f64
f010253d:	e8 59 e9 ff ff       	call   f0100e9b <cprintf>
f0102542:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102545:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010254c:	eb 42                	jmp    f0102590 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010254e:	8b 0d 8c 1b 17 f0    	mov    0xf0171b8c,%ecx
f0102554:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102557:	89 d0                	mov    %edx,%eax
f0102559:	01 c0                	add    %eax,%eax
f010255b:	01 d0                	add    %edx,%eax
f010255d:	c1 e0 02             	shl    $0x2,%eax
f0102560:	01 c8                	add    %ecx,%eax
f0102562:	8b 50 04             	mov    0x4(%eax),%edx
f0102565:	8b 1d 8c 1b 17 f0    	mov    0xf0171b8c,%ebx
f010256b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010256e:	89 c8                	mov    %ecx,%eax
f0102570:	01 c0                	add    %eax,%eax
f0102572:	01 c8                	add    %ecx,%eax
f0102574:	c1 e0 02             	shl    $0x2,%eax
f0102577:	01 d8                	add    %ebx,%eax
f0102579:	8b 00                	mov    (%eax),%eax
f010257b:	83 ec 04             	sub    $0x4,%esp
f010257e:	52                   	push   %edx
f010257f:	50                   	push   %eax
f0102580:	68 79 3f 12 f0       	push   $0xf0123f79
f0102585:	e8 11 e9 ff ff       	call   f0100e9b <cprintf>
f010258a:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010258d:	ff 45 f4             	incl   -0xc(%ebp)
f0102590:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f0102595:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102598:	7c b4                	jl     f010254e <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010259a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01025a2:	c9                   	leave  
f01025a3:	c3                   	ret    

f01025a4 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01025a4:	55                   	push   %ebp
f01025a5:	89 e5                	mov    %esp,%ebp
f01025a7:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01025aa:	83 ec 0c             	sub    $0xc,%esp
f01025ad:	68 95 3f 12 f0       	push   $0xf0123f95
f01025b2:	e8 e4 e8 ff ff       	call   f0100e9b <cprintf>
f01025b7:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01025ba:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01025bf:	83 ec 04             	sub    $0x4,%esp
f01025c2:	50                   	push   %eax
f01025c3:	68 0c 00 10 f0       	push   $0xf010000c
f01025c8:	68 b0 3f 12 f0       	push   $0xf0123fb0
f01025cd:	e8 c9 e8 ff ff       	call   f0100e9b <cprintf>
f01025d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01025d5:	b8 79 33 12 00       	mov    $0x123379,%eax
f01025da:	83 ec 04             	sub    $0x4,%esp
f01025dd:	50                   	push   %eax
f01025de:	68 79 33 12 f0       	push   $0xf0123379
f01025e3:	68 ec 3f 12 f0       	push   $0xf0123fec
f01025e8:	e8 ae e8 ff ff       	call   f0100e9b <cprintf>
f01025ed:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01025f0:	b8 dd 34 3f 00       	mov    $0x3f34dd,%eax
f01025f5:	83 ec 04             	sub    $0x4,%esp
f01025f8:	50                   	push   %eax
f01025f9:	68 dd 34 3f f0       	push   $0xf03f34dd
f01025fe:	68 28 40 12 f0       	push   $0xf0124028
f0102603:	e8 93 e8 ff ff       	call   f0100e9b <cprintf>
f0102608:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010260b:	b8 ec 67 45 00       	mov    $0x4567ec,%eax
f0102610:	83 ec 04             	sub    $0x4,%esp
f0102613:	50                   	push   %eax
f0102614:	68 ec 67 45 f0       	push   $0xf04567ec
f0102619:	68 70 40 12 f0       	push   $0xf0124070
f010261e:	e8 78 e8 ff ff       	call   f0100e9b <cprintf>
f0102623:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102626:	b8 ec 67 45 f0       	mov    $0xf04567ec,%eax
f010262b:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102631:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102636:	29 c2                	sub    %eax,%edx
f0102638:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010263a:	85 c0                	test   %eax,%eax
f010263c:	79 05                	jns    f0102643 <command_kernel_info+0x9f>
f010263e:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102643:	c1 f8 0a             	sar    $0xa,%eax
f0102646:	83 ec 08             	sub    $0x8,%esp
f0102649:	50                   	push   %eax
f010264a:	68 ac 40 12 f0       	push   $0xf01240ac
f010264f:	e8 47 e8 ff ff       	call   f0100e9b <cprintf>
f0102654:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102657:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010265c:	c9                   	leave  
f010265d:	c3                   	ret    

f010265e <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010265e:	55                   	push   %ebp
f010265f:	89 e5                	mov    %esp,%ebp
f0102661:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0102664:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102668:	75 37                	jne    f01026a1 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010266a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010266d:	83 c0 04             	add    $0x4,%eax
f0102670:	8b 00                	mov    (%eax),%eax
f0102672:	83 ec 04             	sub    $0x4,%esp
f0102675:	6a 10                	push   $0x10
f0102677:	6a 00                	push   $0x0
f0102679:	50                   	push   %eax
f010267a:	e8 c5 f7 01 00       	call   f0121e44 <strtol>
f010267f:	83 c4 10             	add    $0x10,%esp
f0102682:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0102685:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102688:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010268b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010268e:	83 c0 08             	add    $0x8,%eax
f0102691:	8b 00                	mov    (%eax),%eax
f0102693:	8a 00                	mov    (%eax),%al
f0102695:	88 c2                	mov    %al,%dl
f0102697:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010269a:	88 10                	mov    %dl,(%eax)
f010269c:	e9 bc 00 00 00       	jmp    f010275d <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01026a1:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01026a5:	0f 85 a2 00 00 00    	jne    f010274d <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 0a                	push   $0xa
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 84 f7 01 00       	call   f0121e44 <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01026c6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01026cd:	83 ec 04             	sub    $0x4,%esp
f01026d0:	6a 00                	push   $0x0
f01026d2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01026d5:	50                   	push   %eax
f01026d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01026d9:	e8 6a 7f 00 00       	call   f010a648 <envid2env>
f01026de:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01026e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026e4:	83 c0 08             	add    $0x8,%eax
f01026e7:	8b 00                	mov    (%eax),%eax
f01026e9:	83 ec 04             	sub    $0x4,%esp
f01026ec:	6a 10                	push   $0x10
f01026ee:	6a 00                	push   $0x0
f01026f0:	50                   	push   %eax
f01026f1:	e8 4e f7 01 00       	call   f0121e44 <strtol>
f01026f6:	83 c4 10             	add    $0x10,%esp
f01026f9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01026fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01026ff:	85 c0                	test   %eax,%eax
f0102701:	75 07                	jne    f010270a <command_writeusermem+0xac>
f0102703:	b8 00 00 00 00       	mov    $0x0,%eax
f0102708:	eb 58                	jmp    f0102762 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010270a:	0f 20 d8             	mov    %cr3,%eax
f010270d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102710:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102713:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102716:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102719:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010271f:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102722:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102725:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102728:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010272b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010272e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102731:	83 c0 0c             	add    $0xc,%eax
f0102734:	8b 00                	mov    (%eax),%eax
f0102736:	8a 00                	mov    (%eax),%al
f0102738:	88 c2                	mov    %al,%dl
f010273a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010273d:	88 10                	mov    %dl,(%eax)
f010273f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102742:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102745:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102748:	0f 22 d8             	mov    %eax,%cr3
f010274b:	eb 10                	jmp    f010275d <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010274d:	83 ec 0c             	sub    $0xc,%esp
f0102750:	68 d8 40 12 f0       	push   $0xf01240d8
f0102755:	e8 41 e7 ff ff       	call   f0100e9b <cprintf>
f010275a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010276a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010276d:	83 c0 04             	add    $0x4,%eax
f0102770:	8b 00                	mov    (%eax),%eax
f0102772:	83 ec 04             	sub    $0x4,%esp
f0102775:	6a 10                	push   $0x10
f0102777:	6a 00                	push   $0x0
f0102779:	50                   	push   %eax
f010277a:	e8 c5 f6 01 00       	call   f0121e44 <strtol>
f010277f:	83 c4 10             	add    $0x10,%esp
f0102782:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102787:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010278a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102791:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102794:	83 c0 08             	add    $0x8,%eax
f0102797:	8b 00                	mov    (%eax),%eax
f0102799:	83 ec 0c             	sub    $0xc,%esp
f010279c:	50                   	push   %eax
f010279d:	e8 42 f3 01 00       	call   f0121ae4 <strlen>
f01027a2:	83 c4 10             	add    $0x10,%esp
f01027a5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01027a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01027af:	eb 1c                	jmp    f01027cd <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01027b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027b4:	83 c0 08             	add    $0x8,%eax
f01027b7:	8b 10                	mov    (%eax),%edx
f01027b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027bc:	01 d0                	add    %edx,%eax
f01027be:	8a 00                	mov    (%eax),%al
f01027c0:	88 c2                	mov    %al,%dl
f01027c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01027c5:	88 10                	mov    %dl,(%eax)
		address++;
f01027c7:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f01027ca:	ff 45 f0             	incl   -0x10(%ebp)
f01027cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01027d3:	7c dc                	jl     f01027b1 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f01027d5:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01027da:	c9                   	leave  
f01027db:	c3                   	ret    

f01027dc <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01027dc:	55                   	push   %ebp
f01027dd:	89 e5                	mov    %esp,%ebp
f01027df:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01027e2:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01027e6:	75 42                	jne    f010282a <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01027e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027eb:	83 c0 04             	add    $0x4,%eax
f01027ee:	8b 00                	mov    (%eax),%eax
f01027f0:	83 ec 04             	sub    $0x4,%esp
f01027f3:	6a 10                	push   $0x10
f01027f5:	6a 00                	push   $0x0
f01027f7:	50                   	push   %eax
f01027f8:	e8 47 f6 01 00       	call   f0121e44 <strtol>
f01027fd:	83 c4 10             	add    $0x10,%esp
f0102800:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102803:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102806:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0102809:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010280c:	8a 00                	mov    (%eax),%al
f010280e:	0f b6 c0             	movzbl %al,%eax
f0102811:	83 ec 04             	sub    $0x4,%esp
f0102814:	50                   	push   %eax
f0102815:	ff 75 d8             	pushl  -0x28(%ebp)
f0102818:	68 02 41 12 f0       	push   $0xf0124102
f010281d:	e8 79 e6 ff ff       	call   f0100e9b <cprintf>
f0102822:	83 c4 10             	add    $0x10,%esp
f0102825:	e9 c7 00 00 00       	jmp    f01028f1 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010282a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010282e:	0f 85 ad 00 00 00    	jne    f01028e1 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102834:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102837:	83 c0 04             	add    $0x4,%eax
f010283a:	8b 00                	mov    (%eax),%eax
f010283c:	83 ec 04             	sub    $0x4,%esp
f010283f:	6a 0a                	push   $0xa
f0102841:	6a 00                	push   $0x0
f0102843:	50                   	push   %eax
f0102844:	e8 fb f5 01 00       	call   f0121e44 <strtol>
f0102849:	83 c4 10             	add    $0x10,%esp
f010284c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010284f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102856:	83 ec 04             	sub    $0x4,%esp
f0102859:	6a 00                	push   $0x0
f010285b:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010285e:	50                   	push   %eax
f010285f:	ff 75 f4             	pushl  -0xc(%ebp)
f0102862:	e8 e1 7d 00 00       	call   f010a648 <envid2env>
f0102867:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010286a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010286d:	83 c0 08             	add    $0x8,%eax
f0102870:	8b 00                	mov    (%eax),%eax
f0102872:	83 ec 04             	sub    $0x4,%esp
f0102875:	6a 10                	push   $0x10
f0102877:	6a 00                	push   $0x0
f0102879:	50                   	push   %eax
f010287a:	e8 c5 f5 01 00       	call   f0121e44 <strtol>
f010287f:	83 c4 10             	add    $0x10,%esp
f0102882:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102885:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102888:	85 c0                	test   %eax,%eax
f010288a:	75 07                	jne    f0102893 <command_readusermem+0xb7>
f010288c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102891:	eb 63                	jmp    f01028f6 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102893:	0f 20 d8             	mov    %cr3,%eax
f0102896:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102899:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010289c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010289f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028a2:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01028a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01028ae:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01028b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01028b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01028b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01028ba:	8a 00                	mov    (%eax),%al
f01028bc:	0f b6 c0             	movzbl %al,%eax
f01028bf:	83 ec 04             	sub    $0x4,%esp
f01028c2:	50                   	push   %eax
f01028c3:	ff 75 f0             	pushl  -0x10(%ebp)
f01028c6:	68 02 41 12 f0       	push   $0xf0124102
f01028cb:	e8 cb e5 ff ff       	call   f0100e9b <cprintf>
f01028d0:	83 c4 10             	add    $0x10,%esp
f01028d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028d6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01028d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028dc:	0f 22 d8             	mov    %eax,%cr3
f01028df:	eb 10                	jmp    f01028f1 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01028e1:	83 ec 0c             	sub    $0xc,%esp
f01028e4:	68 1c 41 12 f0       	push   $0xf012411c
f01028e9:	e8 ad e5 ff ff       	call   f0100e9b <cprintf>
f01028ee:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01028f1:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01028f6:	c9                   	leave  
f01028f7:	c3                   	ret    

f01028f8 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01028f8:	55                   	push   %ebp
f01028f9:	89 e5                	mov    %esp,%ebp
f01028fb:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01028fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102901:	83 c0 04             	add    $0x4,%eax
f0102904:	8b 00                	mov    (%eax),%eax
f0102906:	83 ec 04             	sub    $0x4,%esp
f0102909:	6a 10                	push   $0x10
f010290b:	6a 00                	push   $0x0
f010290d:	50                   	push   %eax
f010290e:	e8 31 f5 01 00       	call   f0121e44 <strtol>
f0102913:	83 c4 10             	add    $0x10,%esp
f0102916:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010291b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010291e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102925:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102928:	8a 00                	mov    (%eax),%al
f010292a:	0f b6 c0             	movzbl %al,%eax
f010292d:	83 ec 08             	sub    $0x8,%esp
f0102930:	50                   	push   %eax
f0102931:	68 46 41 12 f0       	push   $0xf0124146
f0102936:	e8 60 e5 ff ff       	call   f0100e9b <cprintf>
f010293b:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010293e:	83 ec 0c             	sub    $0xc,%esp
f0102941:	68 49 41 12 f0       	push   $0xf0124149
f0102946:	e8 50 e5 ff ff       	call   f0100e9b <cprintf>
f010294b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010294e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102953:	c9                   	leave  
f0102954:	c3                   	ret    

f0102955 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102955:	55                   	push   %ebp
f0102956:	89 e5                	mov    %esp,%ebp
f0102958:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010295b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010295e:	83 c0 04             	add    $0x4,%eax
f0102961:	8b 00                	mov    (%eax),%eax
f0102963:	83 ec 04             	sub    $0x4,%esp
f0102966:	6a 0a                	push   $0xa
f0102968:	6a 00                	push   $0x0
f010296a:	50                   	push   %eax
f010296b:	e8 d4 f4 01 00       	call   f0121e44 <strtol>
f0102970:	83 c4 10             	add    $0x10,%esp
f0102973:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102976:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010297d:	83 ec 04             	sub    $0x4,%esp
f0102980:	6a 00                	push   $0x0
f0102982:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102985:	50                   	push   %eax
f0102986:	ff 75 ec             	pushl  -0x14(%ebp)
f0102989:	e8 ba 7c 00 00       	call   f010a648 <envid2env>
f010298e:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102991:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102994:	83 c0 08             	add    $0x8,%eax
f0102997:	8b 00                	mov    (%eax),%eax
f0102999:	83 ec 04             	sub    $0x4,%esp
f010299c:	6a 10                	push   $0x10
f010299e:	6a 00                	push   $0x0
f01029a0:	50                   	push   %eax
f01029a1:	e8 9e f4 01 00       	call   f0121e44 <strtol>
f01029a6:	83 c4 10             	add    $0x10,%esp
f01029a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01029ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029af:	83 c0 0c             	add    $0xc,%eax
f01029b2:	8b 00                	mov    (%eax),%eax
f01029b4:	83 ec 04             	sub    $0x4,%esp
f01029b7:	6a 0a                	push   $0xa
f01029b9:	6a 00                	push   $0x0
f01029bb:	50                   	push   %eax
f01029bc:	e8 83 f4 01 00       	call   f0121e44 <strtol>
f01029c1:	83 c4 10             	add    $0x10,%esp
f01029c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01029c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01029ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01029cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01029d0:	85 c0                	test   %eax,%eax
f01029d2:	75 07                	jne    f01029db <command_readuserblock+0x86>
f01029d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01029d9:	eb 68                	jmp    f0102a43 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01029db:	0f 20 d8             	mov    %cr3,%eax
f01029de:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01029e1:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01029e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01029e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01029ea:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01029f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01029f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01029f6:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01029f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102a00:	eb 28                	jmp    f0102a2a <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102a05:	8a 00                	mov    (%eax),%al
f0102a07:	0f b6 d0             	movzbl %al,%edx
f0102a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102a0d:	8a 00                	mov    (%eax),%al
f0102a0f:	0f b6 c0             	movzbl %al,%eax
f0102a12:	52                   	push   %edx
f0102a13:	50                   	push   %eax
f0102a14:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a17:	68 4b 41 12 f0       	push   $0xf012414b
f0102a1c:	e8 7a e4 ff ff       	call   f0100e9b <cprintf>
f0102a21:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102a24:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102a27:	ff 45 f0             	incl   -0x10(%ebp)
f0102a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102a2d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102a30:	7c d0                	jl     f0102a02 <command_readuserblock+0xad>
f0102a32:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a35:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102a38:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102a3b:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102a3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a43:	c9                   	leave  
f0102a44:	c3                   	ret    

f0102a45 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102a45:	55                   	push   %ebp
f0102a46:	89 e5                	mov    %esp,%ebp
f0102a48:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102a4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a4e:	83 c0 04             	add    $0x4,%eax
f0102a51:	8b 00                	mov    (%eax),%eax
f0102a53:	83 ec 04             	sub    $0x4,%esp
f0102a56:	6a 0a                	push   $0xa
f0102a58:	6a 00                	push   $0x0
f0102a5a:	50                   	push   %eax
f0102a5b:	e8 e4 f3 01 00       	call   f0121e44 <strtol>
f0102a60:	83 c4 10             	add    $0x10,%esp
f0102a63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102a66:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102a6d:	83 ec 04             	sub    $0x4,%esp
f0102a70:	6a 00                	push   $0x0
f0102a72:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102a75:	50                   	push   %eax
f0102a76:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a79:	e8 ca 7b 00 00       	call   f010a648 <envid2env>
f0102a7e:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102a81:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a84:	85 c0                	test   %eax,%eax
f0102a86:	75 0a                	jne    f0102a92 <command_remove_table+0x4d>
f0102a88:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a8d:	e9 d0 00 00 00       	jmp    f0102b62 <command_remove_table+0x11d>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a95:	83 c0 08             	add    $0x8,%eax
f0102a98:	8b 00                	mov    (%eax),%eax
f0102a9a:	83 ec 04             	sub    $0x4,%esp
f0102a9d:	6a 10                	push   $0x10
f0102a9f:	6a 00                	push   $0x0
f0102aa1:	50                   	push   %eax
f0102aa2:	e8 9d f3 01 00       	call   f0121e44 <strtol>
f0102aa7:	83 c4 10             	add    $0x10,%esp
f0102aaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102ab0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102ab3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102ab6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102abc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102abf:	c1 ea 16             	shr    $0x16,%edx
f0102ac2:	c1 e2 02             	shl    $0x2,%edx
f0102ac5:	01 d0                	add    %edx,%eax
f0102ac7:	8b 00                	mov    (%eax),%eax
f0102ac9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102ace:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0102ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ad4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0102ad9:	77 1c                	ja     f0102af7 <command_remove_table+0xb2>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0102adb:	83 ec 0c             	sub    $0xc,%esp
f0102ade:	ff 75 e8             	pushl  -0x18(%ebp)
f0102ae1:	e8 4c 5d 00 00       	call   f0108832 <kheap_virtual_address>
f0102ae6:	83 c4 10             	add    $0x10,%esp
f0102ae9:	83 ec 0c             	sub    $0xc,%esp
f0102aec:	50                   	push   %eax
f0102aed:	e8 47 5c 00 00       	call   f0108739 <kfree>
f0102af2:	83 c4 10             	add    $0x10,%esp
f0102af5:	eb 28                	jmp    f0102b1f <command_remove_table+0xda>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102af7:	83 ec 0c             	sub    $0xc,%esp
f0102afa:	ff 75 e8             	pushl  -0x18(%ebp)
f0102afd:	e8 8a f9 ff ff       	call   f010248c <to_frame_info>
f0102b02:	83 c4 10             	add    $0x10,%esp
f0102b05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102b08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b0b:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102b11:	83 ec 0c             	sub    $0xc,%esp
f0102b14:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102b17:	e8 e5 49 00 00       	call   f0107501 <free_frame>
f0102b1c:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102b1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102b22:	c1 e8 16             	shr    $0x16,%eax
f0102b25:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102b28:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102b2b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b31:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b34:	c1 e2 02             	shl    $0x2,%edx
f0102b37:	01 c2                	add    %eax,%edx
f0102b39:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102b3c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b42:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102b45:	c1 e1 02             	shl    $0x2,%ecx
f0102b48:	01 c8                	add    %ecx,%eax
f0102b4a:	8b 00                	mov    (%eax),%eax
f0102b4c:	83 e0 fe             	and    $0xfffffffe,%eax
f0102b4f:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102b51:	0f 20 d8             	mov    %cr3,%eax
f0102b54:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102b5a:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b62:	c9                   	leave  
f0102b63:	c3                   	ret    

f0102b64 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102b64:	55                   	push   %ebp
f0102b65:	89 e5                	mov    %esp,%ebp
f0102b67:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102b6a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b6e:	7e 06                	jle    f0102b76 <command_allocuserpage+0x12>
f0102b70:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b74:	7e 1a                	jle    f0102b90 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102b76:	83 ec 0c             	sub    $0xc,%esp
f0102b79:	68 5c 41 12 f0       	push   $0xf012415c
f0102b7e:	e8 18 e3 ff ff       	call   f0100e9b <cprintf>
f0102b83:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b86:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b8b:	e9 4c 01 00 00       	jmp    f0102cdc <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102b90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b93:	83 c0 04             	add    $0x4,%eax
f0102b96:	8b 00                	mov    (%eax),%eax
f0102b98:	83 ec 04             	sub    $0x4,%esp
f0102b9b:	6a 0a                	push   $0xa
f0102b9d:	6a 00                	push   $0x0
f0102b9f:	50                   	push   %eax
f0102ba0:	e8 9f f2 01 00       	call   f0121e44 <strtol>
f0102ba5:	83 c4 10             	add    $0x10,%esp
f0102ba8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102bab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102bb2:	83 ec 04             	sub    $0x4,%esp
f0102bb5:	6a 00                	push   $0x0
f0102bb7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102bba:	50                   	push   %eax
f0102bbb:	ff 75 f0             	pushl  -0x10(%ebp)
f0102bbe:	e8 85 7a 00 00       	call   f010a648 <envid2env>
f0102bc3:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102bc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bc9:	85 c0                	test   %eax,%eax
f0102bcb:	75 0a                	jne    f0102bd7 <command_allocuserpage+0x73>
f0102bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bd2:	e9 05 01 00 00       	jmp    f0102cdc <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bda:	83 c0 08             	add    $0x8,%eax
f0102bdd:	8b 00                	mov    (%eax),%eax
f0102bdf:	83 ec 04             	sub    $0x4,%esp
f0102be2:	6a 10                	push   $0x10
f0102be4:	6a 00                	push   $0x0
f0102be6:	50                   	push   %eax
f0102be7:	e8 58 f2 01 00       	call   f0121e44 <strtol>
f0102bec:	83 c4 10             	add    $0x10,%esp
f0102bef:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102bf2:	83 ec 0c             	sub    $0xc,%esp
f0102bf5:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102bf8:	50                   	push   %eax
f0102bf9:	e8 eb 47 00 00       	call   f01073e9 <allocate_frame>
f0102bfe:	83 c4 10             	add    $0x10,%esp
f0102c01:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102c04:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102c08:	75 1a                	jne    f0102c24 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102c0a:	83 ec 0c             	sub    $0xc,%esp
f0102c0d:	68 86 41 12 f0       	push   $0xf0124186
f0102c12:	e8 84 e2 ff ff       	call   f0100e9b <cprintf>
f0102c17:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c1f:	e9 b8 00 00 00       	jmp    f0102cdc <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102c24:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102c28:	75 20                	jne    f0102c4a <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102c2a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102c2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102c30:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102c36:	6a 06                	push   $0x6
f0102c38:	ff 75 ec             	pushl  -0x14(%ebp)
f0102c3b:	52                   	push   %edx
f0102c3c:	50                   	push   %eax
f0102c3d:	e8 f9 4b 00 00       	call   f010783b <map_frame>
f0102c42:	83 c4 10             	add    $0x10,%esp
f0102c45:	e9 8d 00 00 00       	jmp    f0102cd7 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102c4a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102c4e:	0f 85 83 00 00 00    	jne    f0102cd7 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c57:	83 c0 0c             	add    $0xc,%eax
f0102c5a:	8b 00                	mov    (%eax),%eax
f0102c5c:	8a 00                	mov    (%eax),%al
f0102c5e:	3c 72                	cmp    $0x72,%al
f0102c60:	74 0e                	je     f0102c70 <command_allocuserpage+0x10c>
f0102c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c65:	83 c0 0c             	add    $0xc,%eax
f0102c68:	8b 00                	mov    (%eax),%eax
f0102c6a:	8a 00                	mov    (%eax),%al
f0102c6c:	3c 52                	cmp    $0x52,%al
f0102c6e:	75 09                	jne    f0102c79 <command_allocuserpage+0x115>
			rw = 0 ;
f0102c70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102c77:	eb 3c                	jmp    f0102cb5 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102c79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7c:	83 c0 0c             	add    $0xc,%eax
f0102c7f:	8b 00                	mov    (%eax),%eax
f0102c81:	8a 00                	mov    (%eax),%al
f0102c83:	3c 77                	cmp    $0x77,%al
f0102c85:	74 0e                	je     f0102c95 <command_allocuserpage+0x131>
f0102c87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c8a:	83 c0 0c             	add    $0xc,%eax
f0102c8d:	8b 00                	mov    (%eax),%eax
f0102c8f:	8a 00                	mov    (%eax),%al
f0102c91:	3c 57                	cmp    $0x57,%al
f0102c93:	75 09                	jne    f0102c9e <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102c95:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102c9c:	eb 17                	jmp    f0102cb5 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102c9e:	83 ec 0c             	sub    $0xc,%esp
f0102ca1:	68 a0 41 12 f0       	push   $0xf01241a0
f0102ca6:	e8 f0 e1 ff ff       	call   f0100e9b <cprintf>
f0102cab:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102cae:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102cb8:	83 c8 04             	or     $0x4,%eax
f0102cbb:	89 c1                	mov    %eax,%ecx
f0102cbd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102cc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102cc3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102cc9:	51                   	push   %ecx
f0102cca:	ff 75 ec             	pushl  -0x14(%ebp)
f0102ccd:	52                   	push   %edx
f0102cce:	50                   	push   %eax
f0102ccf:	e8 67 4b 00 00       	call   f010783b <map_frame>
f0102cd4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102cd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cdc:	c9                   	leave  
f0102cdd:	c3                   	ret    

f0102cde <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102cde:	55                   	push   %ebp
f0102cdf:	89 e5                	mov    %esp,%ebp
f0102ce1:	56                   	push   %esi
f0102ce2:	53                   	push   %ebx
f0102ce3:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102ce6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102ce9:	83 ec 0c             	sub    $0xc,%esp
f0102cec:	50                   	push   %eax
f0102ced:	e8 2b 4e 00 00       	call   f0107b1d <calculate_available_frames>
f0102cf2:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102cf5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102cf8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102cfe:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102d01:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102d04:	01 de                	add    %ebx,%esi
f0102d06:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102d09:	01 f3                	add    %esi,%ebx
f0102d0b:	83 ec 0c             	sub    $0xc,%esp
f0102d0e:	51                   	push   %ecx
f0102d0f:	52                   	push   %edx
f0102d10:	50                   	push   %eax
f0102d11:	53                   	push   %ebx
f0102d12:	68 e4 41 12 f0       	push   $0xf01241e4
f0102d17:	e8 7f e1 ff ff       	call   f0100e9b <cprintf>
f0102d1c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102d1f:	a1 b8 40 3f f0       	mov    0xf03f40b8,%eax
f0102d24:	83 ec 08             	sub    $0x8,%esp
f0102d27:	50                   	push   %eax
f0102d28:	68 3c 42 12 f0       	push   $0xf012423c
f0102d2d:	e8 69 e1 ff ff       	call   f0100e9b <cprintf>
f0102d32:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d3a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102d3d:	5b                   	pop    %ebx
f0102d3e:	5e                   	pop    %esi
f0102d3f:	5d                   	pop    %ebp
f0102d40:	c3                   	ret    

f0102d41 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102d41:	55                   	push   %ebp
f0102d42:	89 e5                	mov    %esp,%ebp
f0102d44:	83 ec 28             	sub    $0x28,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102d47:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102d55:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int BSDSchedNiceVal = -100;				//arg#5 default
f0102d5c:	c7 45 ec 9c ff ff ff 	movl   $0xffffff9c,-0x14(%ebp)

#if USE_KHEAP
	{
		switch (number_of_arguments)
f0102d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0102d66:	83 f8 04             	cmp    $0x4,%eax
f0102d69:	0f 84 94 00 00 00    	je     f0102e03 <CreateEnv+0xc2>
f0102d6f:	83 f8 05             	cmp    $0x5,%eax
f0102d72:	74 0e                	je     f0102d82 <CreateEnv+0x41>
f0102d74:	83 f8 03             	cmp    $0x3,%eax
f0102d77:	0f 84 ec 00 00 00    	je     f0102e69 <CreateEnv+0x128>
f0102d7d:	e9 2f 01 00 00       	jmp    f0102eb1 <CreateEnv+0x170>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102d82:	83 ec 0c             	sub    $0xc,%esp
f0102d85:	6a 02                	push   $0x2
f0102d87:	e8 23 b5 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0102d8c:	83 c4 10             	add    $0x10,%esp
f0102d8f:	85 c0                	test   %eax,%eax
f0102d91:	75 1a                	jne    f0102dad <CreateEnv+0x6c>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<BSD_Sched_Nice>]\naborting...\n");
f0102d93:	83 ec 0c             	sub    $0xc,%esp
f0102d96:	68 78 42 12 f0       	push   $0xf0124278
f0102d9b:	e8 fb e0 ff ff       	call   f0100e9b <cprintf>
f0102da0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0102da3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102da8:	e9 ff 01 00 00       	jmp    f0102fac <CreateEnv+0x26b>
			}
			//percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
			BSDSchedNiceVal = strtol(arguments[4], NULL, 10);
f0102dad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102db0:	83 c0 10             	add    $0x10,%eax
f0102db3:	8b 00                	mov    (%eax),%eax
f0102db5:	83 ec 04             	sub    $0x4,%esp
f0102db8:	6a 0a                	push   $0xa
f0102dba:	6a 00                	push   $0x0
f0102dbc:	50                   	push   %eax
f0102dbd:	e8 82 f0 01 00       	call   f0121e44 <strtol>
f0102dc2:	83 c4 10             	add    $0x10,%esp
f0102dc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0102dc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dcb:	83 c0 0c             	add    $0xc,%eax
f0102dce:	8b 00                	mov    (%eax),%eax
f0102dd0:	83 ec 04             	sub    $0x4,%esp
f0102dd3:	6a 0a                	push   $0xa
f0102dd5:	6a 00                	push   $0x0
f0102dd7:	50                   	push   %eax
f0102dd8:	e8 67 f0 01 00       	call   f0121e44 <strtol>
f0102ddd:	83 c4 10             	add    $0x10,%esp
f0102de0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de6:	83 c0 08             	add    $0x8,%eax
f0102de9:	8b 00                	mov    (%eax),%eax
f0102deb:	83 ec 04             	sub    $0x4,%esp
f0102dee:	6a 0a                	push   $0xa
f0102df0:	6a 00                	push   $0x0
f0102df2:	50                   	push   %eax
f0102df3:	e8 4c f0 01 00       	call   f0121e44 <strtol>
f0102df8:	83 c4 10             	add    $0x10,%esp
f0102dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102dfe:	e9 c8 00 00 00       	jmp    f0102ecb <CreateEnv+0x18a>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102e03:	83 ec 0c             	sub    $0xc,%esp
f0102e06:	6a 02                	push   $0x2
f0102e08:	e8 a2 b4 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0102e0d:	83 c4 10             	add    $0x10,%esp
f0102e10:	85 c0                	test   %eax,%eax
f0102e12:	75 1d                	jne    f0102e31 <CreateEnv+0xf0>
			{
				//percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
				BSDSchedNiceVal = strtol(arguments[3], NULL, 10);
f0102e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e17:	83 c0 0c             	add    $0xc,%eax
f0102e1a:	8b 00                	mov    (%eax),%eax
f0102e1c:	83 ec 04             	sub    $0x4,%esp
f0102e1f:	6a 0a                	push   $0xa
f0102e21:	6a 00                	push   $0x0
f0102e23:	50                   	push   %eax
f0102e24:	e8 1b f0 01 00       	call   f0121e44 <strtol>
f0102e29:	83 c4 10             	add    $0x10,%esp
f0102e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e2f:	eb 1b                	jmp    f0102e4c <CreateEnv+0x10b>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0102e31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e34:	83 c0 0c             	add    $0xc,%eax
f0102e37:	8b 00                	mov    (%eax),%eax
f0102e39:	83 ec 04             	sub    $0x4,%esp
f0102e3c:	6a 0a                	push   $0xa
f0102e3e:	6a 00                	push   $0x0
f0102e40:	50                   	push   %eax
f0102e41:	e8 fe ef 01 00       	call   f0121e44 <strtol>
f0102e46:	83 c4 10             	add    $0x10,%esp
f0102e49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 08             	add    $0x8,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 04             	sub    $0x4,%esp
f0102e57:	6a 0a                	push   $0xa
f0102e59:	6a 00                	push   $0x0
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 e3 ef 01 00       	call   f0121e44 <strtol>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102e67:	eb 62                	jmp    f0102ecb <CreateEnv+0x18a>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102e69:	83 ec 0c             	sub    $0xc,%esp
f0102e6c:	6a 02                	push   $0x2
f0102e6e:	e8 3c b4 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0102e73:	83 c4 10             	add    $0x10,%esp
f0102e76:	85 c0                	test   %eax,%eax
f0102e78:	74 1a                	je     f0102e94 <CreateEnv+0x153>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0102e7a:	83 ec 0c             	sub    $0xc,%esp
f0102e7d:	68 24 43 12 f0       	push   $0xf0124324
f0102e82:	e8 14 e0 ff ff       	call   f0100e9b <cprintf>
f0102e87:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0102e8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e8f:	e9 18 01 00 00       	jmp    f0102fac <CreateEnv+0x26b>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102e94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e97:	83 c0 08             	add    $0x8,%eax
f0102e9a:	8b 00                	mov    (%eax),%eax
f0102e9c:	83 ec 04             	sub    $0x4,%esp
f0102e9f:	6a 0a                	push   $0xa
f0102ea1:	6a 00                	push   $0x0
f0102ea3:	50                   	push   %eax
f0102ea4:	e8 9b ef 01 00       	call   f0121e44 <strtol>
f0102ea9:	83 c4 10             	add    $0x10,%esp
f0102eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102eaf:	eb 1a                	jmp    f0102ecb <CreateEnv+0x18a>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102eb1:	83 ec 0c             	sub    $0xc,%esp
f0102eb4:	68 b4 43 12 f0       	push   $0xf01243b4
f0102eb9:	e8 dd df ff ff       	call   f0100e9b <cprintf>
f0102ebe:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102ec1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ec6:	e9 e1 00 00 00       	jmp    f0102fac <CreateEnv+0x26b>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
			return NULL;
		}
#endif
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102ecb:	83 ec 0c             	sub    $0xc,%esp
f0102ece:	6a 02                	push   $0x2
f0102ed0:	e8 da b3 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0102ed5:	83 c4 10             	add    $0x10,%esp
f0102ed8:	85 c0                	test   %eax,%eax
f0102eda:	74 23                	je     f0102eff <CreateEnv+0x1be>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0102edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102edf:	48                   	dec    %eax
f0102ee0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102ee3:	73 1a                	jae    f0102eff <CreateEnv+0x1be>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0102ee5:	83 ec 0c             	sub    $0xc,%esp
f0102ee8:	68 4c 44 12 f0       	push   $0xf012444c
f0102eed:	e8 a9 df ff ff       	call   f0100e9b <cprintf>
f0102ef2:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0102ef5:	b8 00 00 00 00       	mov    $0x0,%eax
f0102efa:	e9 ad 00 00 00       	jmp    f0102fac <CreateEnv+0x26b>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102eff:	83 7d e8 64          	cmpl   $0x64,-0x18(%ebp)
f0102f03:	76 19                	jbe    f0102f1e <CreateEnv+0x1dd>
f0102f05:	68 a4 44 12 f0       	push   $0xf01244a4
f0102f0a:	68 e9 44 12 f0       	push   $0xf01244e9
f0102f0f:	68 a4 01 00 00       	push   $0x1a4
f0102f14:	68 fe 44 12 f0       	push   $0xf01244fe
f0102f19:	e8 fc d2 ff ff       	call   f010021a <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102f1e:	83 7d e8 64          	cmpl   $0x64,-0x18(%ebp)
f0102f22:	76 19                	jbe    f0102f3d <CreateEnv+0x1fc>
f0102f24:	68 a4 44 12 f0       	push   $0xf01244a4
f0102f29:	68 e9 44 12 f0       	push   $0xf01244e9
f0102f2e:	68 c0 01 00 00       	push   $0x1c0
f0102f33:	68 fe 44 12 f0       	push   $0xf01244fe
f0102f38:	e8 dd d2 ff ff       	call   f010021a <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f40:	83 c0 04             	add    $0x4,%eax
f0102f43:	8b 00                	mov    (%eax),%eax
f0102f45:	ff 75 e8             	pushl  -0x18(%ebp)
f0102f48:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f4e:	50                   	push   %eax
f0102f4f:	e8 8f 6c 00 00       	call   f0109be3 <env_create>
f0102f54:	83 c4 10             	add    $0x10,%esp
f0102f57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (BSDSchedNiceVal != -100)
f0102f5a:	83 7d ec 9c          	cmpl   $0xffffff9c,-0x14(%ebp)
f0102f5e:	74 49                	je     f0102fa9 <CreateEnv+0x268>
	{
		cprintf("nice value = %d\n", BSDSchedNiceVal);
f0102f60:	83 ec 08             	sub    $0x8,%esp
f0102f63:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f66:	68 12 45 12 f0       	push   $0xf0124512
f0102f6b:	e8 2b df ff ff       	call   f0100e9b <cprintf>
f0102f70:	83 c4 10             	add    $0x10,%esp
		assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
f0102f73:	83 7d ec ec          	cmpl   $0xffffffec,-0x14(%ebp)
f0102f77:	7c 06                	jl     f0102f7f <CreateEnv+0x23e>
f0102f79:	83 7d ec 14          	cmpl   $0x14,-0x14(%ebp)
f0102f7d:	7e 19                	jle    f0102f98 <CreateEnv+0x257>
f0102f7f:	68 24 45 12 f0       	push   $0xf0124524
f0102f84:	68 e9 44 12 f0       	push   $0xf01244e9
f0102f89:	68 c5 01 00 00       	push   $0x1c5
f0102f8e:	68 fe 44 12 f0       	push   $0xf01244fe
f0102f93:	e8 82 d2 ff ff       	call   f010021a <_panic>
		env_set_nice(env, BSDSchedNiceVal);
f0102f98:	83 ec 08             	sub    $0x8,%esp
f0102f9b:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f9e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102fa1:	e8 08 32 00 00       	call   f01061ae <env_set_nice>
f0102fa6:	83 c4 10             	add    $0x10,%esp
	}
	return env;
f0102fa9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0102fac:	c9                   	leave  
f0102fad:	c3                   	ret    

f0102fae <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102fae:	55                   	push   %ebp
f0102faf:	89 e5                	mov    %esp,%ebp
f0102fb1:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102fb4:	83 ec 08             	sub    $0x8,%esp
f0102fb7:	ff 75 0c             	pushl  0xc(%ebp)
f0102fba:	ff 75 08             	pushl  0x8(%ebp)
f0102fbd:	e8 7f fd ff ff       	call   f0102d41 <CreateEnv>
f0102fc2:	83 c4 10             	add    $0x10,%esp
f0102fc5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102fc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fcc:	75 07                	jne    f0102fd5 <command_run_program+0x27>
f0102fce:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fd3:	eb 46                	jmp    f010301b <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fd8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 54 45 12 f0       	push   $0xf0124554
f0102fe4:	e8 b2 de ff ff       	call   f0100e9b <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102fec:	c7 05 b8 40 3f f0 00 	movl   $0x0,0xf03f40b8
f0102ff3:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102ff6:	83 ec 0c             	sub    $0xc,%esp
f0102ff9:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ffc:	e8 d5 23 00 00       	call   f01053d6 <sched_new_env>
f0103001:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0103004:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103007:	8b 40 4c             	mov    0x4c(%eax),%eax
f010300a:	83 ec 0c             	sub    $0xc,%esp
f010300d:	50                   	push   %eax
f010300e:	e8 e0 23 00 00       	call   f01053f3 <sched_run_env>
f0103013:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010301b:	c9                   	leave  
f010301c:	c3                   	ret    

f010301d <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f010301d:	55                   	push   %ebp
f010301e:	89 e5                	mov    %esp,%ebp
f0103020:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0103023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103026:	83 c0 04             	add    $0x4,%eax
f0103029:	8b 00                	mov    (%eax),%eax
f010302b:	83 ec 04             	sub    $0x4,%esp
f010302e:	6a 0a                	push   $0xa
f0103030:	6a 00                	push   $0x0
f0103032:	50                   	push   %eax
f0103033:	e8 0c ee 01 00       	call   f0121e44 <strtol>
f0103038:	83 c4 10             	add    $0x10,%esp
f010303b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f010303e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103041:	83 ec 0c             	sub    $0xc,%esp
f0103044:	50                   	push   %eax
f0103045:	e8 63 26 00 00       	call   f01056ad <sched_kill_env>
f010304a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010304d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103052:	c9                   	leave  
f0103053:	c3                   	ret    

f0103054 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0103054:	55                   	push   %ebp
f0103055:	89 e5                	mov    %esp,%ebp
f0103057:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f010305a:	83 ec 08             	sub    $0x8,%esp
f010305d:	ff 75 0c             	pushl  0xc(%ebp)
f0103060:	ff 75 08             	pushl  0x8(%ebp)
f0103063:	e8 d9 fc ff ff       	call   f0102d41 <CreateEnv>
f0103068:	83 c4 10             	add    $0x10,%esp
f010306b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f010306e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103072:	75 07                	jne    f010307b <commnad_load_env+0x27>
		return 0 ;
f0103074:	b8 00 00 00 00       	mov    $0x0,%eax
f0103079:	eb 2a                	jmp    f01030a5 <commnad_load_env+0x51>

	sched_new_env(env) ;
f010307b:	83 ec 0c             	sub    $0xc,%esp
f010307e:	ff 75 f4             	pushl  -0xc(%ebp)
f0103081:	e8 50 23 00 00       	call   f01053d6 <sched_new_env>
f0103086:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0103089:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010308c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010308f:	83 ec 08             	sub    $0x8,%esp
f0103092:	50                   	push   %eax
f0103093:	68 54 45 12 f0       	push   $0xf0124554
f0103098:	e8 fe dd ff ff       	call   f0100e9b <cprintf>
f010309d:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030a5:	c9                   	leave  
f01030a6:	c3                   	ret    

f01030a7 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f01030a7:	55                   	push   %ebp
f01030a8:	89 e5                	mov    %esp,%ebp
f01030aa:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f01030ad:	c7 05 b8 40 3f f0 00 	movl   $0x0,0xf03f40b8
f01030b4:	00 00 00 
	sched_run_all();
f01030b7:	e8 b2 2b 00 00       	call   f0105c6e <sched_run_all>

	return 0 ;
f01030bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c1:	c9                   	leave  
f01030c2:	c3                   	ret    

f01030c3 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f01030c3:	55                   	push   %ebp
f01030c4:	89 e5                	mov    %esp,%ebp
f01030c6:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f01030c9:	e8 9f 29 00 00       	call   f0105a6d <sched_print_all>

	return 0 ;
f01030ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030d3:	c9                   	leave  
f01030d4:	c3                   	ret    

f01030d5 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f01030d5:	55                   	push   %ebp
f01030d6:	89 e5                	mov    %esp,%ebp
f01030d8:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f01030db:	e8 01 2c 00 00       	call   f0105ce1 <sched_kill_all>

	return 0 ;
f01030e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030e5:	c9                   	leave  
f01030e6:	c3                   	ret    

f01030e7 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f01030e7:	55                   	push   %ebp
f01030e8:	89 e5                	mov    %esp,%ebp
f01030ea:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f01030ed:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01030f1:	7f 1a                	jg     f010310d <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f01030f3:	83 ec 0c             	sub    $0xc,%esp
f01030f6:	68 6c 45 12 f0       	push   $0xf012456c
f01030fb:	e8 9b dd ff ff       	call   f0100e9b <cprintf>
f0103100:	83 c4 10             	add    $0x10,%esp
		return 0;
f0103103:	b8 00 00 00 00       	mov    $0x0,%eax
f0103108:	e9 83 00 00 00       	jmp    f0103190 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f010310d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103110:	83 c0 04             	add    $0x4,%eax
f0103113:	8b 00                	mov    (%eax),%eax
f0103115:	83 ec 04             	sub    $0x4,%esp
f0103118:	6a 0a                	push   $0xa
f010311a:	6a 00                	push   $0x0
f010311c:	50                   	push   %eax
f010311d:	e8 22 ed 01 00       	call   f0121e44 <strtol>
f0103122:	83 c4 10             	add    $0x10,%esp
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0103128:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010312c:	75 20                	jne    f010314e <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f010312e:	83 ec 0c             	sub    $0xc,%esp
f0103131:	ff 75 f4             	pushl  -0xc(%ebp)
f0103134:	e8 eb b0 00 00       	call   f010e224 <setPageReplacmentAlgorithmLRU>
f0103139:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f010313c:	83 ec 0c             	sub    $0xc,%esp
f010313f:	68 cc 45 12 f0       	push   $0xf01245cc
f0103144:	e8 52 dd ff ff       	call   f0100e9b <cprintf>
f0103149:	83 c4 10             	add    $0x10,%esp
f010314c:	eb 3d                	jmp    f010318b <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f010314e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103152:	75 20                	jne    f0103174 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0103154:	83 ec 0c             	sub    $0xc,%esp
f0103157:	ff 75 f4             	pushl  -0xc(%ebp)
f010315a:	e8 c5 b0 00 00       	call   f010e224 <setPageReplacmentAlgorithmLRU>
f010315f:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0103162:	83 ec 0c             	sub    $0xc,%esp
f0103165:	68 10 46 12 f0       	push   $0xf0124610
f010316a:	e8 2c dd ff ff       	call   f0100e9b <cprintf>
f010316f:	83 c4 10             	add    $0x10,%esp
f0103172:	eb 17                	jmp    f010318b <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0103174:	83 ec 0c             	sub    $0xc,%esp
f0103177:	68 50 46 12 f0       	push   $0xf0124650
f010317c:	e8 1a dd ff ff       	call   f0100e9b <cprintf>
f0103181:	83 c4 10             	add    $0x10,%esp
		return 0;
f0103184:	b8 00 00 00 00       	mov    $0x0,%eax
f0103189:	eb 05                	jmp    f0103190 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f010318b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103190:	c9                   	leave  
f0103191:	c3                   	ret    

f0103192 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0103192:	55                   	push   %ebp
f0103193:	89 e5                	mov    %esp,%ebp
f0103195:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0103198:	8b 45 0c             	mov    0xc(%ebp),%eax
f010319b:	83 c0 04             	add    $0x4,%eax
f010319e:	8b 00                	mov    (%eax),%eax
f01031a0:	83 ec 04             	sub    $0x4,%esp
f01031a3:	6a 0a                	push   $0xa
f01031a5:	6a 00                	push   $0x0
f01031a7:	50                   	push   %eax
f01031a8:	e8 97 ec 01 00       	call   f0121e44 <strtol>
f01031ad:	83 c4 10             	add    $0x10,%esp
f01031b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f01031b3:	83 ec 0c             	sub    $0xc,%esp
f01031b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01031b9:	e8 d9 b0 00 00       	call   f010e297 <setPageReplacmentAlgorithmNchanceCLOCK>
f01031be:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f01031c1:	83 ec 0c             	sub    $0xc,%esp
f01031c4:	68 a4 46 12 f0       	push   $0xf01246a4
f01031c9:	e8 cd dc ff ff       	call   f0100e9b <cprintf>
f01031ce:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031d6:	c9                   	leave  
f01031d7:	c3                   	ret    

f01031d8 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01031d8:	55                   	push   %ebp
f01031d9:	89 e5                	mov    %esp,%ebp
f01031db:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01031de:	e8 74 b0 00 00       	call   f010e257 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01031e3:	83 ec 0c             	sub    $0xc,%esp
f01031e6:	68 d8 46 12 f0       	push   $0xf01246d8
f01031eb:	e8 ab dc ff ff       	call   f0100e9b <cprintf>
f01031f0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031f8:	c9                   	leave  
f01031f9:	c3                   	ret    

f01031fa <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f01031fa:	55                   	push   %ebp
f01031fb:	89 e5                	mov    %esp,%ebp
f01031fd:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0103200:	e8 62 b0 00 00       	call   f010e267 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0103205:	83 ec 0c             	sub    $0xc,%esp
f0103208:	68 04 47 12 f0       	push   $0xf0124704
f010320d:	e8 89 dc ff ff       	call   f0100e9b <cprintf>
f0103212:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103215:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010321a:	c9                   	leave  
f010321b:	c3                   	ret    

f010321c <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f010321c:	55                   	push   %ebp
f010321d:	89 e5                	mov    %esp,%ebp
f010321f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0103222:	e8 50 b0 00 00       	call   f010e277 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0103227:	83 ec 0c             	sub    $0xc,%esp
f010322a:	68 2c 47 12 f0       	push   $0xf012472c
f010322f:	e8 67 dc ff ff       	call   f0100e9b <cprintf>
f0103234:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103237:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010323c:	c9                   	leave  
f010323d:	c3                   	ret    

f010323e <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f010323e:	55                   	push   %ebp
f010323f:	89 e5                	mov    %esp,%ebp
f0103241:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0103244:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103247:	83 c0 04             	add    $0x4,%eax
f010324a:	8b 00                	mov    (%eax),%eax
f010324c:	83 ec 04             	sub    $0x4,%esp
f010324f:	6a 0a                	push   $0xa
f0103251:	6a 00                	push   $0x0
f0103253:	50                   	push   %eax
f0103254:	e8 eb eb 01 00       	call   f0121e44 <strtol>
f0103259:	83 c4 10             	add    $0x10,%esp
f010325c:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010325f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103263:	83 ec 0c             	sub    $0xc,%esp
f0103266:	50                   	push   %eax
f0103267:	e8 33 31 00 00       	call   f010639f <sched_init_RR>
f010326c:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010326f:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f0103274:	8a 00                	mov    (%eax),%al
f0103276:	0f b6 c0             	movzbl %al,%eax
f0103279:	83 ec 08             	sub    $0x8,%esp
f010327c:	50                   	push   %eax
f010327d:	68 60 47 12 f0       	push   $0xf0124760
f0103282:	e8 14 dc ff ff       	call   f0100e9b <cprintf>
f0103287:	83 c4 10             	add    $0x10,%esp
	return 0;
f010328a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010328f:	c9                   	leave  
f0103290:	c3                   	ret    

f0103291 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0103291:	55                   	push   %ebp
f0103292:	89 e5                	mov    %esp,%ebp
f0103294:	53                   	push   %ebx
f0103295:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103298:	8b 45 0c             	mov    0xc(%ebp),%eax
f010329b:	83 c0 04             	add    $0x4,%eax
f010329e:	8b 00                	mov    (%eax),%eax
f01032a0:	83 ec 04             	sub    $0x4,%esp
f01032a3:	6a 0a                	push   $0xa
f01032a5:	6a 00                	push   $0x0
f01032a7:	50                   	push   %eax
f01032a8:	e8 97 eb 01 00       	call   f0121e44 <strtol>
f01032ad:	83 c4 10             	add    $0x10,%esp
f01032b0:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032b3:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01032ba:	eb 2e                	jmp    f01032ea <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f01032bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032bf:	8d 58 fe             	lea    -0x2(%eax),%ebx
f01032c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cf:	01 d0                	add    %edx,%eax
f01032d1:	8b 00                	mov    (%eax),%eax
f01032d3:	83 ec 04             	sub    $0x4,%esp
f01032d6:	6a 0a                	push   $0xa
f01032d8:	6a 00                	push   $0x0
f01032da:	50                   	push   %eax
f01032db:	e8 64 eb 01 00       	call   f0121e44 <strtol>
f01032e0:	83 c4 10             	add    $0x10,%esp
f01032e3:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032e7:	ff 45 f4             	incl   -0xc(%ebp)
f01032ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01032f0:	7c ca                	jl     f01032bc <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f01032f2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f01032f6:	83 ec 08             	sub    $0x8,%esp
f01032f9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f01032fc:	52                   	push   %edx
f01032fd:	50                   	push   %eax
f01032fe:	e8 27 31 00 00       	call   f010642a <sched_init_MLFQ>
f0103303:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103306:	83 ec 0c             	sub    $0xc,%esp
f0103309:	68 98 47 12 f0       	push   $0xf0124798
f010330e:	e8 88 db ff ff       	call   f0100e9b <cprintf>
f0103313:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103316:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010331d:	eb 24                	jmp    f0103343 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010331f:	8b 15 60 40 3f f0    	mov    0xf03f4060,%edx
f0103325:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103328:	01 d0                	add    %edx,%eax
f010332a:	8a 00                	mov    (%eax),%al
f010332c:	0f b6 c0             	movzbl %al,%eax
f010332f:	83 ec 08             	sub    $0x8,%esp
f0103332:	50                   	push   %eax
f0103333:	68 c5 47 12 f0       	push   $0xf01247c5
f0103338:	e8 5e db ff ff       	call   f0100e9b <cprintf>
f010333d:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103340:	ff 45 f0             	incl   -0x10(%ebp)
f0103343:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0103348:	0f b6 c0             	movzbl %al,%eax
f010334b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010334e:	7f cf                	jg     f010331f <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103350:	83 ec 0c             	sub    $0xc,%esp
f0103353:	68 49 41 12 f0       	push   $0xf0124149
f0103358:	e8 3e db ff ff       	call   f0100e9b <cprintf>
f010335d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103360:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103365:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103368:	c9                   	leave  
f0103369:	c3                   	ret    

f010336a <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f010336a:	55                   	push   %ebp
f010336b:	89 e5                	mov    %esp,%ebp
f010336d:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103370:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103373:	83 c0 04             	add    $0x4,%eax
f0103376:	8b 00                	mov    (%eax),%eax
f0103378:	83 ec 04             	sub    $0x4,%esp
f010337b:	6a 0a                	push   $0xa
f010337d:	6a 00                	push   $0x0
f010337f:	50                   	push   %eax
f0103380:	e8 bf ea 01 00       	call   f0121e44 <strtol>
f0103385:	83 c4 10             	add    $0x10,%esp
f0103388:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f010338b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010338e:	83 c0 08             	add    $0x8,%eax
f0103391:	8b 00                	mov    (%eax),%eax
f0103393:	83 ec 04             	sub    $0x4,%esp
f0103396:	6a 0a                	push   $0xa
f0103398:	6a 00                	push   $0x0
f010339a:	50                   	push   %eax
f010339b:	e8 a4 ea 01 00       	call   f0121e44 <strtol>
f01033a0:	83 c4 10             	add    $0x10,%esp
f01033a3:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01033a6:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033aa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033ae:	83 ec 08             	sub    $0x8,%esp
f01033b1:	52                   	push   %edx
f01033b2:	50                   	push   %eax
f01033b3:	e8 9a 30 00 00       	call   f0106452 <sched_init_BSD>
f01033b8:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01033bb:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033bf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033c3:	83 ec 04             	sub    $0x4,%esp
f01033c6:	52                   	push   %edx
f01033c7:	50                   	push   %eax
f01033c8:	68 cc 47 12 f0       	push   $0xf01247cc
f01033cd:	e8 c9 da ff ff       	call   f0100e9b <cprintf>
f01033d2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01033d5:	83 ec 0c             	sub    $0xc,%esp
f01033d8:	68 49 41 12 f0       	push   $0xf0124149
f01033dd:	e8 b9 da ff ff       	call   f0100e9b <cprintf>
f01033e2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033ea:	c9                   	leave  
f01033eb:	c3                   	ret    

f01033ec <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01033ec:	55                   	push   %ebp
f01033ed:	89 e5                	mov    %esp,%ebp
f01033ef:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01033f2:	e8 28 2e 00 00       	call   f010621f <isSchedMethodMLFQ>
f01033f7:	85 c0                	test   %eax,%eax
f01033f9:	74 5c                	je     f0103457 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01033fb:	83 ec 0c             	sub    $0xc,%esp
f01033fe:	68 08 48 12 f0       	push   $0xf0124808
f0103403:	e8 93 da ff ff       	call   f0100e9b <cprintf>
f0103408:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010340b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103412:	eb 24                	jmp    f0103438 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0103414:	8b 15 60 40 3f f0    	mov    0xf03f4060,%edx
f010341a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010341d:	01 d0                	add    %edx,%eax
f010341f:	8a 00                	mov    (%eax),%al
f0103421:	0f b6 c0             	movzbl %al,%eax
f0103424:	83 ec 08             	sub    $0x8,%esp
f0103427:	50                   	push   %eax
f0103428:	68 c5 47 12 f0       	push   $0xf01247c5
f010342d:	e8 69 da ff ff       	call   f0100e9b <cprintf>
f0103432:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103435:	ff 45 f4             	incl   -0xc(%ebp)
f0103438:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f010343d:	0f b6 c0             	movzbl %al,%eax
f0103440:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103443:	7f cf                	jg     f0103414 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103445:	83 ec 0c             	sub    $0xc,%esp
f0103448:	68 49 41 12 f0       	push   $0xf0124149
f010344d:	e8 49 da ff ff       	call   f0100e9b <cprintf>
f0103452:	83 c4 10             	add    $0x10,%esp
f0103455:	eb 65                	jmp    f01034bc <command_print_sch_method+0xd0>
	}
	else if (isSchedMethodRR())
f0103457:	e8 a9 2d 00 00       	call   f0106205 <isSchedMethodRR>
f010345c:	85 c0                	test   %eax,%eax
f010345e:	74 1d                	je     f010347d <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0103460:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f0103465:	8a 00                	mov    (%eax),%al
f0103467:	0f b6 c0             	movzbl %al,%eax
f010346a:	83 ec 08             	sub    $0x8,%esp
f010346d:	50                   	push   %eax
f010346e:	68 3c 48 12 f0       	push   $0xf012483c
f0103473:	e8 23 da ff ff       	call   f0100e9b <cprintf>
f0103478:	83 c4 10             	add    $0x10,%esp
f010347b:	eb 3f                	jmp    f01034bc <command_print_sch_method+0xd0>
	}
	else if (isSchedMethodBSD())
f010347d:	e8 b8 2d 00 00       	call   f010623a <isSchedMethodBSD>
f0103482:	85 c0                	test   %eax,%eax
f0103484:	74 26                	je     f01034ac <command_print_sch_method+0xc0>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103486:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f010348b:	8a 00                	mov    (%eax),%al
f010348d:	0f b6 d0             	movzbl %al,%edx
f0103490:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0103495:	0f b6 c0             	movzbl %al,%eax
f0103498:	83 ec 04             	sub    $0x4,%esp
f010349b:	52                   	push   %edx
f010349c:	50                   	push   %eax
f010349d:	68 cc 47 12 f0       	push   $0xf01247cc
f01034a2:	e8 f4 d9 ff ff       	call   f0100e9b <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
f01034aa:	eb 10                	jmp    f01034bc <command_print_sch_method+0xd0>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01034ac:	83 ec 0c             	sub    $0xc,%esp
f01034af:	68 78 48 12 f0       	push   $0xf0124878
f01034b4:	e8 e2 d9 ff ff       	call   f0100e9b <cprintf>
f01034b9:	83 c4 10             	add    $0x10,%esp

	return 0;
f01034bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034c1:	c9                   	leave  
f01034c2:	c3                   	ret    

f01034c3 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01034c3:	55                   	push   %ebp
f01034c4:	89 e5                	mov    %esp,%ebp
f01034c6:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01034c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034cc:	83 c0 04             	add    $0x4,%eax
f01034cf:	8b 00                	mov    (%eax),%eax
f01034d1:	83 ec 04             	sub    $0x4,%esp
f01034d4:	6a 0a                	push   $0xa
f01034d6:	6a 00                	push   $0x0
f01034d8:	50                   	push   %eax
f01034d9:	e8 66 e9 01 00       	call   f0121e44 <strtol>
f01034de:	83 c4 10             	add    $0x10,%esp
f01034e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01034e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034e7:	0f b6 c0             	movzbl %al,%eax
f01034ea:	83 ec 0c             	sub    $0xc,%esp
f01034ed:	50                   	push   %eax
f01034ee:	e8 77 d8 01 00       	call   f0120d6a <chksch>
f01034f3:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01034f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034fa:	75 12                	jne    f010350e <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01034fc:	83 ec 0c             	sub    $0xc,%esp
f01034ff:	68 a0 48 12 f0       	push   $0xf01248a0
f0103504:	e8 92 d9 ff ff       	call   f0100e9b <cprintf>
f0103509:	83 c4 10             	add    $0x10,%esp
f010350c:	eb 16                	jmp    f0103524 <command_sch_test+0x61>
	else if (status == 1)
f010350e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103512:	75 10                	jne    f0103524 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0103514:	83 ec 0c             	sub    $0xc,%esp
f0103517:	68 c8 48 12 f0       	push   $0xf01248c8
f010351c:	e8 7a d9 ff ff       	call   f0100e9b <cprintf>
f0103521:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103524:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103529:	c9                   	leave  
f010352a:	c3                   	ret    

f010352b <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010352b:	55                   	push   %ebp
f010352c:	89 e5                	mov    %esp,%ebp
f010352e:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103531:	e8 8f ad 00 00       	call   f010e2c5 <isPageReplacmentAlgorithmCLOCK>
f0103536:	85 c0                	test   %eax,%eax
f0103538:	74 15                	je     f010354f <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 ec 48 12 f0       	push   $0xf01248ec
f0103542:	e8 54 d9 ff ff       	call   f0100e9b <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	e9 8c 00 00 00       	jmp    f01035db <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010354f:	83 ec 0c             	sub    $0xc,%esp
f0103552:	6a 01                	push   $0x1
f0103554:	e8 56 ad 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0103559:	83 c4 10             	add    $0x10,%esp
f010355c:	85 c0                	test   %eax,%eax
f010355e:	74 12                	je     f0103572 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 14 49 12 f0       	push   $0xf0124914
f0103568:	e8 2e d9 ff ff       	call   f0100e9b <cprintf>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	eb 69                	jmp    f01035db <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0103572:	83 ec 0c             	sub    $0xc,%esp
f0103575:	6a 02                	push   $0x2
f0103577:	e8 33 ad 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010357c:	83 c4 10             	add    $0x10,%esp
f010357f:	85 c0                	test   %eax,%eax
f0103581:	74 12                	je     f0103595 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0103583:	83 ec 0c             	sub    $0xc,%esp
f0103586:	68 54 49 12 f0       	push   $0xf0124954
f010358b:	e8 0b d9 ff ff       	call   f0100e9b <cprintf>
f0103590:	83 c4 10             	add    $0x10,%esp
f0103593:	eb 46                	jmp    f01035db <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0103595:	e8 46 ad 00 00       	call   f010e2e0 <isPageReplacmentAlgorithmFIFO>
f010359a:	85 c0                	test   %eax,%eax
f010359c:	74 12                	je     f01035b0 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010359e:	83 ec 0c             	sub    $0xc,%esp
f01035a1:	68 90 49 12 f0       	push   $0xf0124990
f01035a6:	e8 f0 d8 ff ff       	call   f0100e9b <cprintf>
f01035ab:	83 c4 10             	add    $0x10,%esp
f01035ae:	eb 2b                	jmp    f01035db <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01035b0:	e8 46 ad 00 00       	call   f010e2fb <isPageReplacmentAlgorithmModifiedCLOCK>
f01035b5:	85 c0                	test   %eax,%eax
f01035b7:	74 12                	je     f01035cb <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01035b9:	83 ec 0c             	sub    $0xc,%esp
f01035bc:	68 b4 49 12 f0       	push   $0xf01249b4
f01035c1:	e8 d5 d8 ff ff       	call   f0100e9b <cprintf>
f01035c6:	83 c4 10             	add    $0x10,%esp
f01035c9:	eb 10                	jmp    f01035db <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01035cb:	83 ec 0c             	sub    $0xc,%esp
f01035ce:	68 e4 49 12 f0       	push   $0xf01249e4
f01035d3:	e8 c3 d8 ff ff       	call   f0100e9b <cprintf>
f01035d8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01035db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035e0:	c9                   	leave  
f01035e1:	c3                   	ret    

f01035e2 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01035e2:	55                   	push   %ebp
f01035e3:	89 e5                	mov    %esp,%ebp
f01035e5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01035e8:	e8 0b ee ff ff       	call   f01023f8 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 10 4a 12 f0       	push   $0xf0124a10
f01035f5:	e8 a1 d8 ff ff       	call   f0100e9b <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01035fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103602:	c9                   	leave  
f0103603:	c3                   	ret    

f0103604 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103604:	55                   	push   %ebp
f0103605:	89 e5                	mov    %esp,%ebp
f0103607:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010360a:	e8 f9 ed ff ff       	call   f0102408 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010360f:	83 ec 0c             	sub    $0xc,%esp
f0103612:	68 40 4a 12 f0       	push   $0xf0124a40
f0103617:	e8 7f d8 ff ff       	call   f0100e9b <cprintf>
f010361c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010361f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103624:	c9                   	leave  
f0103625:	c3                   	ret    

f0103626 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103626:	55                   	push   %ebp
f0103627:	89 e5                	mov    %esp,%ebp
f0103629:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010362c:	e8 e7 ed ff ff       	call   f0102418 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103631:	83 ec 0c             	sub    $0xc,%esp
f0103634:	68 70 4a 12 f0       	push   $0xf0124a70
f0103639:	e8 5d d8 ff ff       	call   f0100e9b <cprintf>
f010363e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103641:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103646:	c9                   	leave  
f0103647:	c3                   	ret    

f0103648 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103648:	55                   	push   %ebp
f0103649:	89 e5                	mov    %esp,%ebp
f010364b:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010364e:	e8 d5 ed ff ff       	call   f0102428 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0103653:	83 ec 0c             	sub    $0xc,%esp
f0103656:	68 a0 4a 12 f0       	push   $0xf0124aa0
f010365b:	e8 3b d8 ff ff       	call   f0100e9b <cprintf>
f0103660:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103663:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103668:	c9                   	leave  
f0103669:	c3                   	ret    

f010366a <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010366a:	55                   	push   %ebp
f010366b:	89 e5                	mov    %esp,%ebp
f010366d:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0103670:	e8 c3 ed ff ff       	call   f0102438 <isUHeapPlacementStrategyFIRSTFIT>
f0103675:	84 c0                	test   %al,%al
f0103677:	74 12                	je     f010368b <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103679:	83 ec 0c             	sub    $0xc,%esp
f010367c:	68 d0 4a 12 f0       	push   $0xf0124ad0
f0103681:	e8 15 d8 ff ff       	call   f0100e9b <cprintf>
f0103686:	83 c4 10             	add    $0x10,%esp
f0103689:	eb 61                	jmp    f01036ec <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010368b:	e8 bd ed ff ff       	call   f010244d <isUHeapPlacementStrategyBESTFIT>
f0103690:	84 c0                	test   %al,%al
f0103692:	74 12                	je     f01036a6 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0103694:	83 ec 0c             	sub    $0xc,%esp
f0103697:	68 fc 4a 12 f0       	push   $0xf0124afc
f010369c:	e8 fa d7 ff ff       	call   f0100e9b <cprintf>
f01036a1:	83 c4 10             	add    $0x10,%esp
f01036a4:	eb 46                	jmp    f01036ec <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01036a6:	e8 b7 ed ff ff       	call   f0102462 <isUHeapPlacementStrategyNEXTFIT>
f01036ab:	84 c0                	test   %al,%al
f01036ad:	74 12                	je     f01036c1 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01036af:	83 ec 0c             	sub    $0xc,%esp
f01036b2:	68 28 4b 12 f0       	push   $0xf0124b28
f01036b7:	e8 df d7 ff ff       	call   f0100e9b <cprintf>
f01036bc:	83 c4 10             	add    $0x10,%esp
f01036bf:	eb 2b                	jmp    f01036ec <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01036c1:	e8 b1 ed ff ff       	call   f0102477 <isUHeapPlacementStrategyWORSTFIT>
f01036c6:	84 c0                	test   %al,%al
f01036c8:	74 12                	je     f01036dc <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01036ca:	83 ec 0c             	sub    $0xc,%esp
f01036cd:	68 54 4b 12 f0       	push   $0xf0124b54
f01036d2:	e8 c4 d7 ff ff       	call   f0100e9b <cprintf>
f01036d7:	83 c4 10             	add    $0x10,%esp
f01036da:	eb 10                	jmp    f01036ec <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 80 4b 12 f0       	push   $0xf0124b80
f01036e4:	e8 b2 d7 ff ff       	call   f0100e9b <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp

	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01036f9:	e8 42 ec ff ff       	call   f0102340 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01036fe:	83 ec 0c             	sub    $0xc,%esp
f0103701:	68 ac 4b 12 f0       	push   $0xf0124bac
f0103706:	e8 90 d7 ff ff       	call   f0100e9b <cprintf>
f010370b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010371b:	e8 30 ec ff ff       	call   f0102350 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103720:	83 ec 0c             	sub    $0xc,%esp
f0103723:	68 ac 4b 12 f0       	push   $0xf0124bac
f0103728:	e8 6e d7 ff ff       	call   f0100e9b <cprintf>
f010372d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103730:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103735:	c9                   	leave  
f0103736:	c3                   	ret    

f0103737 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103737:	55                   	push   %ebp
f0103738:	89 e5                	mov    %esp,%ebp
f010373a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010373d:	e8 1e ec ff ff       	call   f0102360 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0103742:	83 ec 0c             	sub    $0xc,%esp
f0103745:	68 e0 4b 12 f0       	push   $0xf0124be0
f010374a:	e8 4c d7 ff ff       	call   f0100e9b <cprintf>
f010374f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103752:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103757:	c9                   	leave  
f0103758:	c3                   	ret    

f0103759 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103759:	55                   	push   %ebp
f010375a:	89 e5                	mov    %esp,%ebp
f010375c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010375f:	e8 0c ec ff ff       	call   f0102370 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0103764:	83 ec 0c             	sub    $0xc,%esp
f0103767:	68 10 4c 12 f0       	push   $0xf0124c10
f010376c:	e8 2a d7 ff ff       	call   f0100e9b <cprintf>
f0103771:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103774:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103779:	c9                   	leave  
f010377a:	c3                   	ret    

f010377b <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010377b:	55                   	push   %ebp
f010377c:	89 e5                	mov    %esp,%ebp
f010377e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0103781:	e8 fa eb ff ff       	call   f0102380 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103786:	83 ec 0c             	sub    $0xc,%esp
f0103789:	68 40 4c 12 f0       	push   $0xf0124c40
f010378e:	e8 08 d7 ff ff       	call   f0100e9b <cprintf>
f0103793:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103796:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010379b:	c9                   	leave  
f010379c:	c3                   	ret    

f010379d <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010379d:	55                   	push   %ebp
f010379e:	89 e5                	mov    %esp,%ebp
f01037a0:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01037a3:	e8 e8 eb ff ff       	call   f0102390 <isKHeapPlacementStrategyCONTALLOC>
f01037a8:	84 c0                	test   %al,%al
f01037aa:	74 12                	je     f01037be <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01037ac:	83 ec 0c             	sub    $0xc,%esp
f01037af:	68 74 4c 12 f0       	push   $0xf0124c74
f01037b4:	e8 e2 d6 ff ff       	call   f0100e9b <cprintf>
f01037b9:	83 c4 10             	add    $0x10,%esp
f01037bc:	eb 7c                	jmp    f010383a <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01037be:	e8 e1 eb ff ff       	call   f01023a4 <isKHeapPlacementStrategyFIRSTFIT>
f01037c3:	84 c0                	test   %al,%al
f01037c5:	74 12                	je     f01037d9 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01037c7:	83 ec 0c             	sub    $0xc,%esp
f01037ca:	68 b0 4c 12 f0       	push   $0xf0124cb0
f01037cf:	e8 c7 d6 ff ff       	call   f0100e9b <cprintf>
f01037d4:	83 c4 10             	add    $0x10,%esp
f01037d7:	eb 61                	jmp    f010383a <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01037d9:	e8 db eb ff ff       	call   f01023b9 <isKHeapPlacementStrategyBESTFIT>
f01037de:	84 c0                	test   %al,%al
f01037e0:	74 12                	je     f01037f4 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01037e2:	83 ec 0c             	sub    $0xc,%esp
f01037e5:	68 e0 4c 12 f0       	push   $0xf0124ce0
f01037ea:	e8 ac d6 ff ff       	call   f0100e9b <cprintf>
f01037ef:	83 c4 10             	add    $0x10,%esp
f01037f2:	eb 46                	jmp    f010383a <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01037f4:	e8 d5 eb ff ff       	call   f01023ce <isKHeapPlacementStrategyNEXTFIT>
f01037f9:	84 c0                	test   %al,%al
f01037fb:	74 12                	je     f010380f <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01037fd:	83 ec 0c             	sub    $0xc,%esp
f0103800:	68 0c 4d 12 f0       	push   $0xf0124d0c
f0103805:	e8 91 d6 ff ff       	call   f0100e9b <cprintf>
f010380a:	83 c4 10             	add    $0x10,%esp
f010380d:	eb 2b                	jmp    f010383a <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010380f:	e8 cf eb ff ff       	call   f01023e3 <isKHeapPlacementStrategyWORSTFIT>
f0103814:	84 c0                	test   %al,%al
f0103816:	74 12                	je     f010382a <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103818:	83 ec 0c             	sub    $0xc,%esp
f010381b:	68 38 4d 12 f0       	push   $0xf0124d38
f0103820:	e8 76 d6 ff ff       	call   f0100e9b <cprintf>
f0103825:	83 c4 10             	add    $0x10,%esp
f0103828:	eb 10                	jmp    f010383a <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010382a:	83 ec 0c             	sub    $0xc,%esp
f010382d:	68 68 4d 12 f0       	push   $0xf0124d68
f0103832:	e8 64 d6 ff ff       	call   f0100e9b <cprintf>
f0103837:	83 c4 10             	add    $0x10,%esp

	return 0;
f010383a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010383f:	c9                   	leave  
f0103840:	c3                   	ret    

f0103841 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103841:	55                   	push   %ebp
f0103842:	89 e5                	mov    %esp,%ebp
f0103844:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103847:	e8 26 ab 00 00       	call   f010e372 <isBufferingEnabled>
f010384c:	84 c0                	test   %al,%al
f010384e:	75 12                	jne    f0103862 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0103850:	83 ec 0c             	sub    $0xc,%esp
f0103853:	68 98 4d 12 f0       	push   $0xf0124d98
f0103858:	e8 3e d6 ff ff       	call   f0100e9b <cprintf>
f010385d:	83 c4 10             	add    $0x10,%esp
f0103860:	eb 1d                	jmp    f010387f <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0103862:	83 ec 0c             	sub    $0xc,%esp
f0103865:	6a 00                	push   $0x0
f0103867:	e8 e0 aa 00 00       	call   f010e34c <enableModifiedBuffer>
f010386c:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010386f:	83 ec 0c             	sub    $0xc,%esp
f0103872:	68 d4 4d 12 f0       	push   $0xf0124dd4
f0103877:	e8 1f d6 ff ff       	call   f0100e9b <cprintf>
f010387c:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010387f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103884:	c9                   	leave  
f0103885:	c3                   	ret    

f0103886 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103886:	55                   	push   %ebp
f0103887:	89 e5                	mov    %esp,%ebp
f0103889:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010388c:	e8 e1 aa 00 00       	call   f010e372 <isBufferingEnabled>
f0103891:	84 c0                	test   %al,%al
f0103893:	75 12                	jne    f01038a7 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0103895:	83 ec 0c             	sub    $0xc,%esp
f0103898:	68 98 4d 12 f0       	push   $0xf0124d98
f010389d:	e8 f9 d5 ff ff       	call   f0100e9b <cprintf>
f01038a2:	83 c4 10             	add    $0x10,%esp
f01038a5:	eb 1d                	jmp    f01038c4 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01038a7:	83 ec 0c             	sub    $0xc,%esp
f01038aa:	6a 01                	push   $0x1
f01038ac:	e8 9b aa 00 00       	call   f010e34c <enableModifiedBuffer>
f01038b1:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01038b4:	83 ec 0c             	sub    $0xc,%esp
f01038b7:	68 f8 4d 12 f0       	push   $0xf0124df8
f01038bc:	e8 da d5 ff ff       	call   f0100e9b <cprintf>
f01038c1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01038c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01038c9:	c9                   	leave  
f01038ca:	c3                   	ret    

f01038cb <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01038cb:	55                   	push   %ebp
f01038cc:	89 e5                	mov    %esp,%ebp
f01038ce:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01038d1:	83 ec 0c             	sub    $0xc,%esp
f01038d4:	6a 00                	push   $0x0
f01038d6:	e8 89 aa 00 00       	call   f010e364 <enableBuffering>
f01038db:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01038de:	83 ec 0c             	sub    $0xc,%esp
f01038e1:	6a 00                	push   $0x0
f01038e3:	e8 64 aa 00 00       	call   f010e34c <enableModifiedBuffer>
f01038e8:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01038eb:	83 ec 0c             	sub    $0xc,%esp
f01038ee:	68 18 4e 12 f0       	push   $0xf0124e18
f01038f3:	e8 a3 d5 ff ff       	call   f0100e9b <cprintf>
f01038f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01038fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103900:	c9                   	leave  
f0103901:	c3                   	ret    

f0103902 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0103902:	55                   	push   %ebp
f0103903:	89 e5                	mov    %esp,%ebp
f0103905:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103908:	83 ec 0c             	sub    $0xc,%esp
f010390b:	6a 01                	push   $0x1
f010390d:	e8 52 aa 00 00       	call   f010e364 <enableBuffering>
f0103912:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0103915:	83 ec 0c             	sub    $0xc,%esp
f0103918:	6a 01                	push   $0x1
f010391a:	e8 2d aa 00 00       	call   f010e34c <enableModifiedBuffer>
f010391f:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0103922:	e8 63 aa 00 00       	call   f010e38a <getModifiedBufferLength>
f0103927:	85 c0                	test   %eax,%eax
f0103929:	75 59                	jne    f0103984 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010392b:	83 ec 0c             	sub    $0xc,%esp
f010392e:	68 34 4e 12 f0       	push   $0xf0124e34
f0103933:	e8 63 d5 ff ff       	call   f0100e9b <cprintf>
f0103938:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010393b:	83 ec 08             	sub    $0x8,%esp
f010393e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103941:	50                   	push   %eax
f0103942:	68 64 4e 12 f0       	push   $0xf0124e64
f0103947:	e8 92 df 01 00       	call   f01218de <readline>
f010394c:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010394f:	83 ec 04             	sub    $0x4,%esp
f0103952:	6a 0a                	push   $0xa
f0103954:	6a 00                	push   $0x0
f0103956:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103959:	50                   	push   %eax
f010395a:	e8 e5 e4 01 00       	call   f0121e44 <strtol>
f010395f:	83 c4 10             	add    $0x10,%esp
f0103962:	83 ec 0c             	sub    $0xc,%esp
f0103965:	50                   	push   %eax
f0103966:	e8 11 aa 00 00       	call   f010e37c <setModifiedBufferLength>
f010396b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010396e:	e8 17 aa 00 00       	call   f010e38a <getModifiedBufferLength>
f0103973:	83 ec 08             	sub    $0x8,%esp
f0103976:	50                   	push   %eax
f0103977:	68 90 4e 12 f0       	push   $0xf0124e90
f010397c:	e8 1a d5 ff ff       	call   f0100e9b <cprintf>
f0103981:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103984:	83 ec 0c             	sub    $0xc,%esp
f0103987:	68 b5 4e 12 f0       	push   $0xf0124eb5
f010398c:	e8 0a d5 ff ff       	call   f0100e9b <cprintf>
f0103991:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103994:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103999:	c9                   	leave  
f010399a:	c3                   	ret    

f010399b <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010399b:	55                   	push   %ebp
f010399c:	89 e5                	mov    %esp,%ebp
f010399e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01039a1:	e8 cc a9 00 00       	call   f010e372 <isBufferingEnabled>
f01039a6:	84 c0                	test   %al,%al
f01039a8:	75 12                	jne    f01039bc <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01039aa:	83 ec 0c             	sub    $0xc,%esp
f01039ad:	68 d0 4e 12 f0       	push   $0xf0124ed0
f01039b2:	e8 e4 d4 ff ff       	call   f0100e9b <cprintf>
f01039b7:	83 c4 10             	add    $0x10,%esp
f01039ba:	eb 19                	jmp    f01039d5 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01039bc:	e8 99 a9 00 00       	call   f010e35a <isModifiedBufferEnabled>
f01039c1:	84 c0                	test   %al,%al
f01039c3:	75 10                	jne    f01039d5 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01039c5:	83 ec 0c             	sub    $0xc,%esp
f01039c8:	68 20 4f 12 f0       	push   $0xf0124f20
f01039cd:	e8 c9 d4 ff ff       	call   f0100e9b <cprintf>
f01039d2:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01039d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039d8:	83 c0 04             	add    $0x4,%eax
f01039db:	8b 00                	mov    (%eax),%eax
f01039dd:	83 ec 04             	sub    $0x4,%esp
f01039e0:	6a 0a                	push   $0xa
f01039e2:	6a 00                	push   $0x0
f01039e4:	50                   	push   %eax
f01039e5:	e8 5a e4 01 00       	call   f0121e44 <strtol>
f01039ea:	83 c4 10             	add    $0x10,%esp
f01039ed:	83 ec 0c             	sub    $0xc,%esp
f01039f0:	50                   	push   %eax
f01039f1:	e8 86 a9 00 00       	call   f010e37c <setModifiedBufferLength>
f01039f6:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01039f9:	e8 8c a9 00 00       	call   f010e38a <getModifiedBufferLength>
f01039fe:	83 ec 08             	sub    $0x8,%esp
f0103a01:	50                   	push   %eax
f0103a02:	68 90 4e 12 f0       	push   $0xf0124e90
f0103a07:	e8 8f d4 ff ff       	call   f0100e9b <cprintf>
f0103a0c:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a14:	c9                   	leave  
f0103a15:	c3                   	ret    

f0103a16 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103a16:	55                   	push   %ebp
f0103a17:	89 e5                	mov    %esp,%ebp
f0103a19:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103a1c:	e8 51 a9 00 00       	call   f010e372 <isBufferingEnabled>
f0103a21:	84 c0                	test   %al,%al
f0103a23:	75 12                	jne    f0103a37 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103a25:	83 ec 0c             	sub    $0xc,%esp
f0103a28:	68 d0 4e 12 f0       	push   $0xf0124ed0
f0103a2d:	e8 69 d4 ff ff       	call   f0100e9b <cprintf>
f0103a32:	83 c4 10             	add    $0x10,%esp
f0103a35:	eb 19                	jmp    f0103a50 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103a37:	e8 1e a9 00 00       	call   f010e35a <isModifiedBufferEnabled>
f0103a3c:	84 c0                	test   %al,%al
f0103a3e:	75 10                	jne    f0103a50 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103a40:	83 ec 0c             	sub    $0xc,%esp
f0103a43:	68 20 4f 12 f0       	push   $0xf0124f20
f0103a48:	e8 4e d4 ff ff       	call   f0100e9b <cprintf>
f0103a4d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0103a50:	e8 35 a9 00 00       	call   f010e38a <getModifiedBufferLength>
f0103a55:	83 ec 08             	sub    $0x8,%esp
f0103a58:	50                   	push   %eax
f0103a59:	68 66 4f 12 f0       	push   $0xf0124f66
f0103a5e:	e8 38 d4 ff ff       	call   f0100e9b <cprintf>
f0103a63:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a66:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a6b:	c9                   	leave  
f0103a6c:	c3                   	ret    

f0103a6d <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103a6d:	55                   	push   %ebp
f0103a6e:	89 e5                	mov    %esp,%ebp
f0103a70:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f0103a73:	83 ec 08             	sub    $0x8,%esp
f0103a76:	ff 75 0c             	pushl  0xc(%ebp)
f0103a79:	ff 75 08             	pushl  0x8(%ebp)
f0103a7c:	e8 4f af 00 00       	call   f010e9d0 <tst_handler>
f0103a81:	83 c4 10             	add    $0x10,%esp
}
f0103a84:	c9                   	leave  
f0103a85:	c3                   	ret    

f0103a86 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103a86:	55                   	push   %ebp
f0103a87:	89 e5                	mov    %esp,%ebp
f0103a89:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8f:	05 00 14 00 00       	add    $0x1400,%eax
f0103a94:	c1 e0 03             	shl    $0x3,%eax
f0103a97:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103a9a:	83 ec 04             	sub    $0x4,%esp
f0103a9d:	6a 08                	push   $0x8
f0103a9f:	ff 75 0c             	pushl  0xc(%ebp)
f0103aa2:	ff 75 f4             	pushl  -0xc(%ebp)
f0103aa5:	e8 08 e8 01 00       	call   f01222b2 <ide_read>
f0103aaa:	83 c4 10             	add    $0x10,%esp
f0103aad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103ab0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ab3:	c9                   	leave  
f0103ab4:	c3                   	ret    

f0103ab5 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103ab5:	55                   	push   %ebp
f0103ab6:	89 e5                	mov    %esp,%ebp
f0103ab8:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103abb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103abe:	05 00 14 00 00       	add    $0x1400,%eax
f0103ac3:	c1 e0 03             	shl    $0x3,%eax
f0103ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103ac9:	83 ec 04             	sub    $0x4,%esp
f0103acc:	6a 08                	push   $0x8
f0103ace:	ff 75 0c             	pushl  0xc(%ebp)
f0103ad1:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad4:	e8 19 e9 01 00       	call   f01223f2 <ide_write>
f0103ad9:	83 c4 10             	add    $0x10,%esp
f0103adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103ae3:	74 14                	je     f0103af9 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103ae5:	83 ec 04             	sub    $0x4,%esp
f0103ae8:	68 84 4f 12 f0       	push   $0xf0124f84
f0103aed:	6a 2e                	push   $0x2e
f0103aef:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0103af4:	e8 21 c7 ff ff       	call   f010021a <_panic>
	return success;
f0103af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103afc:	c9                   	leave  
f0103afd:	c3                   	ret    

f0103afe <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103afe:	55                   	push   %ebp
f0103aff:	89 e5                	mov    %esp,%ebp
f0103b01:	56                   	push   %esi
f0103b02:	53                   	push   %ebx
f0103b03:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103b06:	c7 05 04 25 41 f0 00 	movl   $0x0,0xf0412504
f0103b0d:	00 00 00 
f0103b10:	c7 05 08 25 41 f0 00 	movl   $0x0,0xf0412508
f0103b17:	00 00 00 
f0103b1a:	c7 05 10 25 41 f0 00 	movl   $0x0,0xf0412510
f0103b21:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103b24:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103b2b:	e9 20 01 00 00       	jmp    f0103c50 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103b30:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103b36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b39:	89 d0                	mov    %edx,%eax
f0103b3b:	01 c0                	add    %eax,%eax
f0103b3d:	01 d0                	add    %edx,%eax
f0103b3f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b46:	01 d8                	add    %ebx,%eax
f0103b48:	01 d0                	add    %edx,%eax
f0103b4a:	01 c8                	add    %ecx,%eax
f0103b4c:	83 ec 0c             	sub    $0xc,%esp
f0103b4f:	50                   	push   %eax
f0103b50:	e8 79 38 00 00       	call   f01073ce <initialize_frame_info>
f0103b55:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103b58:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b61:	89 d0                	mov    %edx,%eax
f0103b63:	01 c0                	add    %eax,%eax
f0103b65:	01 d0                	add    %edx,%eax
f0103b67:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b6e:	01 d8                	add    %ebx,%eax
f0103b70:	01 d0                	add    %edx,%eax
f0103b72:	01 c8                	add    %ecx,%eax
f0103b74:	85 c0                	test   %eax,%eax
f0103b76:	75 14                	jne    f0103b8c <initialize_disk_page_file+0x8e>
f0103b78:	83 ec 04             	sub    $0x4,%esp
f0103b7b:	68 b8 4f 12 f0       	push   $0xf0124fb8
f0103b80:	6a 59                	push   $0x59
f0103b82:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0103b87:	e8 8e c6 ff ff       	call   f010021a <_panic>
f0103b8c:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103b92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b95:	89 d0                	mov    %edx,%eax
f0103b97:	01 c0                	add    %eax,%eax
f0103b99:	01 d0                	add    %edx,%eax
f0103b9b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103ba2:	01 d8                	add    %ebx,%eax
f0103ba4:	01 d0                	add    %edx,%eax
f0103ba6:	01 c8                	add    %ecx,%eax
f0103ba8:	8b 15 04 25 41 f0    	mov    0xf0412504,%edx
f0103bae:	89 10                	mov    %edx,(%eax)
f0103bb0:	8b 00                	mov    (%eax),%eax
f0103bb2:	85 c0                	test   %eax,%eax
f0103bb4:	74 27                	je     f0103bdd <initialize_disk_page_file+0xdf>
f0103bb6:	8b 0d 04 25 41 f0    	mov    0xf0412504,%ecx
f0103bbc:	8b 1d 0c 40 3f f0    	mov    0xf03f400c,%ebx
f0103bc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bc5:	89 d0                	mov    %edx,%eax
f0103bc7:	01 c0                	add    %eax,%eax
f0103bc9:	01 d0                	add    %edx,%eax
f0103bcb:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103bd2:	01 f0                	add    %esi,%eax
f0103bd4:	01 d0                	add    %edx,%eax
f0103bd6:	01 d8                	add    %ebx,%eax
f0103bd8:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bdb:	eb 21                	jmp    f0103bfe <initialize_disk_page_file+0x100>
f0103bdd:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103be6:	89 d0                	mov    %edx,%eax
f0103be8:	01 c0                	add    %eax,%eax
f0103bea:	01 d0                	add    %edx,%eax
f0103bec:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bf3:	01 d8                	add    %ebx,%eax
f0103bf5:	01 d0                	add    %edx,%eax
f0103bf7:	01 c8                	add    %ecx,%eax
f0103bf9:	a3 08 25 41 f0       	mov    %eax,0xf0412508
f0103bfe:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103c04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c07:	89 d0                	mov    %edx,%eax
f0103c09:	01 c0                	add    %eax,%eax
f0103c0b:	01 d0                	add    %edx,%eax
f0103c0d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c14:	01 d8                	add    %ebx,%eax
f0103c16:	01 d0                	add    %edx,%eax
f0103c18:	01 c8                	add    %ecx,%eax
f0103c1a:	a3 04 25 41 f0       	mov    %eax,0xf0412504
f0103c1f:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103c25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c28:	89 d0                	mov    %edx,%eax
f0103c2a:	01 c0                	add    %eax,%eax
f0103c2c:	01 d0                	add    %edx,%eax
f0103c2e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c35:	01 d8                	add    %ebx,%eax
f0103c37:	01 d0                	add    %edx,%eax
f0103c39:	01 c8                	add    %ecx,%eax
f0103c3b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c42:	a1 10 25 41 f0       	mov    0xf0412510,%eax
f0103c47:	40                   	inc    %eax
f0103c48:	a3 10 25 41 f0       	mov    %eax,0xf0412510
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103c4d:	ff 45 f4             	incl   -0xc(%ebp)
f0103c50:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103c57:	0f 8e d3 fe ff ff    	jle    f0103b30 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103c5d:	90                   	nop
f0103c5e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c61:	5b                   	pop    %ebx
f0103c62:	5e                   	pop    %esi
f0103c63:	5d                   	pop    %ebp
f0103c64:	c3                   	ret    

f0103c65 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103c65:	55                   	push   %ebp
f0103c66:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103c68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6b:	8b 15 0c 40 3f f0    	mov    0xf03f400c,%edx
f0103c71:	29 d0                	sub    %edx,%eax
f0103c73:	c1 f8 02             	sar    $0x2,%eax
f0103c76:	89 c2                	mov    %eax,%edx
f0103c78:	89 d0                	mov    %edx,%eax
f0103c7a:	c1 e0 03             	shl    $0x3,%eax
f0103c7d:	01 d0                	add    %edx,%eax
f0103c7f:	c1 e0 03             	shl    $0x3,%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	c1 e0 03             	shl    $0x3,%eax
f0103c87:	01 d0                	add    %edx,%eax
f0103c89:	c1 e0 03             	shl    $0x3,%eax
f0103c8c:	01 d0                	add    %edx,%eax
f0103c8e:	89 c1                	mov    %eax,%ecx
f0103c90:	c1 e1 0f             	shl    $0xf,%ecx
f0103c93:	01 c8                	add    %ecx,%eax
f0103c95:	c1 e0 03             	shl    $0x3,%eax
f0103c98:	01 d0                	add    %edx,%eax
f0103c9a:	f7 d8                	neg    %eax
}
f0103c9c:	5d                   	pop    %ebp
f0103c9d:	c3                   	ret    

f0103c9e <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103c9e:	55                   	push   %ebp
f0103c9f:	89 e5                	mov    %esp,%ebp
f0103ca1:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103ca4:	a1 04 25 41 f0       	mov    0xf0412504,%eax
f0103ca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103cac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cb0:	75 0a                	jne    f0103cbc <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103cb2:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103cb7:	e9 a7 00 00 00       	jmp    f0103d63 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103cbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cc0:	75 14                	jne    f0103cd6 <allocate_disk_frame+0x38>
f0103cc2:	83 ec 04             	sub    $0x4,%esp
f0103cc5:	68 db 4f 12 f0       	push   $0xf0124fdb
f0103cca:	6a 78                	push   $0x78
f0103ccc:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0103cd1:	e8 44 c5 ff ff       	call   f010021a <_panic>
f0103cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cd9:	8b 00                	mov    (%eax),%eax
f0103cdb:	85 c0                	test   %eax,%eax
f0103cdd:	74 10                	je     f0103cef <allocate_disk_frame+0x51>
f0103cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ce2:	8b 00                	mov    (%eax),%eax
f0103ce4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ce7:	8b 52 04             	mov    0x4(%edx),%edx
f0103cea:	89 50 04             	mov    %edx,0x4(%eax)
f0103ced:	eb 0b                	jmp    f0103cfa <allocate_disk_frame+0x5c>
f0103cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cf2:	8b 40 04             	mov    0x4(%eax),%eax
f0103cf5:	a3 08 25 41 f0       	mov    %eax,0xf0412508
f0103cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cfd:	8b 40 04             	mov    0x4(%eax),%eax
f0103d00:	85 c0                	test   %eax,%eax
f0103d02:	74 0f                	je     f0103d13 <allocate_disk_frame+0x75>
f0103d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d07:	8b 40 04             	mov    0x4(%eax),%eax
f0103d0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d0d:	8b 12                	mov    (%edx),%edx
f0103d0f:	89 10                	mov    %edx,(%eax)
f0103d11:	eb 0a                	jmp    f0103d1d <allocate_disk_frame+0x7f>
f0103d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d16:	8b 00                	mov    (%eax),%eax
f0103d18:	a3 04 25 41 f0       	mov    %eax,0xf0412504
f0103d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d29:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103d30:	a1 10 25 41 f0       	mov    0xf0412510,%eax
f0103d35:	48                   	dec    %eax
f0103d36:	a3 10 25 41 f0       	mov    %eax,0xf0412510
	initialize_frame_info(ptr_frame_info);
f0103d3b:	83 ec 0c             	sub    $0xc,%esp
f0103d3e:	ff 75 f4             	pushl  -0xc(%ebp)
f0103d41:	e8 88 36 00 00       	call   f01073ce <initialize_frame_info>
f0103d46:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103d49:	83 ec 0c             	sub    $0xc,%esp
f0103d4c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103d4f:	e8 11 ff ff ff       	call   f0103c65 <to_disk_frame_number>
f0103d54:	83 c4 10             	add    $0x10,%esp
f0103d57:	89 c2                	mov    %eax,%edx
f0103d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5c:	89 10                	mov    %edx,(%eax)
	return 0;
f0103d5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d63:	c9                   	leave  
f0103d64:	c3                   	ret    

f0103d65 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103d65:	55                   	push   %ebp
f0103d66:	89 e5                	mov    %esp,%ebp
f0103d68:	56                   	push   %esi
f0103d69:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103d6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103d6e:	0f 84 fa 00 00 00    	je     f0103e6e <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103d74:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103d7a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103d7d:	89 d0                	mov    %edx,%eax
f0103d7f:	01 c0                	add    %eax,%eax
f0103d81:	01 d0                	add    %edx,%eax
f0103d83:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103d8a:	01 d8                	add    %ebx,%eax
f0103d8c:	01 d0                	add    %edx,%eax
f0103d8e:	01 c8                	add    %ecx,%eax
f0103d90:	85 c0                	test   %eax,%eax
f0103d92:	75 17                	jne    f0103dab <free_disk_frame+0x46>
f0103d94:	83 ec 04             	sub    $0x4,%esp
f0103d97:	68 b8 4f 12 f0       	push   $0xf0124fb8
f0103d9c:	68 85 00 00 00       	push   $0x85
f0103da1:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0103da6:	e8 6f c4 ff ff       	call   f010021a <_panic>
f0103dab:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103db1:	8b 55 08             	mov    0x8(%ebp),%edx
f0103db4:	89 d0                	mov    %edx,%eax
f0103db6:	01 c0                	add    %eax,%eax
f0103db8:	01 d0                	add    %edx,%eax
f0103dba:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103dc1:	01 d8                	add    %ebx,%eax
f0103dc3:	01 d0                	add    %edx,%eax
f0103dc5:	01 c8                	add    %ecx,%eax
f0103dc7:	8b 15 04 25 41 f0    	mov    0xf0412504,%edx
f0103dcd:	89 10                	mov    %edx,(%eax)
f0103dcf:	8b 00                	mov    (%eax),%eax
f0103dd1:	85 c0                	test   %eax,%eax
f0103dd3:	74 27                	je     f0103dfc <free_disk_frame+0x97>
f0103dd5:	8b 0d 04 25 41 f0    	mov    0xf0412504,%ecx
f0103ddb:	8b 1d 0c 40 3f f0    	mov    0xf03f400c,%ebx
f0103de1:	8b 55 08             	mov    0x8(%ebp),%edx
f0103de4:	89 d0                	mov    %edx,%eax
f0103de6:	01 c0                	add    %eax,%eax
f0103de8:	01 d0                	add    %edx,%eax
f0103dea:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103df1:	01 f0                	add    %esi,%eax
f0103df3:	01 d0                	add    %edx,%eax
f0103df5:	01 d8                	add    %ebx,%eax
f0103df7:	89 41 04             	mov    %eax,0x4(%ecx)
f0103dfa:	eb 21                	jmp    f0103e1d <free_disk_frame+0xb8>
f0103dfc:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103e02:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e05:	89 d0                	mov    %edx,%eax
f0103e07:	01 c0                	add    %eax,%eax
f0103e09:	01 d0                	add    %edx,%eax
f0103e0b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103e12:	01 d8                	add    %ebx,%eax
f0103e14:	01 d0                	add    %edx,%eax
f0103e16:	01 c8                	add    %ecx,%eax
f0103e18:	a3 08 25 41 f0       	mov    %eax,0xf0412508
f0103e1d:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103e23:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e26:	89 d0                	mov    %edx,%eax
f0103e28:	01 c0                	add    %eax,%eax
f0103e2a:	01 d0                	add    %edx,%eax
f0103e2c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103e33:	01 d8                	add    %ebx,%eax
f0103e35:	01 d0                	add    %edx,%eax
f0103e37:	01 c8                	add    %ecx,%eax
f0103e39:	a3 04 25 41 f0       	mov    %eax,0xf0412504
f0103e3e:	8b 0d 0c 40 3f f0    	mov    0xf03f400c,%ecx
f0103e44:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e47:	89 d0                	mov    %edx,%eax
f0103e49:	01 c0                	add    %eax,%eax
f0103e4b:	01 d0                	add    %edx,%eax
f0103e4d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103e54:	01 d8                	add    %ebx,%eax
f0103e56:	01 d0                	add    %edx,%eax
f0103e58:	01 c8                	add    %ecx,%eax
f0103e5a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103e61:	a1 10 25 41 f0       	mov    0xf0412510,%eax
f0103e66:	40                   	inc    %eax
f0103e67:	a3 10 25 41 f0       	mov    %eax,0xf0412510
f0103e6c:	eb 01                	jmp    f0103e6f <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103e6e:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103e6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103e72:	5b                   	pop    %ebx
f0103e73:	5e                   	pop    %esi
f0103e74:	5d                   	pop    %ebp
f0103e75:	c3                   	ret    

f0103e76 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103e76:	55                   	push   %ebp
f0103e77:	89 e5                	mov    %esp,%ebp
f0103e79:	53                   	push   %ebx
f0103e7a:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e80:	c1 e8 16             	shr    $0x16,%eax
f0103e83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103e8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e8d:	01 d0                	add    %edx,%eax
f0103e8f:	8b 00                	mov    (%eax),%eax
f0103e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103e94:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103e9b:	77 1d                	ja     f0103eba <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f0103e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ea0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103ea5:	83 ec 0c             	sub    $0xc,%esp
f0103ea8:	50                   	push   %eax
f0103ea9:	e8 84 49 00 00       	call   f0108832 <kheap_virtual_address>
f0103eae:	83 c4 10             	add    $0x10,%esp
f0103eb1:	89 c2                	mov    %eax,%edx
f0103eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0103eb6:	89 10                	mov    %edx,(%eax)
f0103eb8:	eb 44                	jmp    f0103efe <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103eba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ebd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ec8:	c1 e8 0c             	shr    $0xc,%eax
f0103ecb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103ece:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0103ed3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ed6:	72 17                	jb     f0103eef <get_disk_page_table+0x79>
f0103ed8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103edb:	68 fc 4f 12 f0       	push   $0xf0124ffc
f0103ee0:	68 92 00 00 00       	push   $0x92
f0103ee5:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0103eea:	e8 2b c3 ff ff       	call   f010021a <_panic>
f0103eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ef2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ef7:	89 c2                	mov    %eax,%edx
f0103ef9:	8b 45 14             	mov    0x14(%ebp),%eax
f0103efc:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103efe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f02:	0f 85 80 00 00 00    	jne    f0103f88 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103f08:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103f0c:	74 6a                	je     f0103f78 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103f0e:	83 ec 0c             	sub    $0xc,%esp
f0103f11:	68 00 10 00 00       	push   $0x1000
f0103f16:	e8 86 46 00 00       	call   f01085a1 <kmalloc>
f0103f1b:	83 c4 10             	add    $0x10,%esp
f0103f1e:	89 c2                	mov    %eax,%edx
f0103f20:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f23:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103f25:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f28:	8b 00                	mov    (%eax),%eax
f0103f2a:	85 c0                	test   %eax,%eax
f0103f2c:	75 07                	jne    f0103f35 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103f2e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103f33:	eb 58                	jmp    f0103f8d <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103f35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f38:	c1 e8 16             	shr    $0x16,%eax
f0103f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f45:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0103f48:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f4b:	8b 00                	mov    (%eax),%eax
f0103f4d:	83 ec 0c             	sub    $0xc,%esp
f0103f50:	50                   	push   %eax
f0103f51:	e8 46 49 00 00       	call   f010889c <kheap_physical_address>
f0103f56:	83 c4 10             	add    $0x10,%esp
f0103f59:	83 c8 01             	or     $0x1,%eax
f0103f5c:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103f5e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f61:	8b 00                	mov    (%eax),%eax
f0103f63:	83 ec 04             	sub    $0x4,%esp
f0103f66:	68 00 10 00 00       	push   $0x1000
f0103f6b:	6a 00                	push   $0x0
f0103f6d:	50                   	push   %eax
f0103f6e:	e8 5f dd 01 00       	call   f0121cd2 <memset>
f0103f73:	83 c4 10             	add    $0x10,%esp
f0103f76:	eb 10                	jmp    f0103f88 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103f78:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103f81:	b8 00 00 00 00       	mov    $0x0,%eax
f0103f86:	eb 05                	jmp    f0103f8d <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103f88:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103f8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103f90:	c9                   	leave  
f0103f91:	c3                   	ret    

f0103f92 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103f92:	55                   	push   %ebp
f0103f93:	89 e5                	mov    %esp,%ebp
f0103f95:	83 ec 28             	sub    $0x28,%esp
f0103f98:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f9b:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103f9e:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103fa2:	74 75                	je     f0104019 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103fa4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fae:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103fb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0103fbe:	f7 75 f4             	divl   -0xc(%ebp)
f0103fc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fc4:	29 d0                	sub    %edx,%eax
f0103fc6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103fc9:	73 32                	jae    f0103ffd <pf_add_empty_env_page+0x6b>
f0103fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fce:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103fd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0103fd9:	29 d0                	sub    %edx,%eax
f0103fdb:	c1 e0 0c             	shl    $0xc,%eax
f0103fde:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103fe3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103fe6:	76 15                	jbe    f0103ffd <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103feb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0103ff1:	8d 50 01             	lea    0x1(%eax),%edx
f0103ff4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ff7:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103ffd:	a1 a8 40 3f f0       	mov    0xf03f40a8,%eax
f0104002:	83 ec 04             	sub    $0x4,%esp
f0104005:	50                   	push   %eax
f0104006:	ff 75 0c             	pushl  0xc(%ebp)
f0104009:	ff 75 08             	pushl  0x8(%ebp)
f010400c:	e8 b7 00 00 00       	call   f01040c8 <pf_add_env_page>
f0104011:	83 c4 10             	add    $0x10,%esp
f0104014:	e9 ad 00 00 00       	jmp    f01040c6 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0104019:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104020:	76 19                	jbe    f010403b <pf_add_empty_env_page+0xa9>
f0104022:	68 2c 50 12 f0       	push   $0xf012502c
f0104027:	68 52 50 12 f0       	push   $0xf0125052
f010402c:	68 d1 00 00 00       	push   $0xd1
f0104031:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0104036:	e8 df c1 ff ff       	call   f010021a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010403b:	8b 45 08             	mov    0x8(%ebp),%eax
f010403e:	05 a8 00 00 00       	add    $0xa8,%eax
f0104043:	83 ec 08             	sub    $0x8,%esp
f0104046:	50                   	push   %eax
f0104047:	ff 75 08             	pushl  0x8(%ebp)
f010404a:	e8 d5 05 00 00       	call   f0104624 <get_disk_page_directory>
f010404f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104052:	8b 45 08             	mov    0x8(%ebp),%eax
f0104055:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010405b:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010405e:	52                   	push   %edx
f010405f:	6a 01                	push   $0x1
f0104061:	ff 75 0c             	pushl  0xc(%ebp)
f0104064:	50                   	push   %eax
f0104065:	e8 0c fe ff ff       	call   f0103e76 <get_disk_page_table>
f010406a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010406d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104070:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104073:	c1 ea 0c             	shr    $0xc,%edx
f0104076:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010407c:	c1 e2 02             	shl    $0x2,%edx
f010407f:	01 d0                	add    %edx,%eax
f0104081:	8b 00                	mov    (%eax),%eax
f0104083:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0104086:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104089:	85 c0                	test   %eax,%eax
f010408b:	75 34                	jne    f01040c1 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010408d:	83 ec 0c             	sub    $0xc,%esp
f0104090:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104093:	50                   	push   %eax
f0104094:	e8 05 fc ff ff       	call   f0103c9e <allocate_disk_frame>
f0104099:	83 c4 10             	add    $0x10,%esp
f010409c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010409f:	75 07                	jne    f01040a8 <pf_add_empty_env_page+0x116>
f01040a1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01040a6:	eb 1e                	jmp    f01040c6 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01040a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040ae:	c1 ea 0c             	shr    $0xc,%edx
f01040b1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040b7:	c1 e2 02             	shl    $0x2,%edx
f01040ba:	01 c2                	add    %eax,%edx
f01040bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01040bf:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f01040c1:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01040c6:	c9                   	leave  
f01040c7:	c3                   	ret    

f01040c8 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f01040c8:	55                   	push   %ebp
f01040c9:	89 e5                	mov    %esp,%ebp
f01040cb:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01040ce:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01040d5:	76 19                	jbe    f01040f0 <pf_add_env_page+0x28>
f01040d7:	68 2c 50 12 f0       	push   $0xf012502c
f01040dc:	68 52 50 12 f0       	push   $0xf0125052
f01040e1:	68 e6 00 00 00       	push   $0xe6
f01040e6:	68 9b 4f 12 f0       	push   $0xf0124f9b
f01040eb:	e8 2a c1 ff ff       	call   f010021a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01040f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01040f3:	05 a8 00 00 00       	add    $0xa8,%eax
f01040f8:	83 ec 08             	sub    $0x8,%esp
f01040fb:	50                   	push   %eax
f01040fc:	ff 75 08             	pushl  0x8(%ebp)
f01040ff:	e8 20 05 00 00       	call   f0104624 <get_disk_page_directory>
f0104104:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104107:	8b 45 08             	mov    0x8(%ebp),%eax
f010410a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104110:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0104113:	52                   	push   %edx
f0104114:	6a 01                	push   $0x1
f0104116:	ff 75 0c             	pushl  0xc(%ebp)
f0104119:	50                   	push   %eax
f010411a:	e8 57 fd ff ff       	call   f0103e76 <get_disk_page_table>
f010411f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104122:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104125:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104128:	c1 ea 0c             	shr    $0xc,%edx
f010412b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104131:	c1 e2 02             	shl    $0x2,%edx
f0104134:	01 d0                	add    %edx,%eax
f0104136:	8b 00                	mov    (%eax),%eax
f0104138:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010413b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010413e:	85 c0                	test   %eax,%eax
f0104140:	75 34                	jne    f0104176 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104142:	83 ec 0c             	sub    $0xc,%esp
f0104145:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0104148:	50                   	push   %eax
f0104149:	e8 50 fb ff ff       	call   f0103c9e <allocate_disk_frame>
f010414e:	83 c4 10             	add    $0x10,%esp
f0104151:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104154:	75 07                	jne    f010415d <pf_add_env_page+0x95>
f0104156:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010415b:	eb 31                	jmp    f010418e <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010415d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104160:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104163:	c1 ea 0c             	shr    $0xc,%edx
f0104166:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416c:	c1 e2 02             	shl    $0x2,%edx
f010416f:	01 c2                	add    %eax,%edx
f0104171:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104174:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0104176:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104179:	83 ec 08             	sub    $0x8,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	50                   	push   %eax
f0104180:	e8 30 f9 ff ff       	call   f0103ab5 <write_disk_page>
f0104185:	83 c4 10             	add    $0x10,%esp
f0104188:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010418b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010418e:	c9                   	leave  
f010418f:	c3                   	ret    

f0104190 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0104190:	55                   	push   %ebp
f0104191:	89 e5                	mov    %esp,%ebp
f0104193:	83 ec 28             	sub    $0x28,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0104196:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010419d:	76 19                	jbe    f01041b8 <pf_update_env_page+0x28>
f010419f:	68 2c 50 12 f0       	push   $0xf012502c
f01041a4:	68 52 50 12 f0       	push   $0xf0125052
f01041a9:	68 08 01 00 00       	push   $0x108
f01041ae:	68 9b 4f 12 f0       	push   $0xf0124f9b
f01041b3:	e8 62 c0 ff ff       	call   f010021a <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01041b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01041bb:	05 a8 00 00 00       	add    $0xa8,%eax
f01041c0:	83 ec 08             	sub    $0x8,%esp
f01041c3:	50                   	push   %eax
f01041c4:	ff 75 08             	pushl  0x8(%ebp)
f01041c7:	e8 58 04 00 00       	call   f0104624 <get_disk_page_directory>
f01041cc:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01041cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d2:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01041d8:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01041db:	52                   	push   %edx
f01041dc:	6a 00                	push   $0x0
f01041de:	ff 75 0c             	pushl  0xc(%ebp)
f01041e1:	50                   	push   %eax
f01041e2:	e8 8f fc ff ff       	call   f0103e76 <get_disk_page_table>
f01041e7:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f01041ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041ed:	85 c0                	test   %eax,%eax
f01041ef:	74 29                	je     f010421a <pf_update_env_page+0x8a>
f01041f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041f4:	85 c0                	test   %eax,%eax
f01041f6:	0f 84 c5 00 00 00    	je     f01042c1 <pf_update_env_page+0x131>
f01041fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104202:	c1 ea 0c             	shr    $0xc,%edx
f0104205:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010420b:	c1 e2 02             	shl    $0x2,%edx
f010420e:	01 d0                	add    %edx,%eax
f0104210:	8b 00                	mov    (%eax),%eax
f0104212:	85 c0                	test   %eax,%eax
f0104214:	0f 85 a7 00 00 00    	jne    f01042c1 <pf_update_env_page+0x131>
	{

		uint32 VA = (uint32)virtual_address ;
f010421a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010421d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104220:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104223:	85 c0                	test   %eax,%eax
f0104225:	79 09                	jns    f0104230 <pf_update_env_page+0xa0>
f0104227:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f010422e:	76 30                	jbe    f0104260 <pf_update_env_page+0xd0>
f0104230:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0104237:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010423a:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010423f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104242:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104245:	ba 00 00 00 00       	mov    $0x0,%edx
f010424a:	f7 75 f0             	divl   -0x10(%ebp)
f010424d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104250:	29 d0                	sub    %edx,%eax
f0104252:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104255:	77 53                	ja     f01042aa <pf_update_env_page+0x11a>
f0104257:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f010425e:	77 4a                	ja     f01042aa <pf_update_env_page+0x11a>
//				return ret ;
//			}
//			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
//			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0104260:	83 ec 04             	sub    $0x4,%esp
f0104263:	6a 00                	push   $0x0
f0104265:	ff 75 f4             	pushl  -0xc(%ebp)
f0104268:	ff 75 08             	pushl  0x8(%ebp)
f010426b:	e8 22 fd ff ff       	call   f0103f92 <pf_add_empty_env_page>
f0104270:	83 c4 10             	add    $0x10,%esp
f0104273:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if (ret == E_NO_PAGE_FILE_SPACE)
f0104276:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f010427a:	75 17                	jne    f0104293 <pf_update_env_page+0x103>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010427c:	83 ec 04             	sub    $0x4,%esp
f010427f:	68 68 50 12 f0       	push   $0xf0125068
f0104284:	68 38 01 00 00       	push   $0x138
f0104289:	68 9b 4f 12 f0       	push   $0xf0124f9b
f010428e:	e8 87 bf ff ff       	call   f010021a <_panic>
				}
				//cprintf("[%s] adding EMPTY page with content\n",ptr_env->prog_name);

				ptr_env->nNewPageAdded++ ;
f0104293:	8b 45 08             	mov    0x8(%ebp),%eax
f0104296:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010429c:	8d 50 01             	lea    0x1(%eax),%edx
f010429f:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a2:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
f01042a8:	eb 17                	jmp    f01042c1 <pf_update_env_page+0x131>
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01042aa:	83 ec 04             	sub    $0x4,%esp
f01042ad:	68 b4 50 12 f0       	push   $0xf01250b4
f01042b2:	68 41 01 00 00       	push   $0x141
f01042b7:	68 9b 4f 12 f0       	push   $0xf0124f9b
f01042bc:	e8 59 bf ff ff       	call   f010021a <_panic>
		}
	}
	//2022 END========================================


	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 9d fb ff ff       	call   f0103e76 <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01042df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e2:	c1 ea 0c             	shr    $0xc,%edx
f01042e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042eb:	c1 e2 02             	shl    $0x2,%edx
f01042ee:	01 d0                	add    %edx,%eax
f01042f0:	8b 00                	mov    (%eax),%eax
f01042f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01042f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01042f8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01042fe:	6a 00                	push   $0x0
f0104300:	68 00 00 80 ef       	push   $0xef800000
f0104305:	ff 75 10             	pushl  0x10(%ebp)
f0104308:	50                   	push   %eax
f0104309:	e8 2d 35 00 00       	call   f010783b <map_frame>
f010430e:	83 c4 10             	add    $0x10,%esp

		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f0104311:	c7 45 e0 00 00 80 ef 	movl   $0xef800000,-0x20(%ebp)
f0104318:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010431b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104320:	83 ec 08             	sub    $0x8,%esp
f0104323:	50                   	push   %eax
f0104324:	ff 75 e4             	pushl  -0x1c(%ebp)
f0104327:	e8 89 f7 ff ff       	call   f0103ab5 <write_disk_page>
f010432c:	83 c4 10             	add    $0x10,%esp
f010432f:	89 45 e8             	mov    %eax,-0x18(%ebp)

		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0104332:	8b 45 10             	mov    0x10(%ebp),%eax
f0104335:	8b 40 08             	mov    0x8(%eax),%eax
f0104338:	40                   	inc    %eax
f0104339:	8b 55 10             	mov    0x10(%ebp),%edx
f010433c:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f0104340:	8b 45 08             	mov    0x8(%ebp),%eax
f0104343:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104349:	83 ec 08             	sub    $0x8,%esp
f010434c:	68 00 00 80 ef       	push   $0xef800000
f0104351:	50                   	push   %eax
f0104352:	e8 44 36 00 00       	call   f010799b <unmap_frame>
f0104357:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f010435a:	8b 45 10             	mov    0x10(%ebp),%eax
f010435d:	8b 40 08             	mov    0x8(%eax),%eax
f0104360:	48                   	dec    %eax
f0104361:	8b 55 10             	mov    0x10(%ebp),%edx
f0104364:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0104368:	8b 45 08             	mov    0x8(%ebp),%eax
f010436b:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f0104371:	8d 50 01             	lea    0x1(%eax),%edx
f0104374:	8b 45 08             	mov    0x8(%ebp),%eax
f0104377:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
	//======================

	return ret;
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104380:	c9                   	leave  
f0104381:	c3                   	ret    

f0104382 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0104382:	55                   	push   %ebp
f0104383:	89 e5                	mov    %esp,%ebp
f0104385:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0104388:	8b 45 0c             	mov    0xc(%ebp),%eax
f010438b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010438e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104391:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104396:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104399:	8b 45 08             	mov    0x8(%ebp),%eax
f010439c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01043a2:	85 c0                	test   %eax,%eax
f01043a4:	75 0a                	jne    f01043b0 <pf_read_env_page+0x2e>
f01043a6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043ab:	e9 96 00 00 00       	jmp    f0104446 <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01043b0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01043b6:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01043bc:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01043bf:	51                   	push   %ecx
f01043c0:	6a 00                	push   $0x0
f01043c2:	52                   	push   %edx
f01043c3:	50                   	push   %eax
f01043c4:	e8 ad fa ff ff       	call   f0103e76 <get_disk_page_table>
f01043c9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043cf:	85 c0                	test   %eax,%eax
f01043d1:	75 07                	jne    f01043da <pf_read_env_page+0x58>
f01043d3:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043d8:	eb 6c                	jmp    f0104446 <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01043da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043dd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043e0:	c1 ea 0c             	shr    $0xc,%edx
f01043e3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01043e9:	c1 e2 02             	shl    $0x2,%edx
f01043ec:	01 d0                	add    %edx,%eax
f01043ee:	8b 00                	mov    (%eax),%eax
f01043f0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01043f7:	75 07                	jne    f0104400 <pf_read_env_page+0x7e>
f01043f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043fe:	eb 46                	jmp    f0104446 <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104400:	83 ec 08             	sub    $0x8,%esp
f0104403:	ff 75 0c             	pushl  0xc(%ebp)
f0104406:	ff 75 f0             	pushl  -0x10(%ebp)
f0104409:	e8 78 f6 ff ff       	call   f0103a86 <read_disk_page>
f010440e:	83 c4 10             	add    $0x10,%esp
f0104411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0104414:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104417:	8b 45 08             	mov    0x8(%ebp),%eax
f010441a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104420:	6a 40                	push   $0x40
f0104422:	6a 00                	push   $0x0
f0104424:	52                   	push   %edx
f0104425:	50                   	push   %eax
f0104426:	e8 c6 47 00 00       	call   f0108bf1 <pt_set_page_permissions>
f010442b:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f010442e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104431:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0104437:	8d 50 01             	lea    0x1(%eax),%edx
f010443a:	8b 45 08             	mov    0x8(%ebp),%eax
f010443d:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
	//======================

	return disk_read_error;
f0104443:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104446:	c9                   	leave  
f0104447:	c3                   	ret    

f0104448 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104448:	55                   	push   %ebp
f0104449:	89 e5                	mov    %esp,%ebp
f010444b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010444e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104451:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104457:	85 c0                	test   %eax,%eax
f0104459:	74 65                	je     f01044c0 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010445b:	8b 45 08             	mov    0x8(%ebp),%eax
f010445e:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104464:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0104467:	52                   	push   %edx
f0104468:	6a 00                	push   $0x0
f010446a:	ff 75 0c             	pushl  0xc(%ebp)
f010446d:	50                   	push   %eax
f010446e:	e8 03 fa ff ff       	call   f0103e76 <get_disk_page_table>
f0104473:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0104476:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104479:	85 c0                	test   %eax,%eax
f010447b:	74 46                	je     f01044c3 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010447d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104480:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104483:	c1 ea 0c             	shr    $0xc,%edx
f0104486:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010448c:	c1 e2 02             	shl    $0x2,%edx
f010448f:	01 d0                	add    %edx,%eax
f0104491:	8b 00                	mov    (%eax),%eax
f0104493:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0104496:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104499:	8b 55 0c             	mov    0xc(%ebp),%edx
f010449c:	c1 ea 0c             	shr    $0xc,%edx
f010449f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044a5:	c1 e2 02             	shl    $0x2,%edx
f01044a8:	01 d0                	add    %edx,%eax
f01044aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01044b0:	83 ec 0c             	sub    $0xc,%esp
f01044b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01044b6:	e8 aa f8 ff ff       	call   f0103d65 <free_disk_frame>
f01044bb:	83 c4 10             	add    $0x10,%esp
f01044be:	eb 04                	jmp    f01044c4 <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01044c0:	90                   	nop
f01044c1:	eb 01                	jmp    f01044c4 <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f01044c3:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f01044c4:	c9                   	leave  
f01044c5:	c3                   	ret    

f01044c6 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f01044c6:	55                   	push   %ebp
f01044c7:	89 e5                	mov    %esp,%ebp
f01044c9:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01044cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01044d3:	e9 c1 00 00 00       	jmp    f0104599 <pf_free_env+0xd3>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f01044d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044db:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01044e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044e4:	c1 e2 02             	shl    $0x2,%edx
f01044e7:	01 d0                	add    %edx,%eax
f01044e9:	8b 00                	mov    (%eax),%eax
f01044eb:	83 e0 01             	and    $0x1,%eax
f01044ee:	85 c0                	test   %eax,%eax
f01044f0:	0f 84 9f 00 00 00    	je     f0104595 <pf_free_env+0xcf>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f01044f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01044ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104502:	c1 e2 02             	shl    $0x2,%edx
f0104505:	01 d0                	add    %edx,%eax
f0104507:	8b 00                	mov    (%eax),%eax
f0104509:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010450e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0104511:	83 ec 0c             	sub    $0xc,%esp
f0104514:	ff 75 ec             	pushl  -0x14(%ebp)
f0104517:	e8 16 43 00 00       	call   f0108832 <kheap_virtual_address>
f010451c:	83 c4 10             	add    $0x10,%esp
f010451f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104522:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104529:	eb 3a                	jmp    f0104565 <pf_free_env+0x9f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010452b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010452e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104535:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104538:	01 d0                	add    %edx,%eax
f010453a:	8b 00                	mov    (%eax),%eax
f010453c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f010453f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104542:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104549:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010454c:	01 d0                	add    %edx,%eax
f010454e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0104554:	83 ec 0c             	sub    $0xc,%esp
f0104557:	ff 75 e4             	pushl  -0x1c(%ebp)
f010455a:	e8 06 f8 ff ff       	call   f0103d65 <free_disk_frame>
f010455f:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0104562:	ff 45 f0             	incl   -0x10(%ebp)
f0104565:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010456c:	76 bd                	jbe    f010452b <pf_free_env+0x65>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010456e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104571:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104577:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010457a:	c1 e2 02             	shl    $0x2,%edx
f010457d:	01 d0                	add    %edx,%eax
f010457f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0104585:	83 ec 0c             	sub    $0xc,%esp
f0104588:	ff 75 e8             	pushl  -0x18(%ebp)
f010458b:	e8 a9 41 00 00       	call   f0108739 <kfree>
f0104590:	83 c4 10             	add    $0x10,%esp
f0104593:	eb 01                	jmp    f0104596 <pf_free_env+0xd0>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104595:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104596:	ff 45 f4             	incl   -0xc(%ebp)
f0104599:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f01045a0:	0f 86 32 ff ff ff    	jbe    f01044d8 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f01045a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045af:	83 ec 0c             	sub    $0xc,%esp
f01045b2:	50                   	push   %eax
f01045b3:	e8 81 41 00 00       	call   f0108739 <kfree>
f01045b8:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f01045bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01045be:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f01045c5:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f01045c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045cb:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f01045d2:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f01045d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01045de:	85 c0                	test   %eax,%eax
f01045e0:	74 3f                	je     f0104621 <pf_free_env+0x15b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f01045e2:	83 ec 0c             	sub    $0xc,%esp
f01045e5:	ff 75 08             	pushl  0x8(%ebp)
f01045e8:	e8 2e 03 00 00       	call   f010491b <__pf_remove_env_all_tables>
f01045ed:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f01045f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f3:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01045f9:	83 ec 0c             	sub    $0xc,%esp
f01045fc:	50                   	push   %eax
f01045fd:	e8 37 41 00 00       	call   f0108739 <kfree>
f0104602:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0104605:	8b 45 08             	mov    0x8(%ebp),%eax
f0104608:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010460f:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f0104612:	8b 45 08             	mov    0x8(%ebp),%eax
f0104615:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010461c:	00 00 00 
f010461f:	eb 01                	jmp    f0104622 <pf_free_env+0x15c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0104621:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0104622:	c9                   	leave  
f0104623:	c3                   	ret    

f0104624 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0104624:	55                   	push   %ebp
f0104625:	89 e5                	mov    %esp,%ebp
f0104627:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010462a:	8b 45 08             	mov    0x8(%ebp),%eax
f010462d:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f0104633:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104636:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0104638:	8b 45 0c             	mov    0xc(%ebp),%eax
f010463b:	8b 00                	mov    (%eax),%eax
f010463d:	85 c0                	test   %eax,%eax
f010463f:	75 5b                	jne    f010469c <get_disk_page_directory+0x78>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0104641:	83 ec 0c             	sub    $0xc,%esp
f0104644:	68 00 10 00 00       	push   $0x1000
f0104649:	e8 53 3f 00 00       	call   f01085a1 <kmalloc>
f010464e:	83 c4 10             	add    $0x10,%esp
f0104651:	89 c2                	mov    %eax,%edx
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0104658:	8b 45 0c             	mov    0xc(%ebp),%eax
f010465b:	8b 00                	mov    (%eax),%eax
f010465d:	85 c0                	test   %eax,%eax
f010465f:	75 07                	jne    f0104668 <get_disk_page_directory+0x44>
			{
				return E_NO_VM;
f0104661:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0104666:	eb 39                	jmp    f01046a1 <get_disk_page_directory+0x7d>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0104668:	8b 45 0c             	mov    0xc(%ebp),%eax
f010466b:	8b 00                	mov    (%eax),%eax
f010466d:	83 ec 0c             	sub    $0xc,%esp
f0104670:	50                   	push   %eax
f0104671:	e8 26 42 00 00       	call   f010889c <kheap_physical_address>
f0104676:	83 c4 10             	add    $0x10,%esp
f0104679:	89 c2                	mov    %eax,%edx
f010467b:	8b 45 08             	mov    0x8(%ebp),%eax
f010467e:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104684:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104687:	8b 00                	mov    (%eax),%eax
f0104689:	83 ec 04             	sub    $0x4,%esp
f010468c:	68 00 10 00 00       	push   $0x1000
f0104691:	6a 00                	push   $0x0
f0104693:	50                   	push   %eax
f0104694:	e8 39 d6 01 00       	call   f0121cd2 <memset>
f0104699:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010469c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01046a1:	c9                   	leave  
f01046a2:	c3                   	ret    

f01046a3 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01046a3:	55                   	push   %ebp
f01046a4:	89 e5                	mov    %esp,%ebp
f01046a6:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01046a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01046b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01046b7:	eb 7e                	jmp    f0104737 <pf_calculate_allocated_pages+0x94>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01046c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01046c5:	c1 e2 02             	shl    $0x2,%edx
f01046c8:	01 d0                	add    %edx,%eax
f01046ca:	8b 00                	mov    (%eax),%eax
f01046cc:	83 e0 01             	and    $0x1,%eax
f01046cf:	85 c0                	test   %eax,%eax
f01046d1:	74 60                	je     f0104733 <pf_calculate_allocated_pages+0x90>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01046dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01046df:	c1 e2 02             	shl    $0x2,%edx
f01046e2:	01 d0                	add    %edx,%eax
f01046e4:	8b 00                	mov    (%eax),%eax
f01046e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01046eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f01046ee:	83 ec 0c             	sub    $0xc,%esp
f01046f1:	ff 75 e8             	pushl  -0x18(%ebp)
f01046f4:	e8 39 41 00 00       	call   f0108832 <kheap_virtual_address>
f01046f9:	83 c4 10             	add    $0x10,%esp
f01046fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01046ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104706:	eb 20                	jmp    f0104728 <pf_calculate_allocated_pages+0x85>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010470b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104712:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104715:	01 d0                	add    %edx,%eax
f0104717:	8b 00                	mov    (%eax),%eax
f0104719:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f010471c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0104720:	74 03                	je     f0104725 <pf_calculate_allocated_pages+0x82>
				counter ++;
f0104722:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104725:	ff 45 ec             	incl   -0x14(%ebp)
f0104728:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010472f:	76 d7                	jbe    f0104708 <pf_calculate_allocated_pages+0x65>
f0104731:	eb 01                	jmp    f0104734 <pf_calculate_allocated_pages+0x91>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0104733:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0104734:	ff 45 f4             	incl   -0xc(%ebp)
f0104737:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010473e:	0f 86 75 ff ff ff    	jbe    f01046b9 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0104744:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104747:	c9                   	leave  
f0104748:	c3                   	ret    

f0104749 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104749:	55                   	push   %ebp
f010474a:	89 e5                	mov    %esp,%ebp
f010474c:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010474f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104756:	a1 04 25 41 f0       	mov    0xf0412504,%eax
f010475b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010475e:	eb 0b                	jmp    f010476b <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0104760:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104763:	a1 0c 25 41 f0       	mov    0xf041250c,%eax
f0104768:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010476b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010476f:	74 07                	je     f0104778 <pf_calculate_free_frames+0x2f>
f0104771:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104774:	8b 00                	mov    (%eax),%eax
f0104776:	eb 05                	jmp    f010477d <pf_calculate_free_frames+0x34>
f0104778:	b8 00 00 00 00       	mov    $0x0,%eax
f010477d:	a3 0c 25 41 f0       	mov    %eax,0xf041250c
f0104782:	a1 0c 25 41 f0       	mov    0xf041250c,%eax
f0104787:	85 c0                	test   %eax,%eax
f0104789:	75 d5                	jne    f0104760 <pf_calculate_free_frames+0x17>
f010478b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010478f:	75 cf                	jne    f0104760 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0104791:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104794:	c9                   	leave  
f0104795:	c3                   	ret    

f0104796 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104796:	55                   	push   %ebp
f0104797:	89 e5                	mov    %esp,%ebp
f0104799:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010479c:	8b 45 08             	mov    0x8(%ebp),%eax
f010479f:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01047a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047a8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01047aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047ad:	8b 00                	mov    (%eax),%eax
f01047af:	85 c0                	test   %eax,%eax
f01047b1:	75 5b                	jne    f010480e <get_disk_table_directory+0x78>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f01047b3:	83 ec 0c             	sub    $0xc,%esp
f01047b6:	68 00 10 00 00       	push   $0x1000
f01047bb:	e8 e1 3d 00 00       	call   f01085a1 <kmalloc>
f01047c0:	83 c4 10             	add    $0x10,%esp
f01047c3:	89 c2                	mov    %eax,%edx
f01047c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047c8:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f01047ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047cd:	8b 00                	mov    (%eax),%eax
f01047cf:	85 c0                	test   %eax,%eax
f01047d1:	75 07                	jne    f01047da <get_disk_table_directory+0x44>
			{
				return E_NO_VM;
f01047d3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01047d8:	eb 39                	jmp    f0104813 <get_disk_table_directory+0x7d>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f01047da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047dd:	8b 00                	mov    (%eax),%eax
f01047df:	83 ec 0c             	sub    $0xc,%esp
f01047e2:	50                   	push   %eax
f01047e3:	e8 b4 40 00 00       	call   f010889c <kheap_physical_address>
f01047e8:	83 c4 10             	add    $0x10,%esp
f01047eb:	89 c2                	mov    %eax,%edx
f01047ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01047f0:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f01047f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	83 ec 04             	sub    $0x4,%esp
f01047fe:	68 00 10 00 00       	push   $0x1000
f0104803:	6a 00                	push   $0x0
f0104805:	50                   	push   %eax
f0104806:	e8 c7 d4 01 00       	call   f0121cd2 <memset>
f010480b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010480e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104813:	c9                   	leave  
f0104814:	c3                   	ret    

f0104815 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104815:	55                   	push   %ebp
f0104816:	89 e5                	mov    %esp,%ebp
f0104818:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010481b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104822:	76 19                	jbe    f010483d <__pf_write_env_table+0x28>
f0104824:	68 2c 50 12 f0       	push   $0xf012502c
f0104829:	68 52 50 12 f0       	push   $0xf0125052
f010482e:	68 81 02 00 00       	push   $0x281
f0104833:	68 9b 4f 12 f0       	push   $0xf0124f9b
f0104838:	e8 dd b9 ff ff       	call   f010021a <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010483d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104840:	05 b0 00 00 00       	add    $0xb0,%eax
f0104845:	83 ec 08             	sub    $0x8,%esp
f0104848:	50                   	push   %eax
f0104849:	ff 75 08             	pushl  0x8(%ebp)
f010484c:	e8 45 ff ff ff       	call   f0104796 <get_disk_table_directory>
f0104851:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104854:	8b 45 08             	mov    0x8(%ebp),%eax
f0104857:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010485d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104860:	c1 ea 16             	shr    $0x16,%edx
f0104863:	c1 e2 02             	shl    $0x2,%edx
f0104866:	01 d0                	add    %edx,%eax
f0104868:	8b 00                	mov    (%eax),%eax
f010486a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010486d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104870:	85 c0                	test   %eax,%eax
f0104872:	75 34                	jne    f01048a8 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104874:	83 ec 0c             	sub    $0xc,%esp
f0104877:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010487a:	50                   	push   %eax
f010487b:	e8 1e f4 ff ff       	call   f0103c9e <allocate_disk_frame>
f0104880:	83 c4 10             	add    $0x10,%esp
f0104883:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104886:	75 07                	jne    f010488f <__pf_write_env_table+0x7a>
f0104888:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010488d:	eb 31                	jmp    f01048c0 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010488f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104892:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104898:	8b 55 0c             	mov    0xc(%ebp),%edx
f010489b:	c1 ea 16             	shr    $0x16,%edx
f010489e:	c1 e2 02             	shl    $0x2,%edx
f01048a1:	01 c2                	add    %eax,%edx
f01048a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048a6:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01048a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048ab:	83 ec 08             	sub    $0x8,%esp
f01048ae:	ff 75 10             	pushl  0x10(%ebp)
f01048b1:	50                   	push   %eax
f01048b2:	e8 fe f1 ff ff       	call   f0103ab5 <write_disk_page>
f01048b7:	83 c4 10             	add    $0x10,%esp
f01048ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01048bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01048c0:	c9                   	leave  
f01048c1:	c3                   	ret    

f01048c2 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01048c2:	55                   	push   %ebp
f01048c3:	89 e5                	mov    %esp,%ebp
f01048c5:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	85 c0                	test   %eax,%eax
f01048d3:	75 07                	jne    f01048dc <__pf_read_env_table+0x1a>
f01048d5:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01048da:	eb 3d                	jmp    f0104919 <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01048dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01048df:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01048e8:	c1 ea 16             	shr    $0x16,%edx
f01048eb:	c1 e2 02             	shl    $0x2,%edx
f01048ee:	01 d0                	add    %edx,%eax
f01048f0:	8b 00                	mov    (%eax),%eax
f01048f2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01048f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01048f9:	75 07                	jne    f0104902 <__pf_read_env_table+0x40>
f01048fb:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104900:	eb 17                	jmp    f0104919 <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104902:	83 ec 08             	sub    $0x8,%esp
f0104905:	ff 75 10             	pushl  0x10(%ebp)
f0104908:	ff 75 f4             	pushl  -0xc(%ebp)
f010490b:	e8 76 f1 ff ff       	call   f0103a86 <read_disk_page>
f0104910:	83 c4 10             	add    $0x10,%esp
f0104913:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104916:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104919:	c9                   	leave  
f010491a:	c3                   	ret    

f010491b <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010491b:	55                   	push   %ebp
f010491c:	89 e5                	mov    %esp,%ebp
f010491e:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104921:	8b 45 08             	mov    0x8(%ebp),%eax
f0104924:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010492a:	85 c0                	test   %eax,%eax
f010492c:	74 52                	je     f0104980 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010492e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104935:	eb 3e                	jmp    f0104975 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0104937:	8b 45 08             	mov    0x8(%ebp),%eax
f010493a:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104940:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104943:	c1 e2 02             	shl    $0x2,%edx
f0104946:	01 d0                	add    %edx,%eax
f0104948:	8b 00                	mov    (%eax),%eax
f010494a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104959:	c1 e2 02             	shl    $0x2,%edx
f010495c:	01 d0                	add    %edx,%eax
f010495e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104964:	83 ec 0c             	sub    $0xc,%esp
f0104967:	ff 75 f0             	pushl  -0x10(%ebp)
f010496a:	e8 f6 f3 ff ff       	call   f0103d65 <free_disk_frame>
f010496f:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104972:	ff 45 f4             	incl   -0xc(%ebp)
f0104975:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010497c:	76 b9                	jbe    f0104937 <__pf_remove_env_all_tables+0x1c>
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104989:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010498d:	75 10                	jne    f010499f <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f010498f:	83 ec 0c             	sub    $0xc,%esp
f0104992:	68 30 51 12 f0       	push   $0xf0125130
f0104997:	e8 ff c4 ff ff       	call   f0100e9b <cprintf>
f010499c:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010499f:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a2:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01049a8:	85 c0                	test   %eax,%eax
f01049aa:	74 43                	je     f01049ef <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01049ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01049af:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01049b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049b8:	c1 ea 16             	shr    $0x16,%edx
f01049bb:	c1 e2 02             	shl    $0x2,%edx
f01049be:	01 d0                	add    %edx,%eax
f01049c0:	8b 00                	mov    (%eax),%eax
f01049c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f01049c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01049ce:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049d1:	c1 ea 16             	shr    $0x16,%edx
f01049d4:	c1 e2 02             	shl    $0x2,%edx
f01049d7:	01 d0                	add    %edx,%eax
f01049d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01049df:	83 ec 0c             	sub    $0xc,%esp
f01049e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01049e5:	e8 7b f3 ff ff       	call   f0103d65 <free_disk_frame>
f01049ea:	83 c4 10             	add    $0x10,%esp
f01049ed:	eb 01                	jmp    f01049f0 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f01049ef:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f01049f0:	c9                   	leave  
f01049f1:	c3                   	ret    

f01049f2 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f01049f2:	55                   	push   %ebp
f01049f3:	89 e5                	mov    %esp,%ebp
f01049f5:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f01049f8:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f01049ff:	eb 1f                	jmp    f0104a20 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a04:	83 ec 04             	sub    $0x4,%esp
f0104a07:	6a 08                	push   $0x8
f0104a09:	ff 75 08             	pushl  0x8(%ebp)
f0104a0c:	50                   	push   %eax
f0104a0d:	e8 e0 d9 01 00       	call   f01223f2 <ide_write>
f0104a12:	83 c4 10             	add    $0x10,%esp
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	75 12                	jne    f0104a2b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104a19:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104a20:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104a27:	7e d8                	jle    f0104a01 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104a29:	eb 01                	jmp    f0104a2c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104a2b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104a2c:	90                   	nop
f0104a2d:	c9                   	leave  
f0104a2e:	c3                   	ret    

f0104a2f <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104a2f:	55                   	push   %ebp
f0104a30:	89 e5                	mov    %esp,%ebp
f0104a32:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	0f b6 c0             	movzbl %al,%eax
f0104a3b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a42:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a45:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a48:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a4b:	ee                   	out    %al,(%dx)
f0104a4c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104a53:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104a56:	89 c2                	mov    %eax,%edx
f0104a58:	ec                   	in     (%dx),%al
f0104a59:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104a5c:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104a5f:	0f b6 c0             	movzbl %al,%eax
}
f0104a62:	c9                   	leave  
f0104a63:	c3                   	ret    

f0104a64 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104a64:	55                   	push   %ebp
f0104a65:	89 e5                	mov    %esp,%ebp
f0104a67:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104a6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6d:	0f b6 c0             	movzbl %al,%eax
f0104a70:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a77:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a7a:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a7d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a80:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a84:	0f b6 c0             	movzbl %al,%eax
f0104a87:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a97:	ee                   	out    %al,(%dx)
}
f0104a98:	90                   	nop
f0104a99:	c9                   	leave  
f0104a9a:	c3                   	ret    

f0104a9b <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a9b:	55                   	push   %ebp
f0104a9c:	89 e5                	mov    %esp,%ebp
f0104a9e:	53                   	push   %ebx
f0104a9f:	83 ec 24             	sub    $0x24,%esp
f0104aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa5:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104aa8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104aaf:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104ab3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104ab6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ab9:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104aba:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104abe:	77 48                	ja     f0104b08 <kclock_start+0x6d>
f0104ac0:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ac7:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104acb:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104ace:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ad1:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104ad2:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104ad6:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104adb:	99                   	cltd   
f0104adc:	f7 fb                	idiv   %ebx
f0104ade:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104ae4:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104ae8:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104aed:	99                   	cltd   
f0104aee:	f7 fb                	idiv   %ebx
f0104af0:	89 c3                	mov    %eax,%ebx
f0104af2:	89 c8                	mov    %ecx,%eax
f0104af4:	99                   	cltd   
f0104af5:	f7 fb                	idiv   %ebx
f0104af7:	0f b7 c0             	movzwl %ax,%eax
f0104afa:	83 ec 0c             	sub    $0xc,%esp
f0104afd:	50                   	push   %eax
f0104afe:	e8 dd 01 00 00       	call   f0104ce0 <kclock_write_cnt0_LSB_first>
f0104b03:	83 c4 10             	add    $0x10,%esp
f0104b06:	eb 13                	jmp    f0104b1b <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104b08:	6a 35                	push   $0x35
f0104b0a:	68 54 51 12 f0       	push   $0xf0125154
f0104b0f:	6a 33                	push   $0x33
f0104b11:	68 b0 51 12 f0       	push   $0xf01251b0
f0104b16:	e8 ff b6 ff ff       	call   f010021a <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b1b:	66 a1 4c 19 17 f0    	mov    0xf017194c,%ax
f0104b21:	0f b7 c0             	movzwl %ax,%eax
f0104b24:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b29:	83 ec 0c             	sub    $0xc,%esp
f0104b2c:	50                   	push   %eax
f0104b2d:	e8 bc 1c 00 00       	call   f01067ee <irq_setmask_8259A>
f0104b32:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104b35:	90                   	nop
f0104b36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104b39:	c9                   	leave  
f0104b3a:	c3                   	ret    

f0104b3b <kclock_stop>:

void
kclock_stop(void)
{
f0104b3b:	55                   	push   %ebp
f0104b3c:	89 e5                	mov    %esp,%ebp
f0104b3e:	83 ec 18             	sub    $0x18,%esp
f0104b41:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b48:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b4c:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b52:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104b53:	83 ec 0c             	sub    $0xc,%esp
f0104b56:	68 ff ff 00 00       	push   $0xffff
f0104b5b:	e8 8e 1c 00 00       	call   f01067ee <irq_setmask_8259A>
f0104b60:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104b63:	90                   	nop
f0104b64:	c9                   	leave  
f0104b65:	c3                   	ret    

f0104b66 <kclock_resume>:

void
kclock_resume(void)
{
f0104b66:	55                   	push   %ebp
f0104b67:	89 e5                	mov    %esp,%ebp
f0104b69:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104b6c:	e8 b1 01 00 00       	call   f0104d22 <kclock_read_cnt0>
f0104b71:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b75:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b7a:	77 06                	ja     f0104b82 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b7c:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b82:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b86:	83 e0 01             	and    $0x1,%eax
f0104b89:	66 85 c0             	test   %ax,%ax
f0104b8c:	74 09                	je     f0104b97 <kclock_resume+0x31>
		cnt0++;
f0104b8e:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b92:	40                   	inc    %eax
f0104b93:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b97:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b9e:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104ba2:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104ba5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ba8:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104ba9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104bad:	83 ec 0c             	sub    $0xc,%esp
f0104bb0:	50                   	push   %eax
f0104bb1:	e8 2a 01 00 00       	call   f0104ce0 <kclock_write_cnt0_LSB_first>
f0104bb6:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104bb9:	66 a1 4c 19 17 f0    	mov    0xf017194c,%ax
f0104bbf:	0f b7 c0             	movzwl %ax,%eax
f0104bc2:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104bc7:	83 ec 0c             	sub    $0xc,%esp
f0104bca:	50                   	push   %eax
f0104bcb:	e8 1e 1c 00 00       	call   f01067ee <irq_setmask_8259A>
f0104bd0:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104bd3:	90                   	nop
f0104bd4:	c9                   	leave  
f0104bd5:	c3                   	ret    

f0104bd6 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104bd6:	55                   	push   %ebp
f0104bd7:	89 e5                	mov    %esp,%ebp
f0104bd9:	83 ec 28             	sub    $0x28,%esp
f0104bdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bdf:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104be2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104be9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104bed:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104bf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104bf3:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104bf4:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104bf8:	83 ec 0c             	sub    $0xc,%esp
f0104bfb:	50                   	push   %eax
f0104bfc:	e8 df 00 00 00       	call   f0104ce0 <kclock_write_cnt0_LSB_first>
f0104c01:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104c04:	66 a1 4c 19 17 f0    	mov    0xf017194c,%ax
f0104c0a:	0f b7 c0             	movzwl %ax,%eax
f0104c0d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104c12:	83 ec 0c             	sub    $0xc,%esp
f0104c15:	50                   	push   %eax
f0104c16:	e8 d3 1b 00 00       	call   f01067ee <irq_setmask_8259A>
f0104c1b:	83 c4 10             	add    $0x10,%esp

}
f0104c1e:	90                   	nop
f0104c1f:	c9                   	leave  
f0104c20:	c3                   	ret    

f0104c21 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104c21:	55                   	push   %ebp
f0104c22:	89 e5                	mov    %esp,%ebp
f0104c24:	56                   	push   %esi
f0104c25:	53                   	push   %ebx
f0104c26:	83 ec 20             	sub    $0x20,%esp
f0104c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c2c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104c2f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104c33:	0f 87 8a 00 00 00    	ja     f0104cc3 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104c39:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c3d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c42:	99                   	cltd   
f0104c43:	f7 fe                	idiv   %esi
f0104c45:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c4b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c4f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c54:	99                   	cltd   
f0104c55:	f7 fb                	idiv   %ebx
f0104c57:	89 c6                	mov    %eax,%esi
f0104c59:	89 c8                	mov    %ecx,%eax
f0104c5b:	99                   	cltd   
f0104c5c:	f7 fe                	idiv   %esi
f0104c5e:	89 c3                	mov    %eax,%ebx
f0104c60:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104c64:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c69:	99                   	cltd   
f0104c6a:	f7 f9                	idiv   %ecx
f0104c6c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c72:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c76:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c7b:	99                   	cltd   
f0104c7c:	f7 fe                	idiv   %esi
f0104c7e:	89 c6                	mov    %eax,%esi
f0104c80:	89 c8                	mov    %ecx,%eax
f0104c82:	99                   	cltd   
f0104c83:	f7 fe                	idiv   %esi
f0104c85:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c8a:	85 c0                	test   %eax,%eax
f0104c8c:	79 05                	jns    f0104c93 <kclock_set_quantum+0x72>
f0104c8e:	48                   	dec    %eax
f0104c8f:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c92:	40                   	inc    %eax
f0104c93:	01 d8                	add    %ebx,%eax
f0104c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c98:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c9f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104ca3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104ca6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ca9:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cad:	0f b7 c0             	movzwl %ax,%eax
f0104cb0:	83 ec 0c             	sub    $0xc,%esp
f0104cb3:	50                   	push   %eax
f0104cb4:	e8 27 00 00 00       	call   f0104ce0 <kclock_write_cnt0_LSB_first>
f0104cb9:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104cbc:	e8 7a fe ff ff       	call   f0104b3b <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104cc1:	eb 16                	jmp    f0104cd9 <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104cc3:	6a 35                	push   $0x35
f0104cc5:	68 54 51 12 f0       	push   $0xf0125154
f0104cca:	68 cc 00 00 00       	push   $0xcc
f0104ccf:	68 b0 51 12 f0       	push   $0xf01251b0
f0104cd4:	e8 41 b5 ff ff       	call   f010021a <_panic>
	}
}
f0104cd9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104cdc:	5b                   	pop    %ebx
f0104cdd:	5e                   	pop    %esi
f0104cde:	5d                   	pop    %ebp
f0104cdf:	c3                   	ret    

f0104ce0 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104ce0:	55                   	push   %ebp
f0104ce1:	89 e5                	mov    %esp,%ebp
f0104ce3:	83 ec 14             	sub    $0x14,%esp
f0104ce6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ce9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104ced:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104cf0:	0f b6 c0             	movzbl %al,%eax
f0104cf3:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104cfa:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104cfd:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104d00:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104d03:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d07:	66 c1 e8 08          	shr    $0x8,%ax
f0104d0b:	0f b6 c0             	movzbl %al,%eax
f0104d0e:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104d15:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104d18:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104d1b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104d1e:	ee                   	out    %al,(%dx)
}
f0104d1f:	90                   	nop
f0104d20:	c9                   	leave  
f0104d21:	c3                   	ret    

f0104d22 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104d22:	55                   	push   %ebp
f0104d23:	89 e5                	mov    %esp,%ebp
f0104d25:	83 ec 20             	sub    $0x20,%esp
f0104d28:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d32:	89 c2                	mov    %eax,%edx
f0104d34:	ec                   	in     (%dx),%al
f0104d35:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104d38:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3b:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d3e:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104d48:	89 c2                	mov    %eax,%edx
f0104d4a:	ec                   	in     (%dx),%al
f0104d4b:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104d4e:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d51:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d54:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104d58:	c1 e0 08             	shl    $0x8,%eax
f0104d5b:	89 c2                	mov    %eax,%edx
f0104d5d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d61:	09 d0                	or     %edx,%eax
f0104d63:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104d6a:	c9                   	leave  
f0104d6b:	c3                   	ret    

f0104d6c <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104d6c:	55                   	push   %ebp
f0104d6d:	89 e5                	mov    %esp,%ebp
f0104d6f:	83 ec 30             	sub    $0x30,%esp
f0104d72:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d79:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d7c:	89 c2                	mov    %eax,%edx
f0104d7e:	ec                   	in     (%dx),%al
f0104d7f:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d82:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d85:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d88:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d8f:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d93:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d99:	ee                   	out    %al,(%dx)
f0104d9a:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104da1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104da4:	89 c2                	mov    %eax,%edx
f0104da6:	ec                   	in     (%dx),%al
f0104da7:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104daa:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104dad:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104db0:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104db7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104dba:	89 c2                	mov    %eax,%edx
f0104dbc:	ec                   	in     (%dx),%al
f0104dbd:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104dc0:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104dc3:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104dc6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104dca:	c1 e0 08             	shl    $0x8,%eax
f0104dcd:	89 c2                	mov    %eax,%edx
f0104dcf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104dd3:	09 d0                	or     %edx,%eax
f0104dd5:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104dd9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104ddd:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104de4:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104de7:	8a 45 df             	mov    -0x21(%ebp),%al
f0104dea:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104ded:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104dee:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104df1:	c9                   	leave  
f0104df2:	c3                   	ret    

f0104df3 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104df3:	55                   	push   %ebp
f0104df4:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104df6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dfa:	74 1d                	je     f0104e19 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e08:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104e0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e12:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104e19:	90                   	nop
f0104e1a:	5d                   	pop    %ebp
f0104e1b:	c3                   	ret    

f0104e1c <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104e1c:	55                   	push   %ebp
f0104e1d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104e1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e23:	74 08                	je     f0104e2d <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104e25:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e28:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e2b:	eb 05                	jmp    f0104e32 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104e2d:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104e32:	5d                   	pop    %ebp
f0104e33:	c3                   	ret    

f0104e34 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104e34:	55                   	push   %ebp
f0104e35:	89 e5                	mov    %esp,%ebp
f0104e37:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104e3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e3e:	75 16                	jne    f0104e56 <enqueue+0x22>
f0104e40:	68 c4 51 12 f0       	push   $0xf01251c4
f0104e45:	68 d2 51 12 f0       	push   $0xf01251d2
f0104e4a:	6a 33                	push   $0x33
f0104e4c:	68 e7 51 12 f0       	push   $0xf01251e7
f0104e51:	e8 c4 b3 ff ff       	call   f010021a <_panic>
	if(env != NULL)
f0104e56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104e5a:	74 66                	je     f0104ec2 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104e5c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104e60:	75 14                	jne    f0104e76 <enqueue+0x42>
f0104e62:	83 ec 04             	sub    $0x4,%esp
f0104e65:	68 00 52 12 f0       	push   $0xf0125200
f0104e6a:	6a 36                	push   $0x36
f0104e6c:	68 e7 51 12 f0       	push   $0xf01251e7
f0104e71:	e8 a4 b3 ff ff       	call   f010021a <_panic>
f0104e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e79:	8b 10                	mov    (%eax),%edx
f0104e7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e7e:	89 50 44             	mov    %edx,0x44(%eax)
f0104e81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e84:	8b 40 44             	mov    0x44(%eax),%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	74 0d                	je     f0104e98 <enqueue+0x64>
f0104e8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e8e:	8b 00                	mov    (%eax),%eax
f0104e90:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 09                	jmp    f0104ea1 <enqueue+0x6d>
f0104e98:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e9e:	89 50 04             	mov    %edx,0x4(%eax)
f0104ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ea4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ea7:	89 10                	mov    %edx,(%eax)
f0104ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104eac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104eb6:	8b 40 0c             	mov    0xc(%eax),%eax
f0104eb9:	8d 50 01             	lea    0x1(%eax),%edx
f0104ebc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebf:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104ec2:	90                   	nop
f0104ec3:	c9                   	leave  
f0104ec4:	c3                   	ret    

f0104ec5 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104ec5:	55                   	push   %ebp
f0104ec6:	89 e5                	mov    %esp,%ebp
f0104ec8:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104ecb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ecf:	75 0a                	jne    f0104edb <dequeue+0x16>
f0104ed1:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ed6:	e9 a0 00 00 00       	jmp    f0104f7b <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ede:	8b 40 04             	mov    0x4(%eax),%eax
f0104ee1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104ee4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ee8:	0f 84 8a 00 00 00    	je     f0104f78 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104eee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ef2:	75 14                	jne    f0104f08 <dequeue+0x43>
f0104ef4:	83 ec 04             	sub    $0x4,%esp
f0104ef7:	68 23 52 12 f0       	push   $0xf0125223
f0104efc:	6a 43                	push   $0x43
f0104efe:	68 e7 51 12 f0       	push   $0xf01251e7
f0104f03:	e8 12 b3 ff ff       	call   f010021a <_panic>
f0104f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f0e:	85 c0                	test   %eax,%eax
f0104f10:	74 11                	je     f0104f23 <dequeue+0x5e>
f0104f12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f15:	8b 40 44             	mov    0x44(%eax),%eax
f0104f18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f1b:	8b 52 48             	mov    0x48(%edx),%edx
f0104f1e:	89 50 48             	mov    %edx,0x48(%eax)
f0104f21:	eb 0c                	jmp    f0104f2f <dequeue+0x6a>
f0104f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f26:	8b 50 48             	mov    0x48(%eax),%edx
f0104f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f2c:	89 50 04             	mov    %edx,0x4(%eax)
f0104f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f32:	8b 40 48             	mov    0x48(%eax),%eax
f0104f35:	85 c0                	test   %eax,%eax
f0104f37:	74 11                	je     f0104f4a <dequeue+0x85>
f0104f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f3c:	8b 40 48             	mov    0x48(%eax),%eax
f0104f3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f42:	8b 52 44             	mov    0x44(%edx),%edx
f0104f45:	89 50 44             	mov    %edx,0x44(%eax)
f0104f48:	eb 0b                	jmp    f0104f55 <dequeue+0x90>
f0104f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4d:	8b 50 44             	mov    0x44(%eax),%edx
f0104f50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f53:	89 10                	mov    %edx,(%eax)
f0104f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f58:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f62:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f6f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f75:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f7b:	c9                   	leave  
f0104f7c:	c3                   	ret    

f0104f7d <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f7d:	55                   	push   %ebp
f0104f7e:	89 e5                	mov    %esp,%ebp
f0104f80:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f87:	75 16                	jne    f0104f9f <remove_from_queue+0x22>
f0104f89:	68 c4 51 12 f0       	push   $0xf01251c4
f0104f8e:	68 d2 51 12 f0       	push   $0xf01251d2
f0104f93:	6a 4d                	push   $0x4d
f0104f95:	68 e7 51 12 f0       	push   $0xf01251e7
f0104f9a:	e8 7b b2 ff ff       	call   f010021a <_panic>

	if (e != NULL)
f0104f9f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fa3:	0f 84 8a 00 00 00    	je     f0105033 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104fa9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fad:	75 14                	jne    f0104fc3 <remove_from_queue+0x46>
f0104faf:	83 ec 04             	sub    $0x4,%esp
f0104fb2:	68 23 52 12 f0       	push   $0xf0125223
f0104fb7:	6a 51                	push   $0x51
f0104fb9:	68 e7 51 12 f0       	push   $0xf01251e7
f0104fbe:	e8 57 b2 ff ff       	call   f010021a <_panic>
f0104fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc6:	8b 40 44             	mov    0x44(%eax),%eax
f0104fc9:	85 c0                	test   %eax,%eax
f0104fcb:	74 11                	je     f0104fde <remove_from_queue+0x61>
f0104fcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fd0:	8b 40 44             	mov    0x44(%eax),%eax
f0104fd3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fd6:	8b 52 48             	mov    0x48(%edx),%edx
f0104fd9:	89 50 48             	mov    %edx,0x48(%eax)
f0104fdc:	eb 0c                	jmp    f0104fea <remove_from_queue+0x6d>
f0104fde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fe1:	8b 50 48             	mov    0x48(%eax),%edx
f0104fe4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe7:	89 50 04             	mov    %edx,0x4(%eax)
f0104fea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fed:	8b 40 48             	mov    0x48(%eax),%eax
f0104ff0:	85 c0                	test   %eax,%eax
f0104ff2:	74 11                	je     f0105005 <remove_from_queue+0x88>
f0104ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ff7:	8b 40 48             	mov    0x48(%eax),%eax
f0104ffa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ffd:	8b 52 44             	mov    0x44(%edx),%edx
f0105000:	89 50 44             	mov    %edx,0x44(%eax)
f0105003:	eb 0b                	jmp    f0105010 <remove_from_queue+0x93>
f0105005:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105008:	8b 50 44             	mov    0x44(%eax),%edx
f010500b:	8b 45 08             	mov    0x8(%ebp),%eax
f010500e:	89 10                	mov    %edx,(%eax)
f0105010:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105013:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010501a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010501d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105024:	8b 45 08             	mov    0x8(%ebp),%eax
f0105027:	8b 40 0c             	mov    0xc(%eax),%eax
f010502a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010502d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105030:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105033:	90                   	nop
f0105034:	c9                   	leave  
f0105035:	c3                   	ret    

f0105036 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0105036:	55                   	push   %ebp
f0105037:	89 e5                	mov    %esp,%ebp
f0105039:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f010503c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105040:	75 07                	jne    f0105049 <find_env_in_queue+0x13>
f0105042:	b8 00 00 00 00       	mov    $0x0,%eax
f0105047:	eb 58                	jmp    f01050a1 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0105049:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0105050:	8b 45 08             	mov    0x8(%ebp),%eax
f0105053:	8b 00                	mov    (%eax),%eax
f0105055:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105058:	eb 19                	jmp    f0105073 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f010505a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010505d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105060:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0105063:	75 05                	jne    f010506a <find_env_in_queue+0x34>
		{
			return ptr_env;
f0105065:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105068:	eb 37                	jmp    f01050a1 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f010506a:	8b 45 08             	mov    0x8(%ebp),%eax
f010506d:	8b 40 08             	mov    0x8(%eax),%eax
f0105070:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105073:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105077:	74 08                	je     f0105081 <find_env_in_queue+0x4b>
f0105079:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010507c:	8b 40 44             	mov    0x44(%eax),%eax
f010507f:	eb 05                	jmp    f0105086 <find_env_in_queue+0x50>
f0105081:	b8 00 00 00 00       	mov    $0x0,%eax
f0105086:	8b 55 08             	mov    0x8(%ebp),%edx
f0105089:	89 42 08             	mov    %eax,0x8(%edx)
f010508c:	8b 45 08             	mov    0x8(%ebp),%eax
f010508f:	8b 40 08             	mov    0x8(%eax),%eax
f0105092:	85 c0                	test   %eax,%eax
f0105094:	75 c4                	jne    f010505a <find_env_in_queue+0x24>
f0105096:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010509a:	75 be                	jne    f010505a <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010509c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01050a1:	c9                   	leave  
f01050a2:	c3                   	ret    

f01050a3 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f01050a3:	55                   	push   %ebp
f01050a4:	89 e5                	mov    %esp,%ebp
f01050a6:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f01050a9:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01050ae:	85 c0                	test   %eax,%eax
f01050b0:	74 11                	je     f01050c3 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f01050b2:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01050b7:	83 ec 0c             	sub    $0xc,%esp
f01050ba:	50                   	push   %eax
f01050bb:	e8 79 36 00 00       	call   f0108739 <kfree>
f01050c0:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f01050c3:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f01050c8:	85 c0                	test   %eax,%eax
f01050ca:	74 11                	je     f01050dd <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f01050cc:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f01050d1:	83 ec 0c             	sub    $0xc,%esp
f01050d4:	50                   	push   %eax
f01050d5:	e8 5f 36 00 00       	call   f0108739 <kfree>
f01050da:	83 c4 10             	add    $0x10,%esp
#endif
}
f01050dd:	90                   	nop
f01050de:	c9                   	leave  
f01050df:	c3                   	ret    

f01050e0 <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f01050e0:	55                   	push   %ebp
f01050e1:	89 e5                	mov    %esp,%ebp
f01050e3:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01050e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050ea:	74 1e                	je     f010510a <sched_insert_ready0+0x2a>
	{
		env->env_status = ENV_READY ;
f01050ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01050ef:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01050f6:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01050fb:	83 ec 08             	sub    $0x8,%esp
f01050fe:	ff 75 08             	pushl  0x8(%ebp)
f0105101:	50                   	push   %eax
f0105102:	e8 2d fd ff ff       	call   f0104e34 <enqueue>
f0105107:	83 c4 10             	add    $0x10,%esp
	}
}
f010510a:	90                   	nop
f010510b:	c9                   	leave  
f010510c:	c3                   	ret    

f010510d <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f010510d:	55                   	push   %ebp
f010510e:	89 e5                	mov    %esp,%ebp
f0105110:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f0105113:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105117:	0f 84 fe 00 00 00    	je     f010521b <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010511d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105124:	e9 e1 00 00 00       	jmp    f010520a <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105129:	8b 45 08             	mov    0x8(%ebp),%eax
f010512c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010512f:	89 c2                	mov    %eax,%edx
f0105131:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105136:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105139:	c1 e1 04             	shl    $0x4,%ecx
f010513c:	01 c8                	add    %ecx,%eax
f010513e:	52                   	push   %edx
f010513f:	50                   	push   %eax
f0105140:	e8 f1 fe ff ff       	call   f0105036 <find_env_in_queue>
f0105145:	83 c4 08             	add    $0x8,%esp
f0105148:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010514b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010514f:	0f 84 b2 00 00 00    	je     f0105207 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0105155:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105159:	75 17                	jne    f0105172 <sched_remove_ready+0x65>
f010515b:	83 ec 04             	sub    $0x4,%esp
f010515e:	68 23 52 12 f0       	push   $0xf0125223
f0105163:	68 90 00 00 00       	push   $0x90
f0105168:	68 e7 51 12 f0       	push   $0xf01251e7
f010516d:	e8 a8 b0 ff ff       	call   f010021a <_panic>
f0105172:	8b 45 08             	mov    0x8(%ebp),%eax
f0105175:	8b 40 44             	mov    0x44(%eax),%eax
f0105178:	85 c0                	test   %eax,%eax
f010517a:	74 11                	je     f010518d <sched_remove_ready+0x80>
f010517c:	8b 45 08             	mov    0x8(%ebp),%eax
f010517f:	8b 40 44             	mov    0x44(%eax),%eax
f0105182:	8b 55 08             	mov    0x8(%ebp),%edx
f0105185:	8b 52 48             	mov    0x48(%edx),%edx
f0105188:	89 50 48             	mov    %edx,0x48(%eax)
f010518b:	eb 16                	jmp    f01051a3 <sched_remove_ready+0x96>
f010518d:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105192:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105195:	c1 e2 04             	shl    $0x4,%edx
f0105198:	01 c2                	add    %eax,%edx
f010519a:	8b 45 08             	mov    0x8(%ebp),%eax
f010519d:	8b 40 48             	mov    0x48(%eax),%eax
f01051a0:	89 42 04             	mov    %eax,0x4(%edx)
f01051a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051a6:	8b 40 48             	mov    0x48(%eax),%eax
f01051a9:	85 c0                	test   %eax,%eax
f01051ab:	74 11                	je     f01051be <sched_remove_ready+0xb1>
f01051ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b0:	8b 40 48             	mov    0x48(%eax),%eax
f01051b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051b6:	8b 52 44             	mov    0x44(%edx),%edx
f01051b9:	89 50 44             	mov    %edx,0x44(%eax)
f01051bc:	eb 15                	jmp    f01051d3 <sched_remove_ready+0xc6>
f01051be:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01051c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051c6:	c1 e2 04             	shl    $0x4,%edx
f01051c9:	01 c2                	add    %eax,%edx
f01051cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01051ce:	8b 40 44             	mov    0x44(%eax),%eax
f01051d1:	89 02                	mov    %eax,(%edx)
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01051e7:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01051ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051ef:	c1 e2 04             	shl    $0x4,%edx
f01051f2:	01 d0                	add    %edx,%eax
f01051f4:	8b 50 0c             	mov    0xc(%eax),%edx
f01051f7:	4a                   	dec    %edx
f01051f8:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f01051fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fe:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105205:	eb 14                	jmp    f010521b <sched_remove_ready+0x10e>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105207:	ff 45 f4             	incl   -0xc(%ebp)
f010520a:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f010520f:	0f b6 c0             	movzbl %al,%eax
f0105212:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105215:	0f 8f 0e ff ff ff    	jg     f0105129 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f010521b:	c9                   	leave  
f010521c:	c3                   	ret    

f010521d <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010521d:	55                   	push   %ebp
f010521e:	89 e5                	mov    %esp,%ebp
f0105220:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105223:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105227:	74 1d                	je     f0105246 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105233:	83 ec 08             	sub    $0x8,%esp
f0105236:	ff 75 08             	pushl  0x8(%ebp)
f0105239:	68 80 40 3f f0       	push   $0xf03f4080
f010523e:	e8 f1 fb ff ff       	call   f0104e34 <enqueue>
f0105243:	83 c4 10             	add    $0x10,%esp
	}
}
f0105246:	90                   	nop
f0105247:	c9                   	leave  
f0105248:	c3                   	ret    

f0105249 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f0105249:	55                   	push   %ebp
f010524a:	89 e5                	mov    %esp,%ebp
f010524c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010524f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105253:	0f 84 92 00 00 00    	je     f01052eb <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0105259:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010525d:	75 17                	jne    f0105276 <sched_remove_new+0x2d>
f010525f:	83 ec 04             	sub    $0x4,%esp
f0105262:	68 23 52 12 f0       	push   $0xf0125223
f0105267:	68 ab 00 00 00       	push   $0xab
f010526c:	68 e7 51 12 f0       	push   $0xf01251e7
f0105271:	e8 a4 af ff ff       	call   f010021a <_panic>
f0105276:	8b 45 08             	mov    0x8(%ebp),%eax
f0105279:	8b 40 44             	mov    0x44(%eax),%eax
f010527c:	85 c0                	test   %eax,%eax
f010527e:	74 11                	je     f0105291 <sched_remove_new+0x48>
f0105280:	8b 45 08             	mov    0x8(%ebp),%eax
f0105283:	8b 40 44             	mov    0x44(%eax),%eax
f0105286:	8b 55 08             	mov    0x8(%ebp),%edx
f0105289:	8b 52 48             	mov    0x48(%edx),%edx
f010528c:	89 50 48             	mov    %edx,0x48(%eax)
f010528f:	eb 0b                	jmp    f010529c <sched_remove_new+0x53>
f0105291:	8b 45 08             	mov    0x8(%ebp),%eax
f0105294:	8b 40 48             	mov    0x48(%eax),%eax
f0105297:	a3 84 40 3f f0       	mov    %eax,0xf03f4084
f010529c:	8b 45 08             	mov    0x8(%ebp),%eax
f010529f:	8b 40 48             	mov    0x48(%eax),%eax
f01052a2:	85 c0                	test   %eax,%eax
f01052a4:	74 11                	je     f01052b7 <sched_remove_new+0x6e>
f01052a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052a9:	8b 40 48             	mov    0x48(%eax),%eax
f01052ac:	8b 55 08             	mov    0x8(%ebp),%edx
f01052af:	8b 52 44             	mov    0x44(%edx),%edx
f01052b2:	89 50 44             	mov    %edx,0x44(%eax)
f01052b5:	eb 0b                	jmp    f01052c2 <sched_remove_new+0x79>
f01052b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ba:	8b 40 44             	mov    0x44(%eax),%eax
f01052bd:	a3 80 40 3f f0       	mov    %eax,0xf03f4080
f01052c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01052cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052cf:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01052d6:	a1 8c 40 3f f0       	mov    0xf03f408c,%eax
f01052db:	48                   	dec    %eax
f01052dc:	a3 8c 40 3f f0       	mov    %eax,0xf03f408c
		env->env_status = ENV_UNKNOWN;
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01052eb:	90                   	nop
f01052ec:	c9                   	leave  
f01052ed:	c3                   	ret    

f01052ee <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f01052ee:	55                   	push   %ebp
f01052ef:	89 e5                	mov    %esp,%ebp
f01052f1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01052f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052f8:	74 34                	je     f010532e <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01052fa:	e8 73 90 00 00       	call   f010e372 <isBufferingEnabled>
f01052ff:	84 c0                	test   %al,%al
f0105301:	74 0e                	je     f0105311 <sched_insert_exit+0x23>
f0105303:	83 ec 0c             	sub    $0xc,%esp
f0105306:	ff 75 08             	pushl  0x8(%ebp)
f0105309:	e8 83 62 00 00       	call   f010b591 <cleanup_buffers>
f010530e:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f010531b:	83 ec 08             	sub    $0x8,%esp
f010531e:	ff 75 08             	pushl  0x8(%ebp)
f0105321:	68 2c 40 3f f0       	push   $0xf03f402c
f0105326:	e8 09 fb ff ff       	call   f0104e34 <enqueue>
f010532b:	83 c4 10             	add    $0x10,%esp
	}
}
f010532e:	90                   	nop
f010532f:	c9                   	leave  
f0105330:	c3                   	ret    

f0105331 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f0105331:	55                   	push   %ebp
f0105332:	89 e5                	mov    %esp,%ebp
f0105334:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105337:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533b:	0f 84 92 00 00 00    	je     f01053d3 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0105341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105345:	75 17                	jne    f010535e <sched_remove_exit+0x2d>
f0105347:	83 ec 04             	sub    $0x4,%esp
f010534a:	68 23 52 12 f0       	push   $0xf0125223
f010534f:	68 c3 00 00 00       	push   $0xc3
f0105354:	68 e7 51 12 f0       	push   $0xf01251e7
f0105359:	e8 bc ae ff ff       	call   f010021a <_panic>
f010535e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105361:	8b 40 44             	mov    0x44(%eax),%eax
f0105364:	85 c0                	test   %eax,%eax
f0105366:	74 11                	je     f0105379 <sched_remove_exit+0x48>
f0105368:	8b 45 08             	mov    0x8(%ebp),%eax
f010536b:	8b 40 44             	mov    0x44(%eax),%eax
f010536e:	8b 55 08             	mov    0x8(%ebp),%edx
f0105371:	8b 52 48             	mov    0x48(%edx),%edx
f0105374:	89 50 48             	mov    %edx,0x48(%eax)
f0105377:	eb 0b                	jmp    f0105384 <sched_remove_exit+0x53>
f0105379:	8b 45 08             	mov    0x8(%ebp),%eax
f010537c:	8b 40 48             	mov    0x48(%eax),%eax
f010537f:	a3 30 40 3f f0       	mov    %eax,0xf03f4030
f0105384:	8b 45 08             	mov    0x8(%ebp),%eax
f0105387:	8b 40 48             	mov    0x48(%eax),%eax
f010538a:	85 c0                	test   %eax,%eax
f010538c:	74 11                	je     f010539f <sched_remove_exit+0x6e>
f010538e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105391:	8b 40 48             	mov    0x48(%eax),%eax
f0105394:	8b 55 08             	mov    0x8(%ebp),%edx
f0105397:	8b 52 44             	mov    0x44(%edx),%edx
f010539a:	89 50 44             	mov    %edx,0x44(%eax)
f010539d:	eb 0b                	jmp    f01053aa <sched_remove_exit+0x79>
f010539f:	8b 45 08             	mov    0x8(%ebp),%eax
f01053a2:	8b 40 44             	mov    0x44(%eax),%eax
f01053a5:	a3 2c 40 3f f0       	mov    %eax,0xf03f402c
f01053aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01053ad:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01053b7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01053be:	a1 38 40 3f f0       	mov    0xf03f4038,%eax
f01053c3:	48                   	dec    %eax
f01053c4:	a3 38 40 3f f0       	mov    %eax,0xf03f4038
		env->env_status = ENV_UNKNOWN;
f01053c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01053cc:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01053d3:	90                   	nop
f01053d4:	c9                   	leave  
f01053d5:	c3                   	ret    

f01053d6 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01053d6:	55                   	push   %ebp
f01053d7:	89 e5                	mov    %esp,%ebp
f01053d9:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f01053dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01053e0:	74 0e                	je     f01053f0 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f01053e2:	83 ec 0c             	sub    $0xc,%esp
f01053e5:	ff 75 08             	pushl  0x8(%ebp)
f01053e8:	e8 30 fe ff ff       	call   f010521d <sched_insert_new>
f01053ed:	83 c4 10             	add    $0x10,%esp
	}
}
f01053f0:	90                   	nop
f01053f1:	c9                   	leave  
f01053f2:	c3                   	ret    

f01053f3 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01053f3:	55                   	push   %ebp
f01053f4:	89 e5                	mov    %esp,%ebp
f01053f6:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105400:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105405:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105408:	eb 3d                	jmp    f0105447 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f010540a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010540d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105410:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105413:	75 2a                	jne    f010543f <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105415:	83 ec 0c             	sub    $0xc,%esp
f0105418:	ff 75 f4             	pushl  -0xc(%ebp)
f010541b:	e8 29 fe ff ff       	call   f0105249 <sched_remove_new>
f0105420:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105423:	83 ec 0c             	sub    $0xc,%esp
f0105426:	ff 75 f4             	pushl  -0xc(%ebp)
f0105429:	e8 b2 fc ff ff       	call   f01050e0 <sched_insert_ready0>
f010542e:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105431:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f0105436:	85 c0                	test   %eax,%eax
f0105438:	75 36                	jne    f0105470 <sched_run_env+0x7d>
			{
				fos_scheduler();
f010543a:	e8 60 0e 00 00       	call   f010629f <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010543f:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105444:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105447:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010544b:	74 08                	je     f0105455 <sched_run_env+0x62>
f010544d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105450:	8b 40 44             	mov    0x44(%eax),%eax
f0105453:	eb 05                	jmp    f010545a <sched_run_env+0x67>
f0105455:	b8 00 00 00 00       	mov    $0x0,%eax
f010545a:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f010545f:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105464:	85 c0                	test   %eax,%eax
f0105466:	75 a2                	jne    f010540a <sched_run_env+0x17>
f0105468:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546c:	75 9c                	jne    f010540a <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010546e:	eb 01                	jmp    f0105471 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105470:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105471:	90                   	nop
f0105472:	c9                   	leave  
f0105473:	c3                   	ret    

f0105474 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f0105474:	55                   	push   %ebp
f0105475:	89 e5                	mov    %esp,%ebp
f0105477:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010547a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105481:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105488:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548c:	75 59                	jne    f01054e7 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010548e:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105493:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105496:	eb 28                	jmp    f01054c0 <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f0105498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010549e:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054a1:	75 15                	jne    f01054b8 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01054a3:	83 ec 0c             	sub    $0xc,%esp
f01054a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01054a9:	e8 9b fd ff ff       	call   f0105249 <sched_remove_new>
f01054ae:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01054b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054b8:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f01054bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054c4:	74 08                	je     f01054ce <sched_exit_env+0x5a>
f01054c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c9:	8b 40 44             	mov    0x44(%eax),%eax
f01054cc:	eb 05                	jmp    f01054d3 <sched_exit_env+0x5f>
f01054ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01054d3:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f01054d8:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f01054dd:	85 c0                	test   %eax,%eax
f01054df:	75 b7                	jne    f0105498 <sched_exit_env+0x24>
f01054e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054e5:	75 b1                	jne    f0105498 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f01054e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054eb:	0f 85 67 01 00 00    	jne    f0105658 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01054f8:	e9 47 01 00 00       	jmp    f0105644 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054fd:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105502:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105505:	c1 e2 04             	shl    $0x4,%edx
f0105508:	01 d0                	add    %edx,%eax
f010550a:	8b 00                	mov    (%eax),%eax
f010550c:	85 c0                	test   %eax,%eax
f010550e:	0f 84 27 01 00 00    	je     f010563b <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105514:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010551b:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105520:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105523:	c1 e2 04             	shl    $0x4,%edx
f0105526:	01 d0                	add    %edx,%eax
f0105528:	8b 00                	mov    (%eax),%eax
f010552a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010552d:	e9 d1 00 00 00       	jmp    f0105603 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105535:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105538:	3b 45 08             	cmp    0x8(%ebp),%eax
f010553b:	0f 85 af 00 00 00    	jne    f01055f0 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105541:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105545:	75 17                	jne    f010555e <sched_exit_env+0xea>
f0105547:	83 ec 04             	sub    $0x4,%esp
f010554a:	68 23 52 12 f0       	push   $0xf0125223
f010554f:	68 10 01 00 00       	push   $0x110
f0105554:	68 e7 51 12 f0       	push   $0xf01251e7
f0105559:	e8 bc ac ff ff       	call   f010021a <_panic>
f010555e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105561:	8b 40 44             	mov    0x44(%eax),%eax
f0105564:	85 c0                	test   %eax,%eax
f0105566:	74 11                	je     f0105579 <sched_exit_env+0x105>
f0105568:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010556b:	8b 40 44             	mov    0x44(%eax),%eax
f010556e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105571:	8b 52 48             	mov    0x48(%edx),%edx
f0105574:	89 50 48             	mov    %edx,0x48(%eax)
f0105577:	eb 16                	jmp    f010558f <sched_exit_env+0x11b>
f0105579:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f010557e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105581:	c1 e2 04             	shl    $0x4,%edx
f0105584:	01 c2                	add    %eax,%edx
f0105586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105589:	8b 40 48             	mov    0x48(%eax),%eax
f010558c:	89 42 04             	mov    %eax,0x4(%edx)
f010558f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105592:	8b 40 48             	mov    0x48(%eax),%eax
f0105595:	85 c0                	test   %eax,%eax
f0105597:	74 11                	je     f01055aa <sched_exit_env+0x136>
f0105599:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559c:	8b 40 48             	mov    0x48(%eax),%eax
f010559f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055a2:	8b 52 44             	mov    0x44(%edx),%edx
f01055a5:	89 50 44             	mov    %edx,0x44(%eax)
f01055a8:	eb 15                	jmp    f01055bf <sched_exit_env+0x14b>
f01055aa:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01055af:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01055b2:	c1 e2 04             	shl    $0x4,%edx
f01055b5:	01 c2                	add    %eax,%edx
f01055b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055ba:	8b 40 44             	mov    0x44(%eax),%eax
f01055bd:	89 02                	mov    %eax,(%edx)
f01055bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055cc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055d3:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01055d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01055db:	c1 e2 04             	shl    $0x4,%edx
f01055de:	01 d0                	add    %edx,%eax
f01055e0:	8b 50 0c             	mov    0xc(%eax),%edx
f01055e3:	4a                   	dec    %edx
f01055e4:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f01055e7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01055ee:	eb 4b                	jmp    f010563b <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055f0:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01055f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	8b 40 08             	mov    0x8(%eax),%eax
f0105600:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105603:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105608:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010560b:	c1 e2 04             	shl    $0x4,%edx
f010560e:	01 d0                	add    %edx,%eax
f0105610:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105614:	74 08                	je     f010561e <sched_exit_env+0x1aa>
f0105616:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105619:	8b 52 44             	mov    0x44(%edx),%edx
f010561c:	eb 05                	jmp    f0105623 <sched_exit_env+0x1af>
f010561e:	ba 00 00 00 00       	mov    $0x0,%edx
f0105623:	89 50 08             	mov    %edx,0x8(%eax)
f0105626:	8b 40 08             	mov    0x8(%eax),%eax
f0105629:	85 c0                	test   %eax,%eax
f010562b:	0f 85 01 ff ff ff    	jne    f0105532 <sched_exit_env+0xbe>
f0105631:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105635:	0f 85 f7 fe ff ff    	jne    f0105532 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010563b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010563f:	75 16                	jne    f0105657 <sched_exit_env+0x1e3>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105641:	ff 45 ec             	incl   -0x14(%ebp)
f0105644:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0105649:	0f b6 c0             	movzbl %al,%eax
f010564c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010564f:	0f 8f a8 fe ff ff    	jg     f01054fd <sched_exit_env+0x89>
f0105655:	eb 01                	jmp    f0105658 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105657:	90                   	nop
		}
	}
	if (!found)
f0105658:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010565c:	75 1c                	jne    f010567a <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010565e:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0105663:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105666:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105669:	75 0f                	jne    f010567a <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f010566b:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0105670:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105673:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f010567a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010567e:	74 2a                	je     f01056aa <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f0105680:	83 ec 0c             	sub    $0xc,%esp
f0105683:	ff 75 f4             	pushl  -0xc(%ebp)
f0105686:	e8 63 fc ff ff       	call   f01052ee <sched_insert_exit>
f010568b:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010568e:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0105693:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105696:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105699:	75 0f                	jne    f01056aa <sched_exit_env+0x236>
		{
			curenv = NULL;
f010569b:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f01056a2:	00 00 00 
			fos_scheduler();
f01056a5:	e8 f5 0b 00 00       	call   f010629f <fos_scheduler>
		}
	}
}
f01056aa:	90                   	nop
f01056ab:	c9                   	leave  
f01056ac:	c3                   	ret    

f01056ad <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f01056ad:	55                   	push   %ebp
f01056ae:	89 e5                	mov    %esp,%ebp
f01056b0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01056b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01056ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01056c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056c5:	0f 85 9d 00 00 00    	jne    f0105768 <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056cb:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f01056d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d3:	eb 64                	jmp    f0105739 <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f01056d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056db:	3b 45 08             	cmp    0x8(%ebp),%eax
f01056de:	75 51                	jne    f0105731 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01056e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e3:	8d 50 5c             	lea    0x5c(%eax),%edx
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056ec:	83 ec 04             	sub    $0x4,%esp
f01056ef:	52                   	push   %edx
f01056f0:	50                   	push   %eax
f01056f1:	68 44 52 12 f0       	push   $0xf0125244
f01056f6:	e8 a0 b7 ff ff       	call   f0100e9b <cprintf>
f01056fb:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01056fe:	83 ec 0c             	sub    $0xc,%esp
f0105701:	ff 75 f4             	pushl  -0xc(%ebp)
f0105704:	e8 40 fb ff ff       	call   f0105249 <sched_remove_new>
f0105709:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010570c:	83 ec 0c             	sub    $0xc,%esp
f010570f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105712:	e8 0c 4f 00 00       	call   f010a623 <env_free>
f0105717:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010571a:	83 ec 0c             	sub    $0xc,%esp
f010571d:	68 69 52 12 f0       	push   $0xf0125269
f0105722:	e8 74 b7 ff ff       	call   f0100e9b <cprintf>
f0105727:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010572a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105731:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105736:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105739:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010573d:	74 08                	je     f0105747 <sched_kill_env+0x9a>
f010573f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105742:	8b 40 44             	mov    0x44(%eax),%eax
f0105745:	eb 05                	jmp    f010574c <sched_kill_env+0x9f>
f0105747:	b8 00 00 00 00       	mov    $0x0,%eax
f010574c:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f0105751:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105756:	85 c0                	test   %eax,%eax
f0105758:	0f 85 77 ff ff ff    	jne    f01056d5 <sched_kill_env+0x28>
f010575e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105762:	0f 85 6d ff ff ff    	jne    f01056d5 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f0105768:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010576c:	0f 85 a3 01 00 00    	jne    f0105915 <sched_kill_env+0x268>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105772:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105779:	e9 83 01 00 00       	jmp    f0105901 <sched_kill_env+0x254>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010577e:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105783:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105786:	c1 e2 04             	shl    $0x4,%edx
f0105789:	01 d0                	add    %edx,%eax
f010578b:	8b 00                	mov    (%eax),%eax
f010578d:	85 c0                	test   %eax,%eax
f010578f:	0f 84 63 01 00 00    	je     f01058f8 <sched_kill_env+0x24b>
			{
				ptr_env=NULL;
f0105795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010579c:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01057a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057a4:	c1 e2 04             	shl    $0x4,%edx
f01057a7:	01 d0                	add    %edx,%eax
f01057a9:	8b 00                	mov    (%eax),%eax
f01057ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057ae:	e9 0d 01 00 00       	jmp    f01058c0 <sched_kill_env+0x213>
				{
					if(ptr_env->env_id == envId)
f01057b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057b9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057bc:	0f 85 eb 00 00 00    	jne    f01058ad <sched_kill_env+0x200>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01057c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c5:	8d 50 5c             	lea    0x5c(%eax),%edx
f01057c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057ce:	ff 75 ec             	pushl  -0x14(%ebp)
f01057d1:	52                   	push   %edx
f01057d2:	50                   	push   %eax
f01057d3:	68 70 52 12 f0       	push   $0xf0125270
f01057d8:	e8 be b6 ff ff       	call   f0100e9b <cprintf>
f01057dd:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01057e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e4:	75 17                	jne    f01057fd <sched_kill_env+0x150>
f01057e6:	83 ec 04             	sub    $0x4,%esp
f01057e9:	68 23 52 12 f0       	push   $0xf0125223
f01057ee:	68 54 01 00 00       	push   $0x154
f01057f3:	68 e7 51 12 f0       	push   $0xf01251e7
f01057f8:	e8 1d aa ff ff       	call   f010021a <_panic>
f01057fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105800:	8b 40 44             	mov    0x44(%eax),%eax
f0105803:	85 c0                	test   %eax,%eax
f0105805:	74 11                	je     f0105818 <sched_kill_env+0x16b>
f0105807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580a:	8b 40 44             	mov    0x44(%eax),%eax
f010580d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105810:	8b 52 48             	mov    0x48(%edx),%edx
f0105813:	89 50 48             	mov    %edx,0x48(%eax)
f0105816:	eb 16                	jmp    f010582e <sched_kill_env+0x181>
f0105818:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f010581d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105820:	c1 e2 04             	shl    $0x4,%edx
f0105823:	01 c2                	add    %eax,%edx
f0105825:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105828:	8b 40 48             	mov    0x48(%eax),%eax
f010582b:	89 42 04             	mov    %eax,0x4(%edx)
f010582e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105831:	8b 40 48             	mov    0x48(%eax),%eax
f0105834:	85 c0                	test   %eax,%eax
f0105836:	74 11                	je     f0105849 <sched_kill_env+0x19c>
f0105838:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010583b:	8b 40 48             	mov    0x48(%eax),%eax
f010583e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105841:	8b 52 44             	mov    0x44(%edx),%edx
f0105844:	89 50 44             	mov    %edx,0x44(%eax)
f0105847:	eb 15                	jmp    f010585e <sched_kill_env+0x1b1>
f0105849:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f010584e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105851:	c1 e2 04             	shl    $0x4,%edx
f0105854:	01 c2                	add    %eax,%edx
f0105856:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105859:	8b 40 44             	mov    0x44(%eax),%eax
f010585c:	89 02                	mov    %eax,(%edx)
f010585e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105861:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105868:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010586b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105872:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105877:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010587a:	c1 e2 04             	shl    $0x4,%edx
f010587d:	01 d0                	add    %edx,%eax
f010587f:	8b 50 0c             	mov    0xc(%eax),%edx
f0105882:	4a                   	dec    %edx
f0105883:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105886:	83 ec 0c             	sub    $0xc,%esp
f0105889:	ff 75 f4             	pushl  -0xc(%ebp)
f010588c:	e8 92 4d 00 00       	call   f010a623 <env_free>
f0105891:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105894:	83 ec 0c             	sub    $0xc,%esp
f0105897:	68 69 52 12 f0       	push   $0xf0125269
f010589c:	e8 fa b5 ff ff       	call   f0100e9b <cprintf>
f01058a1:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01058a4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01058ab:	eb 4b                	jmp    f01058f8 <sched_kill_env+0x24b>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01058ad:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01058b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058b5:	c1 e2 04             	shl    $0x4,%edx
f01058b8:	01 d0                	add    %edx,%eax
f01058ba:	8b 40 08             	mov    0x8(%eax),%eax
f01058bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c0:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01058c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058c8:	c1 e2 04             	shl    $0x4,%edx
f01058cb:	01 d0                	add    %edx,%eax
f01058cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058d1:	74 08                	je     f01058db <sched_kill_env+0x22e>
f01058d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058d6:	8b 52 44             	mov    0x44(%edx),%edx
f01058d9:	eb 05                	jmp    f01058e0 <sched_kill_env+0x233>
f01058db:	ba 00 00 00 00       	mov    $0x0,%edx
f01058e0:	89 50 08             	mov    %edx,0x8(%eax)
f01058e3:	8b 40 08             	mov    0x8(%eax),%eax
f01058e6:	85 c0                	test   %eax,%eax
f01058e8:	0f 85 c5 fe ff ff    	jne    f01057b3 <sched_kill_env+0x106>
f01058ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058f2:	0f 85 bb fe ff ff    	jne    f01057b3 <sched_kill_env+0x106>
						break;
						//return;
					}
				}
			}
			if (found)
f01058f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058fc:	75 16                	jne    f0105914 <sched_kill_env+0x267>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01058fe:	ff 45 ec             	incl   -0x14(%ebp)
f0105901:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0105906:	0f b6 c0             	movzbl %al,%eax
f0105909:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010590c:	0f 8f 6c fe ff ff    	jg     f010577e <sched_kill_env+0xd1>
f0105912:	eb 01                	jmp    f0105915 <sched_kill_env+0x268>
						//return;
					}
				}
			}
			if (found)
				break;
f0105914:	90                   	nop
		}
	}
	if (!found)
f0105915:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105919:	0f 85 a4 00 00 00    	jne    f01059c3 <sched_kill_env+0x316>
	{
		ptr_env=NULL;
f010591f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105926:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f010592b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592e:	eb 64                	jmp    f0105994 <sched_kill_env+0x2e7>
		{
			if(ptr_env->env_id == envId)
f0105930:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105933:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105936:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105939:	75 51                	jne    f010598c <sched_kill_env+0x2df>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010593b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010593e:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105941:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105944:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105947:	83 ec 04             	sub    $0x4,%esp
f010594a:	52                   	push   %edx
f010594b:	50                   	push   %eax
f010594c:	68 9c 52 12 f0       	push   $0xf012529c
f0105951:	e8 45 b5 ff ff       	call   f0100e9b <cprintf>
f0105956:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105959:	83 ec 0c             	sub    $0xc,%esp
f010595c:	ff 75 f4             	pushl  -0xc(%ebp)
f010595f:	e8 cd f9 ff ff       	call   f0105331 <sched_remove_exit>
f0105964:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105967:	83 ec 0c             	sub    $0xc,%esp
f010596a:	ff 75 f4             	pushl  -0xc(%ebp)
f010596d:	e8 b1 4c 00 00       	call   f010a623 <env_free>
f0105972:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105975:	83 ec 0c             	sub    $0xc,%esp
f0105978:	68 69 52 12 f0       	push   $0xf0125269
f010597d:	e8 19 b5 ff ff       	call   f0100e9b <cprintf>
f0105982:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105985:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010598c:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0105991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105994:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105998:	74 08                	je     f01059a2 <sched_kill_env+0x2f5>
f010599a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010599d:	8b 40 44             	mov    0x44(%eax),%eax
f01059a0:	eb 05                	jmp    f01059a7 <sched_kill_env+0x2fa>
f01059a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01059a7:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f01059ac:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f01059b1:	85 c0                	test   %eax,%eax
f01059b3:	0f 85 77 ff ff ff    	jne    f0105930 <sched_kill_env+0x283>
f01059b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059bd:	0f 85 6d ff ff ff    	jne    f0105930 <sched_kill_env+0x283>
				//return;
			}
		}
	}

	if (!found)
f01059c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01059c7:	0f 85 9d 00 00 00    	jne    f0105a6a <sched_kill_env+0x3bd>
	{
		if (curenv->env_id == envId)
f01059cd:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01059d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01059d8:	0f 85 8c 00 00 00    	jne    f0105a6a <sched_kill_env+0x3bd>
		{
			ptr_env = curenv;
f01059de:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01059e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f01059e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059e9:	8b 40 54             	mov    0x54(%eax),%eax
f01059ec:	83 f8 02             	cmp    $0x2,%eax
f01059ef:	74 19                	je     f0105a0a <sched_kill_env+0x35d>
f01059f1:	68 c4 52 12 f0       	push   $0xf01252c4
f01059f6:	68 d2 51 12 f0       	push   $0xf01251d2
f01059fb:	68 77 01 00 00       	push   $0x177
f0105a00:	68 e7 51 12 f0       	push   $0xf01251e7
f0105a05:	e8 10 a8 ff ff       	call   f010021a <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a13:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a16:	83 ec 04             	sub    $0x4,%esp
f0105a19:	52                   	push   %edx
f0105a1a:	50                   	push   %eax
f0105a1b:	68 e8 52 12 f0       	push   $0xf01252e8
f0105a20:	e8 76 b4 ff ff       	call   f0100e9b <cprintf>
f0105a25:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105a28:	83 ec 0c             	sub    $0xc,%esp
f0105a2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a2e:	e8 f0 4b 00 00       	call   f010a623 <env_free>
f0105a33:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105a36:	83 ec 0c             	sub    $0xc,%esp
f0105a39:	68 69 52 12 f0       	push   $0xf0125269
f0105a3e:	e8 58 b4 ff ff       	call   f0100e9b <cprintf>
f0105a43:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105a46:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105a4d:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0105a52:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105a55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a58:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105a5b:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f0105a62:	00 00 00 
			fos_scheduler();
f0105a65:	e8 35 08 00 00       	call   f010629f <fos_scheduler>
		}
	}
}
f0105a6a:	90                   	nop
f0105a6b:	c9                   	leave  
f0105a6c:	c3                   	ret    

f0105a6d <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f0105a6d:	55                   	push   %ebp
f0105a6e:	89 e5                	mov    %esp,%ebp
f0105a70:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105a73:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105a78:	85 c0                	test   %eax,%eax
f0105a7a:	74 69                	je     f0105ae5 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105a7c:	83 ec 0c             	sub    $0xc,%esp
f0105a7f:	68 14 53 12 f0       	push   $0xf0125314
f0105a84:	e8 12 b4 ff ff       	call   f0100e9b <cprintf>
f0105a89:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a8c:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105a91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a94:	eb 26                	jmp    f0105abc <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a99:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105aa2:	83 ec 04             	sub    $0x4,%esp
f0105aa5:	52                   	push   %edx
f0105aa6:	50                   	push   %eax
f0105aa7:	68 36 53 12 f0       	push   $0xf0125336
f0105aac:	e8 ea b3 ff ff       	call   f0100e9b <cprintf>
f0105ab1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105ab4:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105ab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105abc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ac0:	74 08                	je     f0105aca <sched_print_all+0x5d>
f0105ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ac5:	8b 40 44             	mov    0x44(%eax),%eax
f0105ac8:	eb 05                	jmp    f0105acf <sched_print_all+0x62>
f0105aca:	b8 00 00 00 00       	mov    $0x0,%eax
f0105acf:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f0105ad4:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105ad9:	85 c0                	test   %eax,%eax
f0105adb:	75 b9                	jne    f0105a96 <sched_print_all+0x29>
f0105add:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae1:	75 b3                	jne    f0105a96 <sched_print_all+0x29>
f0105ae3:	eb 10                	jmp    f0105af5 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105ae5:	83 ec 0c             	sub    $0xc,%esp
f0105ae8:	68 40 53 12 f0       	push   $0xf0125340
f0105aed:	e8 a9 b3 ff ff       	call   f0100e9b <cprintf>
f0105af2:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105af5:	83 ec 0c             	sub    $0xc,%esp
f0105af8:	68 5c 53 12 f0       	push   $0xf012535c
f0105afd:	e8 99 b3 ff ff       	call   f0100e9b <cprintf>
f0105b02:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b0c:	e9 c7 00 00 00       	jmp    f0105bd8 <sched_print_all+0x16b>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105b11:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105b16:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b19:	c1 e2 04             	shl    $0x4,%edx
f0105b1c:	01 d0                	add    %edx,%eax
f0105b1e:	8b 00                	mov    (%eax),%eax
f0105b20:	85 c0                	test   %eax,%eax
f0105b22:	0f 84 8a 00 00 00    	je     f0105bb2 <sched_print_all+0x145>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105b28:	83 ec 08             	sub    $0x8,%esp
f0105b2b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b2e:	68 90 53 12 f0       	push   $0xf0125390
f0105b33:	e8 63 b3 ff ff       	call   f0100e9b <cprintf>
f0105b38:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105b3b:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	c1 e2 04             	shl    $0x4,%edx
f0105b46:	01 d0                	add    %edx,%eax
f0105b48:	8b 00                	mov    (%eax),%eax
f0105b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b4d:	eb 31                	jmp    f0105b80 <sched_print_all+0x113>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b52:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b58:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b5b:	83 ec 04             	sub    $0x4,%esp
f0105b5e:	52                   	push   %edx
f0105b5f:	50                   	push   %eax
f0105b60:	68 36 53 12 f0       	push   $0xf0125336
f0105b65:	e8 31 b3 ff ff       	call   f0100e9b <cprintf>
f0105b6a:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105b6d:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105b72:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b75:	c1 e2 04             	shl    $0x4,%edx
f0105b78:	01 d0                	add    %edx,%eax
f0105b7a:	8b 40 08             	mov    0x8(%eax),%eax
f0105b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b80:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105b85:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b88:	c1 e2 04             	shl    $0x4,%edx
f0105b8b:	01 d0                	add    %edx,%eax
f0105b8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b91:	74 08                	je     f0105b9b <sched_print_all+0x12e>
f0105b93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b96:	8b 52 44             	mov    0x44(%edx),%edx
f0105b99:	eb 05                	jmp    f0105ba0 <sched_print_all+0x133>
f0105b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ba0:	89 50 08             	mov    %edx,0x8(%eax)
f0105ba3:	8b 40 08             	mov    0x8(%eax),%eax
f0105ba6:	85 c0                	test   %eax,%eax
f0105ba8:	75 a5                	jne    f0105b4f <sched_print_all+0xe2>
f0105baa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bae:	75 9f                	jne    f0105b4f <sched_print_all+0xe2>
f0105bb0:	eb 13                	jmp    f0105bc5 <sched_print_all+0x158>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105bb2:	83 ec 08             	sub    $0x8,%esp
f0105bb5:	ff 75 f0             	pushl  -0x10(%ebp)
f0105bb8:	68 b8 53 12 f0       	push   $0xf01253b8
f0105bbd:	e8 d9 b2 ff ff       	call   f0100e9b <cprintf>
f0105bc2:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105bc5:	83 ec 0c             	sub    $0xc,%esp
f0105bc8:	68 5c 53 12 f0       	push   $0xf012535c
f0105bcd:	e8 c9 b2 ff ff       	call   f0100e9b <cprintf>
f0105bd2:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105bd5:	ff 45 f0             	incl   -0x10(%ebp)
f0105bd8:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0105bdd:	0f b6 c0             	movzbl %al,%eax
f0105be0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105be3:	0f 8f 28 ff ff ff    	jg     f0105b11 <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105be9:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0105bee:	85 c0                	test   %eax,%eax
f0105bf0:	74 69                	je     f0105c5b <sched_print_all+0x1ee>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105bf2:	83 ec 0c             	sub    $0xc,%esp
f0105bf5:	68 dc 53 12 f0       	push   $0xf01253dc
f0105bfa:	e8 9c b2 ff ff       	call   f0100e9b <cprintf>
f0105bff:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105c02:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0105c07:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c0a:	eb 26                	jmp    f0105c32 <sched_print_all+0x1c5>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c0f:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c15:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c18:	83 ec 04             	sub    $0x4,%esp
f0105c1b:	52                   	push   %edx
f0105c1c:	50                   	push   %eax
f0105c1d:	68 36 53 12 f0       	push   $0xf0125336
f0105c22:	e8 74 b2 ff ff       	call   f0100e9b <cprintf>
f0105c27:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105c2a:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0105c2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c36:	74 08                	je     f0105c40 <sched_print_all+0x1d3>
f0105c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c3b:	8b 40 44             	mov    0x44(%eax),%eax
f0105c3e:	eb 05                	jmp    f0105c45 <sched_print_all+0x1d8>
f0105c40:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c45:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f0105c4a:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0105c4f:	85 c0                	test   %eax,%eax
f0105c51:	75 b9                	jne    f0105c0c <sched_print_all+0x19f>
f0105c53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c57:	75 b3                	jne    f0105c0c <sched_print_all+0x19f>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105c59:	eb 10                	jmp    f0105c6b <sched_print_all+0x1fe>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105c5b:	83 ec 0c             	sub    $0xc,%esp
f0105c5e:	68 fe 53 12 f0       	push   $0xf01253fe
f0105c63:	e8 33 b2 ff ff       	call   f0100e9b <cprintf>
f0105c68:	83 c4 10             	add    $0x10,%esp
	}
}
f0105c6b:	90                   	nop
f0105c6c:	c9                   	leave  
f0105c6d:	c3                   	ret    

f0105c6e <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105c6e:	55                   	push   %ebp
f0105c6f:	89 e5                	mov    %esp,%ebp
f0105c71:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105c74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c7b:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105c80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c83:	eb 24                	jmp    f0105ca9 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105c85:	83 ec 0c             	sub    $0xc,%esp
f0105c88:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c8b:	e8 b9 f5 ff ff       	call   f0105249 <sched_remove_new>
f0105c90:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105c93:	83 ec 0c             	sub    $0xc,%esp
f0105c96:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c99:	e8 42 f4 ff ff       	call   f01050e0 <sched_insert_ready0>
f0105c9e:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105ca1:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ca9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cad:	74 08                	je     f0105cb7 <sched_run_all+0x49>
f0105caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cb2:	8b 40 44             	mov    0x44(%eax),%eax
f0105cb5:	eb 05                	jmp    f0105cbc <sched_run_all+0x4e>
f0105cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cbc:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f0105cc1:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105cc6:	85 c0                	test   %eax,%eax
f0105cc8:	75 bb                	jne    f0105c85 <sched_run_all+0x17>
f0105cca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cce:	75 b5                	jne    f0105c85 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105cd0:	a1 9c 40 3f f0       	mov    0xf03f409c,%eax
f0105cd5:	85 c0                	test   %eax,%eax
f0105cd7:	75 05                	jne    f0105cde <sched_run_all+0x70>
		fos_scheduler();
f0105cd9:	e8 c1 05 00 00       	call   f010629f <fos_scheduler>
}
f0105cde:	90                   	nop
f0105cdf:	c9                   	leave  
f0105ce0:	c3                   	ret    

f0105ce1 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105ce1:	55                   	push   %ebp
f0105ce2:	89 e5                	mov    %esp,%ebp
f0105ce4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105ce7:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105cec:	85 c0                	test   %eax,%eax
f0105cee:	0f 84 95 00 00 00    	je     f0105d89 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105cf4:	83 ec 0c             	sub    $0xc,%esp
f0105cf7:	68 1c 54 12 f0       	push   $0xf012541c
f0105cfc:	e8 9a b1 ff ff       	call   f0100e9b <cprintf>
f0105d01:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105d04:	a1 80 40 3f f0       	mov    0xf03f4080,%eax
f0105d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d0c:	eb 52                	jmp    f0105d60 <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d11:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d1a:	83 ec 04             	sub    $0x4,%esp
f0105d1d:	52                   	push   %edx
f0105d1e:	50                   	push   %eax
f0105d1f:	68 48 54 12 f0       	push   $0xf0125448
f0105d24:	e8 72 b1 ff ff       	call   f0100e9b <cprintf>
f0105d29:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105d2c:	83 ec 0c             	sub    $0xc,%esp
f0105d2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d32:	e8 12 f5 ff ff       	call   f0105249 <sched_remove_new>
f0105d37:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105d3a:	83 ec 0c             	sub    $0xc,%esp
f0105d3d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d40:	e8 de 48 00 00       	call   f010a623 <env_free>
f0105d45:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105d48:	83 ec 0c             	sub    $0xc,%esp
f0105d4b:	68 69 52 12 f0       	push   $0xf0125269
f0105d50:	e8 46 b1 ff ff       	call   f0100e9b <cprintf>
f0105d55:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105d58:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105d5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d64:	74 08                	je     f0105d6e <sched_kill_all+0x8d>
f0105d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d69:	8b 40 44             	mov    0x44(%eax),%eax
f0105d6c:	eb 05                	jmp    f0105d73 <sched_kill_all+0x92>
f0105d6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d73:	a3 88 40 3f f0       	mov    %eax,0xf03f4088
f0105d78:	a1 88 40 3f f0       	mov    0xf03f4088,%eax
f0105d7d:	85 c0                	test   %eax,%eax
f0105d7f:	75 8d                	jne    f0105d0e <sched_kill_all+0x2d>
f0105d81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d85:	75 87                	jne    f0105d0e <sched_kill_all+0x2d>
f0105d87:	eb 10                	jmp    f0105d99 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105d89:	83 ec 0c             	sub    $0xc,%esp
f0105d8c:	68 5b 54 12 f0       	push   $0xf012545b
f0105d91:	e8 05 b1 ff ff       	call   f0100e9b <cprintf>
f0105d96:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d99:	83 ec 0c             	sub    $0xc,%esp
f0105d9c:	68 5c 53 12 f0       	push   $0xf012535c
f0105da1:	e8 f5 b0 ff ff       	call   f0100e9b <cprintf>
f0105da6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105da9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105db0:	e9 96 01 00 00       	jmp    f0105f4b <sched_kill_all+0x26a>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105db5:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	01 d0                	add    %edx,%eax
f0105dc2:	8b 00                	mov    (%eax),%eax
f0105dc4:	85 c0                	test   %eax,%eax
f0105dc6:	0f 84 59 01 00 00    	je     f0105f25 <sched_kill_all+0x244>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105dcc:	83 ec 08             	sub    $0x8,%esp
f0105dcf:	ff 75 f0             	pushl  -0x10(%ebp)
f0105dd2:	68 78 54 12 f0       	push   $0xf0125478
f0105dd7:	e8 bf b0 ff ff       	call   f0100e9b <cprintf>
f0105ddc:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ddf:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105de4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105de7:	c1 e2 04             	shl    $0x4,%edx
f0105dea:	01 d0                	add    %edx,%eax
f0105dec:	8b 00                	mov    (%eax),%eax
f0105dee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105df1:	e9 f5 00 00 00       	jmp    f0105eeb <sched_kill_all+0x20a>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105df9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105e02:	83 ec 04             	sub    $0x4,%esp
f0105e05:	52                   	push   %edx
f0105e06:	50                   	push   %eax
f0105e07:	68 48 54 12 f0       	push   $0xf0125448
f0105e0c:	e8 8a b0 ff ff       	call   f0100e9b <cprintf>
f0105e11:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105e14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e18:	75 17                	jne    f0105e31 <sched_kill_all+0x150>
f0105e1a:	83 ec 04             	sub    $0x4,%esp
f0105e1d:	68 23 52 12 f0       	push   $0xf0125223
f0105e22:	68 e5 01 00 00       	push   $0x1e5
f0105e27:	68 e7 51 12 f0       	push   $0xf01251e7
f0105e2c:	e8 e9 a3 ff ff       	call   f010021a <_panic>
f0105e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e34:	8b 40 44             	mov    0x44(%eax),%eax
f0105e37:	85 c0                	test   %eax,%eax
f0105e39:	74 11                	je     f0105e4c <sched_kill_all+0x16b>
f0105e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e3e:	8b 40 44             	mov    0x44(%eax),%eax
f0105e41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105e44:	8b 52 48             	mov    0x48(%edx),%edx
f0105e47:	89 50 48             	mov    %edx,0x48(%eax)
f0105e4a:	eb 16                	jmp    f0105e62 <sched_kill_all+0x181>
f0105e4c:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105e51:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e54:	c1 e2 04             	shl    $0x4,%edx
f0105e57:	01 c2                	add    %eax,%edx
f0105e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5c:	8b 40 48             	mov    0x48(%eax),%eax
f0105e5f:	89 42 04             	mov    %eax,0x4(%edx)
f0105e62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e65:	8b 40 48             	mov    0x48(%eax),%eax
f0105e68:	85 c0                	test   %eax,%eax
f0105e6a:	74 11                	je     f0105e7d <sched_kill_all+0x19c>
f0105e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e6f:	8b 40 48             	mov    0x48(%eax),%eax
f0105e72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105e75:	8b 52 44             	mov    0x44(%edx),%edx
f0105e78:	89 50 44             	mov    %edx,0x44(%eax)
f0105e7b:	eb 15                	jmp    f0105e92 <sched_kill_all+0x1b1>
f0105e7d:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105e82:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e85:	c1 e2 04             	shl    $0x4,%edx
f0105e88:	01 c2                	add    %eax,%edx
f0105e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e8d:	8b 40 44             	mov    0x44(%eax),%eax
f0105e90:	89 02                	mov    %eax,(%edx)
f0105e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e95:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e9f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105ea6:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105eab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105eae:	c1 e2 04             	shl    $0x4,%edx
f0105eb1:	01 d0                	add    %edx,%eax
f0105eb3:	8b 50 0c             	mov    0xc(%eax),%edx
f0105eb6:	4a                   	dec    %edx
f0105eb7:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0105eba:	83 ec 0c             	sub    $0xc,%esp
f0105ebd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ec0:	e8 5e 47 00 00       	call   f010a623 <env_free>
f0105ec5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105ec8:	83 ec 0c             	sub    $0xc,%esp
f0105ecb:	68 69 52 12 f0       	push   $0xf0125269
f0105ed0:	e8 c6 af ff ff       	call   f0100e9b <cprintf>
f0105ed5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ed8:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105edd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ee0:	c1 e2 04             	shl    $0x4,%edx
f0105ee3:	01 d0                	add    %edx,%eax
f0105ee5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105eeb:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0105ef0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ef3:	c1 e2 04             	shl    $0x4,%edx
f0105ef6:	01 d0                	add    %edx,%eax
f0105ef8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105efc:	74 08                	je     f0105f06 <sched_kill_all+0x225>
f0105efe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105f01:	8b 52 44             	mov    0x44(%edx),%edx
f0105f04:	eb 05                	jmp    f0105f0b <sched_kill_all+0x22a>
f0105f06:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f0b:	89 50 08             	mov    %edx,0x8(%eax)
f0105f0e:	8b 40 08             	mov    0x8(%eax),%eax
f0105f11:	85 c0                	test   %eax,%eax
f0105f13:	0f 85 dd fe ff ff    	jne    f0105df6 <sched_kill_all+0x115>
f0105f19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f1d:	0f 85 d3 fe ff ff    	jne    f0105df6 <sched_kill_all+0x115>
f0105f23:	eb 13                	jmp    f0105f38 <sched_kill_all+0x257>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105f25:	83 ec 08             	sub    $0x8,%esp
f0105f28:	ff 75 f0             	pushl  -0x10(%ebp)
f0105f2b:	68 b8 53 12 f0       	push   $0xf01253b8
f0105f30:	e8 66 af ff ff       	call   f0100e9b <cprintf>
f0105f35:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105f38:	83 ec 0c             	sub    $0xc,%esp
f0105f3b:	68 5c 53 12 f0       	push   $0xf012535c
f0105f40:	e8 56 af ff ff       	call   f0100e9b <cprintf>
f0105f45:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f48:	ff 45 f0             	incl   -0x10(%ebp)
f0105f4b:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0105f50:	0f b6 c0             	movzbl %al,%eax
f0105f53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105f56:	0f 8f 59 fe ff ff    	jg     f0105db5 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105f5c:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0105f61:	85 c0                	test   %eax,%eax
f0105f63:	0f 84 95 00 00 00    	je     f0105ffe <sched_kill_all+0x31d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105f69:	83 ec 0c             	sub    $0xc,%esp
f0105f6c:	68 ac 54 12 f0       	push   $0xf01254ac
f0105f71:	e8 25 af ff ff       	call   f0100e9b <cprintf>
f0105f76:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f79:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f81:	eb 52                	jmp    f0105fd5 <sched_kill_all+0x2f4>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f86:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f8c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f8f:	83 ec 04             	sub    $0x4,%esp
f0105f92:	52                   	push   %edx
f0105f93:	50                   	push   %eax
f0105f94:	68 48 54 12 f0       	push   $0xf0125448
f0105f99:	e8 fd ae ff ff       	call   f0100e9b <cprintf>
f0105f9e:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105fa1:	83 ec 0c             	sub    $0xc,%esp
f0105fa4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105fa7:	e8 85 f3 ff ff       	call   f0105331 <sched_remove_exit>
f0105fac:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105faf:	83 ec 0c             	sub    $0xc,%esp
f0105fb2:	ff 75 f4             	pushl  -0xc(%ebp)
f0105fb5:	e8 69 46 00 00       	call   f010a623 <env_free>
f0105fba:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105fbd:	83 ec 0c             	sub    $0xc,%esp
f0105fc0:	68 69 52 12 f0       	push   $0xf0125269
f0105fc5:	e8 d1 ae ff ff       	call   f0100e9b <cprintf>
f0105fca:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105fcd:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fd9:	74 08                	je     f0105fe3 <sched_kill_all+0x302>
f0105fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fde:	8b 40 44             	mov    0x44(%eax),%eax
f0105fe1:	eb 05                	jmp    f0105fe8 <sched_kill_all+0x307>
f0105fe3:	b8 00 00 00 00       	mov    $0x0,%eax
f0105fe8:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f0105fed:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0105ff2:	85 c0                	test   %eax,%eax
f0105ff4:	75 8d                	jne    f0105f83 <sched_kill_all+0x2a2>
f0105ff6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ffa:	75 87                	jne    f0105f83 <sched_kill_all+0x2a2>
f0105ffc:	eb 10                	jmp    f010600e <sched_kill_all+0x32d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105ffe:	83 ec 0c             	sub    $0xc,%esp
f0106001:	68 fe 53 12 f0       	push   $0xf01253fe
f0106006:	e8 90 ae ff ff       	call   f0100e9b <cprintf>
f010600b:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010600e:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f0106015:	00 00 00 
	fos_scheduler();
f0106018:	e8 82 02 00 00       	call   f010629f <fos_scheduler>

f010601d <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f010601d:	55                   	push   %ebp
f010601e:	89 e5                	mov    %esp,%ebp
f0106020:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0106023:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010602a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106031:	e9 37 01 00 00       	jmp    f010616d <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0106036:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f010603b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010603e:	c1 e2 04             	shl    $0x4,%edx
f0106041:	01 d0                	add    %edx,%eax
f0106043:	8b 00                	mov    (%eax),%eax
f0106045:	85 c0                	test   %eax,%eax
f0106047:	0f 84 1d 01 00 00    	je     f010616a <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010604d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106054:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0106059:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010605c:	c1 e2 04             	shl    $0x4,%edx
f010605f:	01 d0                	add    %edx,%eax
f0106061:	8b 00                	mov    (%eax),%eax
f0106063:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106066:	e9 c7 00 00 00       	jmp    f0106132 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010606b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010606f:	75 17                	jne    f0106088 <sched_exit_all_ready_envs+0x6b>
f0106071:	83 ec 04             	sub    $0x4,%esp
f0106074:	68 23 52 12 f0       	push   $0xf0125223
f0106079:	68 14 02 00 00       	push   $0x214
f010607e:	68 e7 51 12 f0       	push   $0xf01251e7
f0106083:	e8 92 a1 ff ff       	call   f010021a <_panic>
f0106088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010608b:	8b 40 44             	mov    0x44(%eax),%eax
f010608e:	85 c0                	test   %eax,%eax
f0106090:	74 11                	je     f01060a3 <sched_exit_all_ready_envs+0x86>
f0106092:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106095:	8b 40 44             	mov    0x44(%eax),%eax
f0106098:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010609b:	8b 52 48             	mov    0x48(%edx),%edx
f010609e:	89 50 48             	mov    %edx,0x48(%eax)
f01060a1:	eb 16                	jmp    f01060b9 <sched_exit_all_ready_envs+0x9c>
f01060a3:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01060a8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ab:	c1 e2 04             	shl    $0x4,%edx
f01060ae:	01 c2                	add    %eax,%edx
f01060b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060b3:	8b 40 48             	mov    0x48(%eax),%eax
f01060b6:	89 42 04             	mov    %eax,0x4(%edx)
f01060b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060bc:	8b 40 48             	mov    0x48(%eax),%eax
f01060bf:	85 c0                	test   %eax,%eax
f01060c1:	74 11                	je     f01060d4 <sched_exit_all_ready_envs+0xb7>
f01060c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060c6:	8b 40 48             	mov    0x48(%eax),%eax
f01060c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01060cc:	8b 52 44             	mov    0x44(%edx),%edx
f01060cf:	89 50 44             	mov    %edx,0x44(%eax)
f01060d2:	eb 15                	jmp    f01060e9 <sched_exit_all_ready_envs+0xcc>
f01060d4:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01060d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060dc:	c1 e2 04             	shl    $0x4,%edx
f01060df:	01 c2                	add    %eax,%edx
f01060e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060e4:	8b 40 44             	mov    0x44(%eax),%eax
f01060e7:	89 02                	mov    %eax,(%edx)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01060f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060f6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01060fd:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0106102:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106105:	c1 e2 04             	shl    $0x4,%edx
f0106108:	01 d0                	add    %edx,%eax
f010610a:	8b 50 0c             	mov    0xc(%eax),%edx
f010610d:	4a                   	dec    %edx
f010610e:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f0106111:	83 ec 0c             	sub    $0xc,%esp
f0106114:	ff 75 f4             	pushl  -0xc(%ebp)
f0106117:	e8 d2 f1 ff ff       	call   f01052ee <sched_insert_exit>
f010611c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010611f:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0106124:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106127:	c1 e2 04             	shl    $0x4,%edx
f010612a:	01 d0                	add    %edx,%eax
f010612c:	8b 40 08             	mov    0x8(%eax),%eax
f010612f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106132:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0106137:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010613a:	c1 e2 04             	shl    $0x4,%edx
f010613d:	01 d0                	add    %edx,%eax
f010613f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106143:	74 08                	je     f010614d <sched_exit_all_ready_envs+0x130>
f0106145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106148:	8b 52 44             	mov    0x44(%edx),%edx
f010614b:	eb 05                	jmp    f0106152 <sched_exit_all_ready_envs+0x135>
f010614d:	ba 00 00 00 00       	mov    $0x0,%edx
f0106152:	89 50 08             	mov    %edx,0x8(%eax)
f0106155:	8b 40 08             	mov    0x8(%eax),%eax
f0106158:	85 c0                	test   %eax,%eax
f010615a:	0f 85 0b ff ff ff    	jne    f010606b <sched_exit_all_ready_envs+0x4e>
f0106160:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106164:	0f 85 01 ff ff ff    	jne    f010606b <sched_exit_all_ready_envs+0x4e>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010616a:	ff 45 f0             	incl   -0x10(%ebp)
f010616d:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0106172:	0f b6 c0             	movzbl %al,%eax
f0106175:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106178:	0f 8f b8 fe ff ff    	jg     f0106036 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010617e:	90                   	nop
f010617f:	c9                   	leave  
f0106180:	c3                   	ret    

f0106181 <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f0106181:	55                   	push   %ebp
f0106182:	89 e5                	mov    %esp,%ebp
	return ticks;
f0106184:	a1 b0 40 3f f0       	mov    0xf03f40b0,%eax
f0106189:	8b 15 b4 40 3f f0    	mov    0xf03f40b4,%edx
}
f010618f:	5d                   	pop    %ebp
f0106190:	c3                   	ret    

f0106191 <env_get_nice>:
int env_get_nice(struct Env* e)
{
f0106191:	55                   	push   %ebp
f0106192:	89 e5                	mov    %esp,%ebp
f0106194:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106197:	83 ec 04             	sub    $0x4,%esp
f010619a:	68 d8 54 12 f0       	push   $0xf01254d8
f010619f:	68 26 02 00 00       	push   $0x226
f01061a4:	68 e7 51 12 f0       	push   $0xf01251e7
f01061a9:	e8 6c a0 ff ff       	call   f010021a <_panic>

f01061ae <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f01061ae:	55                   	push   %ebp
f01061af:	89 e5                	mov    %esp,%ebp
f01061b1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01061b4:	83 ec 04             	sub    $0x4,%esp
f01061b7:	68 d8 54 12 f0       	push   $0xf01254d8
f01061bc:	68 2e 02 00 00       	push   $0x22e
f01061c1:	68 e7 51 12 f0       	push   $0xf01251e7
f01061c6:	e8 4f a0 ff ff       	call   f010021a <_panic>

f01061cb <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f01061cb:	55                   	push   %ebp
f01061cc:	89 e5                	mov    %esp,%ebp
f01061ce:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01061d1:	83 ec 04             	sub    $0x4,%esp
f01061d4:	68 d8 54 12 f0       	push   $0xf01254d8
f01061d9:	68 35 02 00 00       	push   $0x235
f01061de:	68 e7 51 12 f0       	push   $0xf01251e7
f01061e3:	e8 32 a0 ff ff       	call   f010021a <_panic>

f01061e8 <get_load_average>:
	return 0;
}
int get_load_average()
{
f01061e8:	55                   	push   %ebp
f01061e9:	89 e5                	mov    %esp,%ebp
f01061eb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01061ee:	83 ec 04             	sub    $0x4,%esp
f01061f1:	68 d8 54 12 f0       	push   $0xf01254d8
f01061f6:	68 3d 02 00 00       	push   $0x23d
f01061fb:	68 e7 51 12 f0       	push   $0xf01251e7
f0106200:	e8 15 a0 ff ff       	call   f010021a <_panic>

f0106205 <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0106205:	55                   	push   %ebp
f0106206:	89 e5                	mov    %esp,%ebp
f0106208:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f010620d:	85 c0                	test   %eax,%eax
f010620f:	75 07                	jne    f0106218 <isSchedMethodRR+0x13>
f0106211:	b8 01 00 00 00       	mov    $0x1,%eax
f0106216:	eb 05                	jmp    f010621d <isSchedMethodRR+0x18>
f0106218:	b8 00 00 00 00       	mov    $0x0,%eax
f010621d:	5d                   	pop    %ebp
f010621e:	c3                   	ret    

f010621f <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010621f:	55                   	push   %ebp
f0106220:	89 e5                	mov    %esp,%ebp
f0106222:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f0106227:	83 f8 01             	cmp    $0x1,%eax
f010622a:	75 07                	jne    f0106233 <isSchedMethodMLFQ+0x14>
f010622c:	b8 01 00 00 00       	mov    $0x1,%eax
f0106231:	eb 05                	jmp    f0106238 <isSchedMethodMLFQ+0x19>
f0106233:	b8 00 00 00 00       	mov    $0x0,%eax
f0106238:	5d                   	pop    %ebp
f0106239:	c3                   	ret    

f010623a <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f010623a:	55                   	push   %ebp
f010623b:	89 e5                	mov    %esp,%ebp
f010623d:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f0106242:	83 f8 02             	cmp    $0x2,%eax
f0106245:	75 07                	jne    f010624e <isSchedMethodBSD+0x14>
f0106247:	b8 01 00 00 00       	mov    $0x1,%eax
f010624c:	eb 05                	jmp    f0106253 <isSchedMethodBSD+0x19>
f010624e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106253:	5d                   	pop    %ebp
f0106254:	c3                   	ret    

f0106255 <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f0106255:	55                   	push   %ebp
f0106256:	89 e5                	mov    %esp,%ebp
f0106258:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f010625b:	c7 05 3c 40 3f f0 00 	movl   $0x0,0xf03f403c
f0106262:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f0106265:	83 ec 0c             	sub    $0xc,%esp
f0106268:	6a 0a                	push   $0xa
f010626a:	e8 30 01 00 00       	call   f010639f <sched_init_RR>
f010626f:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0106272:	83 ec 0c             	sub    $0xc,%esp
f0106275:	68 80 40 3f f0       	push   $0xf03f4080
f010627a:	e8 74 eb ff ff       	call   f0104df3 <init_queue>
f010627f:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0106282:	83 ec 0c             	sub    $0xc,%esp
f0106285:	68 2c 40 3f f0       	push   $0xf03f402c
f010628a:	e8 64 eb ff ff       	call   f0104df3 <init_queue>
f010628f:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0106292:	c7 05 9c 40 3f f0 00 	movl   $0x0,0xf03f409c
f0106299:	00 00 00 
}
f010629c:	90                   	nop
f010629d:	c9                   	leave  
f010629e:	c3                   	ret    

f010629f <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f010629f:	55                   	push   %ebp
f01062a0:	89 e5                	mov    %esp,%ebp
f01062a2:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f01062a5:	e8 f9 aa 01 00       	call   f0120da3 <chk1>
	scheduler_status = SCH_STARTED;
f01062aa:	c7 05 9c 40 3f f0 01 	movl   $0x1,0xf03f409c
f01062b1:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f01062b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f01062bb:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f01062c0:	85 c0                	test   %eax,%eax
f01062c2:	75 4d                	jne    f0106311 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f01062c4:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01062c9:	85 c0                	test   %eax,%eax
f01062cb:	74 18                	je     f01062e5 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f01062cd:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f01062d3:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01062d8:	83 ec 08             	sub    $0x8,%esp
f01062db:	52                   	push   %edx
f01062dc:	50                   	push   %eax
f01062dd:	e8 52 eb ff ff       	call   f0104e34 <enqueue>
f01062e2:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f01062e5:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f01062ea:	83 ec 0c             	sub    $0xc,%esp
f01062ed:	50                   	push   %eax
f01062ee:	e8 d2 eb ff ff       	call   f0104ec5 <dequeue>
f01062f3:	83 c4 10             	add    $0x10,%esp
f01062f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f01062f9:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f01062fe:	8a 00                	mov    (%eax),%al
f0106300:	0f b6 c0             	movzbl %al,%eax
f0106303:	83 ec 0c             	sub    $0xc,%esp
f0106306:	50                   	push   %eax
f0106307:	e8 15 e9 ff ff       	call   f0104c21 <kclock_set_quantum>
f010630c:	83 c4 10             	add    $0x10,%esp
f010630f:	eb 26                	jmp    f0106337 <fos_scheduler+0x98>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106311:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f0106316:	83 f8 01             	cmp    $0x1,%eax
f0106319:	75 0a                	jne    f0106325 <fos_scheduler+0x86>
	{
		next_env = fos_scheduler_MLFQ();
f010631b:	e8 5b 01 00 00       	call   f010647b <fos_scheduler_MLFQ>
f0106320:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106323:	eb 12                	jmp    f0106337 <fos_scheduler+0x98>
	}
	else if (scheduler_method == SCH_BSD)
f0106325:	a1 90 40 3f f0       	mov    0xf03f4090,%eax
f010632a:	83 f8 02             	cmp    $0x2,%eax
f010632d:	75 08                	jne    f0106337 <fos_scheduler+0x98>
	{
		next_env = fos_scheduler_BSD();
f010632f:	e8 64 01 00 00       	call   f0106498 <fos_scheduler_BSD>
f0106334:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0106337:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010633c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f010633f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106342:	a3 38 37 3f f0       	mov    %eax,0xf03f3738
	chk2(next_env) ;
f0106347:	83 ec 0c             	sub    $0xc,%esp
f010634a:	ff 75 f4             	pushl  -0xc(%ebp)
f010634d:	e8 8e aa 01 00       	call   f0120de0 <chk2>
f0106352:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0106355:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106358:	a3 38 37 3f f0       	mov    %eax,0xf03f3738

	//sched_print_all();

	if(next_env != NULL)
f010635d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106361:	74 0b                	je     f010636e <fos_scheduler+0xcf>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0106363:	83 ec 0c             	sub    $0xc,%esp
f0106366:	ff 75 f4             	pushl  -0xc(%ebp)
f0106369:	e8 58 42 00 00       	call   f010a5c6 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f010636e:	c7 05 38 37 3f f0 00 	movl   $0x0,0xf03f3738
f0106375:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0106378:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f010637d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106380:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106383:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0106386:	c7 05 9c 40 3f f0 00 	movl   $0x0,0xf03f409c
f010638d:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106390:	83 ec 0c             	sub    $0xc,%esp
f0106393:	6a 00                	push   $0x0
f0106395:	e8 20 b8 ff ff       	call   f0101bba <run_command_prompt>
f010639a:	83 c4 10             	add    $0x10,%esp
f010639d:	eb f1                	jmp    f0106390 <fos_scheduler+0xf1>

f010639f <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f010639f:	55                   	push   %ebp
f01063a0:	89 e5                	mov    %esp,%ebp
f01063a2:	83 ec 18             	sub    $0x18,%esp
f01063a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01063a8:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01063ab:	c6 05 c8 40 3f f0 01 	movb   $0x1,0xf03f40c8
#if USE_KHEAP
	sched_delete_ready_queues();
f01063b2:	e8 ec ec ff ff       	call   f01050a3 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f01063b7:	83 ec 0c             	sub    $0xc,%esp
f01063ba:	6a 10                	push   $0x10
f01063bc:	e8 e0 21 00 00       	call   f01085a1 <kmalloc>
f01063c1:	83 c4 10             	add    $0x10,%esp
f01063c4:	a3 20 40 3f f0       	mov    %eax,0xf03f4020
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f01063c9:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f01063ce:	0f b6 c0             	movzbl %al,%eax
f01063d1:	83 ec 0c             	sub    $0xc,%esp
f01063d4:	50                   	push   %eax
f01063d5:	e8 c7 21 00 00       	call   f01085a1 <kmalloc>
f01063da:	83 c4 10             	add    $0x10,%esp
f01063dd:	a3 60 40 3f f0       	mov    %eax,0xf03f4060
#endif
	quantums[0] = quantum;
f01063e2:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f01063e7:	8a 55 f4             	mov    -0xc(%ebp),%dl
f01063ea:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f01063ec:	a1 60 40 3f f0       	mov    0xf03f4060,%eax
f01063f1:	8a 00                	mov    (%eax),%al
f01063f3:	0f b6 c0             	movzbl %al,%eax
f01063f6:	83 ec 0c             	sub    $0xc,%esp
f01063f9:	50                   	push   %eax
f01063fa:	e8 22 e8 ff ff       	call   f0104c21 <kclock_set_quantum>
f01063ff:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106402:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0106407:	83 ec 0c             	sub    $0xc,%esp
f010640a:	50                   	push   %eax
f010640b:	e8 e3 e9 ff ff       	call   f0104df3 <init_queue>
f0106410:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106413:	c7 05 9c 40 3f f0 00 	movl   $0x0,0xf03f409c
f010641a:	00 00 00 
	scheduler_method = SCH_RR;
f010641d:	c7 05 90 40 3f f0 00 	movl   $0x0,0xf03f4090
f0106424:	00 00 00 
	//=========================================
	//=========================================
}
f0106427:	90                   	nop
f0106428:	c9                   	leave  
f0106429:	c3                   	ret    

f010642a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010642a:	55                   	push   %ebp
f010642b:	89 e5                	mov    %esp,%ebp
f010642d:	83 ec 18             	sub    $0x18,%esp
f0106430:	8b 45 08             	mov    0x8(%ebp),%eax
f0106433:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0106436:	e8 68 ec ff ff       	call   f01050a3 <sched_delete_ready_queues>
	//=========================================
	//=========================================

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f010643b:	c7 05 9c 40 3f f0 00 	movl   $0x0,0xf03f409c
f0106442:	00 00 00 
	scheduler_method = SCH_MLFQ;
f0106445:	c7 05 90 40 3f f0 01 	movl   $0x1,0xf03f4090
f010644c:	00 00 00 
	//=========================================
	//=========================================
#endif
}
f010644f:	90                   	nop
f0106450:	c9                   	leave  
f0106451:	c3                   	ret    

f0106452 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106452:	55                   	push   %ebp
f0106453:	89 e5                	mov    %esp,%ebp
f0106455:	83 ec 18             	sub    $0x18,%esp
f0106458:	8b 55 08             	mov    0x8(%ebp),%edx
f010645b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010645e:	88 55 f4             	mov    %dl,-0xc(%ebp)
f0106461:	88 45 f0             	mov    %al,-0x10(%ebp)
#if USE_KHEAP
	//TODO: [PROJECT'23.MS3 - #4] [2] BSD SCHEDULER - sched_init_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106464:	83 ec 04             	sub    $0x4,%esp
f0106467:	68 ec 54 12 f0       	push   $0xf01254ec
f010646c:	68 a8 00 00 00       	push   $0xa8
f0106471:	68 00 55 12 f0       	push   $0xf0125500
f0106476:	e8 9f 9d ff ff       	call   f010021a <_panic>

f010647b <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010647b:	55                   	push   %ebp
f010647c:	89 e5                	mov    %esp,%ebp
f010647e:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106481:	83 ec 04             	sub    $0x4,%esp
f0106484:	68 11 55 12 f0       	push   $0xf0125511
f0106489:	68 b9 00 00 00       	push   $0xb9
f010648e:	68 00 55 12 f0       	push   $0xf0125500
f0106493:	e8 82 9d ff ff       	call   f010021a <_panic>

f0106498 <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0106498:	55                   	push   %ebp
f0106499:	89 e5                	mov    %esp,%ebp
f010649b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010649e:	83 ec 04             	sub    $0x4,%esp
f01064a1:	68 ec 54 12 f0       	push   $0xf01254ec
f01064a6:	68 c5 00 00 00       	push   $0xc5
f01064ab:	68 00 55 12 f0       	push   $0xf0125500
f01064b0:	e8 65 9d ff ff       	call   f010021a <_panic>

f01064b5 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
f01064b8:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01064bb:	a1 b0 40 3f f0       	mov    0xf03f40b0,%eax
f01064c0:	8b 15 b4 40 3f f0    	mov    0xf03f40b4,%edx
f01064c6:	83 c0 01             	add    $0x1,%eax
f01064c9:	83 d2 00             	adc    $0x0,%edx
f01064cc:	a3 b0 40 3f f0       	mov    %eax,0xf03f40b0
f01064d1:	89 15 b4 40 3f f0    	mov    %edx,0xf03f40b4
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01064d7:	83 ec 0c             	sub    $0xc,%esp
f01064da:	6a 01                	push   $0x1
f01064dc:	e8 ce 7d 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f01064e1:	83 c4 10             	add    $0x10,%esp
f01064e4:	85 c0                	test   %eax,%eax
f01064e6:	74 05                	je     f01064ed <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01064e8:	e8 05 00 00 00       	call   f01064f2 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01064ed:	e8 ad fd ff ff       	call   f010629f <fos_scheduler>

f01064f2 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f01064f2:	55                   	push   %ebp
f01064f3:	89 e5                	mov    %esp,%ebp
f01064f5:	53                   	push   %ebx
f01064f6:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01064f9:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f01064fe:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106501:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106505:	0f 84 ad 01 00 00    	je     f01066b8 <update_WS_time_stamps+0x1c6>
	{
		struct WorkingSetElement* wse ;
		{
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
f010650b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010650e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f0106514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106517:	eb 7e                	jmp    f0106597 <update_WS_time_stamps+0xa5>
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106519:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010651c:	8b 00                	mov    (%eax),%eax
f010651e:	89 45 e8             	mov    %eax,-0x18(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106521:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106524:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010652a:	83 ec 08             	sub    $0x8,%esp
f010652d:	ff 75 e8             	pushl  -0x18(%ebp)
f0106530:	50                   	push   %eax
f0106531:	e8 7f 27 00 00       	call   f0108cb5 <pt_get_page_permissions>
f0106536:	83 c4 10             	add    $0x10,%esp
f0106539:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f010653c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010653f:	8b 40 08             	mov    0x8(%eax),%eax
f0106542:	89 45 e0             	mov    %eax,-0x20(%ebp)

				if (perm & PERM_USED)
f0106545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106548:	83 e0 20             	and    $0x20,%eax
f010654b:	85 c0                	test   %eax,%eax
f010654d:	74 2e                	je     f010657d <update_WS_time_stamps+0x8b>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010654f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106552:	c1 e8 02             	shr    $0x2,%eax
f0106555:	0d 00 00 00 80       	or     $0x80000000,%eax
f010655a:	89 c2                	mov    %eax,%edx
f010655c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010655f:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0106562:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106565:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010656b:	6a 20                	push   $0x20
f010656d:	6a 00                	push   $0x0
f010656f:	ff 75 e8             	pushl  -0x18(%ebp)
f0106572:	50                   	push   %eax
f0106573:	e8 79 26 00 00       	call   f0108bf1 <pt_set_page_permissions>
f0106578:	83 c4 10             	add    $0x10,%esp
f010657b:	eb 0e                	jmp    f010658b <update_WS_time_stamps+0x99>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f010657d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106580:	c1 e8 02             	shr    $0x2,%eax
f0106583:	89 c2                	mov    %eax,%edx
f0106585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106588:	89 50 08             	mov    %edx,0x8(%eax)
	{
		struct WorkingSetElement* wse ;
		{
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
f010658b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010658e:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f0106594:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106597:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010659b:	74 08                	je     f01065a5 <update_WS_time_stamps+0xb3>
f010659d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a0:	8b 40 10             	mov    0x10(%eax),%eax
f01065a3:	eb 05                	jmp    f01065aa <update_WS_time_stamps+0xb8>
f01065a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01065aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01065ad:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f01065b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065b6:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f01065bc:	85 c0                	test   %eax,%eax
f01065be:	0f 85 55 ff ff ff    	jne    f0106519 <update_WS_time_stamps+0x27>
f01065c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01065c8:	0f 85 4b ff ff ff    	jne    f0106519 <update_WS_time_stamps+0x27>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01065d5:	e9 d4 00 00 00       	jmp    f01066ae <update_WS_time_stamps+0x1bc>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01065da:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01065dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065e0:	89 d0                	mov    %edx,%eax
f01065e2:	01 c0                	add    %eax,%eax
f01065e4:	01 d0                	add    %edx,%eax
f01065e6:	c1 e0 03             	shl    $0x3,%eax
f01065e9:	01 c8                	add    %ecx,%eax
f01065eb:	05 e4 00 00 00       	add    $0xe4,%eax
f01065f0:	8a 00                	mov    (%eax),%al
f01065f2:	3c 01                	cmp    $0x1,%al
f01065f4:	0f 84 b1 00 00 00    	je     f01066ab <update_WS_time_stamps+0x1b9>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01065fa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	89 d0                	mov    %edx,%eax
f0106602:	01 c0                	add    %eax,%eax
f0106604:	01 d0                	add    %edx,%eax
f0106606:	c1 e0 03             	shl    $0x3,%eax
f0106609:	01 c8                	add    %ecx,%eax
f010660b:	05 e0 00 00 00       	add    $0xe0,%eax
f0106610:	8b 00                	mov    (%eax),%eax
f0106612:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106615:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106618:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010661b:	89 d0                	mov    %edx,%eax
f010661d:	01 c0                	add    %eax,%eax
f010661f:	01 d0                	add    %edx,%eax
f0106621:	c1 e0 03             	shl    $0x3,%eax
f0106624:	01 c8                	add    %ecx,%eax
f0106626:	05 e8 00 00 00       	add    $0xe8,%eax
f010662b:	8b 00                	mov    (%eax),%eax
f010662d:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106630:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106633:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106639:	83 ec 08             	sub    $0x8,%esp
f010663c:	ff 75 dc             	pushl  -0x24(%ebp)
f010663f:	50                   	push   %eax
f0106640:	e8 4c 27 00 00       	call   f0108d91 <pd_is_table_used>
f0106645:	83 c4 10             	add    $0x10,%esp
f0106648:	85 c0                	test   %eax,%eax
f010664a:	74 3f                	je     f010668b <update_WS_time_stamps+0x199>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010664c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010664f:	c1 e8 02             	shr    $0x2,%eax
f0106652:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106657:	89 c1                	mov    %eax,%ecx
f0106659:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010665c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010665f:	89 d0                	mov    %edx,%eax
f0106661:	01 c0                	add    %eax,%eax
f0106663:	01 d0                	add    %edx,%eax
f0106665:	c1 e0 03             	shl    $0x3,%eax
f0106668:	01 d8                	add    %ebx,%eax
f010666a:	05 e8 00 00 00       	add    $0xe8,%eax
f010666f:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106671:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106674:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010667a:	83 ec 08             	sub    $0x8,%esp
f010667d:	ff 75 dc             	pushl  -0x24(%ebp)
f0106680:	50                   	push   %eax
f0106681:	e8 2f 27 00 00       	call   f0108db5 <pd_set_table_unused>
f0106686:	83 c4 10             	add    $0x10,%esp
f0106689:	eb 20                	jmp    f01066ab <update_WS_time_stamps+0x1b9>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010668b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010668e:	c1 e8 02             	shr    $0x2,%eax
f0106691:	89 c1                	mov    %eax,%ecx
f0106693:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106696:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 d8                	add    %ebx,%eax
f01066a4:	05 e8 00 00 00       	add    $0xe8,%eax
f01066a9:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01066ab:	ff 45 f0             	incl   -0x10(%ebp)
f01066ae:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01066b2:	0f 8e 22 ff ff ff    	jle    f01065da <update_WS_time_stamps+0xe8>
					}
				}
			}
		}
	}
}
f01066b8:	90                   	nop
f01066b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01066bc:	c9                   	leave  
f01066bd:	c3                   	ret    

f01066be <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01066be:	55                   	push   %ebp
f01066bf:	89 e5                	mov    %esp,%ebp
f01066c1:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01066c4:	c7 05 2c 37 3f f0 01 	movl   $0x1,0xf03f372c
f01066cb:	00 00 00 
f01066ce:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01066d5:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01066d9:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01066dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066df:	ee                   	out    %al,(%dx)
f01066e0:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01066e7:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01066eb:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01066ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01066f1:	ee                   	out    %al,(%dx)
f01066f2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f01066f9:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f01066fd:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106700:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106703:	ee                   	out    %al,(%dx)
f0106704:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010670b:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010670f:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106712:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106715:	ee                   	out    %al,(%dx)
f0106716:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010671d:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106721:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106724:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106727:	ee                   	out    %al,(%dx)
f0106728:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010672f:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106733:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106736:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106739:	ee                   	out    %al,(%dx)
f010673a:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106741:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106745:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106748:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010674b:	ee                   	out    %al,(%dx)
f010674c:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106753:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106757:	8a 45 b9             	mov    -0x47(%ebp),%al
f010675a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010675d:	ee                   	out    %al,(%dx)
f010675e:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106765:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106769:	8a 45 ba             	mov    -0x46(%ebp),%al
f010676c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010676f:	ee                   	out    %al,(%dx)
f0106770:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106777:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010677b:	8a 45 bb             	mov    -0x45(%ebp),%al
f010677e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106781:	ee                   	out    %al,(%dx)
f0106782:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106789:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010678d:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106790:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106793:	ee                   	out    %al,(%dx)
f0106794:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f010679b:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f010679f:	8a 45 bd             	mov    -0x43(%ebp),%al
f01067a2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01067a5:	ee                   	out    %al,(%dx)
f01067a6:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01067ad:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01067b1:	8a 45 be             	mov    -0x42(%ebp),%al
f01067b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01067b7:	ee                   	out    %al,(%dx)
f01067b8:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01067bf:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01067c3:	8a 45 bf             	mov    -0x41(%ebp),%al
f01067c6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01067c9:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01067ca:	66 a1 4c 19 17 f0    	mov    0xf017194c,%ax
f01067d0:	66 83 f8 ff          	cmp    $0xffff,%ax
f01067d4:	74 15                	je     f01067eb <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01067d6:	66 a1 4c 19 17 f0    	mov    0xf017194c,%ax
f01067dc:	0f b7 c0             	movzwl %ax,%eax
f01067df:	83 ec 0c             	sub    $0xc,%esp
f01067e2:	50                   	push   %eax
f01067e3:	e8 06 00 00 00       	call   f01067ee <irq_setmask_8259A>
f01067e8:	83 c4 10             	add    $0x10,%esp
}
f01067eb:	90                   	nop
f01067ec:	c9                   	leave  
f01067ed:	c3                   	ret    

f01067ee <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01067ee:	55                   	push   %ebp
f01067ef:	89 e5                	mov    %esp,%ebp
f01067f1:	83 ec 14             	sub    $0x14,%esp
f01067f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01067f7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f01067fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067fe:	66 a3 4c 19 17 f0    	mov    %ax,0xf017194c
	if (!didinit)
f0106804:	a1 2c 37 3f f0       	mov    0xf03f372c,%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 34                	je     f0106841 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010680d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106810:	0f b6 c0             	movzbl %al,%eax
f0106813:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f010681a:	88 45 f6             	mov    %al,-0xa(%ebp)
f010681d:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106820:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106823:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106824:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106827:	66 c1 e8 08          	shr    $0x8,%ax
f010682b:	0f b6 c0             	movzbl %al,%eax
f010682e:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106835:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106838:	8a 45 f7             	mov    -0x9(%ebp),%al
f010683b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010683e:	ee                   	out    %al,(%dx)
f010683f:	eb 01                	jmp    f0106842 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106841:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106842:	c9                   	leave  
f0106843:	c3                   	ret    

f0106844 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106844:	55                   	push   %ebp
f0106845:	89 e5                	mov    %esp,%ebp
f0106847:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f010684a:	83 ec 08             	sub    $0x8,%esp
f010684d:	68 00 10 00 00       	push   $0x1000
f0106852:	68 00 10 00 00       	push   $0x1000
f0106857:	e8 17 02 00 00       	call   f0106a73 <boot_allocate_space>
f010685c:	83 c4 10             	add    $0x10,%esp
f010685f:	a3 c0 40 3f f0       	mov    %eax,0xf03f40c0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106864:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106869:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010686c:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106873:	77 14                	ja     f0106889 <initialize_kernel_VM+0x45>
f0106875:	ff 75 e8             	pushl  -0x18(%ebp)
f0106878:	68 24 55 12 f0       	push   $0xf0125524
f010687d:	6a 45                	push   $0x45
f010687f:	68 58 55 12 f0       	push   $0xf0125558
f0106884:	e8 91 99 ff ff       	call   f010021a <_panic>
f0106889:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010688c:	05 00 00 00 10       	add    $0x10000000,%eax
f0106891:	a3 f8 40 3f f0       	mov    %eax,0xf03f40f8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0106896:	c7 45 e4 00 90 16 f0 	movl   $0xf0169000,-0x1c(%ebp)
f010689d:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01068a4:	77 14                	ja     f01068ba <initialize_kernel_VM+0x76>
f01068a6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01068a9:	68 24 55 12 f0       	push   $0xf0125524
f01068ae:	6a 4d                	push   $0x4d
f01068b0:	68 58 55 12 f0       	push   $0xf0125558
f01068b5:	e8 60 99 ff ff       	call   f010021a <_panic>
f01068ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01068bd:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01068c3:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01068c8:	83 ec 0c             	sub    $0xc,%esp
f01068cb:	6a 02                	push   $0x2
f01068cd:	52                   	push   %edx
f01068ce:	68 00 80 00 00       	push   $0x8000
f01068d3:	68 00 80 bf ef       	push   $0xefbf8000
f01068d8:	50                   	push   %eax
f01068d9:	e8 09 02 00 00       	call   f0106ae7 <boot_map_range>
f01068de:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01068e1:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01068e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01068ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01068f6:	eb 25                	jmp    f010691d <initialize_kernel_VM+0xd9>
	{
		++nTables;
f01068f8:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01068fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01068fe:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106903:	83 ec 04             	sub    $0x4,%esp
f0106906:	6a 01                	push   $0x1
f0106908:	52                   	push   %edx
f0106909:	50                   	push   %eax
f010690a:	e8 4c 02 00 00       	call   f0106b5b <boot_get_page_table>
f010690f:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106912:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106919:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010691d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106921:	72 d5                	jb     f01068f8 <initialize_kernel_VM+0xb4>
f0106923:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106927:	77 06                	ja     f010692f <initialize_kernel_VM+0xeb>
f0106929:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010692d:	76 c9                	jbe    f01068f8 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010692f:	8b 15 44 40 3f f0    	mov    0xf03f4044,%edx
f0106935:	89 d0                	mov    %edx,%eax
f0106937:	01 c0                	add    %eax,%eax
f0106939:	01 d0                	add    %edx,%eax
f010693b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106942:	01 c8                	add    %ecx,%eax
f0106944:	01 d0                	add    %edx,%eax
f0106946:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106949:	83 ec 08             	sub    $0x8,%esp
f010694c:	68 00 10 00 00       	push   $0x1000
f0106951:	ff 75 e0             	pushl  -0x20(%ebp)
f0106954:	e8 1a 01 00 00       	call   f0106a73 <boot_allocate_space>
f0106959:	83 c4 10             	add    $0x10,%esp
f010695c:	a3 98 40 3f f0       	mov    %eax,0xf03f4098
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106961:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106968:	83 ec 08             	sub    $0x8,%esp
f010696b:	68 00 10 00 00       	push   $0x1000
f0106970:	ff 75 dc             	pushl  -0x24(%ebp)
f0106973:	e8 fb 00 00 00       	call   f0106a73 <boot_allocate_space>
f0106978:	83 c4 10             	add    $0x10,%esp
f010697b:	a3 0c 40 3f f0       	mov    %eax,0xf03f400c
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0106980:	e8 d1 04 00 00       	call   f0106e56 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106985:	83 ec 0c             	sub    $0xc,%esp
f0106988:	68 b1 02 00 00       	push   $0x2b1
f010698d:	e8 d4 9e 01 00       	call   f0120866 <nearest_pow2_ceil>
f0106992:	83 c4 10             	add    $0x10,%esp
f0106995:	83 ec 04             	sub    $0x4,%esp
f0106998:	50                   	push   %eax
f0106999:	68 b1 02 00 00       	push   $0x2b1
f010699e:	68 78 55 12 f0       	push   $0xf0125578
f01069a3:	e8 f3 a4 ff ff       	call   f0100e9b <cprintf>
f01069a8:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01069ab:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01069b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01069b5:	83 ec 08             	sub    $0x8,%esp
f01069b8:	68 00 10 00 00       	push   $0x1000
f01069bd:	50                   	push   %eax
f01069be:	e8 b0 00 00 00       	call   f0106a73 <boot_allocate_space>
f01069c3:	83 c4 10             	add    $0x10,%esp
f01069c6:	a3 34 37 3f f0       	mov    %eax,0xf03f3734
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01069cb:	a1 34 37 3f f0       	mov    0xf03f3734,%eax
f01069d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01069d3:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01069da:	77 17                	ja     f01069f3 <initialize_kernel_VM+0x1af>
f01069dc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01069df:	68 24 55 12 f0       	push   $0xf0125524
f01069e4:	68 96 00 00 00       	push   $0x96
f01069e9:	68 58 55 12 f0       	push   $0xf0125558
f01069ee:	e8 27 98 ff ff       	call   f010021a <_panic>
f01069f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01069f6:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01069fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01069ff:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106a04:	83 ec 0c             	sub    $0xc,%esp
f0106a07:	6a 04                	push   $0x4
f0106a09:	51                   	push   %ecx
f0106a0a:	52                   	push   %edx
f0106a0b:	68 00 00 c0 ee       	push   $0xeec00000
f0106a10:	50                   	push   %eax
f0106a11:	e8 d1 00 00 00       	call   f0106ae7 <boot_map_range>
f0106a16:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106a19:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106a1e:	05 ec 0e 00 00       	add    $0xeec,%eax
f0106a23:	8b 15 c0 40 3f f0    	mov    0xf03f40c0,%edx
f0106a29:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106a2f:	8b 12                	mov    (%edx),%edx
f0106a31:	83 ca 05             	or     $0x5,%edx
f0106a34:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0106a36:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106a3b:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106a41:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106a46:	83 ec 0c             	sub    $0xc,%esp
f0106a49:	6a 02                	push   $0x2
f0106a4b:	6a 00                	push   $0x0
f0106a4d:	52                   	push   %edx
f0106a4e:	68 00 00 00 f0       	push   $0xf0000000
f0106a53:	50                   	push   %eax
f0106a54:	e8 8e 00 00 00       	call   f0106ae7 <boot_map_range>
f0106a59:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106a5c:	e8 dc a5 01 00       	call   f012103d <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106a61:	c7 05 28 40 3f f0 19 	movl   $0x19,0xf03f4028
f0106a68:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106a6b:	e8 e6 02 00 00       	call   f0106d56 <turn_on_paging>
}
f0106a70:	90                   	nop
f0106a71:	c9                   	leave  
f0106a72:	c3                   	ret    

f0106a73 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106a73:	55                   	push   %ebp
f0106a74:	89 e5                	mov    %esp,%ebp
f0106a76:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106a79:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106a7e:	85 c0                	test   %eax,%eax
f0106a80:	75 0a                	jne    f0106a8c <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106a82:	c7 05 bc 40 3f f0 ec 	movl   $0xf04567ec,0xf03f40bc
f0106a89:	67 45 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106a92:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106a97:	89 c2                	mov    %eax,%edx
f0106a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a9c:	01 d0                	add    %edx,%eax
f0106a9e:	48                   	dec    %eax
f0106a9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106aa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106aa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0106aaa:	f7 75 f4             	divl   -0xc(%ebp)
f0106aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ab0:	29 d0                	sub    %edx,%eax
f0106ab2:	a3 bc 40 3f f0       	mov    %eax,0xf03f40bc

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106ab7:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106abf:	8b 15 bc 40 3f f0    	mov    0xf03f40bc,%edx
f0106ac5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac8:	01 d0                	add    %edx,%eax
f0106aca:	a3 bc 40 3f f0       	mov    %eax,0xf03f40bc

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f0106acf:	83 ec 04             	sub    $0x4,%esp
f0106ad2:	ff 75 08             	pushl  0x8(%ebp)
f0106ad5:	6a 00                	push   $0x0
f0106ad7:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ada:	e8 f3 b1 01 00       	call   f0121cd2 <memset>
f0106adf:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106ae2:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f0106ae5:	c9                   	leave  
f0106ae6:	c3                   	ret    

f0106ae7 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106ae7:	55                   	push   %ebp
f0106ae8:	89 e5                	mov    %esp,%ebp
f0106aea:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106aed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106af4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106afb:	eb 53                	jmp    f0106b50 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106afd:	83 ec 04             	sub    $0x4,%esp
f0106b00:	6a 01                	push   $0x1
f0106b02:	ff 75 0c             	pushl  0xc(%ebp)
f0106b05:	ff 75 08             	pushl  0x8(%ebp)
f0106b08:	e8 4e 00 00 00       	call   f0106b5b <boot_get_page_table>
f0106b0d:	83 c4 10             	add    $0x10,%esp
f0106b10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106b13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b16:	c1 e8 0c             	shr    $0xc,%eax
f0106b19:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106b1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b2e:	01 c2                	add    %eax,%edx
f0106b30:	8b 45 18             	mov    0x18(%ebp),%eax
f0106b33:	0b 45 14             	or     0x14(%ebp),%eax
f0106b36:	83 c8 01             	or     $0x1,%eax
f0106b39:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106b3b:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106b42:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106b49:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b53:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106b56:	72 a5                	jb     f0106afd <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106b58:	90                   	nop
f0106b59:	c9                   	leave  
f0106b5a:	c3                   	ret    

f0106b5b <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106b5b:	55                   	push   %ebp
f0106b5c:	89 e5                	mov    %esp,%ebp
f0106b5e:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106b61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b64:	c1 e8 16             	shr    $0x16,%eax
f0106b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	01 d0                	add    %edx,%eax
f0106b79:	8b 00                	mov    (%eax),%eax
f0106b7b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106b7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b86:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106b89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106b8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b92:	c1 e8 0c             	shr    $0xc,%eax
f0106b95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106b98:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0106b9d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106ba0:	72 17                	jb     f0106bb9 <boot_get_page_table+0x5e>
f0106ba2:	ff 75 e8             	pushl  -0x18(%ebp)
f0106ba5:	68 a0 55 12 f0       	push   $0xf01255a0
f0106baa:	68 18 01 00 00       	push   $0x118
f0106baf:	68 58 55 12 f0       	push   $0xf0125558
f0106bb4:	e8 61 96 ff ff       	call   f010021a <_panic>
f0106bb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bbc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106bc1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106bc4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106bc8:	75 72                	jne    f0106c3c <boot_get_page_table+0xe1>
	{
		if (create)
f0106bca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106bce:	74 65                	je     f0106c35 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106bd0:	83 ec 08             	sub    $0x8,%esp
f0106bd3:	68 00 10 00 00       	push   $0x1000
f0106bd8:	68 00 10 00 00       	push   $0x1000
f0106bdd:	e8 91 fe ff ff       	call   f0106a73 <boot_allocate_space>
f0106be2:	83 c4 10             	add    $0x10,%esp
f0106be5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106be8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106beb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106bee:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106bf5:	77 17                	ja     f0106c0e <boot_get_page_table+0xb3>
f0106bf7:	ff 75 dc             	pushl  -0x24(%ebp)
f0106bfa:	68 24 55 12 f0       	push   $0xf0125524
f0106bff:	68 1e 01 00 00       	push   $0x11e
f0106c04:	68 58 55 12 f0       	push   $0xf0125558
f0106c09:	e8 0c 96 ff ff       	call   f010021a <_panic>
f0106c0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106c11:	05 00 00 00 10       	add    $0x10000000,%eax
f0106c16:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c1c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c26:	01 d0                	add    %edx,%eax
f0106c28:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106c2b:	83 ca 03             	or     $0x3,%edx
f0106c2e:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106c30:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c33:	eb 0a                	jmp    f0106c3f <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106c35:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c3a:	eb 03                	jmp    f0106c3f <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106c3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106c3f:	c9                   	leave  
f0106c40:	c3                   	ret    

f0106c41 <nvram_read>:


int nvram_read(int r)
{
f0106c41:	55                   	push   %ebp
f0106c42:	89 e5                	mov    %esp,%ebp
f0106c44:	53                   	push   %ebx
f0106c45:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106c48:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4b:	83 ec 0c             	sub    $0xc,%esp
f0106c4e:	50                   	push   %eax
f0106c4f:	e8 db dd ff ff       	call   f0104a2f <mc146818_read>
f0106c54:	83 c4 10             	add    $0x10,%esp
f0106c57:	89 c3                	mov    %eax,%ebx
f0106c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c5c:	40                   	inc    %eax
f0106c5d:	83 ec 0c             	sub    $0xc,%esp
f0106c60:	50                   	push   %eax
f0106c61:	e8 c9 dd ff ff       	call   f0104a2f <mc146818_read>
f0106c66:	83 c4 10             	add    $0x10,%esp
f0106c69:	c1 e0 08             	shl    $0x8,%eax
f0106c6c:	09 d8                	or     %ebx,%eax
}
f0106c6e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c71:	c9                   	leave  
f0106c72:	c3                   	ret    

f0106c73 <detect_memory>:

void detect_memory()
{
f0106c73:	55                   	push   %ebp
f0106c74:	89 e5                	mov    %esp,%ebp
f0106c76:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106c79:	83 ec 0c             	sub    $0xc,%esp
f0106c7c:	6a 15                	push   $0x15
f0106c7e:	e8 be ff ff ff       	call   f0106c41 <nvram_read>
f0106c83:	83 c4 10             	add    $0x10,%esp
f0106c86:	c1 e0 0a             	shl    $0xa,%eax
f0106c89:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106c8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106c97:	83 ec 0c             	sub    $0xc,%esp
f0106c9a:	6a 17                	push   $0x17
f0106c9c:	e8 a0 ff ff ff       	call   f0106c41 <nvram_read>
f0106ca1:	83 c4 10             	add    $0x10,%esp
f0106ca4:	c1 e0 0a             	shl    $0xa,%eax
f0106ca7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106caa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106cad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106cb5:	83 ec 0c             	sub    $0xc,%esp
f0106cb8:	6a 34                	push   $0x34
f0106cba:	e8 82 ff ff ff       	call   f0106c41 <nvram_read>
f0106cbf:	83 c4 10             	add    $0x10,%esp
f0106cc2:	c1 e0 10             	shl    $0x10,%eax
f0106cc5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106cc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ccb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cd0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106cd3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106cd7:	74 18                	je     f0106cf1 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106cd9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cdc:	05 00 00 00 01       	add    $0x1000000,%eax
f0106ce1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ce7:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106cec:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106cef:	eb 19                	jmp    f0106d0a <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106cf1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106cf5:	74 0d                	je     f0106d04 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106cf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cfa:	05 00 00 10 00       	add    $0x100000,%eax
f0106cff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106d02:	eb 06                	jmp    f0106d0a <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106d04:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106d0a:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d14:	c1 e8 0c             	shr    $0xc,%eax
f0106d17:	a3 44 40 3f f0       	mov    %eax,0xf03f4044

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d1f:	c1 e8 0a             	shr    $0xa,%eax
f0106d22:	83 ec 08             	sub    $0x8,%esp
f0106d25:	50                   	push   %eax
f0106d26:	68 d0 55 12 f0       	push   $0xf01255d0
f0106d2b:	e8 6b a1 ff ff       	call   f0100e9b <cprintf>
f0106d30:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106d33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d36:	c1 e8 0a             	shr    $0xa,%eax
f0106d39:	89 c2                	mov    %eax,%edx
f0106d3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d3e:	c1 e8 0a             	shr    $0xa,%eax
f0106d41:	83 ec 04             	sub    $0x4,%esp
f0106d44:	52                   	push   %edx
f0106d45:	50                   	push   %eax
f0106d46:	68 f1 55 12 f0       	push   $0xf01255f1
f0106d4b:	e8 4b a1 ff ff       	call   f0100e9b <cprintf>
f0106d50:	83 c4 10             	add    $0x10,%esp
}
f0106d53:	90                   	nop
f0106d54:	c9                   	leave  
f0106d55:	c3                   	ret    

f0106d56 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106d56:	55                   	push   %ebp
f0106d57:	89 e5                	mov    %esp,%ebp
f0106d59:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106d5c:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106d63:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	eb 24                	jmp    f0106d90 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106d6c:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106d71:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106d74:	c1 e2 02             	shl    $0x2,%edx
f0106d77:	01 c2                	add    %eax,%edx
f0106d79:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106d7e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106d81:	c1 e1 02             	shl    $0x2,%ecx
f0106d84:	01 c8                	add    %ecx,%eax
f0106d86:	8b 00                	mov    (%eax),%eax
f0106d88:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d8a:	ff 45 fc             	incl   -0x4(%ebp)
f0106d8d:	ff 45 f8             	incl   -0x8(%ebp)
f0106d90:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106d95:	c1 e8 16             	shr    $0x16,%eax
f0106d98:	89 c2                	mov    %eax,%edx
f0106d9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106d9d:	39 c2                	cmp    %eax,%edx
f0106d9f:	77 cb                	ja     f0106d6c <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106da1:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0106da6:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dac:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106daf:	0f 20 c0             	mov    %cr0,%eax
f0106db2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106db5:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106db8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106dbb:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106dc2:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106dc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106dcc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106dcf:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106dd2:	0f 01 15 90 19 17 f0 	lgdtl  0xf0171990
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106dd9:	b8 23 00 00 00       	mov    $0x23,%eax
f0106dde:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106de0:	b8 23 00 00 00       	mov    $0x23,%eax
f0106de5:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106de7:	b8 10 00 00 00       	mov    $0x10,%eax
f0106dec:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106dee:	b8 10 00 00 00       	mov    $0x10,%eax
f0106df3:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106df5:	b8 10 00 00 00       	mov    $0x10,%eax
f0106dfa:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106dfc:	ea 03 6e 10 f0 08 00 	ljmp   $0x8,$0xf0106e03
	asm volatile("lldt %%ax" :: "a" (0));
f0106e03:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e08:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106e0b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106e12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106e19:	eb 19                	jmp    f0106e34 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106e1b:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106e20:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e23:	c1 e2 02             	shl    $0x2,%edx
f0106e26:	01 d0                	add    %edx,%eax
f0106e28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106e2e:	ff 45 f4             	incl   -0xc(%ebp)
f0106e31:	ff 45 f0             	incl   -0x10(%ebp)
f0106e34:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f0106e39:	c1 e8 16             	shr    $0x16,%eax
f0106e3c:	89 c2                	mov    %eax,%edx
f0106e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e41:	39 c2                	cmp    %eax,%edx
f0106e43:	77 d6                	ja     f0106e1b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106e45:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0106e4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106e4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e50:	0f 22 d8             	mov    %eax,%cr3
}
f0106e53:	90                   	nop
f0106e54:	c9                   	leave  
f0106e55:	c3                   	ret    

f0106e56 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106e56:	55                   	push   %ebp
f0106e57:	89 e5                	mov    %esp,%ebp
f0106e59:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106e5c:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106e61:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e64:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106e6b:	77 17                	ja     f0106e84 <setup_listing_to_all_page_tables_entries+0x2e>
f0106e6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0106e70:	68 24 55 12 f0       	push   $0xf0125524
f0106e75:	68 ae 01 00 00       	push   $0x1ae
f0106e7a:	68 58 55 12 f0       	push   $0xf0125558
f0106e7f:	e8 96 93 ff ff       	call   f010021a <_panic>
f0106e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e87:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106e8f:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106e94:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106e99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e9c:	83 ca 03             	or     $0x3,%edx
f0106e9f:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ea1:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106ea6:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106eac:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0106eb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106eb4:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106ebb:	77 17                	ja     f0106ed4 <setup_listing_to_all_page_tables_entries+0x7e>
f0106ebd:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ec0:	68 24 55 12 f0       	push   $0xf0125524
f0106ec5:	68 b3 01 00 00       	push   $0x1b3
f0106eca:	68 58 55 12 f0       	push   $0xf0125558
f0106ecf:	e8 46 93 ff ff       	call   f010021a <_panic>
f0106ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ed7:	05 00 00 00 10       	add    $0x10000000,%eax
f0106edc:	83 c8 05             	or     $0x5,%eax
f0106edf:	89 02                	mov    %eax,(%edx)

}
f0106ee1:	90                   	nop
f0106ee2:	c9                   	leave  
f0106ee3:	c3                   	ret    

f0106ee4 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106ee4:	55                   	push   %ebp
f0106ee5:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106ee7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106eea:	8b 15 98 40 3f f0    	mov    0xf03f4098,%edx
f0106ef0:	29 d0                	sub    %edx,%eax
f0106ef2:	c1 f8 02             	sar    $0x2,%eax
f0106ef5:	89 c2                	mov    %eax,%edx
f0106ef7:	89 d0                	mov    %edx,%eax
f0106ef9:	c1 e0 03             	shl    $0x3,%eax
f0106efc:	01 d0                	add    %edx,%eax
f0106efe:	c1 e0 03             	shl    $0x3,%eax
f0106f01:	01 d0                	add    %edx,%eax
f0106f03:	c1 e0 03             	shl    $0x3,%eax
f0106f06:	01 d0                	add    %edx,%eax
f0106f08:	c1 e0 03             	shl    $0x3,%eax
f0106f0b:	01 d0                	add    %edx,%eax
f0106f0d:	89 c1                	mov    %eax,%ecx
f0106f0f:	c1 e1 0f             	shl    $0xf,%ecx
f0106f12:	01 c8                	add    %ecx,%eax
f0106f14:	c1 e0 03             	shl    $0x3,%eax
f0106f17:	01 d0                	add    %edx,%eax
f0106f19:	f7 d8                	neg    %eax
}
f0106f1b:	5d                   	pop    %ebp
f0106f1c:	c3                   	ret    

f0106f1d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106f1d:	55                   	push   %ebp
f0106f1e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106f20:	ff 75 08             	pushl  0x8(%ebp)
f0106f23:	e8 bc ff ff ff       	call   f0106ee4 <to_frame_number>
f0106f28:	83 c4 04             	add    $0x4,%esp
f0106f2b:	c1 e0 0c             	shl    $0xc,%eax
}
f0106f2e:	c9                   	leave  
f0106f2f:	c3                   	ret    

f0106f30 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106f30:	55                   	push   %ebp
f0106f31:	89 e5                	mov    %esp,%ebp
f0106f33:	53                   	push   %ebx
f0106f34:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106f37:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f3a:	c1 e8 0c             	shr    $0xc,%eax
f0106f3d:	89 c2                	mov    %eax,%edx
f0106f3f:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0106f44:	39 c2                	cmp    %eax,%edx
f0106f46:	72 14                	jb     f0106f5c <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106f48:	83 ec 04             	sub    $0x4,%esp
f0106f4b:	68 10 56 12 f0       	push   $0xf0125610
f0106f50:	6a 55                	push   $0x55
f0106f52:	68 35 56 12 f0       	push   $0xf0125635
f0106f57:	e8 be 92 ff ff       	call   f010021a <_panic>
	return &frames_info[PPN(physical_address)];
f0106f5c:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0106f62:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f65:	c1 e8 0c             	shr    $0xc,%eax
f0106f68:	89 c2                	mov    %eax,%edx
f0106f6a:	89 d0                	mov    %edx,%eax
f0106f6c:	01 c0                	add    %eax,%eax
f0106f6e:	01 d0                	add    %edx,%eax
f0106f70:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106f77:	01 d8                	add    %ebx,%eax
f0106f79:	01 d0                	add    %edx,%eax
f0106f7b:	01 c8                	add    %ecx,%eax
}
f0106f7d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106f80:	c9                   	leave  
f0106f81:	c3                   	ret    

f0106f82 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106f82:	55                   	push   %ebp
f0106f83:	89 e5                	mov    %esp,%ebp
f0106f85:	83 ec 10             	sub    $0x10,%esp
f0106f88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f8b:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106f8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106f91:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106f94:	90                   	nop
f0106f95:	c9                   	leave  
f0106f96:	c3                   	ret    

f0106f97 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106f97:	55                   	push   %ebp
f0106f98:	89 e5                	mov    %esp,%ebp
f0106f9a:	56                   	push   %esi
f0106f9b:	53                   	push   %ebx
f0106f9c:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106f9f:	c7 05 4c 40 3f f0 00 	movl   $0x0,0xf03f404c
f0106fa6:	00 00 00 
f0106fa9:	c7 05 50 40 3f f0 00 	movl   $0x0,0xf03f4050
f0106fb0:	00 00 00 
f0106fb3:	c7 05 58 40 3f f0 00 	movl   $0x0,0xf03f4058
f0106fba:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106fbd:	c7 05 fc 3f 3f f0 00 	movl   $0x0,0xf03f3ffc
f0106fc4:	00 00 00 
f0106fc7:	c7 05 00 40 3f f0 00 	movl   $0x0,0xf03f4000
f0106fce:	00 00 00 
f0106fd1:	c7 05 08 40 3f f0 00 	movl   $0x0,0xf03f4008
f0106fd8:	00 00 00 

	frames_info[0].references = 1;
f0106fdb:	a1 98 40 3f f0       	mov    0xf03f4098,%eax
f0106fe0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106fe6:	a1 98 40 3f f0       	mov    0xf03f4098,%eax
f0106feb:	83 c0 1c             	add    $0x1c,%eax
f0106fee:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106ff4:	a1 98 40 3f f0       	mov    0xf03f4098,%eax
f0106ff9:	83 c0 38             	add    $0x38,%eax
f0106ffc:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0107002:	c7 05 a8 40 3f f0 00 	movl   $0xf0001000,0xf03f40a8
f0107009:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010700c:	c7 05 d0 40 3f f0 00 	movl   $0xf0002000,0xf03f40d0
f0107013:	20 00 f0 
	i =0;
f0107016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f010701d:	eb 1f                	jmp    f010703e <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f010701f:	8b 15 a8 40 3f f0    	mov    0xf03f40a8,%edx
f0107025:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f010702d:	8b 15 d0 40 3f f0    	mov    0xf03f40d0,%edx
f0107033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107036:	01 d0                	add    %edx,%eax
f0107038:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010703b:	ff 45 f4             	incl   -0xc(%ebp)
f010703e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107045:	7e d8                	jle    f010701f <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0107047:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010704e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107051:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0107056:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107059:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010705c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107061:	f7 75 f0             	divl   -0x10(%ebp)
f0107064:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107067:	29 d0                	sub    %edx,%eax
f0107069:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f010706c:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0107073:	e9 20 01 00 00       	jmp    f0107198 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0107078:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f010707e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107081:	89 d0                	mov    %edx,%eax
f0107083:	01 c0                	add    %eax,%eax
f0107085:	01 d0                	add    %edx,%eax
f0107087:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010708e:	01 d8                	add    %ebx,%eax
f0107090:	01 d0                	add    %edx,%eax
f0107092:	01 c8                	add    %ecx,%eax
f0107094:	83 ec 0c             	sub    $0xc,%esp
f0107097:	50                   	push   %eax
f0107098:	e8 31 03 00 00       	call   f01073ce <initialize_frame_info>
f010709d:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01070a0:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01070a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070a9:	89 d0                	mov    %edx,%eax
f01070ab:	01 c0                	add    %eax,%eax
f01070ad:	01 d0                	add    %edx,%eax
f01070af:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b6:	01 d8                	add    %ebx,%eax
f01070b8:	01 d0                	add    %edx,%eax
f01070ba:	01 c8                	add    %ecx,%eax
f01070bc:	85 c0                	test   %eax,%eax
f01070be:	75 14                	jne    f01070d4 <initialize_paging+0x13d>
f01070c0:	83 ec 04             	sub    $0x4,%esp
f01070c3:	68 50 56 12 f0       	push   $0xf0125650
f01070c8:	6a 5c                	push   $0x5c
f01070ca:	68 73 56 12 f0       	push   $0xf0125673
f01070cf:	e8 46 91 ff ff       	call   f010021a <_panic>
f01070d4:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01070da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070dd:	89 d0                	mov    %edx,%eax
f01070df:	01 c0                	add    %eax,%eax
f01070e1:	01 d0                	add    %edx,%eax
f01070e3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070ea:	01 d8                	add    %ebx,%eax
f01070ec:	01 d0                	add    %edx,%eax
f01070ee:	01 c8                	add    %ecx,%eax
f01070f0:	8b 15 4c 40 3f f0    	mov    0xf03f404c,%edx
f01070f6:	89 10                	mov    %edx,(%eax)
f01070f8:	8b 00                	mov    (%eax),%eax
f01070fa:	85 c0                	test   %eax,%eax
f01070fc:	74 27                	je     f0107125 <initialize_paging+0x18e>
f01070fe:	8b 0d 4c 40 3f f0    	mov    0xf03f404c,%ecx
f0107104:	8b 1d 98 40 3f f0    	mov    0xf03f4098,%ebx
f010710a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010710d:	89 d0                	mov    %edx,%eax
f010710f:	01 c0                	add    %eax,%eax
f0107111:	01 d0                	add    %edx,%eax
f0107113:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010711a:	01 f0                	add    %esi,%eax
f010711c:	01 d0                	add    %edx,%eax
f010711e:	01 d8                	add    %ebx,%eax
f0107120:	89 41 04             	mov    %eax,0x4(%ecx)
f0107123:	eb 21                	jmp    f0107146 <initialize_paging+0x1af>
f0107125:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f010712b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010712e:	89 d0                	mov    %edx,%eax
f0107130:	01 c0                	add    %eax,%eax
f0107132:	01 d0                	add    %edx,%eax
f0107134:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010713b:	01 d8                	add    %ebx,%eax
f010713d:	01 d0                	add    %edx,%eax
f010713f:	01 c8                	add    %ecx,%eax
f0107141:	a3 50 40 3f f0       	mov    %eax,0xf03f4050
f0107146:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f010714c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010714f:	89 d0                	mov    %edx,%eax
f0107151:	01 c0                	add    %eax,%eax
f0107153:	01 d0                	add    %edx,%eax
f0107155:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010715c:	01 d8                	add    %ebx,%eax
f010715e:	01 d0                	add    %edx,%eax
f0107160:	01 c8                	add    %ecx,%eax
f0107162:	a3 4c 40 3f f0       	mov    %eax,0xf03f404c
f0107167:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f010716d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107170:	89 d0                	mov    %edx,%eax
f0107172:	01 c0                	add    %eax,%eax
f0107174:	01 d0                	add    %edx,%eax
f0107176:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010717d:	01 d8                	add    %ebx,%eax
f010717f:	01 d0                	add    %edx,%eax
f0107181:	01 c8                	add    %ecx,%eax
f0107183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010718a:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f010718f:	40                   	inc    %eax
f0107190:	a3 58 40 3f f0       	mov    %eax,0xf03f4058
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107195:	ff 45 f4             	incl   -0xc(%ebp)
f0107198:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010719b:	85 c0                	test   %eax,%eax
f010719d:	79 05                	jns    f01071a4 <initialize_paging+0x20d>
f010719f:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071a4:	c1 f8 0c             	sar    $0xc,%eax
f01071a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071aa:	0f 8f c8 fe ff ff    	jg     f0107078 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01071b0:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01071b7:	eb 25                	jmp    f01071de <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01071b9:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01071bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071c2:	89 d0                	mov    %edx,%eax
f01071c4:	01 c0                	add    %eax,%eax
f01071c6:	01 d0                	add    %edx,%eax
f01071c8:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071cf:	01 d8                	add    %ebx,%eax
f01071d1:	01 d0                	add    %edx,%eax
f01071d3:	01 c8                	add    %ecx,%eax
f01071d5:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01071db:	ff 45 f4             	incl   -0xc(%ebp)
f01071de:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01071e5:	7e d2                	jle    f01071b9 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01071e7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01071ee:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f01071f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01071f6:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f01071fd:	77 14                	ja     f0107213 <initialize_paging+0x27c>
f01071ff:	ff 75 e0             	pushl  -0x20(%ebp)
f0107202:	68 90 56 12 f0       	push   $0xf0125690
f0107207:	6a 64                	push   $0x64
f0107209:	68 73 56 12 f0       	push   $0xf0125673
f010720e:	e8 07 90 ff ff       	call   f010021a <_panic>
f0107213:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107216:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010721c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010721f:	01 d0                	add    %edx,%eax
f0107221:	48                   	dec    %eax
f0107222:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107225:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107228:	ba 00 00 00 00       	mov    $0x0,%edx
f010722d:	f7 75 e4             	divl   -0x1c(%ebp)
f0107230:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107233:	29 d0                	sub    %edx,%eax
f0107235:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107238:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010723f:	eb 25                	jmp    f0107266 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f0107241:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0107247:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010724a:	89 d0                	mov    %edx,%eax
f010724c:	01 c0                	add    %eax,%eax
f010724e:	01 d0                	add    %edx,%eax
f0107250:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107257:	01 d8                	add    %ebx,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	01 c8                	add    %ecx,%eax
f010725d:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107263:	ff 45 f4             	incl   -0xc(%ebp)
f0107266:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107269:	85 c0                	test   %eax,%eax
f010726b:	79 05                	jns    f0107272 <initialize_paging+0x2db>
f010726d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107272:	c1 f8 0c             	sar    $0xc,%eax
f0107275:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107278:	7f c7                	jg     f0107241 <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010727a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010727d:	85 c0                	test   %eax,%eax
f010727f:	79 05                	jns    f0107286 <initialize_paging+0x2ef>
f0107281:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107286:	c1 f8 0c             	sar    $0xc,%eax
f0107289:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010728c:	e9 20 01 00 00       	jmp    f01073b1 <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f0107291:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0107297:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010729a:	89 d0                	mov    %edx,%eax
f010729c:	01 c0                	add    %eax,%eax
f010729e:	01 d0                	add    %edx,%eax
f01072a0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072a7:	01 d8                	add    %ebx,%eax
f01072a9:	01 d0                	add    %edx,%eax
f01072ab:	01 c8                	add    %ecx,%eax
f01072ad:	83 ec 0c             	sub    $0xc,%esp
f01072b0:	50                   	push   %eax
f01072b1:	e8 18 01 00 00       	call   f01073ce <initialize_frame_info>
f01072b6:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01072b9:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01072bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c2:	89 d0                	mov    %edx,%eax
f01072c4:	01 c0                	add    %eax,%eax
f01072c6:	01 d0                	add    %edx,%eax
f01072c8:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072cf:	01 d8                	add    %ebx,%eax
f01072d1:	01 d0                	add    %edx,%eax
f01072d3:	01 c8                	add    %ecx,%eax
f01072d5:	85 c0                	test   %eax,%eax
f01072d7:	75 14                	jne    f01072ed <initialize_paging+0x356>
f01072d9:	83 ec 04             	sub    $0x4,%esp
f01072dc:	68 50 56 12 f0       	push   $0xf0125650
f01072e1:	6a 70                	push   $0x70
f01072e3:	68 73 56 12 f0       	push   $0xf0125673
f01072e8:	e8 2d 8f ff ff       	call   f010021a <_panic>
f01072ed:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01072f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f6:	89 d0                	mov    %edx,%eax
f01072f8:	01 c0                	add    %eax,%eax
f01072fa:	01 d0                	add    %edx,%eax
f01072fc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107303:	01 d8                	add    %ebx,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	01 c8                	add    %ecx,%eax
f0107309:	8b 15 4c 40 3f f0    	mov    0xf03f404c,%edx
f010730f:	89 10                	mov    %edx,(%eax)
f0107311:	8b 00                	mov    (%eax),%eax
f0107313:	85 c0                	test   %eax,%eax
f0107315:	74 27                	je     f010733e <initialize_paging+0x3a7>
f0107317:	8b 0d 4c 40 3f f0    	mov    0xf03f404c,%ecx
f010731d:	8b 1d 98 40 3f f0    	mov    0xf03f4098,%ebx
f0107323:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107326:	89 d0                	mov    %edx,%eax
f0107328:	01 c0                	add    %eax,%eax
f010732a:	01 d0                	add    %edx,%eax
f010732c:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107333:	01 f0                	add    %esi,%eax
f0107335:	01 d0                	add    %edx,%eax
f0107337:	01 d8                	add    %ebx,%eax
f0107339:	89 41 04             	mov    %eax,0x4(%ecx)
f010733c:	eb 21                	jmp    f010735f <initialize_paging+0x3c8>
f010733e:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0107344:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107347:	89 d0                	mov    %edx,%eax
f0107349:	01 c0                	add    %eax,%eax
f010734b:	01 d0                	add    %edx,%eax
f010734d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107354:	01 d8                	add    %ebx,%eax
f0107356:	01 d0                	add    %edx,%eax
f0107358:	01 c8                	add    %ecx,%eax
f010735a:	a3 50 40 3f f0       	mov    %eax,0xf03f4050
f010735f:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0107365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107368:	89 d0                	mov    %edx,%eax
f010736a:	01 c0                	add    %eax,%eax
f010736c:	01 d0                	add    %edx,%eax
f010736e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107375:	01 d8                	add    %ebx,%eax
f0107377:	01 d0                	add    %edx,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	a3 4c 40 3f f0       	mov    %eax,0xf03f404c
f0107380:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f0107386:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107389:	89 d0                	mov    %edx,%eax
f010738b:	01 c0                	add    %eax,%eax
f010738d:	01 d0                	add    %edx,%eax
f010738f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107396:	01 d8                	add    %ebx,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	01 c8                	add    %ecx,%eax
f010739c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073a3:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f01073a8:	40                   	inc    %eax
f01073a9:	a3 58 40 3f f0       	mov    %eax,0xf03f4058
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01073ae:	ff 45 f4             	incl   -0xc(%ebp)
f01073b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01073b4:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01073b9:	39 c2                	cmp    %eax,%edx
f01073bb:	0f 82 d0 fe ff ff    	jb     f0107291 <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01073c1:	e8 38 c7 ff ff       	call   f0103afe <initialize_disk_page_file>
}
f01073c6:	90                   	nop
f01073c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01073ca:	5b                   	pop    %ebx
f01073cb:	5e                   	pop    %esi
f01073cc:	5d                   	pop    %ebp
f01073cd:	c3                   	ret    

f01073ce <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01073ce:	55                   	push   %ebp
f01073cf:	89 e5                	mov    %esp,%ebp
f01073d1:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01073d4:	83 ec 04             	sub    $0x4,%esp
f01073d7:	6a 1c                	push   $0x1c
f01073d9:	6a 00                	push   $0x0
f01073db:	ff 75 08             	pushl  0x8(%ebp)
f01073de:	e8 ef a8 01 00       	call   f0121cd2 <memset>
f01073e3:	83 c4 10             	add    $0x10,%esp
}
f01073e6:	90                   	nop
f01073e7:	c9                   	leave  
f01073e8:	c3                   	ret    

f01073e9 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01073e9:	55                   	push   %ebp
f01073ea:	89 e5                	mov    %esp,%ebp
f01073ec:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01073ef:	8b 15 4c 40 3f f0    	mov    0xf03f404c,%edx
f01073f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f8:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01073fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0107401:	8b 45 08             	mov    0x8(%ebp),%eax
f0107404:	8b 00                	mov    (%eax),%eax
f0107406:	85 c0                	test   %eax,%eax
f0107408:	75 17                	jne    f0107421 <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010740a:	83 ec 04             	sub    $0x4,%esp
f010740d:	68 c4 56 12 f0       	push   $0xf01256c4
f0107412:	68 98 00 00 00       	push   $0x98
f0107417:	68 73 56 12 f0       	push   $0xf0125673
f010741c:	e8 f9 8d ff ff       	call   f010021a <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0107421:	8b 45 08             	mov    0x8(%ebp),%eax
f0107424:	8b 00                	mov    (%eax),%eax
f0107426:	85 c0                	test   %eax,%eax
f0107428:	75 17                	jne    f0107441 <allocate_frame+0x58>
f010742a:	83 ec 04             	sub    $0x4,%esp
f010742d:	68 11 57 12 f0       	push   $0xf0125711
f0107432:	68 9e 00 00 00       	push   $0x9e
f0107437:	68 73 56 12 f0       	push   $0xf0125673
f010743c:	e8 d9 8d ff ff       	call   f010021a <_panic>
f0107441:	8b 45 08             	mov    0x8(%ebp),%eax
f0107444:	8b 00                	mov    (%eax),%eax
f0107446:	8b 00                	mov    (%eax),%eax
f0107448:	85 c0                	test   %eax,%eax
f010744a:	74 14                	je     f0107460 <allocate_frame+0x77>
f010744c:	8b 45 08             	mov    0x8(%ebp),%eax
f010744f:	8b 00                	mov    (%eax),%eax
f0107451:	8b 00                	mov    (%eax),%eax
f0107453:	8b 55 08             	mov    0x8(%ebp),%edx
f0107456:	8b 12                	mov    (%edx),%edx
f0107458:	8b 52 04             	mov    0x4(%edx),%edx
f010745b:	89 50 04             	mov    %edx,0x4(%eax)
f010745e:	eb 0d                	jmp    f010746d <allocate_frame+0x84>
f0107460:	8b 45 08             	mov    0x8(%ebp),%eax
f0107463:	8b 00                	mov    (%eax),%eax
f0107465:	8b 40 04             	mov    0x4(%eax),%eax
f0107468:	a3 50 40 3f f0       	mov    %eax,0xf03f4050
f010746d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107470:	8b 00                	mov    (%eax),%eax
f0107472:	8b 40 04             	mov    0x4(%eax),%eax
f0107475:	85 c0                	test   %eax,%eax
f0107477:	74 13                	je     f010748c <allocate_frame+0xa3>
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	8b 40 04             	mov    0x4(%eax),%eax
f0107481:	8b 55 08             	mov    0x8(%ebp),%edx
f0107484:	8b 12                	mov    (%edx),%edx
f0107486:	8b 12                	mov    (%edx),%edx
f0107488:	89 10                	mov    %edx,(%eax)
f010748a:	eb 0c                	jmp    f0107498 <allocate_frame+0xaf>
f010748c:	8b 45 08             	mov    0x8(%ebp),%eax
f010748f:	8b 00                	mov    (%eax),%eax
f0107491:	8b 00                	mov    (%eax),%eax
f0107493:	a3 4c 40 3f f0       	mov    %eax,0xf03f404c
f0107498:	8b 45 08             	mov    0x8(%ebp),%eax
f010749b:	8b 00                	mov    (%eax),%eax
f010749d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01074a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a6:	8b 00                	mov    (%eax),%eax
f01074a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074af:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f01074b4:	48                   	dec    %eax
f01074b5:	a3 58 40 3f f0       	mov    %eax,0xf03f4058

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01074ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01074bd:	8b 00                	mov    (%eax),%eax
f01074bf:	8a 40 14             	mov    0x14(%eax),%al
f01074c2:	84 c0                	test   %al,%al
f01074c4:	74 23                	je     f01074e9 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01074c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c9:	8b 00                	mov    (%eax),%eax
f01074cb:	8b 50 0c             	mov    0xc(%eax),%edx
f01074ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01074d1:	8b 00                	mov    (%eax),%eax
f01074d3:	8b 40 10             	mov    0x10(%eax),%eax
f01074d6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01074dc:	83 ec 08             	sub    $0x8,%esp
f01074df:	52                   	push   %edx
f01074e0:	50                   	push   %eax
f01074e1:	e8 18 18 00 00       	call   f0108cfe <pt_clear_page_table_entry>
f01074e6:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01074e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ec:	8b 00                	mov    (%eax),%eax
f01074ee:	83 ec 0c             	sub    $0xc,%esp
f01074f1:	50                   	push   %eax
f01074f2:	e8 d7 fe ff ff       	call   f01073ce <initialize_frame_info>
f01074f7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01074fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01074ff:	c9                   	leave  
f0107500:	c3                   	ret    

f0107501 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0107501:	55                   	push   %ebp
f0107502:	89 e5                	mov    %esp,%ebp
f0107504:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107507:	83 ec 0c             	sub    $0xc,%esp
f010750a:	ff 75 08             	pushl  0x8(%ebp)
f010750d:	e8 bc fe ff ff       	call   f01073ce <initialize_frame_info>
f0107512:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107515:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107519:	75 17                	jne    f0107532 <free_frame+0x31>
f010751b:	83 ec 04             	sub    $0x4,%esp
f010751e:	68 50 56 12 f0       	push   $0xf0125650
f0107523:	68 bb 00 00 00       	push   $0xbb
f0107528:	68 73 56 12 f0       	push   $0xf0125673
f010752d:	e8 e8 8c ff ff       	call   f010021a <_panic>
f0107532:	8b 15 4c 40 3f f0    	mov    0xf03f404c,%edx
f0107538:	8b 45 08             	mov    0x8(%ebp),%eax
f010753b:	89 10                	mov    %edx,(%eax)
f010753d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107540:	8b 00                	mov    (%eax),%eax
f0107542:	85 c0                	test   %eax,%eax
f0107544:	74 0d                	je     f0107553 <free_frame+0x52>
f0107546:	a1 4c 40 3f f0       	mov    0xf03f404c,%eax
f010754b:	8b 55 08             	mov    0x8(%ebp),%edx
f010754e:	89 50 04             	mov    %edx,0x4(%eax)
f0107551:	eb 08                	jmp    f010755b <free_frame+0x5a>
f0107553:	8b 45 08             	mov    0x8(%ebp),%eax
f0107556:	a3 50 40 3f f0       	mov    %eax,0xf03f4050
f010755b:	8b 45 08             	mov    0x8(%ebp),%eax
f010755e:	a3 4c 40 3f f0       	mov    %eax,0xf03f404c
f0107563:	8b 45 08             	mov    0x8(%ebp),%eax
f0107566:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010756d:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f0107572:	40                   	inc    %eax
f0107573:	a3 58 40 3f f0       	mov    %eax,0xf03f4058
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f0107578:	90                   	nop
f0107579:	c9                   	leave  
f010757a:	c3                   	ret    

f010757b <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f010757b:	55                   	push   %ebp
f010757c:	89 e5                	mov    %esp,%ebp
f010757e:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0107581:	8b 45 08             	mov    0x8(%ebp),%eax
f0107584:	8b 40 08             	mov    0x8(%eax),%eax
f0107587:	48                   	dec    %eax
f0107588:	8b 55 08             	mov    0x8(%ebp),%edx
f010758b:	66 89 42 08          	mov    %ax,0x8(%edx)
f010758f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107592:	8b 40 08             	mov    0x8(%eax),%eax
f0107595:	66 85 c0             	test   %ax,%ax
f0107598:	75 0e                	jne    f01075a8 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f010759a:	83 ec 0c             	sub    $0xc,%esp
f010759d:	ff 75 08             	pushl  0x8(%ebp)
f01075a0:	e8 5c ff ff ff       	call   f0107501 <free_frame>
f01075a5:	83 c4 10             	add    $0x10,%esp
}
f01075a8:	90                   	nop
f01075a9:	c9                   	leave  
f01075aa:	c3                   	ret    

f01075ab <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01075ab:	55                   	push   %ebp
f01075ac:	89 e5                	mov    %esp,%ebp
f01075ae:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01075b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01075b4:	c1 e8 16             	shr    $0x16,%eax
f01075b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01075be:	8b 45 08             	mov    0x8(%ebp),%eax
f01075c1:	01 d0                	add    %edx,%eax
f01075c3:	8b 00                	mov    (%eax),%eax
f01075c5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01075c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075cb:	83 e0 01             	and    $0x1,%eax
f01075ce:	85 c0                	test   %eax,%eax
f01075d0:	74 74                	je     f0107646 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01075d2:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01075d9:	77 1d                	ja     f01075f8 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f01075db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01075e3:	83 ec 0c             	sub    $0xc,%esp
f01075e6:	50                   	push   %eax
f01075e7:	e8 46 12 00 00       	call   f0108832 <kheap_virtual_address>
f01075ec:	83 c4 10             	add    $0x10,%esp
f01075ef:	89 c2                	mov    %eax,%edx
f01075f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075f4:	89 10                	mov    %edx,(%eax)
f01075f6:	eb 44                	jmp    f010763c <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01075f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107600:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107603:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107606:	c1 e8 0c             	shr    $0xc,%eax
f0107609:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010760c:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0107611:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0107614:	72 17                	jb     f010762d <get_page_table+0x82>
f0107616:	ff 75 f0             	pushl  -0x10(%ebp)
f0107619:	68 30 57 12 f0       	push   $0xf0125730
f010761e:	68 e2 00 00 00       	push   $0xe2
f0107623:	68 73 56 12 f0       	push   $0xf0125673
f0107628:	e8 ed 8b ff ff       	call   f010021a <_panic>
f010762d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107630:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107635:	89 c2                	mov    %eax,%edx
f0107637:	8b 45 10             	mov    0x10(%ebp),%eax
f010763a:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f010763c:	b8 00 00 00 00       	mov    $0x0,%eax
f0107641:	e9 b9 00 00 00       	jmp    f01076ff <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0107646:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010764a:	0f 84 a1 00 00 00    	je     f01076f1 <get_page_table+0x146>
f0107650:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107653:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107656:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107659:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010765c:	83 ec 0c             	sub    $0xc,%esp
f010765f:	6a 00                	push   $0x0
f0107661:	e8 76 56 00 00       	call   f010ccdc <fault_handler>
f0107666:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0107669:	8b 45 0c             	mov    0xc(%ebp),%eax
f010766c:	c1 e8 16             	shr    $0x16,%eax
f010766f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107676:	8b 45 08             	mov    0x8(%ebp),%eax
f0107679:	01 d0                	add    %edx,%eax
f010767b:	8b 00                	mov    (%eax),%eax
f010767d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0107680:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107687:	77 1d                	ja     f01076a6 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010768c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107691:	83 ec 0c             	sub    $0xc,%esp
f0107694:	50                   	push   %eax
f0107695:	e8 98 11 00 00       	call   f0108832 <kheap_virtual_address>
f010769a:	83 c4 10             	add    $0x10,%esp
f010769d:	89 c2                	mov    %eax,%edx
f010769f:	8b 45 10             	mov    0x10(%ebp),%eax
f01076a2:	89 10                	mov    %edx,(%eax)
f01076a4:	eb 44                	jmp    f01076ea <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01076a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076a9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01076ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01076b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01076b4:	c1 e8 0c             	shr    $0xc,%eax
f01076b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01076ba:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01076bf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01076c2:	72 17                	jb     f01076db <get_page_table+0x130>
f01076c4:	ff 75 e8             	pushl  -0x18(%ebp)
f01076c7:	68 30 57 12 f0       	push   $0xf0125730
f01076cc:	68 fa 00 00 00       	push   $0xfa
f01076d1:	68 73 56 12 f0       	push   $0xf0125673
f01076d6:	e8 3f 8b ff ff       	call   f010021a <_panic>
f01076db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01076de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01076e3:	89 c2                	mov    %eax,%edx
f01076e5:	8b 45 10             	mov    0x10(%ebp),%eax
f01076e8:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01076ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01076ef:	eb 0e                	jmp    f01076ff <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01076f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01076f4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01076fa:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01076ff:	c9                   	leave  
f0107700:	c3                   	ret    

f0107701 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0107701:	55                   	push   %ebp
f0107702:	89 e5                	mov    %esp,%ebp
f0107704:	53                   	push   %ebx
f0107705:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0107708:	83 ec 0c             	sub    $0xc,%esp
f010770b:	68 00 10 00 00       	push   $0x1000
f0107710:	e8 8c 0e 00 00       	call   f01085a1 <kmalloc>
f0107715:	83 c4 10             	add    $0x10,%esp
f0107718:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f010771b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010771f:	75 17                	jne    f0107738 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107721:	83 ec 04             	sub    $0x4,%esp
f0107724:	68 5f 57 12 f0       	push   $0xf012575f
f0107729:	68 17 01 00 00       	push   $0x117
f010772e:	68 73 56 12 f0       	push   $0xf0125673
f0107733:	e8 e2 8a ff ff       	call   f010021a <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0107738:	8b 45 0c             	mov    0xc(%ebp),%eax
f010773b:	c1 e8 16             	shr    $0x16,%eax
f010773e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107745:	8b 45 08             	mov    0x8(%ebp),%eax
f0107748:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010774b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010774e:	83 ec 0c             	sub    $0xc,%esp
f0107751:	50                   	push   %eax
f0107752:	e8 45 11 00 00       	call   f010889c <kheap_physical_address>
f0107757:	83 c4 10             	add    $0x10,%esp
f010775a:	83 c8 07             	or     $0x7,%eax
f010775d:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f010775f:	83 ec 04             	sub    $0x4,%esp
f0107762:	68 00 10 00 00       	push   $0x1000
f0107767:	6a 00                	push   $0x0
f0107769:	ff 75 f4             	pushl  -0xc(%ebp)
f010776c:	e8 61 a5 01 00       	call   f0121cd2 <memset>
f0107771:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107774:	0f 20 d8             	mov    %cr3,%eax
f0107777:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010777a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010777d:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0107780:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107783:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107786:	c9                   	leave  
f0107787:	c3                   	ret    

f0107788 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0107788:	55                   	push   %ebp
f0107789:	89 e5                	mov    %esp,%ebp
f010778b:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f010778e:	83 ec 0c             	sub    $0xc,%esp
f0107791:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107794:	50                   	push   %eax
f0107795:	e8 4f fc ff ff       	call   f01073e9 <allocate_frame>
f010779a:	83 c4 10             	add    $0x10,%esp
f010779d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f01077a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01077a3:	83 ec 0c             	sub    $0xc,%esp
f01077a6:	50                   	push   %eax
f01077a7:	e8 71 f7 ff ff       	call   f0106f1d <to_physical_address>
f01077ac:	83 c4 10             	add    $0x10,%esp
f01077af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f01077b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01077b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01077b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077bb:	c1 e8 0c             	shr    $0xc,%eax
f01077be:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01077c1:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01077c6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01077c9:	72 17                	jb     f01077e2 <__static_cpt+0x5a>
f01077cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01077ce:	68 30 57 12 f0       	push   $0xf0125730
f01077d3:	68 2f 01 00 00       	push   $0x12f
f01077d8:	68 73 56 12 f0       	push   $0xf0125673
f01077dd:	e8 38 8a ff ff       	call   f010021a <_panic>
f01077e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077e5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01077ea:	89 c2                	mov    %eax,%edx
f01077ec:	8b 45 10             	mov    0x10(%ebp),%eax
f01077ef:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f01077f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01077f4:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01077fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077fd:	c1 e8 16             	shr    $0x16,%eax
f0107800:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107807:	8b 45 08             	mov    0x8(%ebp),%eax
f010780a:	01 d0                	add    %edx,%eax
f010780c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010780f:	83 ca 07             	or     $0x7,%edx
f0107812:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107814:	8b 45 10             	mov    0x10(%ebp),%eax
f0107817:	8b 00                	mov    (%eax),%eax
f0107819:	83 ec 04             	sub    $0x4,%esp
f010781c:	68 00 10 00 00       	push   $0x1000
f0107821:	6a 00                	push   $0x0
f0107823:	50                   	push   %eax
f0107824:	e8 a9 a4 01 00       	call   f0121cd2 <memset>
f0107829:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010782c:	0f 20 d8             	mov    %cr3,%eax
f010782f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107832:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107835:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107838:	90                   	nop
f0107839:	c9                   	leave  
f010783a:	c3                   	ret    

f010783b <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f010783b:	55                   	push   %ebp
f010783c:	89 e5                	mov    %esp,%ebp
f010783e:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0107841:	ff 75 0c             	pushl  0xc(%ebp)
f0107844:	e8 d4 f6 ff ff       	call   f0106f1d <to_physical_address>
f0107849:	83 c4 04             	add    $0x4,%esp
f010784c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f010784f:	83 ec 04             	sub    $0x4,%esp
f0107852:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107855:	50                   	push   %eax
f0107856:	ff 75 10             	pushl  0x10(%ebp)
f0107859:	ff 75 08             	pushl  0x8(%ebp)
f010785c:	e8 4a fd ff ff       	call   f01075ab <get_page_table>
f0107861:	83 c4 10             	add    $0x10,%esp
f0107864:	83 f8 01             	cmp    $0x1,%eax
f0107867:	75 1b                	jne    f0107884 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0107869:	83 ec 08             	sub    $0x8,%esp
f010786c:	ff 75 10             	pushl  0x10(%ebp)
f010786f:	ff 75 08             	pushl  0x8(%ebp)
f0107872:	e8 8a fe ff ff       	call   f0107701 <create_page_table>
f0107877:	83 c4 10             	add    $0x10,%esp
f010787a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f010787d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107887:	8b 55 10             	mov    0x10(%ebp),%edx
f010788a:	c1 ea 0c             	shr    $0xc,%edx
f010788d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107893:	c1 e2 02             	shl    $0x2,%edx
f0107896:	01 d0                	add    %edx,%eax
f0107898:	8b 00                	mov    (%eax),%eax
f010789a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010789d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078a0:	83 e0 01             	and    $0x1,%eax
f01078a3:	85 c0                	test   %eax,%eax
f01078a5:	74 25                	je     f01078cc <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f01078a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01078b2:	75 07                	jne    f01078bb <map_frame+0x80>
			return 0;
f01078b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01078b9:	eb 68                	jmp    f0107923 <map_frame+0xe8>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f01078bb:	83 ec 08             	sub    $0x8,%esp
f01078be:	ff 75 10             	pushl  0x10(%ebp)
f01078c1:	ff 75 08             	pushl  0x8(%ebp)
f01078c4:	e8 d2 00 00 00       	call   f010799b <unmap_frame>
f01078c9:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f01078cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078cf:	8b 40 08             	mov    0x8(%eax),%eax
f01078d2:	40                   	inc    %eax
f01078d3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078d6:	66 89 42 08          	mov    %ax,0x8(%edx)

	/*********************************************************************************/
	/*NEW'23 el7:)
	 * TODO: [DONE] map_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
	uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f01078da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078dd:	8b 55 10             	mov    0x10(%ebp),%edx
f01078e0:	c1 ea 0c             	shr    $0xc,%edx
f01078e3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01078e9:	c1 e2 02             	shl    $0x2,%edx
f01078ec:	01 d0                	add    %edx,%eax
f01078ee:	8b 00                	mov    (%eax),%eax
f01078f0:	25 00 0e 00 00       	and    $0xe00,%eax
f01078f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , pte_available_bits | perm | PERM_PRESENT);
f01078f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078fb:	8b 55 10             	mov    0x10(%ebp),%edx
f01078fe:	c1 ea 0c             	shr    $0xc,%edx
f0107901:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107907:	c1 e2 02             	shl    $0x2,%edx
f010790a:	01 c2                	add    %eax,%edx
f010790c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010790f:	0b 45 e8             	or     -0x18(%ebp),%eax
f0107912:	89 c1                	mov    %eax,%ecx
f0107914:	8b 45 14             	mov    0x14(%ebp),%eax
f0107917:	09 c8                	or     %ecx,%eax
f0107919:	83 c8 01             	or     $0x1,%eax
f010791c:	89 02                	mov    %eax,(%edx)
	/*********************************************************************************/

	return 0;
f010791e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107923:	c9                   	leave  
f0107924:	c3                   	ret    

f0107925 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0107925:	55                   	push   %ebp
f0107926:	89 e5                	mov    %esp,%ebp
f0107928:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f010792b:	83 ec 04             	sub    $0x4,%esp
f010792e:	ff 75 10             	pushl  0x10(%ebp)
f0107931:	ff 75 0c             	pushl  0xc(%ebp)
f0107934:	ff 75 08             	pushl  0x8(%ebp)
f0107937:	e8 6f fc ff ff       	call   f01075ab <get_page_table>
f010793c:	83 c4 10             	add    $0x10,%esp
f010793f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0107942:	8b 45 10             	mov    0x10(%ebp),%eax
f0107945:	8b 00                	mov    (%eax),%eax
f0107947:	85 c0                	test   %eax,%eax
f0107949:	74 49                	je     f0107994 <get_frame_info+0x6f>
	{
		uint32 index_page_table = PTX(virtual_address);
f010794b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010794e:	c1 e8 0c             	shr    $0xc,%eax
f0107951:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107956:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0107959:	8b 45 10             	mov    0x10(%ebp),%eax
f010795c:	8b 00                	mov    (%eax),%eax
f010795e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107961:	c1 e2 02             	shl    $0x2,%edx
f0107964:	01 d0                	add    %edx,%eax
f0107966:	8b 00                	mov    (%eax),%eax
f0107968:	89 45 ec             	mov    %eax,-0x14(%ebp)
		/*2023 el7:)*///Make sure it has a frame number other than 0 (not just a marked page from the page allocator)
		//if( page_table_entry != 0)
		if( (page_table_entry & ~0xFFF) != 0)
f010796b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010796e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107973:	85 c0                	test   %eax,%eax
f0107975:	74 16                	je     f010798d <get_frame_info+0x68>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0107977:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010797a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010797f:	83 ec 0c             	sub    $0xc,%esp
f0107982:	50                   	push   %eax
f0107983:	e8 a8 f5 ff ff       	call   f0106f30 <to_frame_info>
f0107988:	83 c4 10             	add    $0x10,%esp
f010798b:	eb 0c                	jmp    f0107999 <get_frame_info+0x74>
		}
		return 0;
f010798d:	b8 00 00 00 00       	mov    $0x0,%eax
f0107992:	eb 05                	jmp    f0107999 <get_frame_info+0x74>
	}
	return 0;
f0107994:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107999:	c9                   	leave  
f010799a:	c3                   	ret    

f010799b <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f010799b:	55                   	push   %ebp
f010799c:	89 e5                	mov    %esp,%ebp
f010799e:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01079a1:	83 ec 04             	sub    $0x4,%esp
f01079a4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01079a7:	50                   	push   %eax
f01079a8:	ff 75 0c             	pushl  0xc(%ebp)
f01079ab:	ff 75 08             	pushl  0x8(%ebp)
f01079ae:	e8 72 ff ff ff       	call   f0107925 <get_frame_info>
f01079b3:	83 c4 10             	add    $0x10,%esp
f01079b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f01079b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01079bd:	74 7d                	je     f0107a3c <unmap_frame+0xa1>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f01079bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079c2:	8a 40 14             	mov    0x14(%eax),%al
f01079c5:	84 c0                	test   %al,%al
f01079c7:	74 1c                	je     f01079e5 <unmap_frame+0x4a>
f01079c9:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01079d0:	77 13                	ja     f01079e5 <unmap_frame+0x4a>
			cprintf("WARNING: Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f01079d2:	83 ec 08             	sub    $0x8,%esp
f01079d5:	ff 75 0c             	pushl  0xc(%ebp)
f01079d8:	68 7c 57 12 f0       	push   $0xf012577c
f01079dd:	e8 b9 94 ff ff       	call   f0100e9b <cprintf>
f01079e2:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f01079e5:	83 ec 0c             	sub    $0xc,%esp
f01079e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01079eb:	e8 8b fb ff ff       	call   f010757b <decrement_references>
f01079f0:	83 c4 10             	add    $0x10,%esp

		/*********************************************************************************/
		/*NEW'23 el7:)
		 * TODO: [DONE] unmap_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
		uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f01079f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079f6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079f9:	c1 ea 0c             	shr    $0xc,%edx
f01079fc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107a02:	c1 e2 02             	shl    $0x2,%edx
f0107a05:	01 d0                	add    %edx,%eax
f0107a07:	8b 00                	mov    (%eax),%eax
f0107a09:	25 00 0e 00 00       	and    $0xe00,%eax
f0107a0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[PTX(virtual_address)] = pte_available_bits;
f0107a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a17:	c1 ea 0c             	shr    $0xc,%edx
f0107a1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107a20:	c1 e2 02             	shl    $0x2,%edx
f0107a23:	01 c2                	add    %eax,%edx
f0107a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a28:	89 02                	mov    %eax,(%edx)
		/*********************************************************************************/

		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107a2d:	83 ec 08             	sub    $0x8,%esp
f0107a30:	50                   	push   %eax
f0107a31:	ff 75 08             	pushl  0x8(%ebp)
f0107a34:	e8 49 f5 ff ff       	call   f0106f82 <tlb_invalidate>
f0107a39:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a3c:	90                   	nop
f0107a3d:	c9                   	leave  
f0107a3e:	c3                   	ret    

f0107a3f <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107a3f:	55                   	push   %ebp
f0107a40:	89 e5                	mov    %esp,%ebp
f0107a42:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0107a45:	ff 75 0c             	pushl  0xc(%ebp)
f0107a48:	e8 d0 f4 ff ff       	call   f0106f1d <to_physical_address>
f0107a4d:	83 c4 04             	add    $0x4,%esp
f0107a50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0107a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0107a56:	c1 e8 16             	shr    $0x16,%eax
f0107a59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a60:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a63:	01 d0                	add    %edx,%eax
f0107a65:	8b 00                	mov    (%eax),%eax
f0107a67:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0107a6a:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107a71:	77 19                	ja     f0107a8c <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a7b:	83 ec 0c             	sub    $0xc,%esp
f0107a7e:	50                   	push   %eax
f0107a7f:	e8 ae 0d 00 00       	call   f0108832 <kheap_virtual_address>
f0107a84:	83 c4 10             	add    $0x10,%esp
f0107a87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a8a:	eb 40                	jmp    f0107acc <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107a8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a94:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107a97:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a9a:	c1 e8 0c             	shr    $0xc,%eax
f0107a9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107aa0:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0107aa5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107aa8:	72 17                	jb     f0107ac1 <loadtime_map_frame+0x82>
f0107aaa:	ff 75 e8             	pushl  -0x18(%ebp)
f0107aad:	68 30 57 12 f0       	push   $0xf0125730
f0107ab2:	68 f4 01 00 00       	push   $0x1f4
f0107ab7:	68 73 56 12 f0       	push   $0xf0125673
f0107abc:	e8 59 87 ff ff       	call   f010021a <_panic>
f0107ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ac4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107ac9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0107acc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107ad0:	75 14                	jne    f0107ae6 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0107ad2:	83 ec 08             	sub    $0x8,%esp
f0107ad5:	ff 75 10             	pushl  0x10(%ebp)
f0107ad8:	ff 75 08             	pushl  0x8(%ebp)
f0107adb:	e8 21 fc ff ff       	call   f0107701 <create_page_table>
f0107ae0:	83 c4 10             	add    $0x10,%esp
f0107ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0107ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ae9:	8b 40 08             	mov    0x8(%eax),%eax
f0107aec:	40                   	inc    %eax
f0107aed:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107af0:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107af4:	8b 45 10             	mov    0x10(%ebp),%eax
f0107af7:	c1 e8 0c             	shr    $0xc,%eax
f0107afa:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107aff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b09:	01 c2                	add    %eax,%edx
f0107b0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0107b0e:	0b 45 f0             	or     -0x10(%ebp),%eax
f0107b11:	83 c8 01             	or     $0x1,%eax
f0107b14:	89 02                	mov    %eax,(%edx)

	return 0;
f0107b16:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107b1b:	c9                   	leave  
f0107b1c:	c3                   	ret    

f0107b1d <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107b1d:	55                   	push   %ebp
f0107b1e:	89 e5                	mov    %esp,%ebp
f0107b20:	57                   	push   %edi
f0107b21:	56                   	push   %esi
f0107b22:	53                   	push   %ebx
f0107b23:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107b26:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107b2d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107b34:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107b3b:	a1 4c 40 3f f0       	mov    0xf03f404c,%eax
f0107b40:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107b43:	eb 1a                	jmp    f0107b5f <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107b45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b48:	8a 40 14             	mov    0x14(%eax),%al
f0107b4b:	84 c0                	test   %al,%al
f0107b4d:	74 05                	je     f0107b54 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107b4f:	ff 45 e8             	incl   -0x18(%ebp)
f0107b52:	eb 03                	jmp    f0107b57 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107b54:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107b57:	a1 54 40 3f f0       	mov    0xf03f4054,%eax
f0107b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107b5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b63:	74 07                	je     f0107b6c <calculate_available_frames+0x4f>
f0107b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b68:	8b 00                	mov    (%eax),%eax
f0107b6a:	eb 05                	jmp    f0107b71 <calculate_available_frames+0x54>
f0107b6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0107b71:	a3 54 40 3f f0       	mov    %eax,0xf03f4054
f0107b76:	a1 54 40 3f f0       	mov    0xf03f4054,%eax
f0107b7b:	85 c0                	test   %eax,%eax
f0107b7d:	75 c6                	jne    f0107b45 <calculate_available_frames+0x28>
f0107b7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b83:	75 c0                	jne    f0107b45 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107b85:	a1 fc 3f 3f f0       	mov    0xf03f3ffc,%eax
f0107b8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107b8d:	eb 0b                	jmp    f0107b9a <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107b8f:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107b92:	a1 04 40 3f f0       	mov    0xf03f4004,%eax
f0107b97:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107b9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b9e:	74 07                	je     f0107ba7 <calculate_available_frames+0x8a>
f0107ba0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ba3:	8b 00                	mov    (%eax),%eax
f0107ba5:	eb 05                	jmp    f0107bac <calculate_available_frames+0x8f>
f0107ba7:	b8 00 00 00 00       	mov    $0x0,%eax
f0107bac:	a3 04 40 3f f0       	mov    %eax,0xf03f4004
f0107bb1:	a1 04 40 3f f0       	mov    0xf03f4004,%eax
f0107bb6:	85 c0                	test   %eax,%eax
f0107bb8:	75 d5                	jne    f0107b8f <calculate_available_frames+0x72>
f0107bba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107bbe:	75 cf                	jne    f0107b8f <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107bc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107bc3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107bc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107bcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107bcf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107bd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bd5:	89 c3                	mov    %eax,%ebx
f0107bd7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107bda:	ba 03 00 00 00       	mov    $0x3,%edx
f0107bdf:	89 df                	mov    %ebx,%edi
f0107be1:	89 c6                	mov    %eax,%esi
f0107be3:	89 d1                	mov    %edx,%ecx
f0107be5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0107be7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bea:	83 c4 20             	add    $0x20,%esp
f0107bed:	5b                   	pop    %ebx
f0107bee:	5e                   	pop    %esi
f0107bef:	5f                   	pop    %edi
f0107bf0:	5d                   	pop    %ebp
f0107bf1:	c2 04 00             	ret    $0x4

f0107bf4 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107bf4:	55                   	push   %ebp
f0107bf5:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107bf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bfa:	8b 15 98 40 3f f0    	mov    0xf03f4098,%edx
f0107c00:	29 d0                	sub    %edx,%eax
f0107c02:	c1 f8 02             	sar    $0x2,%eax
f0107c05:	89 c2                	mov    %eax,%edx
f0107c07:	89 d0                	mov    %edx,%eax
f0107c09:	c1 e0 03             	shl    $0x3,%eax
f0107c0c:	01 d0                	add    %edx,%eax
f0107c0e:	c1 e0 03             	shl    $0x3,%eax
f0107c11:	01 d0                	add    %edx,%eax
f0107c13:	c1 e0 03             	shl    $0x3,%eax
f0107c16:	01 d0                	add    %edx,%eax
f0107c18:	c1 e0 03             	shl    $0x3,%eax
f0107c1b:	01 d0                	add    %edx,%eax
f0107c1d:	89 c1                	mov    %eax,%ecx
f0107c1f:	c1 e1 0f             	shl    $0xf,%ecx
f0107c22:	01 c8                	add    %ecx,%eax
f0107c24:	c1 e0 03             	shl    $0x3,%eax
f0107c27:	01 d0                	add    %edx,%eax
f0107c29:	f7 d8                	neg    %eax
}
f0107c2b:	5d                   	pop    %ebp
f0107c2c:	c3                   	ret    

f0107c2d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107c2d:	55                   	push   %ebp
f0107c2e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107c30:	ff 75 08             	pushl  0x8(%ebp)
f0107c33:	e8 bc ff ff ff       	call   f0107bf4 <to_frame_number>
f0107c38:	83 c4 04             	add    $0x4,%esp
f0107c3b:	c1 e0 0c             	shl    $0xc,%eax
}
f0107c3e:	c9                   	leave  
f0107c3f:	c3                   	ret    

f0107c40 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107c40:	55                   	push   %ebp
f0107c41:	89 e5                	mov    %esp,%ebp
f0107c43:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c49:	a3 5c 40 3f f0       	mov    %eax,0xf03f405c
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107c4e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107c51:	89 d0                	mov    %edx,%eax
f0107c53:	c1 e0 02             	shl    $0x2,%eax
f0107c56:	01 d0                	add    %edx,%eax
f0107c58:	c1 e0 02             	shl    $0x2,%eax
f0107c5b:	01 d0                	add    %edx,%eax
f0107c5d:	c1 e0 02             	shl    $0x2,%eax
f0107c60:	83 ec 0c             	sub    $0xc,%esp
f0107c63:	50                   	push   %eax
f0107c64:	e8 38 09 00 00       	call   f01085a1 <kmalloc>
f0107c69:	83 c4 10             	add    $0x10,%esp
f0107c6c:	a3 24 40 3f f0       	mov    %eax,0xf03f4024
	if (shares == NULL)
f0107c71:	a1 24 40 3f f0       	mov    0xf03f4024,%eax
f0107c76:	85 c0                	test   %eax,%eax
f0107c78:	75 14                	jne    f0107c8e <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107c7a:	83 ec 04             	sub    $0x4,%esp
f0107c7d:	68 ac 57 12 f0       	push   $0xf01257ac
f0107c82:	6a 21                	push   $0x21
f0107c84:	68 f0 57 12 f0       	push   $0xf01257f0
f0107c89:	e8 8c 85 ff ff       	call   f010021a <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107c8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107c95:	eb 4b                	jmp    f0107ce2 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107c97:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ca0:	89 d0                	mov    %edx,%eax
f0107ca2:	c1 e0 02             	shl    $0x2,%eax
f0107ca5:	01 d0                	add    %edx,%eax
f0107ca7:	c1 e0 02             	shl    $0x2,%eax
f0107caa:	01 d0                	add    %edx,%eax
f0107cac:	c1 e0 02             	shl    $0x2,%eax
f0107caf:	01 c8                	add    %ecx,%eax
f0107cb1:	83 ec 04             	sub    $0x4,%esp
f0107cb4:	6a 54                	push   $0x54
f0107cb6:	6a 00                	push   $0x0
f0107cb8:	50                   	push   %eax
f0107cb9:	e8 14 a0 01 00       	call   f0121cd2 <memset>
f0107cbe:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107cc1:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107cc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107cca:	89 d0                	mov    %edx,%eax
f0107ccc:	c1 e0 02             	shl    $0x2,%eax
f0107ccf:	01 d0                	add    %edx,%eax
f0107cd1:	c1 e0 02             	shl    $0x2,%eax
f0107cd4:	01 d0                	add    %edx,%eax
f0107cd6:	c1 e0 02             	shl    $0x2,%eax
f0107cd9:	01 c8                	add    %ecx,%eax
f0107cdb:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107cdf:	ff 45 f4             	incl   -0xc(%ebp)
f0107ce2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ce5:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
f0107cea:	39 c2                	cmp    %eax,%edx
f0107cec:	72 a9                	jb     f0107c97 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107cee:	90                   	nop
f0107cef:	c9                   	leave  
f0107cf0:	c3                   	ret    

f0107cf1 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107cf1:	55                   	push   %ebp
f0107cf2:	89 e5                	mov    %esp,%ebp
f0107cf4:	53                   	push   %ebx
f0107cf5:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f0107cf8:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107cff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107d06:	eb 2c                	jmp    f0107d34 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f0107d08:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107d0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107d11:	89 d0                	mov    %edx,%eax
f0107d13:	c1 e0 02             	shl    $0x2,%eax
f0107d16:	01 d0                	add    %edx,%eax
f0107d18:	c1 e0 02             	shl    $0x2,%eax
f0107d1b:	01 d0                	add    %edx,%eax
f0107d1d:	c1 e0 02             	shl    $0x2,%eax
f0107d20:	01 c8                	add    %ecx,%eax
f0107d22:	8a 40 4d             	mov    0x4d(%eax),%al
f0107d25:	84 c0                	test   %al,%al
f0107d27:	74 08                	je     f0107d31 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f0107d29:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107d2f:	eb 0f                	jmp    f0107d40 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107d31:	ff 45 f0             	incl   -0x10(%ebp)
f0107d34:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107d37:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
f0107d3c:	39 c2                	cmp    %eax,%edx
f0107d3e:	72 c8                	jb     f0107d08 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107d40:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107d44:	75 0a                	jne    f0107d50 <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107d46:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107d4b:	e9 94 00 00 00       	jmp    f0107de4 <allocate_share_object+0xf3>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107d50:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107d56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d59:	89 d0                	mov    %edx,%eax
f0107d5b:	c1 e0 02             	shl    $0x2,%eax
f0107d5e:	01 d0                	add    %edx,%eax
f0107d60:	c1 e0 02             	shl    $0x2,%eax
f0107d63:	01 d0                	add    %edx,%eax
f0107d65:	c1 e0 02             	shl    $0x2,%eax
f0107d68:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107d6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d6e:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107d70:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107d76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d79:	89 d0                	mov    %edx,%eax
f0107d7b:	c1 e0 02             	shl    $0x2,%eax
f0107d7e:	01 d0                	add    %edx,%eax
f0107d80:	c1 e0 02             	shl    $0x2,%eax
f0107d83:	01 d0                	add    %edx,%eax
f0107d85:	c1 e0 02             	shl    $0x2,%eax
f0107d88:	01 c8                	add    %ecx,%eax
f0107d8a:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f0107d8e:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107d94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d97:	89 d0                	mov    %edx,%eax
f0107d99:	c1 e0 02             	shl    $0x2,%eax
f0107d9c:	01 d0                	add    %edx,%eax
f0107d9e:	c1 e0 02             	shl    $0x2,%eax
f0107da1:	01 d0                	add    %edx,%eax
f0107da3:	c1 e0 02             	shl    $0x2,%eax
f0107da6:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107da9:	e8 97 01 00 00       	call   f0107f45 <create_frames_storage>
f0107dae:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107db1:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107db7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107dba:	89 d0                	mov    %edx,%eax
f0107dbc:	c1 e0 02             	shl    $0x2,%eax
f0107dbf:	01 d0                	add    %edx,%eax
f0107dc1:	c1 e0 02             	shl    $0x2,%eax
f0107dc4:	01 d0                	add    %edx,%eax
f0107dc6:	c1 e0 02             	shl    $0x2,%eax
f0107dc9:	01 c8                	add    %ecx,%eax
f0107dcb:	8b 40 50             	mov    0x50(%eax),%eax
f0107dce:	83 ec 04             	sub    $0x4,%esp
f0107dd1:	68 00 10 00 00       	push   $0x1000
f0107dd6:	6a 00                	push   $0x0
f0107dd8:	50                   	push   %eax
f0107dd9:	e8 f4 9e 01 00       	call   f0121cd2 <memset>
f0107dde:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107de4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107de7:	c9                   	leave  
f0107de8:	c3                   	ret    

f0107de9 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107de9:	55                   	push   %ebp
f0107dea:	89 e5                	mov    %esp,%ebp
f0107dec:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107def:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107df6:	eb 7b                	jmp    f0107e73 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107df8:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107dfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e01:	89 d0                	mov    %edx,%eax
f0107e03:	c1 e0 02             	shl    $0x2,%eax
f0107e06:	01 d0                	add    %edx,%eax
f0107e08:	c1 e0 02             	shl    $0x2,%eax
f0107e0b:	01 d0                	add    %edx,%eax
f0107e0d:	c1 e0 02             	shl    $0x2,%eax
f0107e10:	01 c8                	add    %ecx,%eax
f0107e12:	8a 40 4d             	mov    0x4d(%eax),%al
f0107e15:	84 c0                	test   %al,%al
f0107e17:	75 56                	jne    f0107e6f <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107e19:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e22:	89 d0                	mov    %edx,%eax
f0107e24:	c1 e0 02             	shl    $0x2,%eax
f0107e27:	01 d0                	add    %edx,%eax
f0107e29:	c1 e0 02             	shl    $0x2,%eax
f0107e2c:	01 d0                	add    %edx,%eax
f0107e2e:	c1 e0 02             	shl    $0x2,%eax
f0107e31:	01 c8                	add    %ecx,%eax
f0107e33:	8b 00                	mov    (%eax),%eax
f0107e35:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107e38:	75 36                	jne    f0107e70 <get_share_object_ID+0x87>
f0107e3a:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107e40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e43:	89 d0                	mov    %edx,%eax
f0107e45:	c1 e0 02             	shl    $0x2,%eax
f0107e48:	01 d0                	add    %edx,%eax
f0107e4a:	c1 e0 02             	shl    $0x2,%eax
f0107e4d:	01 d0                	add    %edx,%eax
f0107e4f:	c1 e0 02             	shl    $0x2,%eax
f0107e52:	01 c8                	add    %ecx,%eax
f0107e54:	83 c0 04             	add    $0x4,%eax
f0107e57:	83 ec 08             	sub    $0x8,%esp
f0107e5a:	50                   	push   %eax
f0107e5b:	ff 75 0c             	pushl  0xc(%ebp)
f0107e5e:	e8 8d 9d 01 00       	call   f0121bf0 <strcmp>
f0107e63:	83 c4 10             	add    $0x10,%esp
f0107e66:	85 c0                	test   %eax,%eax
f0107e68:	75 06                	jne    f0107e70 <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e6d:	eb 19                	jmp    f0107e88 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107e6f:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107e70:	ff 45 f4             	incl   -0xc(%ebp)
f0107e73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e76:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
f0107e7b:	39 c2                	cmp    %eax,%edx
f0107e7d:	0f 82 75 ff ff ff    	jb     f0107df8 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107e83:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107e88:	c9                   	leave  
f0107e89:	c3                   	ret    

f0107e8a <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107e8a:	55                   	push   %ebp
f0107e8b:	89 e5                	mov    %esp,%ebp
f0107e8d:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107e90:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
f0107e95:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107e98:	72 0a                	jb     f0107ea4 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107e9a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107e9f:	e9 9f 00 00 00       	jmp    f0107f43 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107ea4:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107eaa:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ead:	89 d0                	mov    %edx,%eax
f0107eaf:	c1 e0 02             	shl    $0x2,%eax
f0107eb2:	01 d0                	add    %edx,%eax
f0107eb4:	c1 e0 02             	shl    $0x2,%eax
f0107eb7:	01 d0                	add    %edx,%eax
f0107eb9:	c1 e0 02             	shl    $0x2,%eax
f0107ebc:	01 c8                	add    %ecx,%eax
f0107ebe:	8b 40 50             	mov    0x50(%eax),%eax
f0107ec1:	83 ec 0c             	sub    $0xc,%esp
f0107ec4:	50                   	push   %eax
f0107ec5:	e8 52 01 00 00       	call   f010801c <clear_frames_storage>
f0107eca:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107ecd:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107ed3:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ed6:	89 d0                	mov    %edx,%eax
f0107ed8:	c1 e0 02             	shl    $0x2,%eax
f0107edb:	01 d0                	add    %edx,%eax
f0107edd:	c1 e0 02             	shl    $0x2,%eax
f0107ee0:	01 d0                	add    %edx,%eax
f0107ee2:	c1 e0 02             	shl    $0x2,%eax
f0107ee5:	01 c8                	add    %ecx,%eax
f0107ee7:	8b 40 50             	mov    0x50(%eax),%eax
f0107eea:	83 ec 0c             	sub    $0xc,%esp
f0107eed:	50                   	push   %eax
f0107eee:	e8 46 08 00 00       	call   f0108739 <kfree>
f0107ef3:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107ef6:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107efc:	8b 55 08             	mov    0x8(%ebp),%edx
f0107eff:	89 d0                	mov    %edx,%eax
f0107f01:	c1 e0 02             	shl    $0x2,%eax
f0107f04:	01 d0                	add    %edx,%eax
f0107f06:	c1 e0 02             	shl    $0x2,%eax
f0107f09:	01 d0                	add    %edx,%eax
f0107f0b:	c1 e0 02             	shl    $0x2,%eax
f0107f0e:	01 c8                	add    %ecx,%eax
f0107f10:	83 ec 04             	sub    $0x4,%esp
f0107f13:	6a 54                	push   $0x54
f0107f15:	6a 00                	push   $0x0
f0107f17:	50                   	push   %eax
f0107f18:	e8 b5 9d 01 00       	call   f0121cd2 <memset>
f0107f1d:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107f20:	8b 0d 24 40 3f f0    	mov    0xf03f4024,%ecx
f0107f26:	8b 55 08             	mov    0x8(%ebp),%edx
f0107f29:	89 d0                	mov    %edx,%eax
f0107f2b:	c1 e0 02             	shl    $0x2,%eax
f0107f2e:	01 d0                	add    %edx,%eax
f0107f30:	c1 e0 02             	shl    $0x2,%eax
f0107f33:	01 d0                	add    %edx,%eax
f0107f35:	c1 e0 02             	shl    $0x2,%eax
f0107f38:	01 c8                	add    %ecx,%eax
f0107f3a:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f0107f3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107f43:	c9                   	leave  
f0107f44:	c3                   	ret    

f0107f45 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107f45:	55                   	push   %ebp
f0107f46:	89 e5                	mov    %esp,%ebp
f0107f48:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107f4b:	83 ec 0c             	sub    $0xc,%esp
f0107f4e:	68 00 10 00 00       	push   $0x1000
f0107f53:	e8 49 06 00 00       	call   f01085a1 <kmalloc>
f0107f58:	83 c4 10             	add    $0x10,%esp
f0107f5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107f5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107f62:	75 17                	jne    f0107f7b <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107f64:	83 ec 04             	sub    $0x4,%esp
f0107f67:	68 11 58 12 f0       	push   $0xf0125811
f0107f6c:	68 a6 00 00 00       	push   $0xa6
f0107f71:	68 f0 57 12 f0       	push   $0xf01257f0
f0107f76:	e8 9f 82 ff ff       	call   f010021a <_panic>
	}
	return frames_storage;
f0107f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107f7e:	c9                   	leave  
f0107f7f:	c3                   	ret    

f0107f80 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107f80:	55                   	push   %ebp
f0107f81:	89 e5                	mov    %esp,%ebp
f0107f83:	53                   	push   %ebx
f0107f84:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107f87:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f8a:	c1 e0 0c             	shl    $0xc,%eax
f0107f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107f90:	83 ec 04             	sub    $0x4,%esp
f0107f93:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107f96:	50                   	push   %eax
f0107f97:	ff 75 f4             	pushl  -0xc(%ebp)
f0107f9a:	ff 75 08             	pushl  0x8(%ebp)
f0107f9d:	e8 09 f6 ff ff       	call   f01075ab <get_page_table>
f0107fa2:	83 c4 10             	add    $0x10,%esp
f0107fa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107fa8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107fac:	75 14                	jne    f0107fc2 <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0107fae:	83 ec 08             	sub    $0x8,%esp
f0107fb1:	ff 75 f4             	pushl  -0xc(%ebp)
f0107fb4:	ff 75 08             	pushl  0x8(%ebp)
f0107fb7:	e8 45 f7 ff ff       	call   f0107701 <create_page_table>
f0107fbc:	83 c4 10             	add    $0x10,%esp
f0107fbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107fc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107fc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fc8:	c1 ea 0c             	shr    $0xc,%edx
f0107fcb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107fd1:	c1 e2 02             	shl    $0x2,%edx
f0107fd4:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107fd7:	83 ec 0c             	sub    $0xc,%esp
f0107fda:	ff 75 0c             	pushl  0xc(%ebp)
f0107fdd:	e8 4b fc ff ff       	call   f0107c2d <to_physical_address>
f0107fe2:	83 c4 10             	add    $0x10,%esp
f0107fe5:	83 c8 01             	or     $0x1,%eax
f0107fe8:	89 03                	mov    %eax,(%ebx)
}
f0107fea:	90                   	nop
f0107feb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107fee:	c9                   	leave  
f0107fef:	c3                   	ret    

f0107ff0 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107ff0:	55                   	push   %ebp
f0107ff1:	89 e5                	mov    %esp,%ebp
f0107ff3:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107ff6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ff9:	c1 e0 0c             	shl    $0xc,%eax
f0107ffc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107fff:	83 ec 04             	sub    $0x4,%esp
f0108002:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0108005:	50                   	push   %eax
f0108006:	ff 75 f4             	pushl  -0xc(%ebp)
f0108009:	ff 75 08             	pushl  0x8(%ebp)
f010800c:	e8 14 f9 ff ff       	call   f0107925 <get_frame_info>
f0108011:	83 c4 10             	add    $0x10,%esp
f0108014:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0108017:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010801a:	c9                   	leave  
f010801b:	c3                   	ret    

f010801c <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f010801c:	55                   	push   %ebp
f010801d:	89 e5                	mov    %esp,%ebp
f010801f:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0108022:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0108029:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108030:	eb 5b                	jmp    f010808d <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0108032:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108035:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010803c:	8b 45 08             	mov    0x8(%ebp),%eax
f010803f:	01 d0                	add    %edx,%eax
f0108041:	8b 00                	mov    (%eax),%eax
f0108043:	85 c0                	test   %eax,%eax
f0108045:	74 43                	je     f010808a <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0108047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010804a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108051:	8b 45 08             	mov    0x8(%ebp),%eax
f0108054:	01 d0                	add    %edx,%eax
f0108056:	8b 00                	mov    (%eax),%eax
f0108058:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010805d:	83 ec 0c             	sub    $0xc,%esp
f0108060:	50                   	push   %eax
f0108061:	e8 cc 07 00 00       	call   f0108832 <kheap_virtual_address>
f0108066:	83 c4 10             	add    $0x10,%esp
f0108069:	83 ec 0c             	sub    $0xc,%esp
f010806c:	50                   	push   %eax
f010806d:	e8 c7 06 00 00       	call   f0108739 <kfree>
f0108072:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0108075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108078:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010807f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108082:	01 d0                	add    %edx,%eax
f0108084:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f010808a:	ff 45 f4             	incl   -0xc(%ebp)
f010808d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0108094:	7e 9c                	jle    f0108032 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0108096:	90                   	nop
f0108097:	c9                   	leave  
f0108098:	c3                   	ret    

f0108099 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0108099:	55                   	push   %ebp
f010809a:	89 e5                	mov    %esp,%ebp
f010809c:	83 ec 18             	sub    $0x18,%esp
f010809f:	8b 45 14             	mov    0x14(%ebp),%eax
f01080a2:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f01080a5:	83 ec 04             	sub    $0x4,%esp
f01080a8:	68 30 58 12 f0       	push   $0xf0125830
f01080ad:	68 f6 00 00 00       	push   $0xf6
f01080b2:	68 f0 57 12 f0       	push   $0xf01257f0
f01080b7:	e8 5e 81 ff ff       	call   f010021a <_panic>

f01080bc <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f01080bc:	55                   	push   %ebp
f01080bd:	89 e5                	mov    %esp,%ebp
f01080bf:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f01080c2:	83 ec 04             	sub    $0x4,%esp
f01080c5:	68 64 58 12 f0       	push   $0xf0125864
f01080ca:	68 02 01 00 00       	push   $0x102
f01080cf:	68 f0 57 12 f0       	push   $0xf01257f0
f01080d4:	e8 41 81 ff ff       	call   f010021a <_panic>

f01080d9 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01080d9:	55                   	push   %ebp
f01080da:	89 e5                	mov    %esp,%ebp
f01080dc:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f01080df:	83 ec 04             	sub    $0x4,%esp
f01080e2:	68 98 58 12 f0       	push   $0xf0125898
f01080e7:	68 0c 01 00 00       	push   $0x10c
f01080ec:	68 f0 57 12 f0       	push   $0xf01257f0
f01080f1:	e8 24 81 ff ff       	call   f010021a <_panic>

f01080f6 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01080f6:	55                   	push   %ebp
f01080f7:	89 e5                	mov    %esp,%ebp
f01080f9:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f01080fc:	83 ec 04             	sub    $0x4,%esp
f01080ff:	68 c8 58 12 f0       	push   $0xf01258c8
f0108104:	68 1b 01 00 00       	push   $0x11b
f0108109:	68 f0 57 12 f0       	push   $0xf01257f0
f010810e:	e8 07 81 ff ff       	call   f010021a <_panic>

f0108113 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0108113:	55                   	push   %ebp
f0108114:	89 e5                	mov    %esp,%ebp
f0108116:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f010811b:	83 f8 01             	cmp    $0x1,%eax
f010811e:	75 04                	jne    f0108124 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0108120:	b0 01                	mov    $0x1,%al
f0108122:	eb 02                	jmp    f0108126 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0108124:	b0 00                	mov    $0x0,%al
f0108126:	5d                   	pop    %ebp
f0108127:	c3                   	ret    

f0108128 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0108128:	55                   	push   %ebp
f0108129:	89 e5                	mov    %esp,%ebp
f010812b:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f0108130:	83 f8 02             	cmp    $0x2,%eax
f0108133:	75 04                	jne    f0108139 <isKHeapPlacementStrategyBESTFIT+0x11>
f0108135:	b0 01                	mov    $0x1,%al
f0108137:	eb 02                	jmp    f010813b <isKHeapPlacementStrategyBESTFIT+0x13>
f0108139:	b0 00                	mov    $0x0,%al
f010813b:	5d                   	pop    %ebp
f010813c:	c3                   	ret    

f010813d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010813d:	55                   	push   %ebp
f010813e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108140:	8b 45 08             	mov    0x8(%ebp),%eax
f0108143:	8b 15 98 40 3f f0    	mov    0xf03f4098,%edx
f0108149:	29 d0                	sub    %edx,%eax
f010814b:	c1 f8 02             	sar    $0x2,%eax
f010814e:	89 c2                	mov    %eax,%edx
f0108150:	89 d0                	mov    %edx,%eax
f0108152:	c1 e0 03             	shl    $0x3,%eax
f0108155:	01 d0                	add    %edx,%eax
f0108157:	c1 e0 03             	shl    $0x3,%eax
f010815a:	01 d0                	add    %edx,%eax
f010815c:	c1 e0 03             	shl    $0x3,%eax
f010815f:	01 d0                	add    %edx,%eax
f0108161:	c1 e0 03             	shl    $0x3,%eax
f0108164:	01 d0                	add    %edx,%eax
f0108166:	89 c1                	mov    %eax,%ecx
f0108168:	c1 e1 0f             	shl    $0xf,%ecx
f010816b:	01 c8                	add    %ecx,%eax
f010816d:	c1 e0 03             	shl    $0x3,%eax
f0108170:	01 d0                	add    %edx,%eax
f0108172:	f7 d8                	neg    %eax
}
f0108174:	5d                   	pop    %ebp
f0108175:	c3                   	ret    

f0108176 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108176:	55                   	push   %ebp
f0108177:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108179:	ff 75 08             	pushl  0x8(%ebp)
f010817c:	e8 bc ff ff ff       	call   f010813d <to_frame_number>
f0108181:	83 c4 04             	add    $0x4,%esp
f0108184:	c1 e0 0c             	shl    $0xc,%eax
}
f0108187:	c9                   	leave  
f0108188:	c3                   	ret    

f0108189 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0108189:	55                   	push   %ebp
f010818a:	89 e5                	mov    %esp,%ebp
f010818c:	53                   	push   %ebx
f010818d:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0108190:	8b 45 08             	mov    0x8(%ebp),%eax
f0108193:	c1 e8 0c             	shr    $0xc,%eax
f0108196:	89 c2                	mov    %eax,%edx
f0108198:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f010819d:	39 c2                	cmp    %eax,%edx
f010819f:	72 14                	jb     f01081b5 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01081a1:	83 ec 04             	sub    $0x4,%esp
f01081a4:	68 f8 58 12 f0       	push   $0xf01258f8
f01081a9:	6a 55                	push   $0x55
f01081ab:	68 1d 59 12 f0       	push   $0xf012591d
f01081b0:	e8 65 80 ff ff       	call   f010021a <_panic>
	return &frames_info[PPN(physical_address)];
f01081b5:	8b 0d 98 40 3f f0    	mov    0xf03f4098,%ecx
f01081bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01081be:	c1 e8 0c             	shr    $0xc,%eax
f01081c1:	89 c2                	mov    %eax,%edx
f01081c3:	89 d0                	mov    %edx,%eax
f01081c5:	01 c0                	add    %eax,%eax
f01081c7:	01 d0                	add    %edx,%eax
f01081c9:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01081d0:	01 d8                	add    %ebx,%eax
f01081d2:	01 d0                	add    %edx,%eax
f01081d4:	01 c8                	add    %ecx,%eax
}
f01081d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01081d9:	c9                   	leave  
f01081da:	c3                   	ret    

f01081db <addElement>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"
struct filledPages pagesarr[32766];
int pagesarrsize = 0;
void addElement(uint32 start,uint32 end)
{
f01081db:	55                   	push   %ebp
f01081dc:	89 e5                	mov    %esp,%ebp
        pagesarr[pagesarrsize].start = start;
f01081de:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f01081e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01081e6:	89 14 c5 00 26 41 f0 	mov    %edx,-0xfbeda00(,%eax,8)
        pagesarr[pagesarrsize].end = end;
f01081ed:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f01081f2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081f5:	89 14 c5 04 26 41 f0 	mov    %edx,-0xfbed9fc(,%eax,8)
        pagesarrsize++;
f01081fc:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f0108201:	40                   	inc    %eax
f0108202:	a3 30 37 3f f0       	mov    %eax,0xf03f3730
}
f0108207:	90                   	nop
f0108208:	5d                   	pop    %ebp
f0108209:	c3                   	ret    

f010820a <searchElement>:

int searchElement(uint32 start) {
f010820a:	55                   	push   %ebp
f010820b:	89 e5                	mov    %esp,%ebp
f010820d:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < pagesarrsize; i++) {
f0108210:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108217:	eb 17                	jmp    f0108230 <searchElement+0x26>
        if (pagesarr[i].start == start) {
f0108219:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010821c:	8b 04 c5 00 26 41 f0 	mov    -0xfbeda00(,%eax,8),%eax
f0108223:	3b 45 08             	cmp    0x8(%ebp),%eax
f0108226:	75 05                	jne    f010822d <searchElement+0x23>
            return i;
f0108228:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010822b:	eb 12                	jmp    f010823f <searchElement+0x35>
        pagesarr[pagesarrsize].end = end;
        pagesarrsize++;
}

int searchElement(uint32 start) {
    for (int i = 0; i < pagesarrsize; i++) {
f010822d:	ff 45 fc             	incl   -0x4(%ebp)
f0108230:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f0108235:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f0108238:	7c df                	jl     f0108219 <searchElement+0xf>
        if (pagesarr[i].start == start) {
            return i;
        }
    }
    return -1;
f010823a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010823f:	c9                   	leave  
f0108240:	c3                   	ret    

f0108241 <removeElement>:
void removeElement(uint32 start) {
f0108241:	55                   	push   %ebp
f0108242:	89 e5                	mov    %esp,%ebp
f0108244:	83 ec 10             	sub    $0x10,%esp
    int index = searchElement(start);
f0108247:	ff 75 08             	pushl  0x8(%ebp)
f010824a:	e8 bb ff ff ff       	call   f010820a <searchElement>
f010824f:	83 c4 04             	add    $0x4,%esp
f0108252:	89 45 f8             	mov    %eax,-0x8(%ebp)
        for (int i = index; i < pagesarrsize - 1; i++) {
f0108255:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0108258:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010825b:	eb 26                	jmp    f0108283 <removeElement+0x42>
            pagesarr[i] = pagesarr[i + 1];
f010825d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108260:	40                   	inc    %eax
f0108261:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0108264:	8b 14 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%edx
f010826b:	8b 04 c5 00 26 41 f0 	mov    -0xfbeda00(,%eax,8),%eax
f0108272:	89 04 cd 00 26 41 f0 	mov    %eax,-0xfbeda00(,%ecx,8)
f0108279:	89 14 cd 04 26 41 f0 	mov    %edx,-0xfbed9fc(,%ecx,8)
    }
    return -1;
}
void removeElement(uint32 start) {
    int index = searchElement(start);
        for (int i = index; i < pagesarrsize - 1; i++) {
f0108280:	ff 45 fc             	incl   -0x4(%ebp)
f0108283:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f0108288:	48                   	dec    %eax
f0108289:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010828c:	7f cf                	jg     f010825d <removeElement+0x1c>
            pagesarr[i] = pagesarr[i + 1];
        }
        pagesarrsize--;
f010828e:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f0108293:	48                   	dec    %eax
f0108294:	a3 30 37 3f f0       	mov    %eax,0xf03f3730
}
f0108299:	90                   	nop
f010829a:	c9                   	leave  
f010829b:	c3                   	ret    

f010829c <printArray>:

void printArray() {
f010829c:	55                   	push   %ebp
f010829d:	89 e5                	mov    %esp,%ebp
f010829f:	83 ec 18             	sub    $0x18,%esp
    cprintf("Array elements:\n");
f01082a2:	83 ec 0c             	sub    $0xc,%esp
f01082a5:	68 37 59 12 f0       	push   $0xf0125937
f01082aa:	e8 ec 8b ff ff       	call   f0100e9b <cprintf>
f01082af:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < pagesarrsize; i++) {
f01082b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01082b9:	eb 29                	jmp    f01082e4 <printArray+0x48>
        cprintf("[%d] start: %u, end: %u\n", i, pagesarr[i].start, pagesarr[i].end);
f01082bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082be:	8b 14 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%edx
f01082c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082c8:	8b 04 c5 00 26 41 f0 	mov    -0xfbeda00(,%eax,8),%eax
f01082cf:	52                   	push   %edx
f01082d0:	50                   	push   %eax
f01082d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01082d4:	68 48 59 12 f0       	push   $0xf0125948
f01082d9:	e8 bd 8b ff ff       	call   f0100e9b <cprintf>
f01082de:	83 c4 10             	add    $0x10,%esp
        pagesarrsize--;
}

void printArray() {
    cprintf("Array elements:\n");
    for (int i = 0; i < pagesarrsize; i++) {
f01082e1:	ff 45 f4             	incl   -0xc(%ebp)
f01082e4:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f01082e9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01082ec:	7c cd                	jl     f01082bb <printArray+0x1f>
        cprintf("[%d] start: %u, end: %u\n", i, pagesarr[i].start, pagesarr[i].end);
    }
}
f01082ee:	90                   	nop
f01082ef:	c9                   	leave  
f01082f0:	c3                   	ret    

f01082f1 <searchfree>:
int searchfree(uint32 end)
{
f01082f1:	55                   	push   %ebp
f01082f2:	89 e5                	mov    %esp,%ebp
f01082f4:	83 ec 10             	sub    $0x10,%esp
	 for (int i = 0; i < pagesarrsize; i++) {
f01082f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01082fe:	eb 17                	jmp    f0108317 <searchfree+0x26>
	        if (pagesarr[i].end == end) {
f0108300:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108303:	8b 04 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%eax
f010830a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010830d:	75 05                	jne    f0108314 <searchfree+0x23>
	            return i;
f010830f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108312:	eb 12                	jmp    f0108326 <searchfree+0x35>
        cprintf("[%d] start: %u, end: %u\n", i, pagesarr[i].start, pagesarr[i].end);
    }
}
int searchfree(uint32 end)
{
	 for (int i = 0; i < pagesarrsize; i++) {
f0108314:	ff 45 fc             	incl   -0x4(%ebp)
f0108317:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f010831c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f010831f:	7c df                	jl     f0108300 <searchfree+0xf>
	        if (pagesarr[i].end == end) {
	            return i;
	        }
	    }
	    return -1;
f0108321:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0108326:	c9                   	leave  
f0108327:	c3                   	ret    

f0108328 <removefree>:
void removefree(uint32 end)
{
f0108328:	55                   	push   %ebp
f0108329:	89 e5                	mov    %esp,%ebp
f010832b:	83 ec 10             	sub    $0x10,%esp
	while(searchfree(end)!=-1){
f010832e:	eb 52                	jmp    f0108382 <removefree+0x5a>
    int index = searchfree(end);
f0108330:	ff 75 08             	pushl  0x8(%ebp)
f0108333:	e8 b9 ff ff ff       	call   f01082f1 <searchfree>
f0108338:	83 c4 04             	add    $0x4,%esp
f010833b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        for (int i = index; i < pagesarrsize - 1; i++) {
f010833e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0108341:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0108344:	eb 26                	jmp    f010836c <removefree+0x44>
            pagesarr[i] = pagesarr[i + 1];
f0108346:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108349:	40                   	inc    %eax
f010834a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010834d:	8b 14 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%edx
f0108354:	8b 04 c5 00 26 41 f0 	mov    -0xfbeda00(,%eax,8),%eax
f010835b:	89 04 cd 00 26 41 f0 	mov    %eax,-0xfbeda00(,%ecx,8)
f0108362:	89 14 cd 04 26 41 f0 	mov    %edx,-0xfbed9fc(,%ecx,8)
}
void removefree(uint32 end)
{
	while(searchfree(end)!=-1){
    int index = searchfree(end);
        for (int i = index; i < pagesarrsize - 1; i++) {
f0108369:	ff 45 fc             	incl   -0x4(%ebp)
f010836c:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f0108371:	48                   	dec    %eax
f0108372:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0108375:	7f cf                	jg     f0108346 <removefree+0x1e>
            pagesarr[i] = pagesarr[i + 1];
        }
        pagesarrsize--;
f0108377:	a1 30 37 3f f0       	mov    0xf03f3730,%eax
f010837c:	48                   	dec    %eax
f010837d:	a3 30 37 3f f0       	mov    %eax,0xf03f3730
	    }
	    return -1;
}
void removefree(uint32 end)
{
	while(searchfree(end)!=-1){
f0108382:	ff 75 08             	pushl  0x8(%ebp)
f0108385:	e8 67 ff ff ff       	call   f01082f1 <searchfree>
f010838a:	83 c4 04             	add    $0x4,%esp
f010838d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108390:	75 9e                	jne    f0108330 <removefree+0x8>
        for (int i = index; i < pagesarrsize - 1; i++) {
            pagesarr[i] = pagesarr[i + 1];
        }
        pagesarrsize--;
	}
}
f0108392:	90                   	nop
f0108393:	c9                   	leave  
f0108394:	c3                   	ret    

f0108395 <initialize_kheap_dynamic_allocator>:
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0108395:	55                   	push   %ebp
f0108396:	89 e5                	mov    %esp,%ebp
f0108398:	83 ec 18             	sub    $0x18,%esp
		//Return:
		//	On success: 0
		//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM
		//Comment the following line(s) before start coding...
		//panic("not implemented yet");
		 if(initSizeToAllocate + daStart > daLimit)
f010839b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010839e:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a1:	01 d0                	add    %edx,%eax
f01083a3:	3b 45 10             	cmp    0x10(%ebp),%eax
f01083a6:	76 0a                	jbe    f01083b2 <initialize_kheap_dynamic_allocator+0x1d>
		 {
			 return E_NO_MEM;
f01083a8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f01083ad:	e9 89 00 00 00       	jmp    f010843b <initialize_kheap_dynamic_allocator+0xa6>
		 }
		 start=daStart;
f01083b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b5:	a3 cc 40 3f f0       	mov    %eax,0xf03f40cc
		 segment_break=daStart+initSizeToAllocate;
f01083ba:	8b 55 08             	mov    0x8(%ebp),%edx
f01083bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01083c0:	01 d0                	add    %edx,%eax
f01083c2:	a3 1c 40 3f f0       	mov    %eax,0xf03f401c
		 hard_limit=daLimit;
f01083c7:	8b 45 10             	mov    0x10(%ebp),%eax
f01083ca:	a3 a0 40 3f f0       	mov    %eax,0xf03f40a0
		 uint32 i;
		 struct FrameInfo *frame;
		 for (i = daStart; i < daStart + initSizeToAllocate; i += PAGE_SIZE)
f01083cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01083d5:	eb 41                	jmp    f0108418 <initialize_kheap_dynamic_allocator+0x83>
		 {
			 if(allocate_frame(&frame) != 0)
f01083d7:	83 ec 0c             	sub    $0xc,%esp
f01083da:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01083dd:	50                   	push   %eax
f01083de:	e8 06 f0 ff ff       	call   f01073e9 <allocate_frame>
f01083e3:	83 c4 10             	add    $0x10,%esp
f01083e6:	85 c0                	test   %eax,%eax
f01083e8:	74 07                	je     f01083f1 <initialize_kheap_dynamic_allocator+0x5c>
			 {
				 return E_NO_MEM;
f01083ea:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f01083ef:	eb 4a                	jmp    f010843b <initialize_kheap_dynamic_allocator+0xa6>
			 }
			 else
			 {
				 frame->va = i;
f01083f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083f7:	89 50 0c             	mov    %edx,0xc(%eax)
				 map_frame(ptr_page_directory, frame,i,PERM_PRESENT|PERM_WRITEABLE);
f01083fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01083fd:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108402:	6a 03                	push   $0x3
f0108404:	ff 75 f4             	pushl  -0xc(%ebp)
f0108407:	52                   	push   %edx
f0108408:	50                   	push   %eax
f0108409:	e8 2d f4 ff ff       	call   f010783b <map_frame>
f010840e:	83 c4 10             	add    $0x10,%esp
		 start=daStart;
		 segment_break=daStart+initSizeToAllocate;
		 hard_limit=daLimit;
		 uint32 i;
		 struct FrameInfo *frame;
		 for (i = daStart; i < daStart + initSizeToAllocate; i += PAGE_SIZE)
f0108411:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108418:	8b 55 08             	mov    0x8(%ebp),%edx
f010841b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010841e:	01 d0                	add    %edx,%eax
f0108420:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108423:	77 b2                	ja     f01083d7 <initialize_kheap_dynamic_allocator+0x42>
			 {
				 frame->va = i;
				 map_frame(ptr_page_directory, frame,i,PERM_PRESENT|PERM_WRITEABLE);
			 }
		 }
		 initialize_dynamic_allocator(daStart, initSizeToAllocate);
f0108425:	83 ec 08             	sub    $0x8,%esp
f0108428:	ff 75 0c             	pushl  0xc(%ebp)
f010842b:	ff 75 08             	pushl  0x8(%ebp)
f010842e:	e8 45 a2 01 00       	call   f0122678 <initialize_dynamic_allocator>
f0108433:	83 c4 10             	add    $0x10,%esp
		 return 0;
f0108436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010843b:	c9                   	leave  
f010843c:	c3                   	ret    

f010843d <sbrk>:

void* sbrk(int increment)
{
f010843d:	55                   	push   %ebp
f010843e:	89 e5                	mov    %esp,%ebp
f0108440:	83 ec 28             	sub    $0x28,%esp
			 */

			//MS2: COMMENT THIS LINE BEFORE START CODING====
			//return (void*)-1 ;
			//panic("not implemented yet");
	if (increment == 0)
f0108443:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108447:	75 0a                	jne    f0108453 <sbrk+0x16>
	{
		return (void *)segment_break;
f0108449:	a1 1c 40 3f f0       	mov    0xf03f401c,%eax
f010844e:	e9 4c 01 00 00       	jmp    f010859f <sbrk+0x162>
	}
	uint32 breaked=segment_break;
f0108453:	a1 1c 40 3f f0       	mov    0xf03f401c,%eax
f0108458:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (increment > 0){
f010845b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010845f:	0f 8e ca 00 00 00    	jle    f010852f <sbrk+0xf2>
		uint32 newBreak = ROUNDUP(segment_break + increment, PAGE_SIZE);
f0108465:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010846c:	8b 15 1c 40 3f f0    	mov    0xf03f401c,%edx
f0108472:	8b 45 08             	mov    0x8(%ebp),%eax
f0108475:	01 c2                	add    %eax,%edx
f0108477:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010847a:	01 d0                	add    %edx,%eax
f010847c:	48                   	dec    %eax
f010847d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108480:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108483:	ba 00 00 00 00       	mov    $0x0,%edx
f0108488:	f7 75 e8             	divl   -0x18(%ebp)
f010848b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010848e:	29 d0                	sub    %edx,%eax
f0108490:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if (newBreak > hard_limit) {
f0108493:	a1 a0 40 3f f0       	mov    0xf03f40a0,%eax
f0108498:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010849b:	76 14                	jbe    f01084b1 <sbrk+0x74>
			panic("sbrk: Exceeded hard limit");
f010849d:	83 ec 04             	sub    $0x4,%esp
f01084a0:	68 61 59 12 f0       	push   $0xf0125961
f01084a5:	6a 78                	push   $0x78
f01084a7:	68 7b 59 12 f0       	push   $0xf012597b
f01084ac:	e8 69 7d ff ff       	call   f010021a <_panic>
		}
		uint32 z;
		struct FrameInfo *frame;
		for(z=segment_break;z<=newBreak;z+=PAGE_SIZE){
f01084b1:	a1 1c 40 3f f0       	mov    0xf03f401c,%eax
f01084b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01084b9:	eb 67                	jmp    f0108522 <sbrk+0xe5>
			frame= (struct FrameInfo *)z;
f01084bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084be:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if (allocate_frame(&frame) != 0) {
f01084c1:	83 ec 0c             	sub    $0xc,%esp
f01084c4:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01084c7:	50                   	push   %eax
f01084c8:	e8 1c ef ff ff       	call   f01073e9 <allocate_frame>
f01084cd:	83 c4 10             	add    $0x10,%esp
f01084d0:	85 c0                	test   %eax,%eax
f01084d2:	74 14                	je     f01084e8 <sbrk+0xab>
				panic("sbrk: Failed to allocate frame");
f01084d4:	83 ec 04             	sub    $0x4,%esp
f01084d7:	68 8c 59 12 f0       	push   $0xf012598c
f01084dc:	6a 7f                	push   $0x7f
f01084de:	68 7b 59 12 f0       	push   $0xf012597b
f01084e3:	e8 32 7d ff ff       	call   f010021a <_panic>
			}
			frame->va = z;
f01084e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01084eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084ee:	89 50 0c             	mov    %edx,0xc(%eax)
			map_frame(ptr_page_directory, frame, segment_break, PERM_WRITEABLE);
f01084f1:	8b 0d 1c 40 3f f0    	mov    0xf03f401c,%ecx
f01084f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01084fa:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01084ff:	6a 02                	push   $0x2
f0108501:	51                   	push   %ecx
f0108502:	52                   	push   %edx
f0108503:	50                   	push   %eax
f0108504:	e8 32 f3 ff ff       	call   f010783b <map_frame>
f0108509:	83 c4 10             	add    $0x10,%esp
			segment_break += PAGE_SIZE;
f010850c:	a1 1c 40 3f f0       	mov    0xf03f401c,%eax
f0108511:	05 00 10 00 00       	add    $0x1000,%eax
f0108516:	a3 1c 40 3f f0       	mov    %eax,0xf03f401c
		if (newBreak > hard_limit) {
			panic("sbrk: Exceeded hard limit");
		}
		uint32 z;
		struct FrameInfo *frame;
		for(z=segment_break;z<=newBreak;z+=PAGE_SIZE){
f010851b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108522:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108525:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108528:	76 91                	jbe    f01084bb <sbrk+0x7e>
			}
			frame->va = z;
			map_frame(ptr_page_directory, frame, segment_break, PERM_WRITEABLE);
			segment_break += PAGE_SIZE;
		}
		return (void *)(breaked);
f010852a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010852d:	eb 70                	jmp    f010859f <sbrk+0x162>
	}

	if (increment < 0) {
f010852f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108533:	79 65                	jns    f010859a <sbrk+0x15d>
		int32 newBreak = segment_break + increment;
f0108535:	8b 15 1c 40 3f f0    	mov    0xf03f401c,%edx
f010853b:	8b 45 08             	mov    0x8(%ebp),%eax
f010853e:	01 d0                	add    %edx,%eax
f0108540:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (newBreak < KERNEL_HEAP_START)
f0108543:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108546:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f010854b:	77 17                	ja     f0108564 <sbrk+0x127>
		{
			panic("sbrk: Below heap start");
f010854d:	83 ec 04             	sub    $0x4,%esp
f0108550:	68 ab 59 12 f0       	push   $0xf01259ab
f0108555:	68 8c 00 00 00       	push   $0x8c
f010855a:	68 7b 59 12 f0       	push   $0xf012597b
f010855f:	e8 b6 7c ff ff       	call   f010021a <_panic>
		}

		uint32 i;
		for(i = newBreak;i<segment_break;i+=1){
f0108564:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108567:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010856a:	eb 17                	jmp    f0108583 <sbrk+0x146>
			unmap_frame(ptr_page_directory,i);
f010856c:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108571:	83 ec 08             	sub    $0x8,%esp
f0108574:	ff 75 f0             	pushl  -0x10(%ebp)
f0108577:	50                   	push   %eax
f0108578:	e8 1e f4 ff ff       	call   f010799b <unmap_frame>
f010857d:	83 c4 10             	add    $0x10,%esp
		{
			panic("sbrk: Below heap start");
		}

		uint32 i;
		for(i = newBreak;i<segment_break;i+=1){
f0108580:	ff 45 f0             	incl   -0x10(%ebp)
f0108583:	a1 1c 40 3f f0       	mov    0xf03f401c,%eax
f0108588:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f010858b:	72 df                	jb     f010856c <sbrk+0x12f>
			unmap_frame(ptr_page_directory,i);
		}
		segment_break = newBreak;
f010858d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108590:	a3 1c 40 3f f0       	mov    %eax,0xf03f401c
		return (void *)newBreak;
f0108595:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108598:	eb 05                	jmp    f010859f <sbrk+0x162>
	}
	return 0;
f010859a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010859f:	c9                   	leave  
f01085a0:	c3                   	ret    

f01085a1 <kmalloc>:



void* kmalloc(unsigned int size)
{
f01085a1:	55                   	push   %ebp
f01085a2:	89 e5                	mov    %esp,%ebp
f01085a4:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
		//refer to the` project presentation and documentation for details
		// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy
		//change this "return" according to your answer
		//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
		  if (size <= 0 || size > (KERNEL_HEAP_MAX - KERNEL_HEAP_START))
f01085a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01085ab:	74 09                	je     f01085b6 <kmalloc+0x15>
f01085ad:	81 7d 08 00 f0 ff 09 	cmpl   $0x9fff000,0x8(%ebp)
f01085b4:	76 0a                	jbe    f01085c0 <kmalloc+0x1f>
		  {
			  return NULL;
f01085b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01085bb:	e9 77 01 00 00       	jmp    f0108737 <kmalloc+0x196>
		  }

		  if (size <= DYN_ALLOC_MAX_BLOCK_SIZE)
f01085c0:	81 7d 08 00 08 00 00 	cmpl   $0x800,0x8(%ebp)
f01085c7:	77 3c                	ja     f0108605 <kmalloc+0x64>
		  {
		        if (isKHeapPlacementStrategyFIRSTFIT())
f01085c9:	e8 45 fb ff ff       	call   f0108113 <isKHeapPlacementStrategyFIRSTFIT>
f01085ce:	84 c0                	test   %al,%al
f01085d0:	74 13                	je     f01085e5 <kmalloc+0x44>
		        {
		        	return alloc_block_FF(size);
f01085d2:	83 ec 0c             	sub    $0xc,%esp
f01085d5:	ff 75 08             	pushl  0x8(%ebp)
f01085d8:	e8 60 a1 01 00       	call   f012273d <alloc_block_FF>
f01085dd:	83 c4 10             	add    $0x10,%esp
f01085e0:	e9 52 01 00 00       	jmp    f0108737 <kmalloc+0x196>
		        }
		        else if (isKHeapPlacementStrategyBESTFIT())
f01085e5:	e8 3e fb ff ff       	call   f0108128 <isKHeapPlacementStrategyBESTFIT>
f01085ea:	84 c0                	test   %al,%al
f01085ec:	0f 84 40 01 00 00    	je     f0108732 <kmalloc+0x191>
		        {
		            return alloc_block_BF(size);
f01085f2:	83 ec 0c             	sub    $0xc,%esp
f01085f5:	ff 75 08             	pushl  0x8(%ebp)
f01085f8:	e8 54 a4 01 00       	call   f0122a51 <alloc_block_BF>
f01085fd:	83 c4 10             	add    $0x10,%esp
f0108600:	e9 32 01 00 00       	jmp    f0108737 <kmalloc+0x196>
		        }
		  }
		  else
		  {
			  size = ROUNDUP(size, PAGE_SIZE);
f0108605:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010860c:	8b 55 08             	mov    0x8(%ebp),%edx
f010860f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108612:	01 d0                	add    %edx,%eax
f0108614:	48                   	dec    %eax
f0108615:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108618:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010861b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108620:	f7 75 e0             	divl   -0x20(%ebp)
f0108623:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108626:	29 d0                	sub    %edx,%eax
f0108628:	89 45 08             	mov    %eax,0x8(%ebp)
			  int numOfPages = size / PAGE_SIZE;
f010862b:	8b 45 08             	mov    0x8(%ebp),%eax
f010862e:	c1 e8 0c             	shr    $0xc,%eax
f0108631:	89 45 d8             	mov    %eax,-0x28(%ebp)
			  int end = 0;
f0108634:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			  int count = 0;
f010863b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			  int start = -1;
f0108642:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)

			  for (uint32 i = hard_limit + PAGE_SIZE; i < KERNEL_HEAP_MAX; i += PAGE_SIZE)
f0108649:	a1 a0 40 3f f0       	mov    0xf03f40a0,%eax
f010864e:	05 00 10 00 00       	add    $0x1000,%eax
f0108653:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108656:	eb 5e                	jmp    f01086b6 <kmalloc+0x115>
			  {
				  uint32 *ptr = NULL;
f0108658:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				  struct FrameInfo *frame_info_ptr = get_frame_info(ptr_page_directory, i, &ptr);
f010865f:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108664:	83 ec 04             	sub    $0x4,%esp
f0108667:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010866a:	52                   	push   %edx
f010866b:	ff 75 e8             	pushl  -0x18(%ebp)
f010866e:	50                   	push   %eax
f010866f:	e8 b1 f2 ff ff       	call   f0107925 <get_frame_info>
f0108674:	83 c4 10             	add    $0x10,%esp
f0108677:	89 45 d4             	mov    %eax,-0x2c(%ebp)
				  if (frame_info_ptr == NULL)
f010867a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010867e:	75 28                	jne    f01086a8 <kmalloc+0x107>
				  {
					  count++;
f0108680:	ff 45 f0             	incl   -0x10(%ebp)
					  if (count == numOfPages)
f0108683:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108686:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108689:	75 24                	jne    f01086af <kmalloc+0x10e>
					  {
						  end = i + PAGE_SIZE;
f010868b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010868e:	05 00 10 00 00       	add    $0x1000,%eax
f0108693:	89 45 f4             	mov    %eax,-0xc(%ebp)
						  start = end - (count * PAGE_SIZE);
f0108696:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108699:	c1 e0 0c             	shl    $0xc,%eax
f010869c:	89 c2                	mov    %eax,%edx
f010869e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086a1:	29 d0                	sub    %edx,%eax
f01086a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01086a6:	eb 17                	jmp    f01086bf <kmalloc+0x11e>
						  break;
					  }
				  }
				  else
				  {
					  count = 0;
f01086a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			  int numOfPages = size / PAGE_SIZE;
			  int end = 0;
			  int count = 0;
			  int start = -1;

			  for (uint32 i = hard_limit + PAGE_SIZE; i < KERNEL_HEAP_MAX; i += PAGE_SIZE)
f01086af:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01086b6:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01086bd:	76 99                	jbe    f0108658 <kmalloc+0xb7>
				  else
				  {
					  count = 0;
				  }
			  }
			  if (start == -1)
f01086bf:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
f01086c3:	75 07                	jne    f01086cc <kmalloc+0x12b>
			  {
				  return NULL;
f01086c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01086ca:	eb 6b                	jmp    f0108737 <kmalloc+0x196>
			  }

			  for (int i = start; i < end; i += PAGE_SIZE)
f01086cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01086cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01086d2:	eb 51                	jmp    f0108725 <kmalloc+0x184>
			  {
				  struct FrameInfo *frame_info_ptr = NULL;
f01086d4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				  allocate_frame(&frame_info_ptr);
f01086db:	83 ec 0c             	sub    $0xc,%esp
f01086de:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01086e1:	50                   	push   %eax
f01086e2:	e8 02 ed ff ff       	call   f01073e9 <allocate_frame>
f01086e7:	83 c4 10             	add    $0x10,%esp
				  frame_info_ptr->va = i;
f01086ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01086ed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01086f0:	89 50 0c             	mov    %edx,0xc(%eax)
				  map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
f01086f3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01086f6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01086f9:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01086fe:	6a 03                	push   $0x3
f0108700:	51                   	push   %ecx
f0108701:	52                   	push   %edx
f0108702:	50                   	push   %eax
f0108703:	e8 33 f1 ff ff       	call   f010783b <map_frame>
f0108708:	83 c4 10             	add    $0x10,%esp
				  addElement(i,end);
f010870b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010870e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108711:	83 ec 08             	sub    $0x8,%esp
f0108714:	52                   	push   %edx
f0108715:	50                   	push   %eax
f0108716:	e8 c0 fa ff ff       	call   f01081db <addElement>
f010871b:	83 c4 10             	add    $0x10,%esp
			  if (start == -1)
			  {
				  return NULL;
			  }

			  for (int i = start; i < end; i += PAGE_SIZE)
f010871e:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f0108725:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108728:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010872b:	7c a7                	jl     f01086d4 <kmalloc+0x133>
				  allocate_frame(&frame_info_ptr);
				  frame_info_ptr->va = i;
				  map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
				  addElement(i,end);
			  }
			  return (void *)start;
f010872d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108730:	eb 05                	jmp    f0108737 <kmalloc+0x196>
		  }
		  return NULL;
f0108732:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108737:	c9                   	leave  
f0108738:	c3                   	ret    

f0108739 <kfree>:


void kfree(void* virtual_address)
{
f0108739:	55                   	push   %ebp
f010873a:	89 e5                	mov    %esp,%ebp
f010873c:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	if((uint32)virtual_address>KERNEL_HEAP_MAX || (uint32)virtual_address<KERNEL_HEAP_START)
f010873f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108742:	3d 00 f0 ff ff       	cmp    $0xfffff000,%eax
f0108747:	77 0a                	ja     f0108753 <kfree+0x1a>
f0108749:	8b 45 08             	mov    0x8(%ebp),%eax
f010874c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0108751:	77 17                	ja     f010876a <kfree+0x31>
	{
		panic("Invalid Address");
f0108753:	83 ec 04             	sub    $0x4,%esp
f0108756:	68 c2 59 12 f0       	push   $0xf01259c2
f010875b:	68 e8 00 00 00       	push   $0xe8
f0108760:	68 7b 59 12 f0       	push   $0xf012597b
f0108765:	e8 b0 7a ff ff       	call   f010021a <_panic>
	}
	if ((uint32)virtual_address>= KERNEL_HEAP_START&&(uint32)virtual_address<hard_limit)
f010876a:	8b 45 08             	mov    0x8(%ebp),%eax
f010876d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0108772:	76 1f                	jbe    f0108793 <kfree+0x5a>
f0108774:	8b 55 08             	mov    0x8(%ebp),%edx
f0108777:	a1 a0 40 3f f0       	mov    0xf03f40a0,%eax
f010877c:	39 c2                	cmp    %eax,%edx
f010877e:	73 13                	jae    f0108793 <kfree+0x5a>
	{
		free_block(virtual_address);
f0108780:	83 ec 0c             	sub    $0xc,%esp
f0108783:	ff 75 08             	pushl  0x8(%ebp)
f0108786:	e8 59 a4 01 00       	call   f0122be4 <free_block>
f010878b:	83 c4 10             	add    $0x10,%esp
f010878e:	e9 9c 00 00 00       	jmp    f010882f <kfree+0xf6>
	}
	else
	{
		int x = searchElement((uint32) virtual_address);
f0108793:	8b 45 08             	mov    0x8(%ebp),%eax
f0108796:	83 ec 0c             	sub    $0xc,%esp
f0108799:	50                   	push   %eax
f010879a:	e8 6b fa ff ff       	call   f010820a <searchElement>
f010879f:	83 c4 10             	add    $0x10,%esp
f01087a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 size = pagesarr[x].end - pagesarr[x].start;
f01087a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087a8:	8b 14 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%edx
f01087af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087b2:	8b 04 c5 00 26 41 f0 	mov    -0xfbeda00(,%eax,8),%eax
f01087b9:	29 c2                	sub    %eax,%edx
f01087bb:	89 d0                	mov    %edx,%eax
f01087bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 numOfPages = ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;
f01087c0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01087c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01087ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01087cd:	01 d0                	add    %edx,%eax
f01087cf:	48                   	dec    %eax
f01087d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01087d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01087d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01087db:	f7 75 e8             	divl   -0x18(%ebp)
f01087de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01087e1:	29 d0                	sub    %edx,%eax
f01087e3:	c1 e8 0c             	shr    $0xc,%eax
f01087e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
				for(int i = 0; i < numOfPages ; i++)
f01087e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01087f0:	eb 1f                	jmp    f0108811 <kfree+0xd8>
				{
					unmap_frame(ptr_page_directory, (uint32)virtual_address);
f01087f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01087f5:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01087fa:	83 ec 08             	sub    $0x8,%esp
f01087fd:	52                   	push   %edx
f01087fe:	50                   	push   %eax
f01087ff:	e8 97 f1 ff ff       	call   f010799b <unmap_frame>
f0108804:	83 c4 10             	add    $0x10,%esp
					virtual_address += PAGE_SIZE;
f0108807:	81 45 08 00 10 00 00 	addl   $0x1000,0x8(%ebp)
	else
	{
		int x = searchElement((uint32) virtual_address);
		uint32 size = pagesarr[x].end - pagesarr[x].start;
		uint32 numOfPages = ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;
				for(int i = 0; i < numOfPages ; i++)
f010880e:	ff 45 f4             	incl   -0xc(%ebp)
f0108811:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108814:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108817:	72 d9                	jb     f01087f2 <kfree+0xb9>
				{
					unmap_frame(ptr_page_directory, (uint32)virtual_address);
					virtual_address += PAGE_SIZE;

				}
				removefree(pagesarr[x].end);
f0108819:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010881c:	8b 04 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%eax
f0108823:	83 ec 0c             	sub    $0xc,%esp
f0108826:	50                   	push   %eax
f0108827:	e8 fc fa ff ff       	call   f0108328 <removefree>
f010882c:	83 c4 10             	add    $0x10,%esp
	}
}
f010882f:	90                   	nop
f0108830:	c9                   	leave  
f0108831:	c3                   	ret    

f0108832 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0108832:	55                   	push   %ebp
f0108833:	89 e5                	mov    %esp,%ebp
f0108835:	83 ec 18             	sub    $0x18,%esp
		//panic("kheap_virtual_address() is not implemented yet...!!");

		//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================

		//change this "return" according to your answer
		struct FrameInfo* ptr=to_frame_info(physical_address);
f0108838:	83 ec 0c             	sub    $0xc,%esp
f010883b:	ff 75 08             	pushl  0x8(%ebp)
f010883e:	e8 46 f9 ff ff       	call   f0108189 <to_frame_info>
f0108843:	83 c4 10             	add    $0x10,%esp
f0108846:	89 45 f4             	mov    %eax,-0xc(%ebp)

		if(ptr==NULL)
f0108849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010884d:	75 07                	jne    f0108856 <kheap_virtual_address+0x24>
		{
			return 0;
f010884f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108854:	eb 44                	jmp    f010889a <kheap_virtual_address+0x68>
		}
		uint32 *pagetableptr=NULL;
f0108856:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		struct FrameInfo* virtaddinfo=get_frame_info(ptr_page_directory,ptr->va,&pagetableptr);
f010885d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108860:	8b 50 0c             	mov    0xc(%eax),%edx
f0108863:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108868:	83 ec 04             	sub    $0x4,%esp
f010886b:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f010886e:	51                   	push   %ecx
f010886f:	52                   	push   %edx
f0108870:	50                   	push   %eax
f0108871:	e8 af f0 ff ff       	call   f0107925 <get_frame_info>
f0108876:	83 c4 10             	add    $0x10,%esp
f0108879:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(virtaddinfo==NULL)
f010887c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108880:	75 07                	jne    f0108889 <kheap_virtual_address+0x57>
		{
			return 0;
f0108882:	b8 00 00 00 00       	mov    $0x0,%eax
f0108887:	eb 11                	jmp    f010889a <kheap_virtual_address+0x68>
		}

		return ptr->va + (physical_address  & 0xFFF);
f0108889:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010888c:	8b 40 0c             	mov    0xc(%eax),%eax
f010888f:	8b 55 08             	mov    0x8(%ebp),%edx
f0108892:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
f0108898:	01 d0                	add    %edx,%eax
}
f010889a:	c9                   	leave  
f010889b:	c3                   	ret    

f010889c <kheap_physical_address>:
unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010889c:	55                   	push   %ebp
f010889d:	89 e5                	mov    %esp,%ebp
f010889f:	83 ec 18             	sub    $0x18,%esp
	//return PTX( virtual_address);

	//panic("kheap_physical_address() is not implemented yet...!!");

	//change this "return" according to your answer
	uint32 *pageTablePtr=NULL;
f01088a2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo* ptr=get_frame_info(ptr_page_directory,virtual_address,&pageTablePtr);
f01088a9:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01088ae:	83 ec 04             	sub    $0x4,%esp
f01088b1:	8d 55 e8             	lea    -0x18(%ebp),%edx
f01088b4:	52                   	push   %edx
f01088b5:	ff 75 08             	pushl  0x8(%ebp)
f01088b8:	50                   	push   %eax
f01088b9:	e8 67 f0 ff ff       	call   f0107925 <get_frame_info>
f01088be:	83 c4 10             	add    $0x10,%esp
f01088c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr==NULL)
f01088c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01088c8:	75 07                	jne    f01088d1 <kheap_physical_address+0x35>
		return 0;
f01088ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01088cf:	eb 26                	jmp    f01088f7 <kheap_physical_address+0x5b>
	uint32 offset=virtual_address%PAGE_SIZE;
f01088d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01088d4:	25 ff 0f 00 00       	and    $0xfff,%eax
f01088d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 PhysAddrres=to_physical_address(ptr)+offset;
f01088dc:	83 ec 0c             	sub    $0xc,%esp
f01088df:	ff 75 f4             	pushl  -0xc(%ebp)
f01088e2:	e8 8f f8 ff ff       	call   f0108176 <to_physical_address>
f01088e7:	83 c4 10             	add    $0x10,%esp
f01088ea:	89 c2                	mov    %eax,%edx
f01088ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01088ef:	01 d0                	add    %edx,%eax
f01088f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return PhysAddrres;
f01088f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01088f7:	c9                   	leave  
f01088f8:	c3                   	ret    

f01088f9 <kfreeall>:
void kfreeall()
{
f01088f9:	55                   	push   %ebp
f01088fa:	89 e5                	mov    %esp,%ebp
f01088fc:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f01088ff:	83 ec 04             	sub    $0x4,%esp
f0108902:	68 d2 59 12 f0       	push   $0xf01259d2
f0108907:	68 2a 01 00 00       	push   $0x12a
f010890c:	68 7b 59 12 f0       	push   $0xf012597b
f0108911:	e8 04 79 ff ff       	call   f010021a <_panic>

f0108916 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0108916:	55                   	push   %ebp
f0108917:	89 e5                	mov    %esp,%ebp
f0108919:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010891c:	83 ec 04             	sub    $0x4,%esp
f010891f:	68 d2 59 12 f0       	push   $0xf01259d2
f0108924:	68 30 01 00 00       	push   $0x130
f0108929:	68 7b 59 12 f0       	push   $0xf012597b
f010892e:	e8 e7 78 ff ff       	call   f010021a <_panic>

f0108933 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0108933:	55                   	push   %ebp
f0108934:	89 e5                	mov    %esp,%ebp
f0108936:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108939:	83 ec 04             	sub    $0x4,%esp
f010893c:	68 d2 59 12 f0       	push   $0xf01259d2
f0108941:	68 35 01 00 00       	push   $0x135
f0108946:	68 7b 59 12 f0       	push   $0xf012597b
f010894b:	e8 ca 78 ff ff       	call   f010021a <_panic>

f0108950 <krealloc>:
}
void *krealloc(void *virtual_address, uint32 new_size)
{
f0108950:	55                   	push   %ebp
f0108951:	89 e5                	mov    %esp,%ebp
f0108953:	83 ec 48             	sub    $0x48,%esp
	//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
	//	On failure, returns a null pointer, and the old virtual_address remains valid.

	//	A call with virtual_address = null is equivalent to kmalloc().
	//	A call with new_size = zero is equivalent to kfree().
	if (virtual_address == NULL&&new_size == 0)
f0108956:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010895a:	75 10                	jne    f010896c <krealloc+0x1c>
f010895c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108960:	75 0a                	jne    f010896c <krealloc+0x1c>
	{
		return NULL;
f0108962:	b8 00 00 00 00       	mov    $0x0,%eax
f0108967:	e9 83 02 00 00       	jmp    f0108bef <krealloc+0x29f>
	}
	if (virtual_address == NULL)
f010896c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108970:	75 13                	jne    f0108985 <krealloc+0x35>
	{
		return kmalloc(new_size);
f0108972:	83 ec 0c             	sub    $0xc,%esp
f0108975:	ff 75 0c             	pushl  0xc(%ebp)
f0108978:	e8 24 fc ff ff       	call   f01085a1 <kmalloc>
f010897d:	83 c4 10             	add    $0x10,%esp
f0108980:	e9 6a 02 00 00       	jmp    f0108bef <krealloc+0x29f>
	}
	if (new_size == 0)
f0108985:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108989:	75 18                	jne    f01089a3 <krealloc+0x53>
	{
		kfree(virtual_address);
f010898b:	83 ec 0c             	sub    $0xc,%esp
f010898e:	ff 75 08             	pushl  0x8(%ebp)
f0108991:	e8 a3 fd ff ff       	call   f0108739 <kfree>
f0108996:	83 c4 10             	add    $0x10,%esp
		return NULL;
f0108999:	b8 00 00 00 00       	mov    $0x0,%eax
f010899e:	e9 4c 02 00 00       	jmp    f0108bef <krealloc+0x29f>
	}
	 uint32 new_va=(uint32)virtual_address;
f01089a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01089a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(new_va>=KERNEL_HEAP_START&&new_va<hard_limit)
f01089a9:	81 7d dc ff ff ff f5 	cmpl   $0xf5ffffff,-0x24(%ebp)
f01089b0:	76 20                	jbe    f01089d2 <krealloc+0x82>
f01089b2:	a1 a0 40 3f f0       	mov    0xf03f40a0,%eax
f01089b7:	39 45 dc             	cmp    %eax,-0x24(%ebp)
f01089ba:	73 16                	jae    f01089d2 <krealloc+0x82>
	{
		return realloc_block_FF(virtual_address,new_size);
f01089bc:	83 ec 08             	sub    $0x8,%esp
f01089bf:	ff 75 0c             	pushl  0xc(%ebp)
f01089c2:	ff 75 08             	pushl  0x8(%ebp)
f01089c5:	e8 02 a4 01 00       	call   f0122dcc <realloc_block_FF>
f01089ca:	83 c4 10             	add    $0x10,%esp
f01089cd:	e9 1d 02 00 00       	jmp    f0108bef <krealloc+0x29f>
	}
	else if(new_va>=hard_limit+PAGE_SIZE&&new_va<KERNEL_HEAP_MAX)
f01089d2:	a1 a0 40 3f f0       	mov    0xf03f40a0,%eax
f01089d7:	05 00 10 00 00       	add    $0x1000,%eax
f01089dc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01089df:	0f 87 05 02 00 00    	ja     f0108bea <krealloc+0x29a>
f01089e5:	81 7d dc ff ef ff ff 	cmpl   $0xffffefff,-0x24(%ebp)
f01089ec:	0f 87 f8 01 00 00    	ja     f0108bea <krealloc+0x29a>
	{
	 if(searchElement(new_va)==-1)
f01089f2:	83 ec 0c             	sub    $0xc,%esp
f01089f5:	ff 75 dc             	pushl  -0x24(%ebp)
f01089f8:	e8 0d f8 ff ff       	call   f010820a <searchElement>
f01089fd:	83 c4 10             	add    $0x10,%esp
f0108a00:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108a03:	0f 85 b2 00 00 00    	jne    f0108abb <krealloc+0x16b>
	 {
		 if((KERNEL_HEAP_MAX-new_va)>=new_size)
f0108a09:	b8 00 f0 ff ff       	mov    $0xfffff000,%eax
f0108a0e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0108a11:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108a14:	0f 82 97 00 00 00    	jb     f0108ab1 <krealloc+0x161>
		 {
			 new_size = ROUNDUP(new_size, PAGE_SIZE);
f0108a1a:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0108a21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a24:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108a27:	01 d0                	add    %edx,%eax
f0108a29:	48                   	dec    %eax
f0108a2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108a2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a30:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a35:	f7 75 d8             	divl   -0x28(%ebp)
f0108a38:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a3b:	29 d0                	sub    %edx,%eax
f0108a3d:	89 45 0c             	mov    %eax,0xc(%ebp)
			 uint32 end=new_va+new_size;
f0108a40:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0108a43:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a46:	01 d0                	add    %edx,%eax
f0108a48:	89 45 d0             	mov    %eax,-0x30(%ebp)
			 for (uint32 i = new_va; i < end; i += PAGE_SIZE)
f0108a4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108a4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a51:	eb 4e                	jmp    f0108aa1 <krealloc+0x151>
			 {
				  struct FrameInfo *frame_info_ptr = NULL;
f0108a53:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				  allocate_frame(&frame_info_ptr);
f0108a5a:	83 ec 0c             	sub    $0xc,%esp
f0108a5d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108a60:	50                   	push   %eax
f0108a61:	e8 83 e9 ff ff       	call   f01073e9 <allocate_frame>
f0108a66:	83 c4 10             	add    $0x10,%esp
				  frame_info_ptr->va = i;
f0108a69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108a6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108a6f:	89 50 0c             	mov    %edx,0xc(%eax)
				  map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
f0108a72:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0108a75:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108a7a:	6a 03                	push   $0x3
f0108a7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a7f:	52                   	push   %edx
f0108a80:	50                   	push   %eax
f0108a81:	e8 b5 ed ff ff       	call   f010783b <map_frame>
f0108a86:	83 c4 10             	add    $0x10,%esp
				  addElement(i,end);
f0108a89:	83 ec 08             	sub    $0x8,%esp
f0108a8c:	ff 75 d0             	pushl  -0x30(%ebp)
f0108a8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a92:	e8 44 f7 ff ff       	call   f01081db <addElement>
f0108a97:	83 c4 10             	add    $0x10,%esp
	 {
		 if((KERNEL_HEAP_MAX-new_va)>=new_size)
		 {
			 new_size = ROUNDUP(new_size, PAGE_SIZE);
			 uint32 end=new_va+new_size;
			 for (uint32 i = new_va; i < end; i += PAGE_SIZE)
f0108a9a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aa4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0108aa7:	72 aa                	jb     f0108a53 <krealloc+0x103>
				  allocate_frame(&frame_info_ptr);
				  frame_info_ptr->va = i;
				  map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
				  addElement(i,end);
			 }
			 return (void *)new_va;
f0108aa9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108aac:	e9 3e 01 00 00       	jmp    f0108bef <krealloc+0x29f>
		 }
		 else
		 {
			 return NULL;
f0108ab1:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ab6:	e9 34 01 00 00       	jmp    f0108bef <krealloc+0x29f>
		 }
	 }
	 else
	 {
		 if((KERNEL_HEAP_MAX-new_va)<new_size)
f0108abb:	b8 00 f0 ff ff       	mov    $0xfffff000,%eax
f0108ac0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0108ac3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108ac6:	73 0a                	jae    f0108ad2 <krealloc+0x182>
		 {
			 return NULL;
f0108ac8:	b8 00 00 00 00       	mov    $0x0,%eax
f0108acd:	e9 1d 01 00 00       	jmp    f0108bef <krealloc+0x29f>
		 }
		 else
		 {
			 int end = 0;
f0108ad2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			 int count = 0;
f0108ad9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			 int start = -1;
f0108ae0:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
			 int numOfPages = new_size / PAGE_SIZE;
f0108ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108aea:	c1 e8 0c             	shr    $0xc,%eax
f0108aed:	89 45 cc             	mov    %eax,-0x34(%ebp)
			 uint32 index=searchElement(new_va);
f0108af0:	83 ec 0c             	sub    $0xc,%esp
f0108af3:	ff 75 dc             	pushl  -0x24(%ebp)
f0108af6:	e8 0f f7 ff ff       	call   f010820a <searchElement>
f0108afb:	83 c4 10             	add    $0x10,%esp
f0108afe:	89 45 c8             	mov    %eax,-0x38(%ebp)
			 for(uint32 i=pagesarr[index].end;i<KERNEL_HEAP_MAX;i+=PAGE_SIZE)
f0108b01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b04:	8b 04 c5 04 26 41 f0 	mov    -0xfbed9fc(,%eax,8),%eax
f0108b0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108b0e:	eb 5e                	jmp    f0108b6e <krealloc+0x21e>
			 {
				 uint32 *ptr = NULL;
f0108b10:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
				 struct FrameInfo *frame_info_ptr = get_frame_info(ptr_page_directory, i, &ptr);
f0108b17:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108b1c:	83 ec 04             	sub    $0x4,%esp
f0108b1f:	8d 55 bc             	lea    -0x44(%ebp),%edx
f0108b22:	52                   	push   %edx
f0108b23:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108b26:	50                   	push   %eax
f0108b27:	e8 f9 ed ff ff       	call   f0107925 <get_frame_info>
f0108b2c:	83 c4 10             	add    $0x10,%esp
f0108b2f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
				 if (frame_info_ptr == NULL)
f0108b32:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0108b36:	75 28                	jne    f0108b60 <krealloc+0x210>
				 {
					 count++;
f0108b38:	ff 45 ec             	incl   -0x14(%ebp)
					 if (count == numOfPages)
f0108b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108b3e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0108b41:	75 24                	jne    f0108b67 <krealloc+0x217>
					 {
						 end = i + PAGE_SIZE;
f0108b43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b46:	05 00 10 00 00       	add    $0x1000,%eax
f0108b4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
						 start = end - (count * PAGE_SIZE);
f0108b4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108b51:	c1 e0 0c             	shl    $0xc,%eax
f0108b54:	89 c2                	mov    %eax,%edx
f0108b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b59:	29 d0                	sub    %edx,%eax
f0108b5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108b5e:	eb 17                	jmp    f0108b77 <krealloc+0x227>
						 break;
					 }
				 }
				 else
				 {
					 count = 0;
f0108b60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			 int end = 0;
			 int count = 0;
			 int start = -1;
			 int numOfPages = new_size / PAGE_SIZE;
			 uint32 index=searchElement(new_va);
			 for(uint32 i=pagesarr[index].end;i<KERNEL_HEAP_MAX;i+=PAGE_SIZE)
f0108b67:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f0108b6e:	81 7d e4 ff ef ff ff 	cmpl   $0xffffefff,-0x1c(%ebp)
f0108b75:	76 99                	jbe    f0108b10 <krealloc+0x1c0>
				 else
				 {
					 count = 0;
				 }
			 }
			 if (start == -1)
f0108b77:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
f0108b7b:	75 07                	jne    f0108b84 <krealloc+0x234>
			 {
				 return NULL;
f0108b7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108b82:	eb 6b                	jmp    f0108bef <krealloc+0x29f>
			 }

			 for (int i = start; i < end; i += PAGE_SIZE)
f0108b84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b87:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b8a:	eb 51                	jmp    f0108bdd <krealloc+0x28d>
			 {
				 struct FrameInfo *frame_info_ptr = NULL;
f0108b8c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
				 allocate_frame(&frame_info_ptr);
f0108b93:	83 ec 0c             	sub    $0xc,%esp
f0108b96:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108b99:	50                   	push   %eax
f0108b9a:	e8 4a e8 ff ff       	call   f01073e9 <allocate_frame>
f0108b9f:	83 c4 10             	add    $0x10,%esp
				 frame_info_ptr->va = i;
f0108ba2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0108ba5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0108ba8:	89 50 0c             	mov    %edx,0xc(%eax)
				 map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
f0108bab:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0108bae:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0108bb1:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0108bb6:	6a 03                	push   $0x3
f0108bb8:	51                   	push   %ecx
f0108bb9:	52                   	push   %edx
f0108bba:	50                   	push   %eax
f0108bbb:	e8 7b ec ff ff       	call   f010783b <map_frame>
f0108bc0:	83 c4 10             	add    $0x10,%esp
				 addElement(i,end);
f0108bc3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108bc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108bc9:	83 ec 08             	sub    $0x8,%esp
f0108bcc:	52                   	push   %edx
f0108bcd:	50                   	push   %eax
f0108bce:	e8 08 f6 ff ff       	call   f01081db <addElement>
f0108bd3:	83 c4 10             	add    $0x10,%esp
			 if (start == -1)
			 {
				 return NULL;
			 }

			 for (int i = start; i < end; i += PAGE_SIZE)
f0108bd6:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0108bdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108be0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108be3:	7c a7                	jl     f0108b8c <krealloc+0x23c>
				 frame_info_ptr->va = i;
				 map_frame(ptr_page_directory, frame_info_ptr, i, PERM_PRESENT | PERM_WRITEABLE);
				 addElement(i,end);
			 }

			 return (void *)start;
f0108be5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108be8:	eb 05                	jmp    f0108bef <krealloc+0x29f>
		 }
		 return NULL;
	 }
	}
	return NULL;
f0108bea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bef:	c9                   	leave  
f0108bf0:	c3                   	ret    

f0108bf1 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108bf1:	55                   	push   %ebp
f0108bf2:	89 e5                	mov    %esp,%ebp
f0108bf4:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108bf7:	83 ec 04             	sub    $0x4,%esp
f0108bfa:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108bfd:	50                   	push   %eax
f0108bfe:	ff 75 0c             	pushl  0xc(%ebp)
f0108c01:	ff 75 08             	pushl  0x8(%ebp)
f0108c04:	e8 a2 e9 ff ff       	call   f01075ab <get_page_table>
f0108c09:	83 c4 10             	add    $0x10,%esp
f0108c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c12:	85 c0                	test   %eax,%eax
f0108c14:	74 64                	je     f0108c7a <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108c16:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c19:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c1c:	c1 ea 0c             	shr    $0xc,%edx
f0108c1f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c25:	c1 e2 02             	shl    $0x2,%edx
f0108c28:	01 c2                	add    %eax,%edx
f0108c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c2d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108c30:	c1 e9 0c             	shr    $0xc,%ecx
f0108c33:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108c39:	c1 e1 02             	shl    $0x2,%ecx
f0108c3c:	01 c8                	add    %ecx,%eax
f0108c3e:	8b 00                	mov    (%eax),%eax
f0108c40:	0b 45 10             	or     0x10(%ebp),%eax
f0108c43:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108c45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c48:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c4b:	c1 ea 0c             	shr    $0xc,%edx
f0108c4e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c54:	c1 e2 02             	shl    $0x2,%edx
f0108c57:	01 d0                	add    %edx,%eax
f0108c59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108c5c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108c5f:	c1 e9 0c             	shr    $0xc,%ecx
f0108c62:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108c68:	c1 e1 02             	shl    $0x2,%ecx
f0108c6b:	01 ca                	add    %ecx,%edx
f0108c6d:	8b 12                	mov    (%edx),%edx
f0108c6f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108c72:	f7 d1                	not    %ecx
f0108c74:	21 ca                	and    %ecx,%edx
f0108c76:	89 10                	mov    %edx,(%eax)
f0108c78:	eb 27                	jmp    f0108ca1 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108c7a:	83 ec 08             	sub    $0x8,%esp
f0108c7d:	ff 75 0c             	pushl  0xc(%ebp)
f0108c80:	68 e4 59 12 f0       	push   $0xf01259e4
f0108c85:	e8 11 82 ff ff       	call   f0100e9b <cprintf>
f0108c8a:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108c8d:	83 ec 04             	sub    $0x4,%esp
f0108c90:	68 0c 5a 12 f0       	push   $0xf0125a0c
f0108c95:	6a 1c                	push   $0x1c
f0108c97:	68 80 5a 12 f0       	push   $0xf0125a80
f0108c9c:	e8 79 75 ff ff       	call   f010021a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108ca1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ca4:	83 ec 08             	sub    $0x8,%esp
f0108ca7:	50                   	push   %eax
f0108ca8:	6a 00                	push   $0x0
f0108caa:	e8 d3 e2 ff ff       	call   f0106f82 <tlb_invalidate>
f0108caf:	83 c4 10             	add    $0x10,%esp
}
f0108cb2:	90                   	nop
f0108cb3:	c9                   	leave  
f0108cb4:	c3                   	ret    

f0108cb5 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108cb5:	55                   	push   %ebp
f0108cb6:	89 e5                	mov    %esp,%ebp
f0108cb8:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108cbb:	83 ec 04             	sub    $0x4,%esp
f0108cbe:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108cc1:	50                   	push   %eax
f0108cc2:	ff 75 0c             	pushl  0xc(%ebp)
f0108cc5:	ff 75 08             	pushl  0x8(%ebp)
f0108cc8:	e8 de e8 ff ff       	call   f01075ab <get_page_table>
f0108ccd:	83 c4 10             	add    $0x10,%esp
f0108cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108cd6:	85 c0                	test   %eax,%eax
f0108cd8:	74 1d                	je     f0108cf7 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108cdd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ce0:	c1 ea 0c             	shr    $0xc,%edx
f0108ce3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108ce9:	c1 e2 02             	shl    $0x2,%edx
f0108cec:	01 d0                	add    %edx,%eax
f0108cee:	8b 00                	mov    (%eax),%eax
f0108cf0:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108cf5:	eb 05                	jmp    f0108cfc <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108cf7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0108cfc:	c9                   	leave  
f0108cfd:	c3                   	ret    

f0108cfe <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0108cfe:	55                   	push   %ebp
f0108cff:	89 e5                	mov    %esp,%ebp
f0108d01:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108d04:	83 ec 04             	sub    $0x4,%esp
f0108d07:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108d0a:	50                   	push   %eax
f0108d0b:	ff 75 0c             	pushl  0xc(%ebp)
f0108d0e:	ff 75 08             	pushl  0x8(%ebp)
f0108d11:	e8 95 e8 ff ff       	call   f01075ab <get_page_table>
f0108d16:	83 c4 10             	add    $0x10,%esp
f0108d19:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108d1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d1f:	85 c0                	test   %eax,%eax
f0108d21:	74 46                	je     f0108d69 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d26:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d29:	c1 ea 0c             	shr    $0xc,%edx
f0108d2c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108d32:	c1 e2 02             	shl    $0x2,%edx
f0108d35:	01 d0                	add    %edx,%eax
f0108d37:	8b 00                	mov    (%eax),%eax
f0108d39:	83 ec 04             	sub    $0x4,%esp
f0108d3c:	50                   	push   %eax
f0108d3d:	ff 75 0c             	pushl  0xc(%ebp)
f0108d40:	68 9c 5a 12 f0       	push   $0xf0125a9c
f0108d45:	e8 51 81 ff ff       	call   f0100e9b <cprintf>
f0108d4a:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108d4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d53:	c1 ea 0c             	shr    $0xc,%edx
f0108d56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108d5c:	c1 e2 02             	shl    $0x2,%edx
f0108d5f:	01 d0                	add    %edx,%eax
f0108d61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108d67:	eb 14                	jmp    f0108d7d <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108d69:	83 ec 04             	sub    $0x4,%esp
f0108d6c:	68 c4 5a 12 f0       	push   $0xf0125ac4
f0108d71:	6a 47                	push   $0x47
f0108d73:	68 80 5a 12 f0       	push   $0xf0125a80
f0108d78:	e8 9d 74 ff ff       	call   f010021a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d80:	83 ec 08             	sub    $0x8,%esp
f0108d83:	50                   	push   %eax
f0108d84:	6a 00                	push   $0x0
f0108d86:	e8 f7 e1 ff ff       	call   f0106f82 <tlb_invalidate>
f0108d8b:	83 c4 10             	add    $0x10,%esp
}
f0108d8e:	90                   	nop
f0108d8f:	c9                   	leave  
f0108d90:	c3                   	ret    

f0108d91 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108d91:	55                   	push   %ebp
f0108d92:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108d94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d97:	c1 e8 16             	shr    $0x16,%eax
f0108d9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0108da4:	01 d0                	add    %edx,%eax
f0108da6:	8b 00                	mov    (%eax),%eax
f0108da8:	83 e0 20             	and    $0x20,%eax
f0108dab:	85 c0                	test   %eax,%eax
f0108dad:	0f 95 c0             	setne  %al
f0108db0:	0f b6 c0             	movzbl %al,%eax
}
f0108db3:	5d                   	pop    %ebp
f0108db4:	c3                   	ret    

f0108db5 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108db5:	55                   	push   %ebp
f0108db6:	89 e5                	mov    %esp,%ebp
f0108db8:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108dbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108dbe:	c1 e8 16             	shr    $0x16,%eax
f0108dc1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108dc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dcb:	01 d0                	add    %edx,%eax
f0108dcd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108dd0:	c1 ea 16             	shr    $0x16,%edx
f0108dd3:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108dda:	8b 55 08             	mov    0x8(%ebp),%edx
f0108ddd:	01 ca                	add    %ecx,%edx
f0108ddf:	8b 12                	mov    (%edx),%edx
f0108de1:	83 e2 df             	and    $0xffffffdf,%edx
f0108de4:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108de6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108de9:	83 ec 08             	sub    $0x8,%esp
f0108dec:	50                   	push   %eax
f0108ded:	6a 00                	push   $0x0
f0108def:	e8 8e e1 ff ff       	call   f0106f82 <tlb_invalidate>
f0108df4:	83 c4 10             	add    $0x10,%esp
}
f0108df7:	90                   	nop
f0108df8:	c9                   	leave  
f0108df9:	c3                   	ret    

f0108dfa <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108dfa:	55                   	push   %ebp
f0108dfb:	89 e5                	mov    %esp,%ebp
f0108dfd:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e03:	c1 e8 16             	shr    $0x16,%eax
f0108e06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108e0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e10:	01 d0                	add    %edx,%eax
f0108e12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108e18:	0f 20 d8             	mov    %cr3,%eax
f0108e1b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108e1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108e21:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108e24:	90                   	nop
f0108e25:	c9                   	leave  
f0108e26:	c3                   	ret    

f0108e27 <env_page_ws_list_create_element>:

///============================================================================================
/// Dealing with environment working set
#if USE_KHEAP
inline struct WorkingSetElement* env_page_ws_list_create_element(struct Env* e, uint32 virtual_address)
{
f0108e27:	55                   	push   %ebp
f0108e28:	89 e5                	mov    %esp,%ebp
f0108e2a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS2 - #14] [3] PAGE FAULT HANDLER - Create a new working set element
	// Write your code here, remove the panic and write your code
	//panic("env_page_ws_list_create_element() is not implemented yet...!!");
	    if (e->page_WS_list.size == e->page_WS_max_size) {
f0108e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e30:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f0108e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e39:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f0108e3f:	39 c2                	cmp    %eax,%edx
f0108e41:	75 14                	jne    f0108e57 <env_page_ws_list_create_element+0x30>
	        panic("Working set is failed");
f0108e43:	83 ec 04             	sub    $0x4,%esp
f0108e46:	68 3c 5b 12 f0       	push   $0xf0125b3c
f0108e4b:	6a 16                	push   $0x16
f0108e4d:	68 54 5b 12 f0       	push   $0xf0125b54
f0108e52:	e8 c3 73 ff ff       	call   f010021a <_panic>
	    }

	    struct WorkingSetElement* new_element = (struct WorkingSetElement*)kmalloc(sizeof(struct WorkingSetElement));
f0108e57:	83 ec 0c             	sub    $0xc,%esp
f0108e5a:	6a 18                	push   $0x18
f0108e5c:	e8 40 f7 ff ff       	call   f01085a1 <kmalloc>
f0108e61:	83 c4 10             	add    $0x10,%esp
f0108e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    if (new_element == NULL) {
f0108e67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108e6b:	75 14                	jne    f0108e81 <env_page_ws_list_create_element+0x5a>
	        panic("Failed to allocate memory for WorkingSetElement");
f0108e6d:	83 ec 04             	sub    $0x4,%esp
f0108e70:	68 74 5b 12 f0       	push   $0xf0125b74
f0108e75:	6a 1b                	push   $0x1b
f0108e77:	68 54 5b 12 f0       	push   $0xf0125b54
f0108e7c:	e8 99 73 ff ff       	call   f010021a <_panic>
	    }
	    new_element->virtual_address = virtual_address;
f0108e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e84:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e87:	89 10                	mov    %edx,(%eax)
	    return new_element;
f0108e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0108e8c:	c9                   	leave  
f0108e8d:	c3                   	ret    

f0108e8e <env_page_ws_invalidate>:
inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108e8e:	55                   	push   %ebp
f0108e8f:	89 e5                	mov    %esp,%ebp
f0108e91:	83 ec 38             	sub    $0x38,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108e94:	83 ec 0c             	sub    $0xc,%esp
f0108e97:	6a 02                	push   $0x2
f0108e99:	e8 11 54 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0108e9e:	83 c4 10             	add    $0x10,%esp
f0108ea1:	85 c0                	test   %eax,%eax
f0108ea3:	0f 84 db 03 00 00    	je     f0109284 <env_page_ws_invalidate+0x3f6>
	{
		bool found = 0;
f0108ea9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		struct WorkingSetElement *ptr_WS_element = NULL;
f0108eb0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108eb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108eba:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f0108ec0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108ec3:	e9 33 02 00 00       	jmp    f01090fb <env_page_ws_invalidate+0x26d>
		{
			if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ecb:	8b 00                	mov    (%eax),%eax
f0108ecd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ed3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ed8:	89 c2                	mov    %eax,%edx
f0108eda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108edd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ee0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ee3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ee8:	39 c2                	cmp    %eax,%edx
f0108eea:	0f 85 ff 01 00 00    	jne    f01090ef <env_page_ws_invalidate+0x261>
			{
				struct WorkingSetElement* ptr_tmp_WS_element = LIST_FIRST(&(e->SecondList));
f0108ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ef3:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f0108ef9:	89 45 e0             	mov    %eax,-0x20(%ebp)
				unmap_frame(e->env_page_directory, ptr_WS_element->virtual_address);
f0108efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108eff:	8b 10                	mov    (%eax),%edx
f0108f01:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f04:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108f0a:	83 ec 08             	sub    $0x8,%esp
f0108f0d:	52                   	push   %edx
f0108f0e:	50                   	push   %eax
f0108f0f:	e8 87 ea ff ff       	call   f010799b <unmap_frame>
f0108f14:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(e->ActiveList), ptr_WS_element);
f0108f17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108f1b:	75 14                	jne    f0108f31 <env_page_ws_invalidate+0xa3>
f0108f1d:	83 ec 04             	sub    $0x4,%esp
f0108f20:	68 a4 5b 12 f0       	push   $0xf0125ba4
f0108f25:	6a 2c                	push   $0x2c
f0108f27:	68 54 5b 12 f0       	push   $0xf0125b54
f0108f2c:	e8 e9 72 ff ff       	call   f010021a <_panic>
f0108f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f34:	8b 40 10             	mov    0x10(%eax),%eax
f0108f37:	85 c0                	test   %eax,%eax
f0108f39:	74 11                	je     f0108f4c <env_page_ws_invalidate+0xbe>
f0108f3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f3e:	8b 40 10             	mov    0x10(%eax),%eax
f0108f41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108f44:	8b 52 14             	mov    0x14(%edx),%edx
f0108f47:	89 50 14             	mov    %edx,0x14(%eax)
f0108f4a:	eb 0f                	jmp    f0108f5b <env_page_ws_invalidate+0xcd>
f0108f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f4f:	8b 50 14             	mov    0x14(%eax),%edx
f0108f52:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f55:	89 90 98 05 00 00    	mov    %edx,0x598(%eax)
f0108f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f5e:	8b 40 14             	mov    0x14(%eax),%eax
f0108f61:	85 c0                	test   %eax,%eax
f0108f63:	74 11                	je     f0108f76 <env_page_ws_invalidate+0xe8>
f0108f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f68:	8b 40 14             	mov    0x14(%eax),%eax
f0108f6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108f6e:	8b 52 10             	mov    0x10(%edx),%edx
f0108f71:	89 50 10             	mov    %edx,0x10(%eax)
f0108f74:	eb 0f                	jmp    f0108f85 <env_page_ws_invalidate+0xf7>
f0108f76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f79:	8b 50 10             	mov    0x10(%eax),%edx
f0108f7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f7f:	89 90 94 05 00 00    	mov    %edx,0x594(%eax)
f0108f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f88:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0108f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f92:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0108f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f9c:	8b 80 a0 05 00 00    	mov    0x5a0(%eax),%eax
f0108fa2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108fa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fa8:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

				if(ptr_tmp_WS_element != NULL)
f0108fae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108fb2:	0f 84 2e 01 00 00    	je     f01090e6 <env_page_ws_invalidate+0x258>
				{
					LIST_REMOVE(&(e->SecondList), ptr_tmp_WS_element);
f0108fb8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108fbc:	75 14                	jne    f0108fd2 <env_page_ws_invalidate+0x144>
f0108fbe:	83 ec 04             	sub    $0x4,%esp
f0108fc1:	68 a4 5b 12 f0       	push   $0xf0125ba4
f0108fc6:	6a 30                	push   $0x30
f0108fc8:	68 54 5b 12 f0       	push   $0xf0125b54
f0108fcd:	e8 48 72 ff ff       	call   f010021a <_panic>
f0108fd2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108fd5:	8b 40 10             	mov    0x10(%eax),%eax
f0108fd8:	85 c0                	test   %eax,%eax
f0108fda:	74 11                	je     f0108fed <env_page_ws_invalidate+0x15f>
f0108fdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108fdf:	8b 40 10             	mov    0x10(%eax),%eax
f0108fe2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0108fe5:	8b 52 14             	mov    0x14(%edx),%edx
f0108fe8:	89 50 14             	mov    %edx,0x14(%eax)
f0108feb:	eb 0f                	jmp    f0108ffc <env_page_ws_invalidate+0x16e>
f0108fed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108ff0:	8b 50 14             	mov    0x14(%eax),%edx
f0108ff3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ff6:	89 90 a8 05 00 00    	mov    %edx,0x5a8(%eax)
f0108ffc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108fff:	8b 40 14             	mov    0x14(%eax),%eax
f0109002:	85 c0                	test   %eax,%eax
f0109004:	74 11                	je     f0109017 <env_page_ws_invalidate+0x189>
f0109006:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109009:	8b 40 14             	mov    0x14(%eax),%eax
f010900c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010900f:	8b 52 10             	mov    0x10(%edx),%edx
f0109012:	89 50 10             	mov    %edx,0x10(%eax)
f0109015:	eb 0f                	jmp    f0109026 <env_page_ws_invalidate+0x198>
f0109017:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010901a:	8b 50 10             	mov    0x10(%eax),%edx
f010901d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109020:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f0109026:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109029:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109030:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109033:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010903a:	8b 45 08             	mov    0x8(%ebp),%eax
f010903d:	8b 80 b0 05 00 00    	mov    0x5b0(%eax),%eax
f0109043:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109046:	8b 45 08             	mov    0x8(%ebp),%eax
f0109049:	89 90 b0 05 00 00    	mov    %edx,0x5b0(%eax)
					LIST_INSERT_TAIL(&(e->ActiveList), ptr_tmp_WS_element);
f010904f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0109053:	75 14                	jne    f0109069 <env_page_ws_invalidate+0x1db>
f0109055:	83 ec 04             	sub    $0x4,%esp
f0109058:	68 c4 5b 12 f0       	push   $0xf0125bc4
f010905d:	6a 31                	push   $0x31
f010905f:	68 54 5b 12 f0       	push   $0xf0125b54
f0109064:	e8 b1 71 ff ff       	call   f010021a <_panic>
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 90 98 05 00 00    	mov    0x598(%eax),%edx
f0109072:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109075:	89 50 14             	mov    %edx,0x14(%eax)
f0109078:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010907b:	8b 40 14             	mov    0x14(%eax),%eax
f010907e:	85 c0                	test   %eax,%eax
f0109080:	74 11                	je     f0109093 <env_page_ws_invalidate+0x205>
f0109082:	8b 45 08             	mov    0x8(%ebp),%eax
f0109085:	8b 80 98 05 00 00    	mov    0x598(%eax),%eax
f010908b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010908e:	89 50 10             	mov    %edx,0x10(%eax)
f0109091:	eb 0c                	jmp    f010909f <env_page_ws_invalidate+0x211>
f0109093:	8b 45 08             	mov    0x8(%ebp),%eax
f0109096:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109099:	89 90 94 05 00 00    	mov    %edx,0x594(%eax)
f010909f:	8b 45 08             	mov    0x8(%ebp),%eax
f01090a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01090a5:	89 90 98 05 00 00    	mov    %edx,0x598(%eax)
f01090ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01090ae:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f01090b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b8:	8b 80 a0 05 00 00    	mov    0x5a0(%eax),%eax
f01090be:	8d 50 01             	lea    0x1(%eax),%edx
f01090c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01090c4:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)
					pt_set_page_permissions(e->env_page_directory, ptr_tmp_WS_element->virtual_address, PERM_PRESENT, 0);
f01090ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01090cd:	8b 10                	mov    (%eax),%edx
f01090cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01090d2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01090d8:	6a 00                	push   $0x0
f01090da:	6a 01                	push   $0x1
f01090dc:	52                   	push   %edx
f01090dd:	50                   	push   %eax
f01090de:	e8 0e fb ff ff       	call   f0108bf1 <pt_set_page_permissions>
f01090e3:	83 c4 10             	add    $0x10,%esp
				}
				found = 1;
f01090e6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f01090ed:	eb 43                	jmp    f0109132 <env_page_ws_invalidate+0x2a4>
{
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		bool found = 0;
		struct WorkingSetElement *ptr_WS_element = NULL;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01090ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01090f2:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f01090f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090ff:	74 08                	je     f0109109 <env_page_ws_invalidate+0x27b>
f0109101:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109104:	8b 40 10             	mov    0x10(%eax),%eax
f0109107:	eb 05                	jmp    f010910e <env_page_ws_invalidate+0x280>
f0109109:	b8 00 00 00 00       	mov    $0x0,%eax
f010910e:	8b 55 08             	mov    0x8(%ebp),%edx
f0109111:	89 82 9c 05 00 00    	mov    %eax,0x59c(%edx)
f0109117:	8b 45 08             	mov    0x8(%ebp),%eax
f010911a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f0109120:	85 c0                	test   %eax,%eax
f0109122:	0f 85 a0 fd ff ff    	jne    f0108ec8 <env_page_ws_invalidate+0x3a>
f0109128:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010912c:	0f 85 96 fd ff ff    	jne    f0108ec8 <env_page_ws_invalidate+0x3a>
				found = 1;
				break;
			}
		}

		if (!found)
f0109132:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109136:	0f 85 89 02 00 00    	jne    f01093c5 <env_page_ws_invalidate+0x537>
		{
			ptr_WS_element = NULL;
f010913c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0109143:	8b 45 08             	mov    0x8(%ebp),%eax
f0109146:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010914c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010914f:	e9 f4 00 00 00       	jmp    f0109248 <env_page_ws_invalidate+0x3ba>
			{
				if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0109154:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109157:	8b 00                	mov    (%eax),%eax
f0109159:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010915c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010915f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109164:	89 c2                	mov    %eax,%edx
f0109166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109169:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010916c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010916f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109174:	39 c2                	cmp    %eax,%edx
f0109176:	0f 85 c0 00 00 00    	jne    f010923c <env_page_ws_invalidate+0x3ae>
				{
					unmap_frame(e->env_page_directory, ptr_WS_element->virtual_address);
f010917c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010917f:	8b 10                	mov    (%eax),%edx
f0109181:	8b 45 08             	mov    0x8(%ebp),%eax
f0109184:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010918a:	83 ec 08             	sub    $0x8,%esp
f010918d:	52                   	push   %edx
f010918e:	50                   	push   %eax
f010918f:	e8 07 e8 ff ff       	call   f010799b <unmap_frame>
f0109194:	83 c4 10             	add    $0x10,%esp
					LIST_REMOVE(&(e->SecondList), ptr_WS_element);
f0109197:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010919b:	75 14                	jne    f01091b1 <env_page_ws_invalidate+0x323>
f010919d:	83 ec 04             	sub    $0x4,%esp
f01091a0:	68 a4 5b 12 f0       	push   $0xf0125ba4
f01091a5:	6a 41                	push   $0x41
f01091a7:	68 54 5b 12 f0       	push   $0xf0125b54
f01091ac:	e8 69 70 ff ff       	call   f010021a <_panic>
f01091b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091b4:	8b 40 10             	mov    0x10(%eax),%eax
f01091b7:	85 c0                	test   %eax,%eax
f01091b9:	74 11                	je     f01091cc <env_page_ws_invalidate+0x33e>
f01091bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091be:	8b 40 10             	mov    0x10(%eax),%eax
f01091c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01091c4:	8b 52 14             	mov    0x14(%edx),%edx
f01091c7:	89 50 14             	mov    %edx,0x14(%eax)
f01091ca:	eb 0f                	jmp    f01091db <env_page_ws_invalidate+0x34d>
f01091cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091cf:	8b 50 14             	mov    0x14(%eax),%edx
f01091d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d5:	89 90 a8 05 00 00    	mov    %edx,0x5a8(%eax)
f01091db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091de:	8b 40 14             	mov    0x14(%eax),%eax
f01091e1:	85 c0                	test   %eax,%eax
f01091e3:	74 11                	je     f01091f6 <env_page_ws_invalidate+0x368>
f01091e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091e8:	8b 40 14             	mov    0x14(%eax),%eax
f01091eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01091ee:	8b 52 10             	mov    0x10(%edx),%edx
f01091f1:	89 50 10             	mov    %edx,0x10(%eax)
f01091f4:	eb 0f                	jmp    f0109205 <env_page_ws_invalidate+0x377>
f01091f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091f9:	8b 50 10             	mov    0x10(%eax),%edx
f01091fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01091ff:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f0109205:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109208:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010920f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109212:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109219:	8b 45 08             	mov    0x8(%ebp),%eax
f010921c:	8b 80 b0 05 00 00    	mov    0x5b0(%eax),%eax
f0109222:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109225:	8b 45 08             	mov    0x8(%ebp),%eax
f0109228:	89 90 b0 05 00 00    	mov    %edx,0x5b0(%eax)

					kfree(ptr_WS_element);
f010922e:	83 ec 0c             	sub    $0xc,%esp
f0109231:	ff 75 f0             	pushl  -0x10(%ebp)
f0109234:	e8 00 f5 ff ff       	call   f0108739 <kfree>
f0109239:	83 c4 10             	add    $0x10,%esp
		}

		if (!found)
		{
			ptr_WS_element = NULL;
			LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010923c:	8b 45 08             	mov    0x8(%ebp),%eax
f010923f:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f0109245:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109248:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010924c:	74 08                	je     f0109256 <env_page_ws_invalidate+0x3c8>
f010924e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109251:	8b 40 10             	mov    0x10(%eax),%eax
f0109254:	eb 05                	jmp    f010925b <env_page_ws_invalidate+0x3cd>
f0109256:	b8 00 00 00 00       	mov    $0x0,%eax
f010925b:	8b 55 08             	mov    0x8(%ebp),%edx
f010925e:	89 82 ac 05 00 00    	mov    %eax,0x5ac(%edx)
f0109264:	8b 45 08             	mov    0x8(%ebp),%eax
f0109267:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010926d:	85 c0                	test   %eax,%eax
f010926f:	0f 85 df fe ff ff    	jne    f0109154 <env_page_ws_invalidate+0x2c6>
f0109275:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109279:	0f 85 d5 fe ff ff    	jne    f0109154 <env_page_ws_invalidate+0x2c6>

				break;
			}
		}
	}
}
f010927f:	e9 41 01 00 00       	jmp    f01093c5 <env_page_ws_invalidate+0x537>
		}
	}
	else
	{
		struct WorkingSetElement *wse;
		LIST_FOREACH(wse, &(e->page_WS_list))
f0109284:	8b 45 08             	mov    0x8(%ebp),%eax
f0109287:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f010928d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0109290:	e9 f9 00 00 00       	jmp    f010938e <env_page_ws_invalidate+0x500>
		{
			if(ROUNDDOWN(wse->virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0109295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109298:	8b 00                	mov    (%eax),%eax
f010929a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010929d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01092a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01092a5:	89 c2                	mov    %eax,%edx
f01092a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01092aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01092ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01092b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01092b5:	39 c2                	cmp    %eax,%edx
f01092b7:	0f 85 c5 00 00 00    	jne    f0109382 <env_page_ws_invalidate+0x4f4>
			{
				if (e->page_last_WS_element == wse)
f01092bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01092c0:	8b 80 d4 00 00 00    	mov    0xd4(%eax),%eax
f01092c6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092c9:	75 0f                	jne    f01092da <env_page_ws_invalidate+0x44c>
				{
					e->page_last_WS_element = LIST_NEXT(wse);
f01092cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01092ce:	8b 50 10             	mov    0x10(%eax),%edx
f01092d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d4:	89 90 d4 00 00 00    	mov    %edx,0xd4(%eax)
				}
				LIST_REMOVE(&(e->page_WS_list), wse);
f01092da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01092de:	75 14                	jne    f01092f4 <env_page_ws_invalidate+0x466>
f01092e0:	83 ec 04             	sub    $0x4,%esp
f01092e3:	68 a4 5b 12 f0       	push   $0xf0125ba4
f01092e8:	6a 53                	push   $0x53
f01092ea:	68 54 5b 12 f0       	push   $0xf0125b54
f01092ef:	e8 26 6f ff ff       	call   f010021a <_panic>
f01092f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01092f7:	8b 40 10             	mov    0x10(%eax),%eax
f01092fa:	85 c0                	test   %eax,%eax
f01092fc:	74 11                	je     f010930f <env_page_ws_invalidate+0x481>
f01092fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109301:	8b 40 10             	mov    0x10(%eax),%eax
f0109304:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109307:	8b 52 14             	mov    0x14(%edx),%edx
f010930a:	89 50 14             	mov    %edx,0x14(%eax)
f010930d:	eb 0f                	jmp    f010931e <env_page_ws_invalidate+0x490>
f010930f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109312:	8b 50 14             	mov    0x14(%eax),%edx
f0109315:	8b 45 08             	mov    0x8(%ebp),%eax
f0109318:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010931e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109321:	8b 40 14             	mov    0x14(%eax),%eax
f0109324:	85 c0                	test   %eax,%eax
f0109326:	74 11                	je     f0109339 <env_page_ws_invalidate+0x4ab>
f0109328:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010932b:	8b 40 14             	mov    0x14(%eax),%eax
f010932e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109331:	8b 52 10             	mov    0x10(%edx),%edx
f0109334:	89 50 10             	mov    %edx,0x10(%eax)
f0109337:	eb 0f                	jmp    f0109348 <env_page_ws_invalidate+0x4ba>
f0109339:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010933c:	8b 50 10             	mov    0x10(%eax),%edx
f010933f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109342:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f0109348:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010934b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109352:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109355:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010935c:	8b 45 08             	mov    0x8(%ebp),%eax
f010935f:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0109365:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109368:	8b 45 08             	mov    0x8(%ebp),%eax
f010936b:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)

				kfree(wse);
f0109371:	83 ec 0c             	sub    $0xc,%esp
f0109374:	ff 75 ec             	pushl  -0x14(%ebp)
f0109377:	e8 bd f3 ff ff       	call   f0108739 <kfree>
f010937c:	83 c4 10             	add    $0x10,%esp

				break;
f010937f:	90                   	nop
			}
		}
	}
}
f0109380:	eb 43                	jmp    f01093c5 <env_page_ws_invalidate+0x537>
		}
	}
	else
	{
		struct WorkingSetElement *wse;
		LIST_FOREACH(wse, &(e->page_WS_list))
f0109382:	8b 45 08             	mov    0x8(%ebp),%eax
f0109385:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010938b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010938e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0109392:	74 08                	je     f010939c <env_page_ws_invalidate+0x50e>
f0109394:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109397:	8b 40 10             	mov    0x10(%eax),%eax
f010939a:	eb 05                	jmp    f01093a1 <env_page_ws_invalidate+0x513>
f010939c:	b8 00 00 00 00       	mov    $0x0,%eax
f01093a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01093a4:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f01093aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01093ad:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f01093b3:	85 c0                	test   %eax,%eax
f01093b5:	0f 85 da fe ff ff    	jne    f0109295 <env_page_ws_invalidate+0x407>
f01093bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01093bf:	0f 85 d0 fe ff ff    	jne    f0109295 <env_page_ws_invalidate+0x407>

				break;
			}
		}
	}
}
f01093c5:	90                   	nop
f01093c6:	c9                   	leave  
f01093c7:	c3                   	ret    

f01093c8 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01093c8:	55                   	push   %ebp
f01093c9:	89 e5                	mov    %esp,%ebp
f01093cb:	53                   	push   %ebx
f01093cc:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01093cf:	83 ec 0c             	sub    $0xc,%esp
f01093d2:	6a 02                	push   $0x2
f01093d4:	e8 d6 4e 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f01093d9:	83 c4 10             	add    $0x10,%esp
f01093dc:	85 c0                	test   %eax,%eax
f01093de:	0f 84 fe 00 00 00    	je     f01094e2 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01093e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01093eb:	83 ec 0c             	sub    $0xc,%esp
f01093ee:	68 e7 5b 12 f0       	push   $0xf0125be7
f01093f3:	e8 a3 7a ff ff       	call   f0100e9b <cprintf>
f01093f8:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01093fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01093fe:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f0109404:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109407:	eb 2c                	jmp    f0109435 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109409:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010940c:	8b 10                	mov    (%eax),%edx
f010940e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109411:	8d 48 01             	lea    0x1(%eax),%ecx
f0109414:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109417:	83 ec 04             	sub    $0x4,%esp
f010941a:	52                   	push   %edx
f010941b:	50                   	push   %eax
f010941c:	68 01 5c 12 f0       	push   $0xf0125c01
f0109421:	e8 75 7a ff ff       	call   f0100e9b <cprintf>
f0109426:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0109429:	8b 45 08             	mov    0x8(%ebp),%eax
f010942c:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f0109432:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109435:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109439:	74 08                	je     f0109443 <env_page_ws_print+0x7b>
f010943b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010943e:	8b 40 10             	mov    0x10(%eax),%eax
f0109441:	eb 05                	jmp    f0109448 <env_page_ws_print+0x80>
f0109443:	b8 00 00 00 00       	mov    $0x0,%eax
f0109448:	8b 55 08             	mov    0x8(%ebp),%edx
f010944b:	89 82 9c 05 00 00    	mov    %eax,0x59c(%edx)
f0109451:	8b 45 08             	mov    0x8(%ebp),%eax
f0109454:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010945a:	85 c0                	test   %eax,%eax
f010945c:	75 ab                	jne    f0109409 <env_page_ws_print+0x41>
f010945e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109462:	75 a5                	jne    f0109409 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0109464:	83 ec 0c             	sub    $0xc,%esp
f0109467:	68 09 5c 12 f0       	push   $0xf0125c09
f010946c:	e8 2a 7a ff ff       	call   f0100e9b <cprintf>
f0109471:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0109474:	8b 45 08             	mov    0x8(%ebp),%eax
f0109477:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010947d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109480:	eb 2c                	jmp    f01094ae <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109482:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109485:	8b 10                	mov    (%eax),%edx
f0109487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010948a:	8d 48 01             	lea    0x1(%eax),%ecx
f010948d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109490:	83 ec 04             	sub    $0x4,%esp
f0109493:	52                   	push   %edx
f0109494:	50                   	push   %eax
f0109495:	68 01 5c 12 f0       	push   $0xf0125c01
f010949a:	e8 fc 79 ff ff       	call   f0100e9b <cprintf>
f010949f:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01094a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a5:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f01094ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01094ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01094b2:	74 08                	je     f01094bc <env_page_ws_print+0xf4>
f01094b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01094b7:	8b 40 10             	mov    0x10(%eax),%eax
f01094ba:	eb 05                	jmp    f01094c1 <env_page_ws_print+0xf9>
f01094bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01094c1:	8b 55 08             	mov    0x8(%ebp),%edx
f01094c4:	89 82 ac 05 00 00    	mov    %eax,0x5ac(%edx)
f01094ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01094cd:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f01094d3:	85 c0                	test   %eax,%eax
f01094d5:	75 ab                	jne    f0109482 <env_page_ws_print+0xba>
f01094d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01094db:	75 a5                	jne    f0109482 <env_page_ws_print+0xba>
		for (; i < e->page_WS_max_size; ++i)
		{
			cprintf("EMPTY LOCATION");
		}
	}
}
f01094dd:	e9 5d 01 00 00       	jmp    f010963f <env_page_ws_print+0x277>
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
	}
	else
	{
		uint32 i=0;
f01094e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		cprintf("PAGE WS:\n");
f01094e9:	83 ec 0c             	sub    $0xc,%esp
f01094ec:	68 24 5c 12 f0       	push   $0xf0125c24
f01094f1:	e8 a5 79 ff ff       	call   f0100e9b <cprintf>
f01094f6:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement *wse = NULL;
f01094f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH(wse, &(e->page_WS_list))
f0109500:	8b 45 08             	mov    0x8(%ebp),%eax
f0109503:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f0109509:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010950c:	e9 d4 00 00 00       	jmp    f01095e5 <env_page_ws_print+0x21d>
		{
			uint32 virtual_address = wse->virtual_address;
f0109511:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109514:	8b 00                	mov    (%eax),%eax
f0109516:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uint32 time_stamp = wse->time_stamp;
f0109519:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010951c:	8b 40 08             	mov    0x8(%eax),%eax
f010951f:	89 45 e0             	mov    %eax,-0x20(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0109522:	8b 45 08             	mov    0x8(%ebp),%eax
f0109525:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010952b:	83 ec 08             	sub    $0x8,%esp
f010952e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109531:	50                   	push   %eax
f0109532:	e8 7e f7 ff ff       	call   f0108cb5 <pt_get_page_permissions>
f0109537:	83 c4 10             	add    $0x10,%esp
f010953a:	89 45 dc             	mov    %eax,-0x24(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010953d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109540:	83 e0 40             	and    $0x40,%eax
f0109543:	85 c0                	test   %eax,%eax
f0109545:	0f 95 c0             	setne  %al
f0109548:	88 45 db             	mov    %al,-0x25(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010954b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010954e:	83 e0 20             	and    $0x20,%eax
f0109551:	85 c0                	test   %eax,%eax
f0109553:	0f 95 c0             	setne  %al
f0109556:	88 45 da             	mov    %al,-0x26(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0109559:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010955c:	25 00 02 00 00       	and    $0x200,%eax
f0109561:	85 c0                	test   %eax,%eax
f0109563:	0f 95 c0             	setne  %al
f0109566:	88 45 d9             	mov    %al,-0x27(%ebp)

			cprintf("%d: %x",i, virtual_address);
f0109569:	83 ec 04             	sub    $0x4,%esp
f010956c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010956f:	ff 75 ec             	pushl  -0x14(%ebp)
f0109572:	68 2e 5c 12 f0       	push   $0xf0125c2e
f0109577:	e8 1f 79 ff ff       	call   f0100e9b <cprintf>
f010957c:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d",
f010957f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109582:	8b 58 0c             	mov    0xc(%eax),%ebx
f0109585:	0f be 4d d9          	movsbl -0x27(%ebp),%ecx
f0109589:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f010958d:	0f be 45 da          	movsbl -0x26(%ebp),%eax
f0109591:	83 ec 08             	sub    $0x8,%esp
f0109594:	53                   	push   %ebx
f0109595:	ff 75 e0             	pushl  -0x20(%ebp)
f0109598:	51                   	push   %ecx
f0109599:	52                   	push   %edx
f010959a:	50                   	push   %eax
f010959b:	68 38 5c 12 f0       	push   $0xf0125c38
f01095a0:	e8 f6 78 ff ff       	call   f0100e9b <cprintf>
f01095a5:	83 c4 20             	add    $0x20,%esp
					isUsed, isModified, isBuffered, time_stamp, wse->sweeps_counter) ;

			if(wse == e->page_last_WS_element)
f01095a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ab:	8b 80 d4 00 00 00    	mov    0xd4(%eax),%eax
f01095b1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01095b4:	75 10                	jne    f01095c6 <env_page_ws_print+0x1fe>
			{
				cprintf(" <--");
f01095b6:	83 ec 0c             	sub    $0xc,%esp
f01095b9:	68 7f 5c 12 f0       	push   $0xf0125c7f
f01095be:	e8 d8 78 ff ff       	call   f0100e9b <cprintf>
f01095c3:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01095c6:	83 ec 0c             	sub    $0xc,%esp
f01095c9:	68 84 5c 12 f0       	push   $0xf0125c84
f01095ce:	e8 c8 78 ff ff       	call   f0100e9b <cprintf>
f01095d3:	83 c4 10             	add    $0x10,%esp
			i++;
f01095d6:	ff 45 ec             	incl   -0x14(%ebp)
	else
	{
		uint32 i=0;
		cprintf("PAGE WS:\n");
		struct WorkingSetElement *wse = NULL;
		LIST_FOREACH(wse, &(e->page_WS_list))
f01095d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01095dc:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f01095e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01095e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01095e9:	74 08                	je     f01095f3 <env_page_ws_print+0x22b>
f01095eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01095ee:	8b 40 10             	mov    0x10(%eax),%eax
f01095f1:	eb 05                	jmp    f01095f8 <env_page_ws_print+0x230>
f01095f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01095f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01095fb:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f0109601:	8b 45 08             	mov    0x8(%ebp),%eax
f0109604:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010960a:	85 c0                	test   %eax,%eax
f010960c:	0f 85 ff fe ff ff    	jne    f0109511 <env_page_ws_print+0x149>
f0109612:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0109616:	0f 85 f5 fe ff ff    	jne    f0109511 <env_page_ws_print+0x149>
				cprintf(" <--");
			}
			cprintf("\n");
			i++;
		}
		for (; i < e->page_WS_max_size; ++i)
f010961c:	eb 13                	jmp    f0109631 <env_page_ws_print+0x269>
		{
			cprintf("EMPTY LOCATION");
f010961e:	83 ec 0c             	sub    $0xc,%esp
f0109621:	68 86 5c 12 f0       	push   $0xf0125c86
f0109626:	e8 70 78 ff ff       	call   f0100e9b <cprintf>
f010962b:	83 c4 10             	add    $0x10,%esp
				cprintf(" <--");
			}
			cprintf("\n");
			i++;
		}
		for (; i < e->page_WS_max_size; ++i)
f010962e:	ff 45 ec             	incl   -0x14(%ebp)
f0109631:	8b 45 08             	mov    0x8(%ebp),%eax
f0109634:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f010963a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010963d:	77 df                	ja     f010961e <env_page_ws_print+0x256>
		{
			cprintf("EMPTY LOCATION");
		}
	}
}
f010963f:	90                   	nop
f0109640:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109643:	c9                   	leave  
f0109644:	c3                   	ret    

f0109645 <env_table_ws_print>:
}
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0109645:	55                   	push   %ebp
f0109646:	89 e5                	mov    %esp,%ebp
f0109648:	53                   	push   %ebx
f0109649:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010964c:	83 ec 0c             	sub    $0xc,%esp
f010964f:	68 98 5c 12 f0       	push   $0xf0125c98
f0109654:	e8 42 78 ff ff       	call   f0100e9b <cprintf>
f0109659:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010965c:	83 ec 0c             	sub    $0xc,%esp
f010965f:	68 cd 5c 12 f0       	push   $0xf0125ccd
f0109664:	e8 32 78 ff ff       	call   f0100e9b <cprintf>
f0109669:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010966c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109673:	e9 19 01 00 00       	jmp    f0109791 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f0109678:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010967b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010967e:	89 d0                	mov    %edx,%eax
f0109680:	01 c0                	add    %eax,%eax
f0109682:	01 d0                	add    %edx,%eax
f0109684:	c1 e0 03             	shl    $0x3,%eax
f0109687:	01 c8                	add    %ecx,%eax
f0109689:	05 e4 00 00 00       	add    $0xe4,%eax
f010968e:	8a 00                	mov    (%eax),%al
f0109690:	84 c0                	test   %al,%al
f0109692:	74 43                	je     f01096d7 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0109694:	83 ec 0c             	sub    $0xc,%esp
f0109697:	68 86 5c 12 f0       	push   $0xf0125c86
f010969c:	e8 fa 77 ff ff       	call   f0100e9b <cprintf>
f01096a1:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01096a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a7:	8b 80 90 05 00 00    	mov    0x590(%eax),%eax
f01096ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01096b0:	75 10                	jne    f01096c2 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f01096b2:	83 ec 0c             	sub    $0xc,%esp
f01096b5:	68 d8 5c 12 f0       	push   $0xf0125cd8
f01096ba:	e8 dc 77 ff ff       	call   f0100e9b <cprintf>
f01096bf:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01096c2:	83 ec 0c             	sub    $0xc,%esp
f01096c5:	68 84 5c 12 f0       	push   $0xf0125c84
f01096ca:	e8 cc 77 ff ff       	call   f0100e9b <cprintf>
f01096cf:	83 c4 10             	add    $0x10,%esp
			continue;
f01096d2:	e9 b7 00 00 00       	jmp    f010978e <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01096d7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096dd:	89 d0                	mov    %edx,%eax
f01096df:	01 c0                	add    %eax,%eax
f01096e1:	01 d0                	add    %edx,%eax
f01096e3:	c1 e0 03             	shl    $0x3,%eax
f01096e6:	01 c8                	add    %ecx,%eax
f01096e8:	05 e0 00 00 00       	add    $0xe0,%eax
f01096ed:	8b 00                	mov    (%eax),%eax
f01096ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01096f2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096f8:	89 d0                	mov    %edx,%eax
f01096fa:	01 c0                	add    %eax,%eax
f01096fc:	01 d0                	add    %edx,%eax
f01096fe:	c1 e0 03             	shl    $0x3,%eax
f0109701:	01 c8                	add    %ecx,%eax
f0109703:	05 e0 00 00 00       	add    $0xe0,%eax
f0109708:	8b 00                	mov    (%eax),%eax
f010970a:	83 ec 04             	sub    $0x4,%esp
f010970d:	50                   	push   %eax
f010970e:	ff 75 f4             	pushl  -0xc(%ebp)
f0109711:	68 de 5c 12 f0       	push   $0xf0125cde
f0109716:	e8 80 77 ff ff       	call   f0100e9b <cprintf>
f010971b:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f010971e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109721:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109724:	89 d0                	mov    %edx,%eax
f0109726:	01 c0                	add    %eax,%eax
f0109728:	01 d0                	add    %edx,%eax
f010972a:	c1 e0 03             	shl    $0x3,%eax
f010972d:	01 c8                	add    %ecx,%eax
f010972f:	05 e8 00 00 00       	add    $0xe8,%eax
f0109734:	8b 18                	mov    (%eax),%ebx
f0109736:	8b 45 08             	mov    0x8(%ebp),%eax
f0109739:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010973f:	83 ec 08             	sub    $0x8,%esp
f0109742:	ff 75 f0             	pushl  -0x10(%ebp)
f0109745:	50                   	push   %eax
f0109746:	e8 46 f6 ff ff       	call   f0108d91 <pd_is_table_used>
f010974b:	83 c4 10             	add    $0x10,%esp
f010974e:	83 ec 04             	sub    $0x4,%esp
f0109751:	53                   	push   %ebx
f0109752:	50                   	push   %eax
f0109753:	68 f8 5c 12 f0       	push   $0xf0125cf8
f0109758:	e8 3e 77 ff ff       	call   f0100e9b <cprintf>
f010975d:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0109760:	8b 45 08             	mov    0x8(%ebp),%eax
f0109763:	8b 80 90 05 00 00    	mov    0x590(%eax),%eax
f0109769:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010976c:	75 10                	jne    f010977e <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f010976e:	83 ec 0c             	sub    $0xc,%esp
f0109771:	68 7f 5c 12 f0       	push   $0xf0125c7f
f0109776:	e8 20 77 ff ff       	call   f0100e9b <cprintf>
f010977b:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010977e:	83 ec 0c             	sub    $0xc,%esp
f0109781:	68 84 5c 12 f0       	push   $0xf0125c84
f0109786:	e8 10 77 ff ff       	call   f0100e9b <cprintf>
f010978b:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010978e:	ff 45 f4             	incl   -0xc(%ebp)
f0109791:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109795:	0f 86 dd fe ff ff    	jbe    f0109678 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010979b:	90                   	nop
f010979c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010979f:	c9                   	leave  
f01097a0:	c3                   	ret    

f01097a1 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f01097a1:	55                   	push   %ebp
f01097a2:	89 e5                	mov    %esp,%ebp
f01097a4:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01097a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01097ae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01097b5:	eb 22                	jmp    f01097d9 <env_table_ws_get_size+0x38>
f01097b7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097ba:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01097bd:	89 d0                	mov    %edx,%eax
f01097bf:	01 c0                	add    %eax,%eax
f01097c1:	01 d0                	add    %edx,%eax
f01097c3:	c1 e0 03             	shl    $0x3,%eax
f01097c6:	01 c8                	add    %ecx,%eax
f01097c8:	05 e4 00 00 00       	add    $0xe4,%eax
f01097cd:	8a 00                	mov    (%eax),%al
f01097cf:	84 c0                	test   %al,%al
f01097d1:	75 03                	jne    f01097d6 <env_table_ws_get_size+0x35>
f01097d3:	ff 45 f8             	incl   -0x8(%ebp)
f01097d6:	ff 45 fc             	incl   -0x4(%ebp)
f01097d9:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01097dd:	7e d8                	jle    f01097b7 <env_table_ws_get_size+0x16>
	return counter;
f01097df:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01097e2:	c9                   	leave  
f01097e3:	c3                   	ret    

f01097e4 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01097e4:	55                   	push   %ebp
f01097e5:	89 e5                	mov    %esp,%ebp
f01097e7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01097ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01097f1:	eb 4e                	jmp    f0109841 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01097f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097f9:	89 d0                	mov    %edx,%eax
f01097fb:	01 c0                	add    %eax,%eax
f01097fd:	01 d0                	add    %edx,%eax
f01097ff:	c1 e0 03             	shl    $0x3,%eax
f0109802:	01 c8                	add    %ecx,%eax
f0109804:	05 e0 00 00 00       	add    $0xe0,%eax
f0109809:	8b 00                	mov    (%eax),%eax
f010980b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010980e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109811:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109816:	89 c2                	mov    %eax,%edx
f0109818:	8b 45 0c             	mov    0xc(%ebp),%eax
f010981b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010981e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109821:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109826:	39 c2                	cmp    %eax,%edx
f0109828:	75 14                	jne    f010983e <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f010982a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010982d:	83 ec 08             	sub    $0x8,%esp
f0109830:	50                   	push   %eax
f0109831:	ff 75 08             	pushl  0x8(%ebp)
f0109834:	e8 bc 00 00 00       	call   f01098f5 <env_table_ws_clear_entry>
f0109839:	83 c4 10             	add    $0x10,%esp
			break;
f010983c:	eb 09                	jmp    f0109847 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010983e:	ff 45 f4             	incl   -0xc(%ebp)
f0109841:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109845:	7e ac                	jle    f01097f3 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0109847:	90                   	nop
f0109848:	c9                   	leave  
f0109849:	c3                   	ret    

f010984a <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010984a:	55                   	push   %ebp
f010984b:	89 e5                	mov    %esp,%ebp
f010984d:	53                   	push   %ebx
f010984e:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0109851:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109855:	76 19                	jbe    f0109870 <env_table_ws_set_entry+0x26>
f0109857:	68 1c 5d 12 f0       	push   $0xf0125d1c
f010985c:	68 4d 5d 12 f0       	push   $0xf0125d4d
f0109861:	68 37 01 00 00       	push   $0x137
f0109866:	68 54 5b 12 f0       	push   $0xf0125b54
f010986b:	e8 aa 69 ff ff       	call   f010021a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0109870:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0109877:	76 19                	jbe    f0109892 <env_table_ws_set_entry+0x48>
f0109879:	68 64 5d 12 f0       	push   $0xf0125d64
f010987e:	68 4d 5d 12 f0       	push   $0xf0125d4d
f0109883:	68 38 01 00 00       	push   $0x138
f0109888:	68 54 5b 12 f0       	push   $0xf0125b54
f010988d:	e8 88 69 ff ff       	call   f010021a <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0109892:	8b 45 10             	mov    0x10(%ebp),%eax
f0109895:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109898:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010989b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01098a0:	89 c1                	mov    %eax,%ecx
f01098a2:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01098a5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01098a8:	89 d0                	mov    %edx,%eax
f01098aa:	01 c0                	add    %eax,%eax
f01098ac:	01 d0                	add    %edx,%eax
f01098ae:	c1 e0 03             	shl    $0x3,%eax
f01098b1:	01 d8                	add    %ebx,%eax
f01098b3:	05 e0 00 00 00       	add    $0xe0,%eax
f01098b8:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01098ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01098c0:	89 d0                	mov    %edx,%eax
f01098c2:	01 c0                	add    %eax,%eax
f01098c4:	01 d0                	add    %edx,%eax
f01098c6:	c1 e0 03             	shl    $0x3,%eax
f01098c9:	01 c8                	add    %ecx,%eax
f01098cb:	05 e4 00 00 00       	add    $0xe4,%eax
f01098d0:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01098d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01098d9:	89 d0                	mov    %edx,%eax
f01098db:	01 c0                	add    %eax,%eax
f01098dd:	01 d0                	add    %edx,%eax
f01098df:	c1 e0 03             	shl    $0x3,%eax
f01098e2:	01 c8                	add    %ecx,%eax
f01098e4:	05 e8 00 00 00       	add    $0xe8,%eax
f01098e9:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01098ef:	90                   	nop
}
f01098f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01098f3:	c9                   	leave  
f01098f4:	c3                   	ret    

f01098f5 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01098f5:	55                   	push   %ebp
f01098f6:	89 e5                	mov    %esp,%ebp
f01098f8:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01098fb:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01098ff:	76 19                	jbe    f010991a <env_table_ws_clear_entry+0x25>
f0109901:	68 1c 5d 12 f0       	push   $0xf0125d1c
f0109906:	68 4d 5d 12 f0       	push   $0xf0125d4d
f010990b:	68 43 01 00 00       	push   $0x143
f0109910:	68 54 5b 12 f0       	push   $0xf0125b54
f0109915:	e8 00 69 ff ff       	call   f010021a <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f010991a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010991d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109920:	89 d0                	mov    %edx,%eax
f0109922:	01 c0                	add    %eax,%eax
f0109924:	01 d0                	add    %edx,%eax
f0109926:	c1 e0 03             	shl    $0x3,%eax
f0109929:	01 c8                	add    %ecx,%eax
f010992b:	05 e0 00 00 00       	add    $0xe0,%eax
f0109930:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0109936:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109939:	8b 55 0c             	mov    0xc(%ebp),%edx
f010993c:	89 d0                	mov    %edx,%eax
f010993e:	01 c0                	add    %eax,%eax
f0109940:	01 d0                	add    %edx,%eax
f0109942:	c1 e0 03             	shl    $0x3,%eax
f0109945:	01 c8                	add    %ecx,%eax
f0109947:	05 e4 00 00 00       	add    $0xe4,%eax
f010994c:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010994f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109952:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109955:	89 d0                	mov    %edx,%eax
f0109957:	01 c0                	add    %eax,%eax
f0109959:	01 d0                	add    %edx,%eax
f010995b:	c1 e0 03             	shl    $0x3,%eax
f010995e:	01 c8                	add    %ecx,%eax
f0109960:	05 e8 00 00 00       	add    $0xe8,%eax
f0109965:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010996b:	90                   	nop
f010996c:	c9                   	leave  
f010996d:	c3                   	ret    

f010996e <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010996e:	55                   	push   %ebp
f010996f:	89 e5                	mov    %esp,%ebp
f0109971:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0109974:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109978:	76 19                	jbe    f0109993 <env_table_ws_get_virtual_address+0x25>
f010997a:	68 1c 5d 12 f0       	push   $0xf0125d1c
f010997f:	68 4d 5d 12 f0       	push   $0xf0125d4d
f0109984:	68 4b 01 00 00       	push   $0x14b
f0109989:	68 54 5b 12 f0       	push   $0xf0125b54
f010998e:	e8 87 68 ff ff       	call   f010021a <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0109993:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109996:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109999:	89 d0                	mov    %edx,%eax
f010999b:	01 c0                	add    %eax,%eax
f010999d:	01 d0                	add    %edx,%eax
f010999f:	c1 e0 03             	shl    $0x3,%eax
f01099a2:	01 c8                	add    %ecx,%eax
f01099a4:	05 e0 00 00 00       	add    $0xe0,%eax
f01099a9:	8b 00                	mov    (%eax),%eax
f01099ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099b1:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01099b6:	c9                   	leave  
f01099b7:	c3                   	ret    

f01099b8 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01099b8:	55                   	push   %ebp
f01099b9:	89 e5                	mov    %esp,%ebp
f01099bb:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01099be:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01099c2:	76 19                	jbe    f01099dd <env_table_ws_get_time_stamp+0x25>
f01099c4:	68 1c 5d 12 f0       	push   $0xf0125d1c
f01099c9:	68 4d 5d 12 f0       	push   $0xf0125d4d
f01099ce:	68 52 01 00 00       	push   $0x152
f01099d3:	68 54 5b 12 f0       	push   $0xf0125b54
f01099d8:	e8 3d 68 ff ff       	call   f010021a <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01099dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01099e0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01099e3:	89 d0                	mov    %edx,%eax
f01099e5:	01 c0                	add    %eax,%eax
f01099e7:	01 d0                	add    %edx,%eax
f01099e9:	c1 e0 03             	shl    $0x3,%eax
f01099ec:	01 c8                	add    %ecx,%eax
f01099ee:	05 e8 00 00 00       	add    $0xe8,%eax
f01099f3:	8b 00                	mov    (%eax),%eax
}
f01099f5:	c9                   	leave  
f01099f6:	c3                   	ret    

f01099f7 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01099f7:	55                   	push   %ebp
f01099f8:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01099fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01099fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109a00:	89 d0                	mov    %edx,%eax
f0109a02:	01 c0                	add    %eax,%eax
f0109a04:	01 d0                	add    %edx,%eax
f0109a06:	c1 e0 03             	shl    $0x3,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	05 e4 00 00 00       	add    $0xe4,%eax
f0109a10:	8a 00                	mov    (%eax),%al
f0109a12:	0f b6 c0             	movzbl %al,%eax
}
f0109a15:	5d                   	pop    %ebp
f0109a16:	c3                   	ret    

f0109a17 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0109a17:	55                   	push   %ebp
f0109a18:	89 e5                	mov    %esp,%ebp
f0109a1a:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0109a1d:	83 ec 04             	sub    $0x4,%esp
f0109a20:	68 98 5d 12 f0       	push   $0xf0125d98
f0109a25:	6a 1f                	push   $0x1f
f0109a27:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109a2c:	e8 e9 67 ff ff       	call   f010021a <_panic>

f0109a31 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0109a31:	55                   	push   %ebp
f0109a32:	89 e5                	mov    %esp,%ebp
f0109a34:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0109a37:	83 ec 04             	sub    $0x4,%esp
f0109a3a:	68 e4 5d 12 f0       	push   $0xf0125de4
f0109a3f:	6a 32                	push   $0x32
f0109a41:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109a46:	e8 cf 67 ff ff       	call   f010021a <_panic>

f0109a4b <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109a4b:	55                   	push   %ebp
f0109a4c:	89 e5                	mov    %esp,%ebp
f0109a4e:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0109a51:	83 ec 04             	sub    $0x4,%esp
f0109a54:	68 14 5e 12 f0       	push   $0xf0125e14
f0109a59:	6a 41                	push   $0x41
f0109a5b:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109a60:	e8 b5 67 ff ff       	call   f010021a <_panic>

f0109a65 <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0109a65:	55                   	push   %ebp
f0109a66:	89 e5                	mov    %esp,%ebp
f0109a68:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0109a6b:	83 ec 04             	sub    $0x4,%esp
f0109a6e:	68 40 5e 12 f0       	push   $0xf0125e40
f0109a73:	6a 4e                	push   $0x4e
f0109a75:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109a7a:	e8 9b 67 ff ff       	call   f010021a <_panic>

f0109a7f <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109a7f:	55                   	push   %ebp
f0109a80:	89 e5                	mov    %esp,%ebp
f0109a82:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0109a85:	83 ec 04             	sub    $0x4,%esp
f0109a88:	68 70 5e 12 f0       	push   $0xf0125e70
f0109a8d:	6a 57                	push   $0x57
f0109a8f:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109a94:	e8 81 67 ff ff       	call   f010021a <_panic>

f0109a99 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109a99:	55                   	push   %ebp
f0109a9a:	89 e5                	mov    %esp,%ebp
f0109a9c:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0109a9f:	83 ec 04             	sub    $0x4,%esp
f0109aa2:	68 a8 5e 12 f0       	push   $0xf0125ea8
f0109aa7:	6a 63                	push   $0x63
f0109aa9:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109aae:	e8 67 67 ff ff       	call   f010021a <_panic>

f0109ab3 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109ab3:	55                   	push   %ebp
f0109ab4:	89 e5                	mov    %esp,%ebp
f0109ab6:	83 ec 18             	sub    $0x18,%esp

	/*=============================================================================*/

	// Write your code here, remove the panic and write your code
	//panic("allocate_user_mem() is not implemented yet...!!");
	uint32 num_of_pages=size/PAGE_SIZE;
f0109ab9:	8b 45 10             	mov    0x10(%ebp),%eax
f0109abc:	c1 e8 0c             	shr    $0xc,%eax
f0109abf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr=NULL;
f0109ac2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for(uint32 i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE )
f0109ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109acf:	eb 5c                	jmp    f0109b2d <allocate_user_mem+0x7a>
	{
		if(get_page_table(e->env_page_directory,i,&ptr)==TABLE_NOT_EXIST)
f0109ad1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109ada:	83 ec 04             	sub    $0x4,%esp
f0109add:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0109ae0:	52                   	push   %edx
f0109ae1:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ae4:	50                   	push   %eax
f0109ae5:	e8 c1 da ff ff       	call   f01075ab <get_page_table>
f0109aea:	83 c4 10             	add    $0x10,%esp
f0109aed:	83 f8 01             	cmp    $0x1,%eax
f0109af0:	75 18                	jne    f0109b0a <allocate_user_mem+0x57>
		{
			create_page_table(e->env_page_directory,i);
f0109af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109af5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109afb:	83 ec 08             	sub    $0x8,%esp
f0109afe:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b01:	50                   	push   %eax
f0109b02:	e8 fa db ff ff       	call   f0107701 <create_page_table>
f0109b07:	83 c4 10             	add    $0x10,%esp
		}
		pt_set_page_permissions(e->env_page_directory,i,MARKED|PERM_USER|PERM_WRITEABLE,0);
f0109b0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b0d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109b13:	6a 00                	push   $0x0
f0109b15:	68 06 04 00 00       	push   $0x406
f0109b1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b1d:	50                   	push   %eax
f0109b1e:	e8 ce f0 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f0109b23:	83 c4 10             	add    $0x10,%esp

	// Write your code here, remove the panic and write your code
	//panic("allocate_user_mem() is not implemented yet...!!");
	uint32 num_of_pages=size/PAGE_SIZE;
	uint32 *ptr=NULL;
	for(uint32 i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE )
f0109b26:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109b2d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109b30:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b33:	01 d0                	add    %edx,%eax
f0109b35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109b38:	77 97                	ja     f0109ad1 <allocate_user_mem+0x1e>
			create_page_table(e->env_page_directory,i);
		}
		pt_set_page_permissions(e->env_page_directory,i,MARKED|PERM_USER|PERM_WRITEABLE,0);

	}
}
f0109b3a:	90                   	nop
f0109b3b:	c9                   	leave  
f0109b3c:	c3                   	ret    

f0109b3d <free_user_mem>:
//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109b3d:	55                   	push   %ebp
f0109b3e:	89 e5                	mov    %esp,%ebp
f0109b40:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	/*REMOVE THESE LINES BEFORE START CODING */
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");
	//TODO: [PROJECT'23.MS2 - BONUS#2] [2] USER HEAP - free_user_mem() IN O(1): removing page from WS List instead of searching the entire list
	uint32 numofpages = size / PAGE_SIZE;
f0109b43:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b46:	c1 e8 0c             	shr    $0xc,%eax
f0109b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for(uint32 i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE ){
f0109b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109b52:	eb 45                	jmp    f0109b99 <free_user_mem+0x5c>
		pt_set_page_permissions(e->env_page_directory,i,0,MARKED|PERM_PRESENT|PERM_WRITEABLE);
f0109b54:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109b5d:	68 03 04 00 00       	push   $0x403
f0109b62:	6a 00                	push   $0x0
f0109b64:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b67:	50                   	push   %eax
f0109b68:	e8 84 f0 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f0109b6d:	83 c4 10             	add    $0x10,%esp
		//unmap_frame(e->env_page_directory, virtual_address);
		pf_remove_env_page(e,i);
f0109b70:	83 ec 08             	sub    $0x8,%esp
f0109b73:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b76:	ff 75 08             	pushl  0x8(%ebp)
f0109b79:	e8 ca a8 ff ff       	call   f0104448 <pf_remove_env_page>
f0109b7e:	83 c4 10             	add    $0x10,%esp
		env_page_ws_invalidate(e,i);
f0109b81:	83 ec 08             	sub    $0x8,%esp
f0109b84:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b87:	ff 75 08             	pushl  0x8(%ebp)
f0109b8a:	e8 ff f2 ff ff       	call   f0108e8e <env_page_ws_invalidate>
f0109b8f:	83 c4 10             	add    $0x10,%esp
	/*REMOVE THESE LINES BEFORE START CODING */
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");
	//TODO: [PROJECT'23.MS2 - BONUS#2] [2] USER HEAP - free_user_mem() IN O(1): removing page from WS List instead of searching the entire list
	uint32 numofpages = size / PAGE_SIZE;
	for(uint32 i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE ){
f0109b92:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109b99:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109b9c:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b9f:	01 d0                	add    %edx,%eax
f0109ba1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109ba4:	77 ae                	ja     f0109b54 <free_user_mem+0x17>
		//unmap_frame(e->env_page_directory, virtual_address);
		pf_remove_env_page(e,i);
		env_page_ws_invalidate(e,i);
		//virtual_address+=PAGE_SIZE;
	}
}
f0109ba6:	90                   	nop
f0109ba7:	c9                   	leave  
f0109ba8:	c3                   	ret    

f0109ba9 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109ba9:	55                   	push   %ebp
f0109baa:	89 e5                	mov    %esp,%ebp
f0109bac:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109baf:	83 ec 04             	sub    $0x4,%esp
f0109bb2:	68 e0 5e 12 f0       	push   $0xf0125ee0
f0109bb7:	68 a8 00 00 00       	push   $0xa8
f0109bbc:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109bc1:	e8 54 66 ff ff       	call   f010021a <_panic>

f0109bc6 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109bc6:	55                   	push   %ebp
f0109bc7:	89 e5                	mov    %esp,%ebp
f0109bc9:	83 ec 08             	sub    $0x8,%esp
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109bcc:	83 ec 04             	sub    $0x4,%esp
f0109bcf:	68 20 5f 12 f0       	push   $0xf0125f20
f0109bd4:	68 b1 00 00 00       	push   $0xb1
f0109bd9:	68 c6 5d 12 f0       	push   $0xf0125dc6
f0109bde:	e8 37 66 ff ff       	call   f010021a <_panic>

f0109be3 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109be3:	55                   	push   %ebp
f0109be4:	89 e5                	mov    %esp,%ebp
f0109be6:	57                   	push   %edi
f0109be7:	56                   	push   %esi
f0109be8:	81 ec e0 00 00 00    	sub    $0xe0,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109bee:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109bf5:	83 ec 0c             	sub    $0xc,%esp
f0109bf8:	ff 75 08             	pushl  0x8(%ebp)
f0109bfb:	e8 bc 1a 00 00       	call   f010b6bc <get_user_program_info>
f0109c00:	83 c4 10             	add    $0x10,%esp
f0109c03:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109c06:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0109c0a:	75 0a                	jne    f0109c16 <env_create+0x33>
f0109c0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109c11:	e9 a9 09 00 00       	jmp    f010a5bf <env_create+0x9dc>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109c16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109c19:	8b 40 08             	mov    0x8(%eax),%eax
f0109c1c:	89 45 c8             	mov    %eax,-0x38(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109c1f:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%ebp)
f0109c26:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109c29:	83 ec 0c             	sub    $0xc,%esp
f0109c2c:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0109c32:	50                   	push   %eax
f0109c33:	e8 92 0c 00 00       	call   f010a8ca <allocate_environment>
f0109c38:	83 c4 10             	add    $0x10,%esp
f0109c3b:	85 c0                	test   %eax,%eax
f0109c3d:	79 0a                	jns    f0109c49 <env_create+0x66>
	{
		return 0;
f0109c3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0109c44:	e9 76 09 00 00       	jmp    f010a5bf <env_create+0x9dc>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109c49:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109c4c:	8b 00                	mov    (%eax),%eax
f0109c4e:	83 ec 0c             	sub    $0xc,%esp
f0109c51:	50                   	push   %eax
f0109c52:	e8 8d 7e 01 00       	call   f0121ae4 <strlen>
f0109c57:	83 c4 10             	add    $0x10,%esp
f0109c5a:	83 f8 3f             	cmp    $0x3f,%eax
f0109c5d:	7f 1d                	jg     f0109c7c <env_create+0x99>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109c5f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109c62:	8b 00                	mov    (%eax),%eax
f0109c64:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f0109c6a:	83 c2 5c             	add    $0x5c,%edx
f0109c6d:	83 ec 08             	sub    $0x8,%esp
f0109c70:	50                   	push   %eax
f0109c71:	52                   	push   %edx
f0109c72:	e8 bc 7e 01 00       	call   f0121b33 <strcpy>
f0109c77:	83 c4 10             	add    $0x10,%esp
f0109c7a:	eb 1d                	jmp    f0109c99 <env_create+0xb6>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109c7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109c7f:	8b 00                	mov    (%eax),%eax
f0109c81:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f0109c87:	83 c2 5c             	add    $0x5c,%edx
f0109c8a:	83 ec 04             	sub    $0x4,%esp
f0109c8d:	6a 3f                	push   $0x3f
f0109c8f:	50                   	push   %eax
f0109c90:	52                   	push   %edx
f0109c91:	e8 cb 7e 01 00       	call   f0121b61 <strncpy>
f0109c96:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109c99:	e8 fb 11 00 00       	call   f010ae99 <create_user_directory>
f0109c9e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0109ca1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109ca4:	83 ec 0c             	sub    $0xc,%esp
f0109ca7:	50                   	push   %eax
f0109ca8:	e8 ef eb ff ff       	call   f010889c <kheap_physical_address>
f0109cad:	83 c4 10             	add    $0x10,%esp
f0109cb0:	89 45 bc             	mov    %eax,-0x44(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109cb3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109cb9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109cbc:	89 90 dc 00 00 00    	mov    %edx,0xdc(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109cc2:	83 ec 0c             	sub    $0xc,%esp
f0109cc5:	6a 02                	push   $0x2
f0109cc7:	e8 e3 45 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f0109ccc:	83 c4 10             	add    $0x10,%esp
f0109ccf:	85 c0                	test   %eax,%eax
f0109cd1:	74 21                	je     f0109cf4 <env_create+0x111>
	{
		e->SecondListSize = LRU_second_list_size;
f0109cd3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109cd9:	8b 55 10             	mov    0x10(%ebp),%edx
f0109cdc:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109ce2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109ceb:	2b 55 10             	sub    0x10(%ebp),%edx
f0109cee:	89 90 b4 05 00 00    	mov    %edx,0x5b4(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109cf4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109cf8:	75 12                	jne    f0109d0c <env_create+0x129>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109cfa:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109d00:	c7 80 c0 05 00 00 0a 	movl   $0xa,0x5c0(%eax)
f0109d07:	00 00 00 
f0109d0a:	eb 0f                	jmp    f0109d1b <env_create+0x138>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109d0c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109d12:	8b 55 14             	mov    0x14(%ebp),%edx
f0109d15:	89 90 c0 05 00 00    	mov    %edx,0x5c0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109d1b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109d21:	83 ec 04             	sub    $0x4,%esp
f0109d24:	ff 75 bc             	pushl  -0x44(%ebp)
f0109d27:	ff 75 c0             	pushl  -0x40(%ebp)
f0109d2a:	50                   	push   %eax
f0109d2b:	e8 ef 11 00 00       	call   f010af1f <initialize_environment>
f0109d30:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109d33:	0f 20 d8             	mov    %cr3,%eax
f0109d36:	89 45 b0             	mov    %eax,-0x50(%ebp)
	return val;
f0109d39:	8b 45 b0             	mov    -0x50(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0109d3c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	lcr3(e->env_cr3) ;
f0109d3f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109d45:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109d4b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109d51:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109d57:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109d5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int segment_counter=0;
f0109d61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109d68:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109d6e:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f0109d74:	48                   	dec    %eax
f0109d75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0109d78:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
f0109d7f:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109d82:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109d88:	83 ec 08             	sub    $0x8,%esp
f0109d8b:	ff 75 c8             	pushl  -0x38(%ebp)
f0109d8e:	50                   	push   %eax
f0109d8f:	e8 e4 16 00 00       	call   f010b478 <PROGRAM_SEGMENT_FIRST>
f0109d94:	83 c4 0c             	add    $0xc,%esp
f0109d97:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0109d9d:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f0109da3:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109da8:	89 c7                	mov    %eax,%edi
f0109daa:	89 d6                	mov    %edx,%esi
f0109dac:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109dae:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0109db4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0109db7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109dba:	8b 40 10             	mov    0x10(%eax),%eax
f0109dbd:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109dc0:	75 07                	jne    f0109dc9 <env_create+0x1e6>
f0109dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0109dc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109dcf:	e9 f4 02 00 00       	jmp    f010a0c8 <env_create+0x4e5>
	{
		segment_counter++;
f0109dd4:	ff 45 f0             	incl   -0x10(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109dd7:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109dde:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109de1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109de7:	83 ec 0c             	sub    $0xc,%esp
f0109dea:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
f0109df0:	52                   	push   %edx
f0109df1:	ff 75 ec             	pushl  -0x14(%ebp)
f0109df4:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f0109dfa:	52                   	push   %edx
f0109dfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0109dfe:	50                   	push   %eax
f0109dff:	e8 84 0b 00 00       	call   f010a988 <program_segment_alloc_map_copy_workingset>
f0109e04:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109e07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109e0d:	29 45 ec             	sub    %eax,-0x14(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109e10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e13:	8b 00                	mov    (%eax),%eax
f0109e15:	89 45 ac             	mov    %eax,-0x54(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e1b:	8b 40 0c             	mov    0xc(%eax),%eax
f0109e1e:	89 45 a8             	mov    %eax,-0x58(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109e21:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109e24:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0109e27:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109e2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e2f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109e32:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0109e39:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0109e3c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109e3f:	01 d0                	add    %edx,%eax
f0109e41:	48                   	dec    %eax
f0109e42:	89 45 98             	mov    %eax,-0x68(%ebp)
f0109e45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109e48:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e4d:	f7 75 9c             	divl   -0x64(%ebp)
f0109e50:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109e53:	29 d0                	sub    %edx,%eax
f0109e55:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0109e58:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109e5b:	2b 45 a0             	sub    -0x60(%ebp),%eax
f0109e5e:	89 45 90             	mov    %eax,-0x70(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0109e61:	a1 d0 40 3f f0       	mov    0xf03f40d0,%eax
f0109e66:	83 ec 04             	sub    $0x4,%esp
f0109e69:	68 00 10 00 00       	push   $0x1000
f0109e6e:	6a 00                	push   $0x0
f0109e70:	50                   	push   %eax
f0109e71:	e8 5c 7e 01 00       	call   f0121cd2 <memset>
f0109e76:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109e79:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0109e7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109e7f:	8b 15 d0 40 3f f0    	mov    0xf03f40d0,%edx
f0109e85:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109e88:	01 d0                	add    %edx,%eax
f0109e8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109e8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109e90:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0109e93:	eb 13                	jmp    f0109ea8 <env_create+0x2c5>
		{
			*dst_ptr = *src_ptr ;
f0109e95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e98:	8a 10                	mov    (%eax),%dl
f0109e9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109e9d:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109e9f:	ff 45 dc             	incl   -0x24(%ebp)
f0109ea2:	ff 45 e4             	incl   -0x1c(%ebp)
f0109ea5:	ff 45 e0             	incl   -0x20(%ebp)
f0109ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109eab:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f0109eae:	72 e5                	jb     f0109e95 <env_create+0x2b2>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109eb0:	8b 15 d0 40 3f f0    	mov    0xf03f40d0,%edx
f0109eb6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109ebc:	83 ec 04             	sub    $0x4,%esp
f0109ebf:	52                   	push   %edx
f0109ec0:	ff 75 a0             	pushl  -0x60(%ebp)
f0109ec3:	50                   	push   %eax
f0109ec4:	e8 ff a1 ff ff       	call   f01040c8 <pf_add_env_page>
f0109ec9:	83 c4 10             	add    $0x10,%esp
f0109ecc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109ecf:	75 17                	jne    f0109ee8 <env_create+0x305>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109ed1:	83 ec 04             	sub    $0x4,%esp
f0109ed4:	68 4c 5f 12 f0       	push   $0xf0125f4c
f0109ed9:	68 de 00 00 00       	push   $0xde
f0109ede:	68 91 5f 12 f0       	push   $0xf0125f91
f0109ee3:	e8 32 63 ff ff       	call   f010021a <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eeb:	8b 50 04             	mov    0x4(%eax),%edx
f0109eee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109ef1:	01 d0                	add    %edx,%eax
f0109ef3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109ef6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109ef9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109efe:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109f01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f04:	8b 50 04             	mov    0x4(%eax),%edx
f0109f07:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109f0a:	01 d0                	add    %edx,%eax
f0109f0c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109f0f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109f12:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0109f15:	eb 43                	jmp    f0109f5a <env_create+0x377>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109f17:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0109f1a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109f20:	83 ec 04             	sub    $0x4,%esp
f0109f23:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109f26:	52                   	push   %edx
f0109f27:	50                   	push   %eax
f0109f28:	e8 9b a1 ff ff       	call   f01040c8 <pf_add_env_page>
f0109f2d:	83 c4 10             	add    $0x10,%esp
f0109f30:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109f33:	75 17                	jne    f0109f4c <env_create+0x369>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109f35:	83 ec 04             	sub    $0x4,%esp
f0109f38:	68 4c 5f 12 f0       	push   $0xf0125f4c
f0109f3d:	68 eb 00 00 00       	push   $0xeb
f0109f42:	68 91 5f 12 f0       	push   $0xf0125f91
f0109f47:	e8 ce 62 ff ff       	call   f010021a <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109f4c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f0109f53:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f0109f5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109f5d:	3b 45 88             	cmp    -0x78(%ebp),%eax
f0109f60:	72 b5                	jb     f0109f17 <env_create+0x334>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109f62:	a1 d0 40 3f f0       	mov    0xf03f40d0,%eax
f0109f67:	89 45 e0             	mov    %eax,-0x20(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0109f6a:	83 ec 04             	sub    $0x4,%esp
f0109f6d:	68 00 10 00 00       	push   $0x1000
f0109f72:	6a 00                	push   $0x0
f0109f74:	ff 75 e0             	pushl  -0x20(%ebp)
f0109f77:	e8 56 7d 01 00       	call   f0121cd2 <memset>
f0109f7c:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109f7f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109f82:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0109f85:	eb 13                	jmp    f0109f9a <env_create+0x3b7>
		{
			*dst_ptr = *src_ptr;
f0109f87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f8a:	8a 10                	mov    (%eax),%dl
f0109f8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109f8f:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109f91:	ff 45 dc             	incl   -0x24(%ebp)
f0109f94:	ff 45 e4             	incl   -0x1c(%ebp)
f0109f97:	ff 45 e0             	incl   -0x20(%ebp)
f0109f9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109f9d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109fa0:	72 e5                	jb     f0109f87 <env_create+0x3a4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109fa2:	8b 15 d0 40 3f f0    	mov    0xf03f40d0,%edx
f0109fa8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109fae:	83 ec 04             	sub    $0x4,%esp
f0109fb1:	52                   	push   %edx
f0109fb2:	ff 75 88             	pushl  -0x78(%ebp)
f0109fb5:	50                   	push   %eax
f0109fb6:	e8 0d a1 ff ff       	call   f01040c8 <pf_add_env_page>
f0109fbb:	83 c4 10             	add    $0x10,%esp
f0109fbe:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109fc1:	75 17                	jne    f0109fda <env_create+0x3f7>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109fc3:	83 ec 04             	sub    $0x4,%esp
f0109fc6:	68 4c 5f 12 f0       	push   $0xf0125f4c
f0109fcb:	68 fa 00 00 00       	push   $0xfa
f0109fd0:	68 91 5f 12 f0       	push   $0xf0125f91
f0109fd5:	e8 40 62 ff ff       	call   f010021a <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109fda:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0109fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fe4:	8b 50 04             	mov    0x4(%eax),%edx
f0109fe7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109fea:	01 c2                	add    %eax,%edx
f0109fec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109fef:	01 d0                	add    %edx,%eax
f0109ff1:	48                   	dec    %eax
f0109ff2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109ff8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f010a003:	f7 75 80             	divl   -0x80(%ebp)
f010a006:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010a00c:	29 d0                	sub    %edx,%eax
f010a00e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010a011:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a014:	8b 50 08             	mov    0x8(%eax),%edx
f010a017:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010a01a:	01 d0                	add    %edx,%eax
f010a01c:	2b 45 d8             	sub    -0x28(%ebp),%eax
f010a01f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010a025:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010a02c:	eb 41                	jmp    f010a06f <env_create+0x48c>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010a02e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a034:	83 ec 04             	sub    $0x4,%esp
f010a037:	6a 01                	push   $0x1
f010a039:	ff 75 d8             	pushl  -0x28(%ebp)
f010a03c:	50                   	push   %eax
f010a03d:	e8 50 9f ff ff       	call   f0103f92 <pf_add_empty_env_page>
f010a042:	83 c4 10             	add    $0x10,%esp
f010a045:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010a048:	75 17                	jne    f010a061 <env_create+0x47e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010a04a:	83 ec 04             	sub    $0x4,%esp
f010a04d:	68 4c 5f 12 f0       	push   $0xf0125f4c
f010a052:	68 07 01 00 00       	push   $0x107
f010a057:	68 91 5f 12 f0       	push   $0xf0125f91
f010a05c:	e8 b9 61 ff ff       	call   f010021a <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010a061:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f010a068:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f010a06f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010a076:	10 00 00 
f010a079:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010a07f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010a085:	01 d0                	add    %edx,%eax
f010a087:	48                   	dec    %eax
f010a088:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010a08e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010a094:	ba 00 00 00 00       	mov    $0x0,%edx
f010a099:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010a09f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010a0a5:	29 d0                	sub    %edx,%eax
f010a0a7:	89 c2                	mov    %eax,%edx
f010a0a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a0ac:	39 c2                	cmp    %eax,%edx
f010a0ae:	0f 87 7a ff ff ff    	ja     f010a02e <env_create+0x44b>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010a0b4:	83 ec 08             	sub    $0x8,%esp
f010a0b7:	ff 75 c8             	pushl  -0x38(%ebp)
f010a0ba:	ff 75 f4             	pushl  -0xc(%ebp)
f010a0bd:	e8 ab 12 00 00       	call   f010b36d <PROGRAM_SEGMENT_NEXT>
f010a0c2:	83 c4 10             	add    $0x10,%esp
f010a0c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a0c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a0cc:	0f 85 02 fd ff ff    	jne    f0109dd4 <env_create+0x1f1>
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
#if USE_KHEAP
	struct WorkingSetElement* wse ;
	LIST_FOREACH(wse, &(e->page_WS_list))
f010a0d2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a0d8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f010a0de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010a0e1:	eb 7a                	jmp    f010a15d <env_create+0x57a>
	{
		uint32 virtual_address = wse->virtual_address;
f010a0e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a0e6:	8b 00                	mov    (%eax),%eax
f010a0e8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		uint32* ptr_page_table;

		//Here, page tables of all working set pages should be exist in memory
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010a0ee:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a0f4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a0fa:	83 ec 04             	sub    $0x4,%esp
f010a0fd:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f010a103:	52                   	push   %edx
f010a104:	ff b5 6c ff ff ff    	pushl  -0x94(%ebp)
f010a10a:	50                   	push   %eax
f010a10b:	e8 9b d4 ff ff       	call   f01075ab <get_page_table>
f010a110:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010a113:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010a119:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
f010a11f:	c1 ea 0c             	shr    $0xc,%edx
f010a122:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a128:	c1 e2 02             	shl    $0x2,%edx
f010a12b:	01 d0                	add    %edx,%eax
f010a12d:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f010a133:	8b 8d 6c ff ff ff    	mov    -0x94(%ebp),%ecx
f010a139:	c1 e9 0c             	shr    $0xc,%ecx
f010a13c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a142:	c1 e1 02             	shl    $0x2,%ecx
f010a145:	01 ca                	add    %ecx,%edx
f010a147:	8b 12                	mov    (%edx),%edx
f010a149:	83 e2 bf             	and    $0xffffffbf,%edx
f010a14c:	89 10                	mov    %edx,(%eax)
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
#if USE_KHEAP
	struct WorkingSetElement* wse ;
	LIST_FOREACH(wse, &(e->page_WS_list))
f010a14e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a154:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010a15a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010a15d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a163:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a167:	74 08                	je     f010a171 <env_create+0x58e>
f010a169:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a16c:	8b 52 10             	mov    0x10(%edx),%edx
f010a16f:	eb 05                	jmp    f010a176 <env_create+0x593>
f010a171:	ba 00 00 00 00       	mov    $0x0,%edx
f010a176:	89 90 cc 00 00 00    	mov    %edx,0xcc(%eax)
f010a17c:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010a182:	85 c0                	test   %eax,%eax
f010a184:	0f 85 59 ff ff ff    	jne    f010a0e3 <env_create+0x500>
f010a18a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a18e:	0f 85 4f ff ff ff    	jne    f010a0e3 <env_create+0x500>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010a194:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a197:	8b 50 08             	mov    0x8(%eax),%edx
f010a19a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a1a0:	83 ec 08             	sub    $0x8,%esp
f010a1a3:	52                   	push   %edx
f010a1a4:	50                   	push   %eax
f010a1a5:	e8 83 11 00 00       	call   f010b32d <set_environment_entry_point>
f010a1aa:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010a1ad:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a1b3:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f010a1ba:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010a1bd:	c7 85 68 ff ff ff 00 	movl   $0xeebfd000,-0x98(%ebp)
f010a1c4:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010a1c7:	c7 45 d0 00 d0 bf ee 	movl   $0xeebfd000,-0x30(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a1ce:	e9 45 03 00 00       	jmp    f010a518 <env_create+0x935>
	{
		struct FrameInfo *pp = NULL;
f010a1d3:	c7 85 38 ff ff ff 00 	movl   $0x0,-0xc8(%ebp)
f010a1da:	00 00 00 
		allocate_frame(&pp);
f010a1dd:	83 ec 0c             	sub    $0xc,%esp
f010a1e0:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f010a1e6:	50                   	push   %eax
f010a1e7:	e8 fd d1 ff ff       	call   f01073e9 <allocate_frame>
f010a1ec:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010a1ef:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010a1f5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a1fb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a201:	6a 06                	push   $0x6
f010a203:	ff 75 d0             	pushl  -0x30(%ebp)
f010a206:	52                   	push   %edx
f010a207:	50                   	push   %eax
f010a208:	e8 32 d8 ff ff       	call   f0107a3f <loadtime_map_frame>
f010a20d:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010a210:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a213:	83 ec 04             	sub    $0x4,%esp
f010a216:	68 00 10 00 00       	push   $0x1000
f010a21b:	6a 00                	push   $0x0
f010a21d:	50                   	push   %eax
f010a21e:	e8 af 7a 01 00       	call   f0121cd2 <memset>
f010a223:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
#if USE_KHEAP
			wse = env_page_ws_list_create_element(e, (uint32) stackVa);
f010a226:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a22c:	83 ec 08             	sub    $0x8,%esp
f010a22f:	ff 75 d0             	pushl  -0x30(%ebp)
f010a232:	50                   	push   %eax
f010a233:	e8 ef eb ff ff       	call   f0108e27 <env_page_ws_list_create_element>
f010a238:	83 c4 10             	add    $0x10,%esp
f010a23b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			LIST_INSERT_TAIL(&(e->page_WS_list), wse);
f010a23e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a242:	75 17                	jne    f010a25b <env_create+0x678>
f010a244:	83 ec 04             	sub    $0x4,%esp
f010a247:	68 b0 5f 12 f0       	push   $0xf0125fb0
f010a24c:	68 48 01 00 00       	push   $0x148
f010a251:	68 91 5f 12 f0       	push   $0xf0125f91
f010a256:	e8 bf 5f ff ff       	call   f010021a <_panic>
f010a25b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a261:	8b 90 c8 00 00 00    	mov    0xc8(%eax),%edx
f010a267:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a26a:	89 50 14             	mov    %edx,0x14(%eax)
f010a26d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a270:	8b 40 14             	mov    0x14(%eax),%eax
f010a273:	85 c0                	test   %eax,%eax
f010a275:	74 14                	je     f010a28b <env_create+0x6a8>
f010a277:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a27d:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
f010a283:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a286:	89 50 10             	mov    %edx,0x10(%eax)
f010a289:	eb 0f                	jmp    f010a29a <env_create+0x6b7>
f010a28b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a291:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a294:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f010a29a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a2a0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a2a3:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010a2a9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a2ac:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a2b3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a2b9:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010a2bf:	42                   	inc    %edx
f010a2c0:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
			if (LIST_SIZE(&(e->page_WS_list)) == e->page_WS_max_size)
f010a2c6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a2cc:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010a2d2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a2d8:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f010a2de:	39 c2                	cmp    %eax,%edx
f010a2e0:	75 1a                	jne    f010a2fc <env_create+0x719>
			{
				e->page_last_WS_element = LIST_FIRST(&(e->page_WS_list));
f010a2e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a2e8:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f010a2ee:	8b 92 c4 00 00 00    	mov    0xc4(%edx),%edx
f010a2f4:	89 90 d4 00 00 00    	mov    %edx,0xd4(%eax)
f010a2fa:	eb 10                	jmp    f010a30c <env_create+0x729>
			}
			else
			{
				e->page_last_WS_element = NULL;
f010a2fc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a302:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%eax)
f010a309:	00 00 00 
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
			uint32 lastWSIndex = e->page_last_WS_index ++;
			e->page_last_WS_index %= (e->page_WS_max_size);
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a30c:	83 ec 0c             	sub    $0xc,%esp
f010a30f:	6a 02                	push   $0x2
f010a311:	e8 99 3f 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010a316:	83 c4 10             	add    $0x10,%esp
f010a319:	85 c0                	test   %eax,%eax
f010a31b:	0f 84 d3 01 00 00    	je     f010a4f4 <env_create+0x911>
			{
#if USE_KHEAP
				//Remove wse from page_WS_list
				LIST_REMOVE(&(e->page_WS_list), wse);
f010a321:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a325:	75 17                	jne    f010a33e <env_create+0x75b>
f010a327:	83 ec 04             	sub    $0x4,%esp
f010a32a:	68 d3 5f 12 f0       	push   $0xf0125fd3
f010a32f:	68 5b 01 00 00       	push   $0x15b
f010a334:	68 91 5f 12 f0       	push   $0xf0125f91
f010a339:	e8 dc 5e ff ff       	call   f010021a <_panic>
f010a33e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a341:	8b 40 10             	mov    0x10(%eax),%eax
f010a344:	85 c0                	test   %eax,%eax
f010a346:	74 11                	je     f010a359 <env_create+0x776>
f010a348:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a34b:	8b 40 10             	mov    0x10(%eax),%eax
f010a34e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a351:	8b 52 14             	mov    0x14(%edx),%edx
f010a354:	89 50 14             	mov    %edx,0x14(%eax)
f010a357:	eb 12                	jmp    f010a36b <env_create+0x788>
f010a359:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a35f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a362:	8b 52 14             	mov    0x14(%edx),%edx
f010a365:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010a36b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a36e:	8b 40 14             	mov    0x14(%eax),%eax
f010a371:	85 c0                	test   %eax,%eax
f010a373:	74 11                	je     f010a386 <env_create+0x7a3>
f010a375:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a378:	8b 40 14             	mov    0x14(%eax),%eax
f010a37b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a37e:	8b 52 10             	mov    0x10(%edx),%edx
f010a381:	89 50 10             	mov    %edx,0x10(%eax)
f010a384:	eb 12                	jmp    f010a398 <env_create+0x7b5>
f010a386:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a38c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a38f:	8b 52 10             	mov    0x10(%edx),%edx
f010a392:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f010a398:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a39b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a3a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a3a5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3ac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a3b2:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010a3b8:	4a                   	dec    %edx
f010a3b9:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010a3bf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a3c5:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f010a3cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a3d1:	8b 80 b4 05 00 00    	mov    0x5b4(%eax),%eax
f010a3d7:	39 c2                	cmp    %eax,%edx
f010a3d9:	0f 83 8d 00 00 00    	jae    f010a46c <env_create+0x889>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), wse);
f010a3df:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a3e3:	75 17                	jne    f010a3fc <env_create+0x819>
f010a3e5:	83 ec 04             	sub    $0x4,%esp
f010a3e8:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010a3ed:	68 60 01 00 00       	push   $0x160
f010a3f2:	68 91 5f 12 f0       	push   $0xf0125f91
f010a3f7:	e8 1e 5e ff ff       	call   f010021a <_panic>
f010a3fc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a402:	8b 90 94 05 00 00    	mov    0x594(%eax),%edx
f010a408:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a40b:	89 50 10             	mov    %edx,0x10(%eax)
f010a40e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a411:	8b 40 10             	mov    0x10(%eax),%eax
f010a414:	85 c0                	test   %eax,%eax
f010a416:	74 14                	je     f010a42c <env_create+0x849>
f010a418:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a41e:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f010a424:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a427:	89 50 14             	mov    %edx,0x14(%eax)
f010a42a:	eb 0f                	jmp    f010a43b <env_create+0x858>
f010a42c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a432:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a435:	89 90 98 05 00 00    	mov    %edx,0x598(%eax)
f010a43b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a441:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a444:	89 90 94 05 00 00    	mov    %edx,0x594(%eax)
f010a44a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a44d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a454:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a45a:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f010a460:	42                   	inc    %edx
f010a461:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)
f010a467:	e9 88 00 00 00       	jmp    f010a4f4 <env_create+0x911>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
f010a46c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010a470:	75 17                	jne    f010a489 <env_create+0x8a6>
f010a472:	83 ec 04             	sub    $0x4,%esp
f010a475:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010a47a:	68 64 01 00 00       	push   $0x164
f010a47f:	68 91 5f 12 f0       	push   $0xf0125f91
f010a484:	e8 91 5d ff ff       	call   f010021a <_panic>
f010a489:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a48f:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010a495:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a498:	89 50 10             	mov    %edx,0x10(%eax)
f010a49b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a49e:	8b 40 10             	mov    0x10(%eax),%eax
f010a4a1:	85 c0                	test   %eax,%eax
f010a4a3:	74 14                	je     f010a4b9 <env_create+0x8d6>
f010a4a5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a4ab:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010a4b1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a4b4:	89 50 14             	mov    %edx,0x14(%eax)
f010a4b7:	eb 0f                	jmp    f010a4c8 <env_create+0x8e5>
f010a4b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a4bf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a4c2:	89 90 a8 05 00 00    	mov    %edx,0x5a8(%eax)
f010a4c8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a4ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a4d1:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010a4d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a4da:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4e1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a4e7:	8b 90 b0 05 00 00    	mov    0x5b0(%eax),%edx
f010a4ed:	42                   	inc    %edx
f010a4ee:	89 90 b0 05 00 00    	mov    %edx,0x5b0(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010a4f4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a4fa:	83 ec 04             	sub    $0x4,%esp
f010a4fd:	6a 01                	push   $0x1
f010a4ff:	ff 75 d0             	pushl  -0x30(%ebp)
f010a502:	50                   	push   %eax
f010a503:	e8 8a 9a ff ff       	call   f0103f92 <pf_add_empty_env_page>
f010a508:	83 c4 10             	add    $0x10,%esp
f010a50b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a511:	81 6d d0 00 10 00 00 	subl   $0x1000,-0x30(%ebp)
f010a518:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a51b:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f010a521:	0f 83 ac fc ff ff    	jae    f010a1d3 <env_create+0x5f0>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a527:	83 ec 0c             	sub    $0xc,%esp
f010a52a:	6a 02                	push   $0x2
f010a52c:	e8 7e 3d 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010a531:	83 c4 10             	add    $0x10,%esp
f010a534:	85 c0                	test   %eax,%eax
f010a536:	74 75                	je     f010a5ad <env_create+0x9ca>
	{
		struct WorkingSetElement * elm = NULL;
f010a538:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f010a53f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a545:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010a54b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a54e:	eb 2e                	jmp    f010a57e <env_create+0x99b>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a550:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a553:	8b 10                	mov    (%eax),%edx
f010a555:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a55b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a561:	6a 01                	push   $0x1
f010a563:	6a 00                	push   $0x0
f010a565:	52                   	push   %edx
f010a566:	50                   	push   %eax
f010a567:	e8 85 e6 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010a56c:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f010a56f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a575:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010a57b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a57e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010a584:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010a588:	74 08                	je     f010a592 <env_create+0x9af>
f010a58a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010a58d:	8b 52 10             	mov    0x10(%edx),%edx
f010a590:	eb 05                	jmp    f010a597 <env_create+0x9b4>
f010a592:	ba 00 00 00 00       	mov    $0x0,%edx
f010a597:	89 90 ac 05 00 00    	mov    %edx,0x5ac(%eax)
f010a59d:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010a5a3:	85 c0                	test   %eax,%eax
f010a5a5:	75 a9                	jne    f010a550 <env_create+0x96d>
f010a5a7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010a5ab:	75 a3                	jne    f010a550 <env_create+0x96d>
f010a5ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010a5b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010a5b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010a5b6:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010a5b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
}
f010a5bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010a5c2:	5e                   	pop    %esi
f010a5c3:	5f                   	pop    %edi
f010a5c4:	5d                   	pop    %ebp
f010a5c5:	c3                   	ret    

f010a5c6 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010a5c6:	55                   	push   %ebp
f010a5c7:	89 e5                	mov    %esp,%ebp
f010a5c9:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010a5cc:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a5d1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a5d4:	74 2e                	je     f010a604 <env_run+0x3e>
	{
		curenv = e ;
f010a5d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d9:	a3 38 37 3f f0       	mov    %eax,0xf03f3738
		curenv->env_runs++ ;
f010a5de:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a5e3:	8b 90 dc 05 00 00    	mov    0x5dc(%eax),%edx
f010a5e9:	42                   	inc    %edx
f010a5ea:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
		lcr3(curenv->env_cr3) ;
f010a5f0:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a5f5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a5fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a5fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a601:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010a604:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a609:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f010a610:	e8 51 a5 ff ff       	call   f0104b66 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010a615:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a61a:	83 ec 0c             	sub    $0xc,%esp
f010a61d:	50                   	push   %eax
f010a61e:	e8 ea 00 00 00       	call   f010a70d <env_pop_tf>

f010a623 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a623:	55                   	push   %ebp
f010a624:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010a626:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f010a627:	5d                   	pop    %ebp
f010a628:	c3                   	ret    

f010a629 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f010a629:	55                   	push   %ebp
f010a62a:	89 e5                	mov    %esp,%ebp
f010a62c:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f010a62f:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a634:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a637:	83 ec 0c             	sub    $0xc,%esp
f010a63a:	50                   	push   %eax
f010a63b:	e8 34 ae ff ff       	call   f0105474 <sched_exit_env>
f010a640:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010a643:	e8 57 bc ff ff       	call   f010629f <fos_scheduler>

f010a648 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a648:	55                   	push   %ebp
f010a649:	89 e5                	mov    %esp,%ebp
f010a64b:	53                   	push   %ebx
f010a64c:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a64f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a653:	75 15                	jne    f010a66a <envid2env+0x22>
		*env_store = curenv;
f010a655:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010a65b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a65e:	89 10                	mov    %edx,(%eax)
		return 0;
f010a660:	b8 00 00 00 00       	mov    $0x0,%eax
f010a665:	e9 9e 00 00 00       	jmp    f010a708 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a66a:	8b 1d 34 37 3f f0    	mov    0xf03f3734,%ebx
f010a670:	83 ec 0c             	sub    $0xc,%esp
f010a673:	68 b1 02 00 00       	push   $0x2b1
f010a678:	e8 e9 61 01 00       	call   f0120866 <nearest_pow2_ceil>
f010a67d:	83 c4 10             	add    $0x10,%esp
f010a680:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a683:	8b 45 08             	mov    0x8(%ebp),%eax
f010a686:	21 c2                	and    %eax,%edx
f010a688:	89 d0                	mov    %edx,%eax
f010a68a:	c1 e0 03             	shl    $0x3,%eax
f010a68d:	01 d0                	add    %edx,%eax
f010a68f:	01 c0                	add    %eax,%eax
f010a691:	01 d0                	add    %edx,%eax
f010a693:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a69a:	01 d0                	add    %edx,%eax
f010a69c:	c1 e0 04             	shl    $0x4,%eax
f010a69f:	01 d8                	add    %ebx,%eax
f010a6a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a6a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a6a7:	8b 40 54             	mov    0x54(%eax),%eax
f010a6aa:	85 c0                	test   %eax,%eax
f010a6ac:	74 0b                	je     f010a6b9 <envid2env+0x71>
f010a6ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a6b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a6b4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a6b7:	74 10                	je     f010a6c9 <envid2env+0x81>
		*env_store = 0;
f010a6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a6c2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a6c7:	eb 3f                	jmp    f010a708 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a6c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a6cd:	74 2c                	je     f010a6fb <envid2env+0xb3>
f010a6cf:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a6d4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a6d7:	74 22                	je     f010a6fb <envid2env+0xb3>
f010a6d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a6dc:	8b 50 50             	mov    0x50(%eax),%edx
f010a6df:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010a6e4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a6e7:	39 c2                	cmp    %eax,%edx
f010a6e9:	74 10                	je     f010a6fb <envid2env+0xb3>
		*env_store = 0;
f010a6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a6f4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a6f9:	eb 0d                	jmp    f010a708 <envid2env+0xc0>
	}

	*env_store = e;
f010a6fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a701:	89 10                	mov    %edx,(%eax)
	return 0;
f010a703:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a708:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a70b:	c9                   	leave  
f010a70c:	c3                   	ret    

f010a70d <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a70d:	55                   	push   %ebp
f010a70e:	89 e5                	mov    %esp,%ebp
f010a710:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a713:	8b 65 08             	mov    0x8(%ebp),%esp
f010a716:	61                   	popa   
f010a717:	07                   	pop    %es
f010a718:	1f                   	pop    %ds
f010a719:	83 c4 08             	add    $0x8,%esp
f010a71c:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a71d:	83 ec 04             	sub    $0x4,%esp
f010a720:	68 17 60 12 f0       	push   $0xf0126017
f010a725:	68 23 02 00 00       	push   $0x223
f010a72a:	68 91 5f 12 f0       	push   $0xf0125f91
f010a72f:	e8 e6 5a ff ff       	call   f010021a <_panic>

f010a734 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a734:	55                   	push   %ebp
f010a735:	89 e5                	mov    %esp,%ebp
f010a737:	53                   	push   %ebx
f010a738:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a73b:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a742:	e9 73 01 00 00       	jmp    f010a8ba <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a747:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a74d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a750:	89 d0                	mov    %edx,%eax
f010a752:	c1 e0 03             	shl    $0x3,%eax
f010a755:	01 d0                	add    %edx,%eax
f010a757:	01 c0                	add    %eax,%eax
f010a759:	01 d0                	add    %edx,%eax
f010a75b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a762:	01 d0                	add    %edx,%eax
f010a764:	c1 e0 04             	shl    $0x4,%eax
f010a767:	01 c8                	add    %ecx,%eax
f010a769:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a770:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a776:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a779:	89 d0                	mov    %edx,%eax
f010a77b:	c1 e0 03             	shl    $0x3,%eax
f010a77e:	01 d0                	add    %edx,%eax
f010a780:	01 c0                	add    %eax,%eax
f010a782:	01 d0                	add    %edx,%eax
f010a784:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a78b:	01 d0                	add    %edx,%eax
f010a78d:	c1 e0 04             	shl    $0x4,%eax
f010a790:	01 c8                	add    %ecx,%eax
f010a792:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a799:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a79f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7a2:	89 d0                	mov    %edx,%eax
f010a7a4:	c1 e0 03             	shl    $0x3,%eax
f010a7a7:	01 d0                	add    %edx,%eax
f010a7a9:	01 c0                	add    %eax,%eax
f010a7ab:	01 d0                	add    %edx,%eax
f010a7ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a7b4:	01 d0                	add    %edx,%eax
f010a7b6:	c1 e0 04             	shl    $0x4,%eax
f010a7b9:	01 c8                	add    %ecx,%eax
f010a7bb:	85 c0                	test   %eax,%eax
f010a7bd:	75 17                	jne    f010a7d6 <env_init+0xa2>
f010a7bf:	83 ec 04             	sub    $0x4,%esp
f010a7c2:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010a7c7:	68 3f 02 00 00       	push   $0x23f
f010a7cc:	68 91 5f 12 f0       	push   $0xf0125f91
f010a7d1:	e8 44 5a ff ff       	call   f010021a <_panic>
f010a7d6:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a7dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7df:	89 d0                	mov    %edx,%eax
f010a7e1:	c1 e0 03             	shl    $0x3,%eax
f010a7e4:	01 d0                	add    %edx,%eax
f010a7e6:	01 c0                	add    %eax,%eax
f010a7e8:	01 d0                	add    %edx,%eax
f010a7ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a7f1:	01 d0                	add    %edx,%eax
f010a7f3:	c1 e0 04             	shl    $0x4,%eax
f010a7f6:	01 c8                	add    %ecx,%eax
f010a7f8:	8b 15 3c 37 3f f0    	mov    0xf03f373c,%edx
f010a7fe:	89 50 44             	mov    %edx,0x44(%eax)
f010a801:	8b 40 44             	mov    0x44(%eax),%eax
f010a804:	85 c0                	test   %eax,%eax
f010a806:	74 2d                	je     f010a835 <env_init+0x101>
f010a808:	8b 0d 3c 37 3f f0    	mov    0xf03f373c,%ecx
f010a80e:	8b 1d 34 37 3f f0    	mov    0xf03f3734,%ebx
f010a814:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a817:	89 d0                	mov    %edx,%eax
f010a819:	c1 e0 03             	shl    $0x3,%eax
f010a81c:	01 d0                	add    %edx,%eax
f010a81e:	01 c0                	add    %eax,%eax
f010a820:	01 d0                	add    %edx,%eax
f010a822:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a829:	01 d0                	add    %edx,%eax
f010a82b:	c1 e0 04             	shl    $0x4,%eax
f010a82e:	01 d8                	add    %ebx,%eax
f010a830:	89 41 48             	mov    %eax,0x48(%ecx)
f010a833:	eb 27                	jmp    f010a85c <env_init+0x128>
f010a835:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a83b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a83e:	89 d0                	mov    %edx,%eax
f010a840:	c1 e0 03             	shl    $0x3,%eax
f010a843:	01 d0                	add    %edx,%eax
f010a845:	01 c0                	add    %eax,%eax
f010a847:	01 d0                	add    %edx,%eax
f010a849:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a850:	01 d0                	add    %edx,%eax
f010a852:	c1 e0 04             	shl    $0x4,%eax
f010a855:	01 c8                	add    %ecx,%eax
f010a857:	a3 40 37 3f f0       	mov    %eax,0xf03f3740
f010a85c:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a862:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a865:	89 d0                	mov    %edx,%eax
f010a867:	c1 e0 03             	shl    $0x3,%eax
f010a86a:	01 d0                	add    %edx,%eax
f010a86c:	01 c0                	add    %eax,%eax
f010a86e:	01 d0                	add    %edx,%eax
f010a870:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a877:	01 d0                	add    %edx,%eax
f010a879:	c1 e0 04             	shl    $0x4,%eax
f010a87c:	01 c8                	add    %ecx,%eax
f010a87e:	a3 3c 37 3f f0       	mov    %eax,0xf03f373c
f010a883:	8b 0d 34 37 3f f0    	mov    0xf03f3734,%ecx
f010a889:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a88c:	89 d0                	mov    %edx,%eax
f010a88e:	c1 e0 03             	shl    $0x3,%eax
f010a891:	01 d0                	add    %edx,%eax
f010a893:	01 c0                	add    %eax,%eax
f010a895:	01 d0                	add    %edx,%eax
f010a897:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a89e:	01 d0                	add    %edx,%eax
f010a8a0:	c1 e0 04             	shl    $0x4,%eax
f010a8a3:	01 c8                	add    %ecx,%eax
f010a8a5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a8ac:	a1 48 37 3f f0       	mov    0xf03f3748,%eax
f010a8b1:	40                   	inc    %eax
f010a8b2:	a3 48 37 3f f0       	mov    %eax,0xf03f3748
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a8b7:	ff 4d f4             	decl   -0xc(%ebp)
f010a8ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8be:	0f 89 83 fe ff ff    	jns    f010a747 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a8c4:	90                   	nop
f010a8c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8c8:	c9                   	leave  
f010a8c9:	c3                   	ret    

f010a8ca <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a8ca:	55                   	push   %ebp
f010a8cb:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a8cd:	8b 15 3c 37 3f f0    	mov    0xf03f373c,%edx
f010a8d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d6:	89 10                	mov    %edx,(%eax)
f010a8d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8db:	8b 00                	mov    (%eax),%eax
f010a8dd:	85 c0                	test   %eax,%eax
f010a8df:	75 07                	jne    f010a8e8 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a8e1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a8e6:	eb 11                	jmp    f010a8f9 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a8e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8eb:	8b 00                	mov    (%eax),%eax
f010a8ed:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a8f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8f9:	5d                   	pop    %ebp
f010a8fa:	c3                   	ret    

f010a8fb <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a8fb:	55                   	push   %ebp
f010a8fc:	89 e5                	mov    %esp,%ebp
f010a8fe:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a901:	83 ec 04             	sub    $0x4,%esp
f010a904:	68 f0 05 00 00       	push   $0x5f0
f010a909:	6a 00                	push   $0x0
f010a90b:	ff 75 08             	pushl  0x8(%ebp)
f010a90e:	e8 bf 73 01 00       	call   f0121cd2 <memset>
f010a913:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a916:	8b 45 08             	mov    0x8(%ebp),%eax
f010a919:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a920:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a924:	75 17                	jne    f010a93d <free_environment+0x42>
f010a926:	83 ec 04             	sub    $0x4,%esp
f010a929:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010a92e:	68 5c 02 00 00       	push   $0x25c
f010a933:	68 91 5f 12 f0       	push   $0xf0125f91
f010a938:	e8 dd 58 ff ff       	call   f010021a <_panic>
f010a93d:	8b 15 3c 37 3f f0    	mov    0xf03f373c,%edx
f010a943:	8b 45 08             	mov    0x8(%ebp),%eax
f010a946:	89 50 44             	mov    %edx,0x44(%eax)
f010a949:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94c:	8b 40 44             	mov    0x44(%eax),%eax
f010a94f:	85 c0                	test   %eax,%eax
f010a951:	74 0d                	je     f010a960 <free_environment+0x65>
f010a953:	a1 3c 37 3f f0       	mov    0xf03f373c,%eax
f010a958:	8b 55 08             	mov    0x8(%ebp),%edx
f010a95b:	89 50 48             	mov    %edx,0x48(%eax)
f010a95e:	eb 08                	jmp    f010a968 <free_environment+0x6d>
f010a960:	8b 45 08             	mov    0x8(%ebp),%eax
f010a963:	a3 40 37 3f f0       	mov    %eax,0xf03f3740
f010a968:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96b:	a3 3c 37 3f f0       	mov    %eax,0xf03f373c
f010a970:	8b 45 08             	mov    0x8(%ebp),%eax
f010a973:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a97a:	a1 48 37 3f f0       	mov    0xf03f3748,%eax
f010a97f:	40                   	inc    %eax
f010a980:	a3 48 37 3f f0       	mov    %eax,0xf03f3748
}
f010a985:	90                   	nop
f010a986:	c9                   	leave  
f010a987:	c3                   	ret    

f010a988 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a988:	55                   	push   %ebp
f010a989:	89 e5                	mov    %esp,%ebp
f010a98b:	53                   	push   %ebx
f010a98c:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a98f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a992:	8b 40 0c             	mov    0xc(%eax),%eax
f010a995:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a998:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a99b:	8b 40 08             	mov    0x8(%eax),%eax
f010a99e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a9a1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a9a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a9ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a9ae:	01 c2                	add    %eax,%edx
f010a9b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a9b3:	01 d0                	add    %edx,%eax
f010a9b5:	48                   	dec    %eax
f010a9b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a9b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a9bc:	ba 00 00 00 00       	mov    $0x0,%edx
f010a9c1:	f7 75 dc             	divl   -0x24(%ebp)
f010a9c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a9c7:	29 d0                	sub    %edx,%eax
f010a9c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a9cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a9cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a9d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a9d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a9dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a9e4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

	*allocated_pages = 0;
f010a9eb:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a9f4:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a9fb:	0f 85 f8 03 00 00    	jne    f010adf9 <program_segment_alloc_map_copy_workingset+0x471>
f010aa01:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa04:	83 c0 5c             	add    $0x5c,%eax
f010aa07:	83 ec 08             	sub    $0x8,%esp
f010aa0a:	68 23 60 12 f0       	push   $0xf0126023
f010aa0f:	50                   	push   %eax
f010aa10:	e8 db 71 01 00       	call   f0121bf0 <strcmp>
f010aa15:	83 c4 10             	add    $0x10,%esp
f010aa18:	85 c0                	test   %eax,%eax
f010aa1a:	0f 84 d9 03 00 00    	je     f010adf9 <program_segment_alloc_map_copy_workingset+0x471>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010aa20:	8b 45 14             	mov    0x14(%ebp),%eax
f010aa23:	83 f8 06             	cmp    $0x6,%eax
f010aa26:	76 05                	jbe    f010aa2d <program_segment_alloc_map_copy_workingset+0xa5>
f010aa28:	b8 06 00 00 00       	mov    $0x6,%eax
f010aa2d:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010aa30:	e9 c4 03 00 00       	jmp    f010adf9 <program_segment_alloc_map_copy_workingset+0x471>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010aa35:	83 ec 0c             	sub    $0xc,%esp
f010aa38:	8d 45 bc             	lea    -0x44(%ebp),%eax
f010aa3b:	50                   	push   %eax
f010aa3c:	e8 a8 c9 ff ff       	call   f01073e9 <allocate_frame>
f010aa41:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010aa44:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010aa47:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010aa50:	6a 06                	push   $0x6
f010aa52:	ff 75 f4             	pushl  -0xc(%ebp)
f010aa55:	52                   	push   %edx
f010aa56:	50                   	push   %eax
f010aa57:	e8 e3 cf ff ff       	call   f0107a3f <loadtime_map_frame>
f010aa5c:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

#if USE_KHEAP
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
f010aa5f:	83 ec 08             	sub    $0x8,%esp
f010aa62:	ff 75 f4             	pushl  -0xc(%ebp)
f010aa65:	ff 75 08             	pushl  0x8(%ebp)
f010aa68:	e8 ba e3 ff ff       	call   f0108e27 <env_page_ws_list_create_element>
f010aa6d:	83 c4 10             	add    $0x10,%esp
f010aa70:	89 45 cc             	mov    %eax,-0x34(%ebp)
		wse->time_stamp = 0;
f010aa73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aa76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
f010aa7d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010aa81:	75 17                	jne    f010aa9a <program_segment_alloc_map_copy_workingset+0x112>
f010aa83:	83 ec 04             	sub    $0x4,%esp
f010aa86:	68 b0 5f 12 f0       	push   $0xf0125fb0
f010aa8b:	68 86 02 00 00       	push   $0x286
f010aa90:	68 91 5f 12 f0       	push   $0xf0125f91
f010aa95:	e8 80 57 ff ff       	call   f010021a <_panic>
f010aa9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9d:	8b 90 c8 00 00 00    	mov    0xc8(%eax),%edx
f010aaa3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aaa6:	89 50 14             	mov    %edx,0x14(%eax)
f010aaa9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aaac:	8b 40 14             	mov    0x14(%eax),%eax
f010aaaf:	85 c0                	test   %eax,%eax
f010aab1:	74 11                	je     f010aac4 <program_segment_alloc_map_copy_workingset+0x13c>
f010aab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab6:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
f010aabc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010aabf:	89 50 10             	mov    %edx,0x10(%eax)
f010aac2:	eb 0c                	jmp    f010aad0 <program_segment_alloc_map_copy_workingset+0x148>
f010aac4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010aaca:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f010aad0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010aad6:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010aadc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aadf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010aae6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae9:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f010aaef:	8d 50 01             	lea    0x1(%eax),%edx
f010aaf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf5:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010aafb:	83 ec 0c             	sub    $0xc,%esp
f010aafe:	6a 02                	push   $0x2
f010ab00:	e8 aa 37 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010ab05:	83 c4 10             	add    $0x10,%esp
f010ab08:	85 c0                	test   %eax,%eax
f010ab0a:	0f 84 b3 01 00 00    	je     f010acc3 <program_segment_alloc_map_copy_workingset+0x33b>
		{
#if USE_KHEAP
			//Remove wse from page_WS_list
			LIST_REMOVE(&(e->page_WS_list), wse);
f010ab10:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ab14:	75 17                	jne    f010ab2d <program_segment_alloc_map_copy_workingset+0x1a5>
f010ab16:	83 ec 04             	sub    $0x4,%esp
f010ab19:	68 d3 5f 12 f0       	push   $0xf0125fd3
f010ab1e:	68 92 02 00 00       	push   $0x292
f010ab23:	68 91 5f 12 f0       	push   $0xf0125f91
f010ab28:	e8 ed 56 ff ff       	call   f010021a <_panic>
f010ab2d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab30:	8b 40 10             	mov    0x10(%eax),%eax
f010ab33:	85 c0                	test   %eax,%eax
f010ab35:	74 11                	je     f010ab48 <program_segment_alloc_map_copy_workingset+0x1c0>
f010ab37:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab3a:	8b 40 10             	mov    0x10(%eax),%eax
f010ab3d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ab40:	8b 52 14             	mov    0x14(%edx),%edx
f010ab43:	89 50 14             	mov    %edx,0x14(%eax)
f010ab46:	eb 0f                	jmp    f010ab57 <program_segment_alloc_map_copy_workingset+0x1cf>
f010ab48:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab4b:	8b 50 14             	mov    0x14(%eax),%edx
f010ab4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab51:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010ab57:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab5a:	8b 40 14             	mov    0x14(%eax),%eax
f010ab5d:	85 c0                	test   %eax,%eax
f010ab5f:	74 11                	je     f010ab72 <program_segment_alloc_map_copy_workingset+0x1ea>
f010ab61:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab64:	8b 40 14             	mov    0x14(%eax),%eax
f010ab67:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ab6a:	8b 52 10             	mov    0x10(%edx),%edx
f010ab6d:	89 50 10             	mov    %edx,0x10(%eax)
f010ab70:	eb 0f                	jmp    f010ab81 <program_segment_alloc_map_copy_workingset+0x1f9>
f010ab72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab75:	8b 50 10             	mov    0x10(%eax),%edx
f010ab78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7b:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f010ab81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab84:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010ab8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab8e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ab95:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab98:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f010ab9e:	8d 50 ff             	lea    -0x1(%eax),%edx
f010aba1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba4:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010abaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010abad:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f010abb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb6:	8b 80 b4 05 00 00    	mov    0x5b4(%eax),%eax
f010abbc:	48                   	dec    %eax
f010abbd:	39 c2                	cmp    %eax,%edx
f010abbf:	0f 83 80 00 00 00    	jae    f010ac45 <program_segment_alloc_map_copy_workingset+0x2bd>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), wse);
f010abc5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010abc9:	75 17                	jne    f010abe2 <program_segment_alloc_map_copy_workingset+0x25a>
f010abcb:	83 ec 04             	sub    $0x4,%esp
f010abce:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010abd3:	68 96 02 00 00       	push   $0x296
f010abd8:	68 91 5f 12 f0       	push   $0xf0125f91
f010abdd:	e8 38 56 ff ff       	call   f010021a <_panic>
f010abe2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe5:	8b 90 94 05 00 00    	mov    0x594(%eax),%edx
f010abeb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010abee:	89 50 10             	mov    %edx,0x10(%eax)
f010abf1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010abf4:	8b 40 10             	mov    0x10(%eax),%eax
f010abf7:	85 c0                	test   %eax,%eax
f010abf9:	74 11                	je     f010ac0c <program_segment_alloc_map_copy_workingset+0x284>
f010abfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfe:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f010ac04:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac07:	89 50 14             	mov    %edx,0x14(%eax)
f010ac0a:	eb 0c                	jmp    f010ac18 <program_segment_alloc_map_copy_workingset+0x290>
f010ac0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac12:	89 90 98 05 00 00    	mov    %edx,0x598(%eax)
f010ac18:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac1e:	89 90 94 05 00 00    	mov    %edx,0x594(%eax)
f010ac24:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ac27:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ac2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac31:	8b 80 a0 05 00 00    	mov    0x5a0(%eax),%eax
f010ac37:	8d 50 01             	lea    0x1(%eax),%edx
f010ac3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3d:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)
f010ac43:	eb 7e                	jmp    f010acc3 <program_segment_alloc_map_copy_workingset+0x33b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
f010ac45:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ac49:	75 17                	jne    f010ac62 <program_segment_alloc_map_copy_workingset+0x2da>
f010ac4b:	83 ec 04             	sub    $0x4,%esp
f010ac4e:	68 f4 5f 12 f0       	push   $0xf0125ff4
f010ac53:	68 9b 02 00 00       	push   $0x29b
f010ac58:	68 91 5f 12 f0       	push   $0xf0125f91
f010ac5d:	e8 b8 55 ff ff       	call   f010021a <_panic>
f010ac62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac65:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010ac6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ac6e:	89 50 10             	mov    %edx,0x10(%eax)
f010ac71:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ac74:	8b 40 10             	mov    0x10(%eax),%eax
f010ac77:	85 c0                	test   %eax,%eax
f010ac79:	74 11                	je     f010ac8c <program_segment_alloc_map_copy_workingset+0x304>
f010ac7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac7e:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010ac84:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac87:	89 50 14             	mov    %edx,0x14(%eax)
f010ac8a:	eb 0c                	jmp    f010ac98 <program_segment_alloc_map_copy_workingset+0x310>
f010ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac92:	89 90 a8 05 00 00    	mov    %edx,0x5a8(%eax)
f010ac98:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac9b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010ac9e:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010aca4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aca7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010acae:	8b 45 08             	mov    0x8(%ebp),%eax
f010acb1:	8b 80 b0 05 00 00    	mov    0x5b0(%eax),%eax
f010acb7:	8d 50 01             	lea    0x1(%eax),%edx
f010acba:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbd:	89 90 b0 05 00 00    	mov    %edx,0x5b0(%eax)
			}
#endif
		}
		//=======================
#if USE_KHEAP
		if (LIST_SIZE(&(e->page_WS_list)) == e->page_WS_max_size)
f010acc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc6:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010accc:	8b 45 08             	mov    0x8(%ebp),%eax
f010accf:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f010acd5:	39 c2                	cmp    %eax,%edx
f010acd7:	75 14                	jne    f010aced <program_segment_alloc_map_copy_workingset+0x365>
		{
			e->page_last_WS_element = LIST_FIRST(&(e->page_WS_list));
f010acd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010acdc:	8b 90 c4 00 00 00    	mov    0xc4(%eax),%edx
f010ace2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace5:	89 90 d4 00 00 00    	mov    %edx,0xd4(%eax)
f010aceb:	eb 0d                	jmp    f010acfa <program_segment_alloc_map_copy_workingset+0x372>
		}
		else
		{
			e->page_last_WS_element = NULL;
f010aced:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf0:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%eax)
f010acf7:	00 00 00 
#else
		e->page_last_WS_index ++;
		e->page_last_WS_index %= (e->page_WS_max_size);
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010acfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acfd:	c1 e8 16             	shr    $0x16,%eax
f010ad00:	89 c2                	mov    %eax,%edx
f010ad02:	8b 45 18             	mov    0x18(%ebp),%eax
f010ad05:	8b 00                	mov    (%eax),%eax
f010ad07:	39 c2                	cmp    %eax,%edx
f010ad09:	0f 84 d3 00 00 00    	je     f010ade2 <program_segment_alloc_map_copy_workingset+0x45a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010ad0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad12:	8b 90 90 05 00 00    	mov    0x590(%eax),%edx
f010ad18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad1b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010ad1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ad21:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ad26:	89 c1                	mov    %eax,%ecx
f010ad28:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010ad2b:	89 d0                	mov    %edx,%eax
f010ad2d:	01 c0                	add    %eax,%eax
f010ad2f:	01 d0                	add    %edx,%eax
f010ad31:	c1 e0 03             	shl    $0x3,%eax
f010ad34:	01 d8                	add    %ebx,%eax
f010ad36:	05 e0 00 00 00       	add    $0xe0,%eax
f010ad3b:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010ad3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad40:	8b 90 90 05 00 00    	mov    0x590(%eax),%edx
f010ad46:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad49:	89 d0                	mov    %edx,%eax
f010ad4b:	01 c0                	add    %eax,%eax
f010ad4d:	01 d0                	add    %edx,%eax
f010ad4f:	c1 e0 03             	shl    $0x3,%eax
f010ad52:	01 c8                	add    %ecx,%eax
f010ad54:	05 e4 00 00 00       	add    $0xe4,%eax
f010ad59:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010ad5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad5f:	8b 90 90 05 00 00    	mov    0x590(%eax),%edx
f010ad65:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad68:	89 d0                	mov    %edx,%eax
f010ad6a:	01 c0                	add    %eax,%eax
f010ad6c:	01 d0                	add    %edx,%eax
f010ad6e:	c1 e0 03             	shl    $0x3,%eax
f010ad71:	01 c8                	add    %ecx,%eax
f010ad73:	05 e8 00 00 00       	add    $0xe8,%eax
f010ad78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010ad7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad81:	8b 80 90 05 00 00    	mov    0x590(%eax),%eax
f010ad87:	8d 50 01             	lea    0x1(%eax),%edx
f010ad8a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad8d:	89 90 90 05 00 00    	mov    %edx,0x590(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010ad93:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad96:	8b 80 90 05 00 00    	mov    0x590(%eax),%eax
f010ad9c:	b9 32 00 00 00       	mov    $0x32,%ecx
f010ada1:	ba 00 00 00 00       	mov    $0x0,%edx
f010ada6:	f7 f1                	div    %ecx
f010ada8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adab:	89 90 90 05 00 00    	mov    %edx,0x590(%eax)
			if (e->table_last_WS_index == 0)
f010adb1:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb4:	8b 80 90 05 00 00    	mov    0x590(%eax),%eax
f010adba:	85 c0                	test   %eax,%eax
f010adbc:	75 17                	jne    f010add5 <program_segment_alloc_map_copy_workingset+0x44d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010adbe:	83 ec 04             	sub    $0x4,%esp
f010adc1:	68 28 60 12 f0       	push   $0xf0126028
f010adc6:	68 c3 02 00 00       	push   $0x2c3
f010adcb:	68 91 5f 12 f0       	push   $0xf0125f91
f010add0:	e8 45 54 ff ff       	call   f010021a <_panic>
			(*lastTableNumber) = PDX(iVA);
f010add5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010add8:	c1 e8 16             	shr    $0x16,%eax
f010addb:	89 c2                	mov    %eax,%edx
f010addd:	8b 45 18             	mov    0x18(%ebp),%eax
f010ade0:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010ade2:	8b 45 10             	mov    0x10(%ebp),%eax
f010ade5:	8b 00                	mov    (%eax),%eax
f010ade7:	8d 50 01             	lea    0x1(%eax),%edx
f010adea:	8b 45 10             	mov    0x10(%ebp),%eax
f010aded:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010adef:	ff 45 f0             	incl   -0x10(%ebp)
f010adf2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010adf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adfc:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010adff:	73 0c                	jae    f010ae0d <program_segment_alloc_map_copy_workingset+0x485>
f010ae01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ae04:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ae07:	0f 82 28 fc ff ff    	jb     f010aa35 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010ae0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae10:	8b 00                	mov    (%eax),%eax
f010ae12:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010ae15:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae18:	8b 40 0c             	mov    0xc(%eax),%eax
f010ae1b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ae1e:	eb 10                	jmp    f010ae30 <program_segment_alloc_map_copy_workingset+0x4a8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010ae20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ae23:	8a 10                	mov    (%eax),%dl
f010ae25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae28:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010ae2a:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010ae2d:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ae30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae33:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ae36:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ae39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ae3e:	89 c2                	mov    %eax,%edx
f010ae40:	8b 45 10             	mov    0x10(%ebp),%eax
f010ae43:	8b 00                	mov    (%eax),%eax
f010ae45:	c1 e0 0c             	shl    $0xc,%eax
f010ae48:	01 c2                	add    %eax,%edx
f010ae4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae4d:	39 c2                	cmp    %eax,%edx
f010ae4f:	76 1d                	jbe    f010ae6e <program_segment_alloc_map_copy_workingset+0x4e6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010ae51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae54:	8b 50 04             	mov    0x4(%eax),%edx
f010ae57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae5a:	01 c2                	add    %eax,%edx
f010ae5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ae5f:	39 c2                	cmp    %eax,%edx
f010ae61:	77 bd                	ja     f010ae20 <program_segment_alloc_map_copy_workingset+0x498>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ae63:	eb 09                	jmp    f010ae6e <program_segment_alloc_map_copy_workingset+0x4e6>
	{
		*dst_ptr = 0;
f010ae65:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae68:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010ae6b:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ae6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae71:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010ae74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ae77:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ae7c:	89 c2                	mov    %eax,%edx
f010ae7e:	8b 45 10             	mov    0x10(%ebp),%eax
f010ae81:	8b 00                	mov    (%eax),%eax
f010ae83:	c1 e0 0c             	shl    $0xc,%eax
f010ae86:	01 c2                	add    %eax,%edx
f010ae88:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae8b:	39 c2                	cmp    %eax,%edx
f010ae8d:	77 d6                	ja     f010ae65 <program_segment_alloc_map_copy_workingset+0x4dd>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010ae8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ae94:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ae97:	c9                   	leave  
f010ae98:	c3                   	ret    

f010ae99 <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010ae99:	55                   	push   %ebp
f010ae9a:	89 e5                	mov    %esp,%ebp
f010ae9c:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010ae9f:	83 ec 0c             	sub    $0xc,%esp
f010aea2:	68 00 10 00 00       	push   $0x1000
f010aea7:	e8 f5 d6 ff ff       	call   f01085a1 <kmalloc>
f010aeac:	83 c4 10             	add    $0x10,%esp
f010aeaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010aeb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aeb6:	75 17                	jne    f010aecf <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010aeb8:	83 ec 04             	sub    $0x4,%esp
f010aebb:	68 cb 60 12 f0       	push   $0xf01260cb
f010aec0:	68 ff 02 00 00       	push   $0x2ff
f010aec5:	68 91 5f 12 f0       	push   $0xf0125f91
f010aeca:	e8 4b 53 ff ff       	call   f010021a <_panic>
	}
	return ptr_user_page_directory;
f010aecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010aed2:	c9                   	leave  
f010aed3:	c3                   	ret    

f010aed4 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010aed4:	55                   	push   %ebp
f010aed5:	89 e5                	mov    %esp,%ebp
f010aed7:	83 ec 18             	sub    $0x18,%esp
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("not implemented yet");

	e->start=daStart;
f010aeda:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010aee0:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
	e->limit=daLimit;
f010aee6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee9:	8b 55 10             	mov    0x10(%ebp),%edx
f010aeec:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
	e->segmentbreak=daStart;
f010aef2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef5:	8b 55 0c             	mov    0xc(%ebp),%edx
f010aef8:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
	uint32 * ptr=NULL;
f010aefe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	initialize_dynamic_allocator(e->start,0);
f010af05:	8b 45 08             	mov    0x8(%ebp),%eax
f010af08:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
f010af0e:	83 ec 08             	sub    $0x8,%esp
f010af11:	6a 00                	push   $0x0
f010af13:	50                   	push   %eax
f010af14:	e8 5f 77 01 00       	call   f0122678 <initialize_dynamic_allocator>
f010af19:	83 c4 10             	add    $0x10,%esp
}
f010af1c:	90                   	nop
f010af1d:	c9                   	leave  
f010af1e:	c3                   	ret    

f010af1f <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010af1f:	55                   	push   %ebp
f010af20:	89 e5                	mov    %esp,%ebp
f010af22:	83 ec 18             	sub    $0x18,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010af25:	8b 45 08             	mov    0x8(%ebp),%eax
f010af28:	8b 55 0c             	mov    0xc(%ebp),%edx
f010af2b:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010af31:	8b 45 08             	mov    0x8(%ebp),%eax
f010af34:	8b 55 10             	mov    0x10(%ebp),%edx
f010af37:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010af3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af44:	eb 1a                	jmp    f010af60 <initialize_environment+0x41>
	{
		e->env_page_directory[i] = 0 ;
f010af46:	8b 45 08             	mov    0x8(%ebp),%eax
f010af49:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010af4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af52:	c1 e2 02             	shl    $0x2,%edx
f010af55:	01 d0                	add    %edx,%eax
f010af57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010af5d:	ff 45 f4             	incl   -0xc(%ebp)
f010af60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af63:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010af68:	76 dc                	jbe    f010af46 <initialize_environment+0x27>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010af6a:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010af71:	eb 25                	jmp    f010af98 <initialize_environment+0x79>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010af73:	8b 45 08             	mov    0x8(%ebp),%eax
f010af76:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010af7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af7f:	c1 e2 02             	shl    $0x2,%edx
f010af82:	01 c2                	add    %eax,%edx
f010af84:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010af89:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010af8c:	c1 e1 02             	shl    $0x2,%ecx
f010af8f:	01 c8                	add    %ecx,%eax
f010af91:	8b 00                	mov    (%eax),%eax
f010af93:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010af95:	ff 45 f4             	incl   -0xc(%ebp)
f010af98:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010af9f:	7e d2                	jle    f010af73 <initialize_environment+0x54>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		LIST_INIT(&(e->page_WS_list));
f010afa1:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa4:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
f010afab:	00 00 00 
f010afae:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb1:	c7 80 c8 00 00 00 00 	movl   $0x0,0xc8(%eax)
f010afb8:	00 00 00 
f010afbb:	8b 45 08             	mov    0x8(%ebp),%eax
f010afbe:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%eax)
f010afc5:	00 00 00 
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010afc8:	83 ec 0c             	sub    $0xc,%esp
f010afcb:	6a 02                	push   $0x2
f010afcd:	e8 dd 32 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010afd2:	83 c4 10             	add    $0x10,%esp
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010afd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010afdc:	eb 54                	jmp    f010b032 <initialize_environment+0x113>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010afde:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010afe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afe4:	89 d0                	mov    %edx,%eax
f010afe6:	01 c0                	add    %eax,%eax
f010afe8:	01 d0                	add    %edx,%eax
f010afea:	c1 e0 03             	shl    $0x3,%eax
f010afed:	01 c8                	add    %ecx,%eax
f010afef:	05 e0 00 00 00       	add    $0xe0,%eax
f010aff4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010affa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010affd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b000:	89 d0                	mov    %edx,%eax
f010b002:	01 c0                	add    %eax,%eax
f010b004:	01 d0                	add    %edx,%eax
f010b006:	c1 e0 03             	shl    $0x3,%eax
f010b009:	01 c8                	add    %ecx,%eax
f010b00b:	05 e4 00 00 00       	add    $0xe4,%eax
f010b010:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010b013:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b019:	89 d0                	mov    %edx,%eax
f010b01b:	01 c0                	add    %eax,%eax
f010b01d:	01 d0                	add    %edx,%eax
f010b01f:	c1 e0 03             	shl    $0x3,%eax
f010b022:	01 c8                	add    %ecx,%eax
f010b024:	05 e8 00 00 00       	add    $0xe8,%eax
f010b029:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b02f:	ff 45 f4             	incl   -0xc(%ebp)
f010b032:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010b036:	7e a6                	jle    f010afde <initialize_environment+0xbf>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010b038:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03b:	c7 80 90 05 00 00 00 	movl   $0x0,0x590(%eax)
f010b042:	00 00 00 

	e->pageFaultsCounter=0;
f010b045:	8b 45 08             	mov    0x8(%ebp),%eax
f010b048:	c7 80 c4 05 00 00 00 	movl   $0x0,0x5c4(%eax)
f010b04f:	00 00 00 
	e->tableFaultsCounter=0;
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	c7 80 c8 05 00 00 00 	movl   $0x0,0x5c8(%eax)
f010b05c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010b05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b062:	c7 80 cc 05 00 00 00 	movl   $0x0,0x5cc(%eax)
f010b069:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010b06c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b06f:	c7 80 d0 05 00 00 00 	movl   $0x0,0x5d0(%eax)
f010b076:	00 00 00 

	e->nModifiedPages=0;
f010b079:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07c:	c7 80 d4 05 00 00 00 	movl   $0x0,0x5d4(%eax)
f010b083:	00 00 00 
	e->nNotModifiedPages=0;
f010b086:	8b 45 08             	mov    0x8(%ebp),%eax
f010b089:	c7 80 d8 05 00 00 00 	movl   $0x0,0x5d8(%eax)
f010b090:	00 00 00 
	e->nClocks = 0;
f010b093:	8b 45 08             	mov    0x8(%ebp),%eax
f010b096:	c7 80 ec 05 00 00 00 	movl   $0x0,0x5ec(%eax)
f010b09d:	00 00 00 

	//2020
	e->nPageIn = 0;
f010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a3:	c7 80 e0 05 00 00 00 	movl   $0x0,0x5e0(%eax)
f010b0aa:	00 00 00 
	e->nPageOut = 0;
f010b0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b0:	c7 80 e4 05 00 00 00 	movl   $0x0,0x5e4(%eax)
f010b0b7:	00 00 00 
	e->nNewPageAdded = 0;
f010b0ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0bd:	c7 80 e8 05 00 00 00 	movl   $0x0,0x5e8(%eax)
f010b0c4:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010b0c7:	83 ec 04             	sub    $0x4,%esp
f010b0ca:	68 00 00 00 82       	push   $0x82000000
f010b0cf:	68 00 00 00 80       	push   $0x80000000
f010b0d4:	ff 75 08             	pushl  0x8(%ebp)
f010b0d7:	e8 f8 fd ff ff       	call   f010aed4 <initialize_uheap_dynamic_allocator>
f010b0dc:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010b0df:	83 ec 0c             	sub    $0xc,%esp
f010b0e2:	ff 75 08             	pushl  0x8(%ebp)
f010b0e5:	e8 06 00 00 00       	call   f010b0f0 <complete_environment_initialization>
f010b0ea:	83 c4 10             	add    $0x10,%esp
}
f010b0ed:	90                   	nop
f010b0ee:	c9                   	leave  
f010b0ef:	c3                   	ret    

f010b0f0 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010b0f0:	55                   	push   %ebp
f010b0f1:	89 e5                	mov    %esp,%ebp
f010b0f3:	53                   	push   %ebx
f010b0f4:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010b0f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0fa:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010b100:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010b106:	8b 45 08             	mov    0x8(%ebp),%eax
f010b109:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010b10f:	83 c8 03             	or     $0x3,%eax
f010b112:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010b114:	8b 45 08             	mov    0x8(%ebp),%eax
f010b117:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010b11d:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010b123:	8b 45 08             	mov    0x8(%ebp),%eax
f010b126:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010b12c:	83 c8 05             	or     $0x5,%eax
f010b12f:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010b13b:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010b13e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b141:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010b148:	00 00 00 
	e->disk_env_tabledir = 0;
f010b14b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b14e:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010b155:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010b158:	8b 45 08             	mov    0x8(%ebp),%eax
f010b15b:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010b162:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010b165:	8b 45 08             	mov    0x8(%ebp),%eax
f010b168:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010b16b:	83 ec 0c             	sub    $0xc,%esp
f010b16e:	68 b1 02 00 00       	push   $0x2b1
f010b173:	e8 23 57 01 00       	call   f012089b <log2_ceil>
f010b178:	83 c4 10             	add    $0x10,%esp
f010b17b:	ba 01 00 00 00       	mov    $0x1,%edx
f010b180:	88 c1                	mov    %al,%cl
f010b182:	d3 e2                	shl    %cl,%edx
f010b184:	89 d0                	mov    %edx,%eax
f010b186:	01 d8                	add    %ebx,%eax
f010b188:	89 c3                	mov    %eax,%ebx
f010b18a:	83 ec 0c             	sub    $0xc,%esp
f010b18d:	68 b1 02 00 00       	push   $0x2b1
f010b192:	e8 cf 56 01 00       	call   f0120866 <nearest_pow2_ceil>
f010b197:	83 c4 10             	add    $0x10,%esp
f010b19a:	f7 d8                	neg    %eax
f010b19c:	21 d8                	and    %ebx,%eax
f010b19e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010b1a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b1a5:	7f 1e                	jg     f010b1c5 <complete_environment_initialization+0xd5>
		generation = 1 << ENVGENSHIFT;
f010b1a7:	83 ec 0c             	sub    $0xc,%esp
f010b1aa:	68 b1 02 00 00       	push   $0x2b1
f010b1af:	e8 e7 56 01 00       	call   f012089b <log2_ceil>
f010b1b4:	83 c4 10             	add    $0x10,%esp
f010b1b7:	ba 01 00 00 00       	mov    $0x1,%edx
f010b1bc:	88 c1                	mov    %al,%cl
f010b1be:	d3 e2                	shl    %cl,%edx
f010b1c0:	89 d0                	mov    %edx,%eax
f010b1c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010b1c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c8:	8b 15 34 37 3f f0    	mov    0xf03f3734,%edx
f010b1ce:	29 d0                	sub    %edx,%eax
f010b1d0:	c1 f8 04             	sar    $0x4,%eax
f010b1d3:	89 c2                	mov    %eax,%edx
f010b1d5:	89 d0                	mov    %edx,%eax
f010b1d7:	c1 e0 03             	shl    $0x3,%eax
f010b1da:	01 d0                	add    %edx,%eax
f010b1dc:	01 c0                	add    %eax,%eax
f010b1de:	01 d0                	add    %edx,%eax
f010b1e0:	c1 e0 03             	shl    $0x3,%eax
f010b1e3:	01 d0                	add    %edx,%eax
f010b1e5:	89 c1                	mov    %eax,%ecx
f010b1e7:	c1 e1 08             	shl    $0x8,%ecx
f010b1ea:	01 c8                	add    %ecx,%eax
f010b1ec:	01 c0                	add    %eax,%eax
f010b1ee:	01 d0                	add    %edx,%eax
f010b1f0:	01 c0                	add    %eax,%eax
f010b1f2:	01 d0                	add    %edx,%eax
f010b1f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010b1fb:	01 d0                	add    %edx,%eax
f010b1fd:	89 c2                	mov    %eax,%edx
f010b1ff:	c1 e2 09             	shl    $0x9,%edx
f010b202:	29 c2                	sub    %eax,%edx
f010b204:	89 d0                	mov    %edx,%eax
f010b206:	f7 d8                	neg    %eax
f010b208:	0b 45 f4             	or     -0xc(%ebp),%eax
f010b20b:	89 c2                	mov    %eax,%edx
f010b20d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b210:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010b213:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010b218:	85 c0                	test   %eax,%eax
f010b21a:	75 0c                	jne    f010b228 <complete_environment_initialization+0x138>
		e->env_parent_id = 0;//no parent;
f010b21c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b21f:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010b226:	eb 0e                	jmp    f010b236 <complete_environment_initialization+0x146>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010b228:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010b22d:	8b 50 4c             	mov    0x4c(%eax),%edx
f010b230:	8b 45 08             	mov    0x8(%ebp),%eax
f010b233:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010b236:	8b 45 08             	mov    0x8(%ebp),%eax
f010b239:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010b240:	8b 45 08             	mov    0x8(%ebp),%eax
f010b243:	c7 80 dc 05 00 00 00 	movl   $0x0,0x5dc(%eax)
f010b24a:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010b24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b250:	83 ec 04             	sub    $0x4,%esp
f010b253:	6a 44                	push   $0x44
f010b255:	6a 00                	push   $0x0
f010b257:	50                   	push   %eax
f010b258:	e8 75 6a 01 00       	call   f0121cd2 <memset>
f010b25d:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010b260:	8b 45 08             	mov    0x8(%ebp),%eax
f010b263:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010b269:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26c:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010b272:	8b 45 08             	mov    0x8(%ebp),%eax
f010b275:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010b27b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b27e:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010b285:	8b 45 08             	mov    0x8(%ebp),%eax
f010b288:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010b28e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b291:	8b 40 38             	mov    0x38(%eax),%eax
f010b294:	80 cc 02             	or     $0x2,%ah
f010b297:	89 c2                	mov    %eax,%edx
f010b299:	8b 45 08             	mov    0x8(%ebp),%eax
f010b29c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010b29f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b2a3:	75 17                	jne    f010b2bc <complete_environment_initialization+0x1cc>
f010b2a5:	83 ec 04             	sub    $0x4,%esp
f010b2a8:	68 d3 5f 12 f0       	push   $0xf0125fd3
f010b2ad:	68 b9 03 00 00       	push   $0x3b9
f010b2b2:	68 91 5f 12 f0       	push   $0xf0125f91
f010b2b7:	e8 5e 4f ff ff       	call   f010021a <_panic>
f010b2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2bf:	8b 40 44             	mov    0x44(%eax),%eax
f010b2c2:	85 c0                	test   %eax,%eax
f010b2c4:	74 11                	je     f010b2d7 <complete_environment_initialization+0x1e7>
f010b2c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2c9:	8b 40 44             	mov    0x44(%eax),%eax
f010b2cc:	8b 55 08             	mov    0x8(%ebp),%edx
f010b2cf:	8b 52 48             	mov    0x48(%edx),%edx
f010b2d2:	89 50 48             	mov    %edx,0x48(%eax)
f010b2d5:	eb 0b                	jmp    f010b2e2 <complete_environment_initialization+0x1f2>
f010b2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2da:	8b 40 48             	mov    0x48(%eax),%eax
f010b2dd:	a3 40 37 3f f0       	mov    %eax,0xf03f3740
f010b2e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e5:	8b 40 48             	mov    0x48(%eax),%eax
f010b2e8:	85 c0                	test   %eax,%eax
f010b2ea:	74 11                	je     f010b2fd <complete_environment_initialization+0x20d>
f010b2ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2ef:	8b 40 48             	mov    0x48(%eax),%eax
f010b2f2:	8b 55 08             	mov    0x8(%ebp),%edx
f010b2f5:	8b 52 44             	mov    0x44(%edx),%edx
f010b2f8:	89 50 44             	mov    %edx,0x44(%eax)
f010b2fb:	eb 0b                	jmp    f010b308 <complete_environment_initialization+0x218>
f010b2fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b300:	8b 40 44             	mov    0x44(%eax),%eax
f010b303:	a3 3c 37 3f f0       	mov    %eax,0xf03f373c
f010b308:	8b 45 08             	mov    0x8(%ebp),%eax
f010b30b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b312:	8b 45 08             	mov    0x8(%ebp),%eax
f010b315:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b31c:	a1 48 37 3f f0       	mov    0xf03f3748,%eax
f010b321:	48                   	dec    %eax
f010b322:	a3 48 37 3f f0       	mov    %eax,0xf03f3748
	return ;
f010b327:	90                   	nop
}
f010b328:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b32b:	c9                   	leave  
f010b32c:	c3                   	ret    

f010b32d <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010b32d:	55                   	push   %ebp
f010b32e:	89 e5                	mov    %esp,%ebp
f010b330:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b333:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b336:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b33c:	8b 00                	mov    (%eax),%eax
f010b33e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b343:	74 17                	je     f010b35c <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010b345:	83 ec 04             	sub    $0x4,%esp
f010b348:	68 e8 60 12 f0       	push   $0xf01260e8
f010b34d:	68 c5 03 00 00       	push   $0x3c5
f010b352:	68 91 5f 12 f0       	push   $0xf0125f91
f010b357:	e8 be 4e ff ff       	call   f010021a <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010b35c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b35f:	8b 40 18             	mov    0x18(%eax),%eax
f010b362:	89 c2                	mov    %eax,%edx
f010b364:	8b 45 08             	mov    0x8(%ebp),%eax
f010b367:	89 50 30             	mov    %edx,0x30(%eax)
}
f010b36a:	90                   	nop
f010b36b:	c9                   	leave  
f010b36c:	c3                   	ret    

f010b36d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b36d:	55                   	push   %ebp
f010b36e:	89 e5                	mov    %esp,%ebp
f010b370:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b373:	8b 45 08             	mov    0x8(%ebp),%eax
f010b376:	8b 40 10             	mov    0x10(%eax),%eax
f010b379:	8d 48 01             	lea    0x1(%eax),%ecx
f010b37c:	8b 55 08             	mov    0x8(%ebp),%edx
f010b37f:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b382:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b385:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b388:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b38b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b38e:	8b 00                	mov    (%eax),%eax
f010b390:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b395:	74 17                	je     f010b3ae <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b397:	83 ec 04             	sub    $0x4,%esp
f010b39a:	68 e8 60 12 f0       	push   $0xf01260e8
f010b39f:	68 d4 03 00 00       	push   $0x3d4
f010b3a4:	68 91 5f 12 f0       	push   $0xf0125f91
f010b3a9:	e8 6c 4e ff ff       	call   f010021a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b3ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b3b1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b3b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b7:	01 d0                	add    %edx,%eax
f010b3b9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b3bc:	eb 0f                	jmp    f010b3cd <PROGRAM_SEGMENT_NEXT+0x60>
f010b3be:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3c1:	8b 40 10             	mov    0x10(%eax),%eax
f010b3c4:	8d 50 01             	lea    0x1(%eax),%edx
f010b3c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3ca:	89 50 10             	mov    %edx,0x10(%eax)
f010b3cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3d0:	8b 40 10             	mov    0x10(%eax),%eax
f010b3d3:	c1 e0 05             	shl    $0x5,%eax
f010b3d6:	89 c2                	mov    %eax,%edx
f010b3d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3db:	01 d0                	add    %edx,%eax
f010b3dd:	8b 00                	mov    (%eax),%eax
f010b3df:	83 f8 01             	cmp    $0x1,%eax
f010b3e2:	74 13                	je     f010b3f7 <PROGRAM_SEGMENT_NEXT+0x8a>
f010b3e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3e7:	8b 50 10             	mov    0x10(%eax),%edx
f010b3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b3ed:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b3f0:	0f b7 c0             	movzwl %ax,%eax
f010b3f3:	39 c2                	cmp    %eax,%edx
f010b3f5:	72 c7                	jb     f010b3be <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b3f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3fa:	8b 40 10             	mov    0x10(%eax),%eax
f010b3fd:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b400:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b403:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b406:	0f b7 c0             	movzwl %ax,%eax
f010b409:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b40c:	7e 63                	jle    f010b471 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b40e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b411:	c1 e0 05             	shl    $0x5,%eax
f010b414:	89 c2                	mov    %eax,%edx
f010b416:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b419:	01 d0                	add    %edx,%eax
f010b41b:	8b 50 04             	mov    0x4(%eax),%edx
f010b41e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b421:	01 c2                	add    %eax,%edx
f010b423:	8b 45 08             	mov    0x8(%ebp),%eax
f010b426:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b428:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b42b:	c1 e0 05             	shl    $0x5,%eax
f010b42e:	89 c2                	mov    %eax,%edx
f010b430:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b433:	01 d0                	add    %edx,%eax
f010b435:	8b 50 14             	mov    0x14(%eax),%edx
f010b438:	8b 45 08             	mov    0x8(%ebp),%eax
f010b43b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b43e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b441:	c1 e0 05             	shl    $0x5,%eax
f010b444:	89 c2                	mov    %eax,%edx
f010b446:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b449:	01 d0                	add    %edx,%eax
f010b44b:	8b 50 10             	mov    0x10(%eax),%edx
f010b44e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b451:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b457:	c1 e0 05             	shl    $0x5,%eax
f010b45a:	89 c2                	mov    %eax,%edx
f010b45c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b45f:	01 d0                	add    %edx,%eax
f010b461:	8b 40 08             	mov    0x8(%eax),%eax
f010b464:	89 c2                	mov    %eax,%edx
f010b466:	8b 45 08             	mov    0x8(%ebp),%eax
f010b469:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b46f:	eb 05                	jmp    f010b476 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b471:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b476:	c9                   	leave  
f010b477:	c3                   	ret    

f010b478 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b478:	55                   	push   %ebp
f010b479:	89 e5                	mov    %esp,%ebp
f010b47b:	57                   	push   %edi
f010b47c:	56                   	push   %esi
f010b47d:	53                   	push   %ebx
f010b47e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b481:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b488:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b48b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b48e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b491:	8b 00                	mov    (%eax),%eax
f010b493:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b498:	74 17                	je     f010b4b1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b49a:	83 ec 04             	sub    $0x4,%esp
f010b49d:	68 e8 60 12 f0       	push   $0xf01260e8
f010b4a2:	68 f0 03 00 00       	push   $0x3f0
f010b4a7:	68 91 5f 12 f0       	push   $0xf0125f91
f010b4ac:	e8 69 4d ff ff       	call   f010021a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b4b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b4b4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b4b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4ba:	01 d0                	add    %edx,%eax
f010b4bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b4bf:	eb 07                	jmp    f010b4c8 <PROGRAM_SEGMENT_FIRST+0x50>
f010b4c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b4c4:	40                   	inc    %eax
f010b4c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b4c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b4cb:	c1 e0 05             	shl    $0x5,%eax
f010b4ce:	89 c2                	mov    %eax,%edx
f010b4d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b4d3:	01 d0                	add    %edx,%eax
f010b4d5:	8b 00                	mov    (%eax),%eax
f010b4d7:	83 f8 01             	cmp    $0x1,%eax
f010b4da:	74 10                	je     f010b4ec <PROGRAM_SEGMENT_FIRST+0x74>
f010b4dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b4df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b4e2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b4e5:	0f b7 c0             	movzwl %ax,%eax
f010b4e8:	39 c2                	cmp    %eax,%edx
f010b4ea:	72 d5                	jb     f010b4c1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b4ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b4ef:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b4f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b4f5:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b4f8:	0f b7 c0             	movzwl %ax,%eax
f010b4fb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b4fe:	7e 68                	jle    f010b568 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b500:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b503:	c1 e0 05             	shl    $0x5,%eax
f010b506:	89 c2                	mov    %eax,%edx
f010b508:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b50b:	01 d0                	add    %edx,%eax
f010b50d:	8b 50 04             	mov    0x4(%eax),%edx
f010b510:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b513:	01 d0                	add    %edx,%eax
f010b515:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b518:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b51b:	c1 e0 05             	shl    $0x5,%eax
f010b51e:	89 c2                	mov    %eax,%edx
f010b520:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b523:	01 d0                	add    %edx,%eax
f010b525:	8b 40 14             	mov    0x14(%eax),%eax
f010b528:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b52b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b52e:	c1 e0 05             	shl    $0x5,%eax
f010b531:	89 c2                	mov    %eax,%edx
f010b533:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b536:	01 d0                	add    %edx,%eax
f010b538:	8b 40 10             	mov    0x10(%eax),%eax
f010b53b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b53e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b541:	c1 e0 05             	shl    $0x5,%eax
f010b544:	89 c2                	mov    %eax,%edx
f010b546:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b549:	01 d0                	add    %edx,%eax
f010b54b:	8b 40 08             	mov    0x8(%eax),%eax
f010b54e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b551:	8b 45 08             	mov    0x8(%ebp),%eax
f010b554:	89 c3                	mov    %eax,%ebx
f010b556:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b559:	ba 05 00 00 00       	mov    $0x5,%edx
f010b55e:	89 df                	mov    %ebx,%edi
f010b560:	89 c6                	mov    %eax,%esi
f010b562:	89 d1                	mov    %edx,%ecx
f010b564:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b566:	eb 1c                	jmp    f010b584 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b568:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b56f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b572:	89 c3                	mov    %eax,%ebx
f010b574:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b577:	ba 05 00 00 00       	mov    $0x5,%edx
f010b57c:	89 df                	mov    %ebx,%edi
f010b57e:	89 c6                	mov    %eax,%esi
f010b580:	89 d1                	mov    %edx,%ecx
f010b582:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b584:	8b 45 08             	mov    0x8(%ebp),%eax
f010b587:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b58a:	5b                   	pop    %ebx
f010b58b:	5e                   	pop    %esi
f010b58c:	5f                   	pop    %edi
f010b58d:	5d                   	pop    %ebp
f010b58e:	c2 04 00             	ret    $0x4

f010b591 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010b591:	55                   	push   %ebp
f010b592:	89 e5                	mov    %esp,%ebp
f010b594:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b597:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b59e:	a1 fc 3f 3f f0       	mov    0xf03f3ffc,%eax
f010b5a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b5a6:	e9 c6 00 00 00       	jmp    f010b671 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010b5ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5ae:	8b 40 10             	mov    0x10(%eax),%eax
f010b5b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b5b4:	0f 85 af 00 00 00    	jne    f010b669 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b5ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5bd:	8b 50 0c             	mov    0xc(%eax),%edx
f010b5c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5c3:	8b 40 10             	mov    0x10(%eax),%eax
f010b5c6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010b5cc:	83 ec 08             	sub    $0x8,%esp
f010b5cf:	52                   	push   %edx
f010b5d0:	50                   	push   %eax
f010b5d1:	e8 28 d7 ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f010b5d6:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b5d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5dd:	75 17                	jne    f010b5f6 <cleanup_buffers+0x65>
f010b5df:	83 ec 04             	sub    $0x4,%esp
f010b5e2:	68 d3 5f 12 f0       	push   $0xf0125fd3
f010b5e7:	68 17 04 00 00       	push   $0x417
f010b5ec:	68 91 5f 12 f0       	push   $0xf0125f91
f010b5f1:	e8 24 4c ff ff       	call   f010021a <_panic>
f010b5f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5f9:	8b 00                	mov    (%eax),%eax
f010b5fb:	85 c0                	test   %eax,%eax
f010b5fd:	74 10                	je     f010b60f <cleanup_buffers+0x7e>
f010b5ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b602:	8b 00                	mov    (%eax),%eax
f010b604:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b607:	8b 52 04             	mov    0x4(%edx),%edx
f010b60a:	89 50 04             	mov    %edx,0x4(%eax)
f010b60d:	eb 0b                	jmp    f010b61a <cleanup_buffers+0x89>
f010b60f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b612:	8b 40 04             	mov    0x4(%eax),%eax
f010b615:	a3 00 40 3f f0       	mov    %eax,0xf03f4000
f010b61a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b61d:	8b 40 04             	mov    0x4(%eax),%eax
f010b620:	85 c0                	test   %eax,%eax
f010b622:	74 0f                	je     f010b633 <cleanup_buffers+0xa2>
f010b624:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b627:	8b 40 04             	mov    0x4(%eax),%eax
f010b62a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b62d:	8b 12                	mov    (%edx),%edx
f010b62f:	89 10                	mov    %edx,(%eax)
f010b631:	eb 0a                	jmp    f010b63d <cleanup_buffers+0xac>
f010b633:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b636:	8b 00                	mov    (%eax),%eax
f010b638:	a3 fc 3f 3f f0       	mov    %eax,0xf03f3ffc
f010b63d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b640:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b646:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b649:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b650:	a1 08 40 3f f0       	mov    0xf03f4008,%eax
f010b655:	48                   	dec    %eax
f010b656:	a3 08 40 3f f0       	mov    %eax,0xf03f4008

			free_frame(ptr_fi);
f010b65b:	83 ec 0c             	sub    $0xc,%esp
f010b65e:	ff 75 f4             	pushl  -0xc(%ebp)
f010b661:	e8 9b be ff ff       	call   f0107501 <free_frame>
f010b666:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b669:	a1 04 40 3f f0       	mov    0xf03f4004,%eax
f010b66e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b671:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b675:	74 07                	je     f010b67e <cleanup_buffers+0xed>
f010b677:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b67a:	8b 00                	mov    (%eax),%eax
f010b67c:	eb 05                	jmp    f010b683 <cleanup_buffers+0xf2>
f010b67e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b683:	a3 04 40 3f f0       	mov    %eax,0xf03f4004
f010b688:	a1 04 40 3f f0       	mov    0xf03f4004,%eax
f010b68d:	85 c0                	test   %eax,%eax
f010b68f:	0f 85 16 ff ff ff    	jne    f010b5ab <cleanup_buffers+0x1a>
f010b695:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b699:	0f 85 0c ff ff ff    	jne    f010b5ab <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b69f:	90                   	nop
f010b6a0:	c9                   	leave  
f010b6a1:	c3                   	ret    

f010b6a2 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b6a2:	55                   	push   %ebp
f010b6a3:	89 e5                	mov    %esp,%ebp
f010b6a5:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010b6a8:	83 ec 04             	sub    $0x4,%esp
f010b6ab:	68 fe 60 12 f0       	push   $0xf01260fe
f010b6b0:	6a 0b                	push   $0xb
f010b6b2:	68 0e 61 12 f0       	push   $0xf012610e
f010b6b7:	e8 5e 4b ff ff       	call   f010021a <_panic>

f010b6bc <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b6bc:	55                   	push   %ebp
f010b6bd:	89 e5                	mov    %esp,%ebp
f010b6bf:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b6c9:	eb 29                	jmp    f010b6f4 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b6cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6ce:	89 d0                	mov    %edx,%eax
f010b6d0:	01 c0                	add    %eax,%eax
f010b6d2:	01 d0                	add    %edx,%eax
f010b6d4:	c1 e0 02             	shl    $0x2,%eax
f010b6d7:	05 a0 19 17 f0       	add    $0xf01719a0,%eax
f010b6dc:	8b 00                	mov    (%eax),%eax
f010b6de:	83 ec 08             	sub    $0x8,%esp
f010b6e1:	50                   	push   %eax
f010b6e2:	ff 75 08             	pushl  0x8(%ebp)
f010b6e5:	e8 06 65 01 00       	call   f0121bf0 <strcmp>
f010b6ea:	83 c4 10             	add    $0x10,%esp
f010b6ed:	85 c0                	test   %eax,%eax
f010b6ef:	74 0f                	je     f010b700 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6f1:	ff 45 f4             	incl   -0xc(%ebp)
f010b6f4:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f010b6f9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6fc:	7c cd                	jl     f010b6cb <get_user_program_info+0xf>
f010b6fe:	eb 01                	jmp    f010b701 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b700:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b701:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f010b706:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b709:	75 1a                	jne    f010b725 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b70b:	83 ec 08             	sub    $0x8,%esp
f010b70e:	ff 75 08             	pushl  0x8(%ebp)
f010b711:	68 04 69 12 f0       	push   $0xf0126904
f010b716:	e8 80 57 ff ff       	call   f0100e9b <cprintf>
f010b71b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b71e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b723:	eb 11                	jmp    f010b736 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b725:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b728:	89 d0                	mov    %edx,%eax
f010b72a:	01 c0                	add    %eax,%eax
f010b72c:	01 d0                	add    %edx,%eax
f010b72e:	c1 e0 02             	shl    $0x2,%eax
f010b731:	05 a0 19 17 f0       	add    $0xf01719a0,%eax
}
f010b736:	c9                   	leave  
f010b737:	c3                   	ret    

f010b738 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b738:	55                   	push   %ebp
f010b739:	89 e5                	mov    %esp,%ebp
f010b73b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b73e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b745:	eb 2d                	jmp    f010b774 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b747:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b74a:	89 d0                	mov    %edx,%eax
f010b74c:	01 c0                	add    %eax,%eax
f010b74e:	01 d0                	add    %edx,%eax
f010b750:	c1 e0 02             	shl    $0x2,%eax
f010b753:	05 a0 19 17 f0       	add    $0xf01719a0,%eax
f010b758:	8b 00                	mov    (%eax),%eax
f010b75a:	8b 55 08             	mov    0x8(%ebp),%edx
f010b75d:	83 c2 5c             	add    $0x5c,%edx
f010b760:	83 ec 08             	sub    $0x8,%esp
f010b763:	50                   	push   %eax
f010b764:	52                   	push   %edx
f010b765:	e8 86 64 01 00       	call   f0121bf0 <strcmp>
f010b76a:	83 c4 10             	add    $0x10,%esp
f010b76d:	85 c0                	test   %eax,%eax
f010b76f:	74 0f                	je     f010b780 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b771:	ff 45 f4             	incl   -0xc(%ebp)
f010b774:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f010b779:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b77c:	7c c9                	jl     f010b747 <get_user_program_info_by_env+0xf>
f010b77e:	eb 01                	jmp    f010b781 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b780:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b781:	a1 90 1b 17 f0       	mov    0xf0171b90,%eax
f010b786:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b789:	75 17                	jne    f010b7a2 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010b78b:	83 ec 0c             	sub    $0xc,%esp
f010b78e:	68 1f 69 12 f0       	push   $0xf012691f
f010b793:	e8 03 57 ff ff       	call   f0100e9b <cprintf>
f010b798:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b79b:	b8 00 00 00 00       	mov    $0x0,%eax
f010b7a0:	eb 11                	jmp    f010b7b3 <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010b7a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7a5:	89 d0                	mov    %edx,%eax
f010b7a7:	01 c0                	add    %eax,%eax
f010b7a9:	01 d0                	add    %edx,%eax
f010b7ab:	c1 e0 02             	shl    $0x2,%eax
f010b7ae:	05 a0 19 17 f0       	add    $0xf01719a0,%eax
}
f010b7b3:	c9                   	leave  
f010b7b4:	c3                   	ret    

f010b7b5 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b7b5:	55                   	push   %ebp
f010b7b6:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b7b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7bb:	83 f8 13             	cmp    $0x13,%eax
f010b7be:	77 0c                	ja     f010b7cc <trapname+0x17>
		return excnames[trapno];
f010b7c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7c3:	8b 04 85 80 6d 12 f0 	mov    -0xfed9280(,%eax,4),%eax
f010b7ca:	eb 12                	jmp    f010b7de <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b7cc:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b7d0:	75 07                	jne    f010b7d9 <trapname+0x24>
		return "System call";
f010b7d2:	b8 40 69 12 f0       	mov    $0xf0126940,%eax
f010b7d7:	eb 05                	jmp    f010b7de <trapname+0x29>
	return "(unknown trap)";
f010b7d9:	b8 4c 69 12 f0       	mov    $0xf012694c,%eax
}
f010b7de:	5d                   	pop    %ebp
f010b7df:	c3                   	ret    

f010b7e0 <idt_init>:


void
idt_init(void)
{
f010b7e0:	55                   	push   %ebp
f010b7e1:	89 e5                	mov    %esp,%ebp
f010b7e3:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b7e6:	b8 54 cf 10 f0       	mov    $0xf010cf54,%eax
f010b7eb:	66 a3 d0 37 3f f0    	mov    %ax,0xf03f37d0
f010b7f1:	66 c7 05 d2 37 3f f0 	movw   $0x8,0xf03f37d2
f010b7f8:	08 00 
f010b7fa:	a0 d4 37 3f f0       	mov    0xf03f37d4,%al
f010b7ff:	83 e0 e0             	and    $0xffffffe0,%eax
f010b802:	a2 d4 37 3f f0       	mov    %al,0xf03f37d4
f010b807:	a0 d4 37 3f f0       	mov    0xf03f37d4,%al
f010b80c:	83 e0 1f             	and    $0x1f,%eax
f010b80f:	a2 d4 37 3f f0       	mov    %al,0xf03f37d4
f010b814:	a0 d5 37 3f f0       	mov    0xf03f37d5,%al
f010b819:	83 e0 f0             	and    $0xfffffff0,%eax
f010b81c:	83 c8 0e             	or     $0xe,%eax
f010b81f:	a2 d5 37 3f f0       	mov    %al,0xf03f37d5
f010b824:	a0 d5 37 3f f0       	mov    0xf03f37d5,%al
f010b829:	83 e0 ef             	and    $0xffffffef,%eax
f010b82c:	a2 d5 37 3f f0       	mov    %al,0xf03f37d5
f010b831:	a0 d5 37 3f f0       	mov    0xf03f37d5,%al
f010b836:	83 e0 9f             	and    $0xffffff9f,%eax
f010b839:	a2 d5 37 3f f0       	mov    %al,0xf03f37d5
f010b83e:	a0 d5 37 3f f0       	mov    0xf03f37d5,%al
f010b843:	83 c8 80             	or     $0xffffff80,%eax
f010b846:	a2 d5 37 3f f0       	mov    %al,0xf03f37d5
f010b84b:	b8 54 cf 10 f0       	mov    $0xf010cf54,%eax
f010b850:	c1 e8 10             	shr    $0x10,%eax
f010b853:	66 a3 d6 37 3f f0    	mov    %ax,0xf03f37d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b859:	b8 5c cf 10 f0       	mov    $0xf010cf5c,%eax
f010b85e:	66 a3 e0 38 3f f0    	mov    %ax,0xf03f38e0
f010b864:	66 c7 05 e2 38 3f f0 	movw   $0x8,0xf03f38e2
f010b86b:	08 00 
f010b86d:	a0 e4 38 3f f0       	mov    0xf03f38e4,%al
f010b872:	83 e0 e0             	and    $0xffffffe0,%eax
f010b875:	a2 e4 38 3f f0       	mov    %al,0xf03f38e4
f010b87a:	a0 e4 38 3f f0       	mov    0xf03f38e4,%al
f010b87f:	83 e0 1f             	and    $0x1f,%eax
f010b882:	a2 e4 38 3f f0       	mov    %al,0xf03f38e4
f010b887:	a0 e5 38 3f f0       	mov    0xf03f38e5,%al
f010b88c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b88f:	83 c8 0e             	or     $0xe,%eax
f010b892:	a2 e5 38 3f f0       	mov    %al,0xf03f38e5
f010b897:	a0 e5 38 3f f0       	mov    0xf03f38e5,%al
f010b89c:	83 e0 ef             	and    $0xffffffef,%eax
f010b89f:	a2 e5 38 3f f0       	mov    %al,0xf03f38e5
f010b8a4:	a0 e5 38 3f f0       	mov    0xf03f38e5,%al
f010b8a9:	83 c8 60             	or     $0x60,%eax
f010b8ac:	a2 e5 38 3f f0       	mov    %al,0xf03f38e5
f010b8b1:	a0 e5 38 3f f0       	mov    0xf03f38e5,%al
f010b8b6:	83 c8 80             	or     $0xffffff80,%eax
f010b8b9:	a2 e5 38 3f f0       	mov    %al,0xf03f38e5
f010b8be:	b8 5c cf 10 f0       	mov    $0xf010cf5c,%eax
f010b8c3:	c1 e8 10             	shr    $0x10,%eax
f010b8c6:	66 a3 e6 38 3f f0    	mov    %ax,0xf03f38e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b8cc:	b8 66 cf 10 f0       	mov    $0xf010cf66,%eax
f010b8d1:	66 a3 a0 37 3f f0    	mov    %ax,0xf03f37a0
f010b8d7:	66 c7 05 a2 37 3f f0 	movw   $0x8,0xf03f37a2
f010b8de:	08 00 
f010b8e0:	a0 a4 37 3f f0       	mov    0xf03f37a4,%al
f010b8e5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8e8:	a2 a4 37 3f f0       	mov    %al,0xf03f37a4
f010b8ed:	a0 a4 37 3f f0       	mov    0xf03f37a4,%al
f010b8f2:	83 e0 1f             	and    $0x1f,%eax
f010b8f5:	a2 a4 37 3f f0       	mov    %al,0xf03f37a4
f010b8fa:	a0 a5 37 3f f0       	mov    0xf03f37a5,%al
f010b8ff:	83 e0 f0             	and    $0xfffffff0,%eax
f010b902:	83 c8 0e             	or     $0xe,%eax
f010b905:	a2 a5 37 3f f0       	mov    %al,0xf03f37a5
f010b90a:	a0 a5 37 3f f0       	mov    0xf03f37a5,%al
f010b90f:	83 e0 ef             	and    $0xffffffef,%eax
f010b912:	a2 a5 37 3f f0       	mov    %al,0xf03f37a5
f010b917:	a0 a5 37 3f f0       	mov    0xf03f37a5,%al
f010b91c:	83 e0 9f             	and    $0xffffff9f,%eax
f010b91f:	a2 a5 37 3f f0       	mov    %al,0xf03f37a5
f010b924:	a0 a5 37 3f f0       	mov    0xf03f37a5,%al
f010b929:	83 c8 80             	or     $0xffffff80,%eax
f010b92c:	a2 a5 37 3f f0       	mov    %al,0xf03f37a5
f010b931:	b8 66 cf 10 f0       	mov    $0xf010cf66,%eax
f010b936:	c1 e8 10             	shr    $0x10,%eax
f010b939:	66 a3 a6 37 3f f0    	mov    %ax,0xf03f37a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b93f:	b8 6e cf 10 f0       	mov    $0xf010cf6e,%eax
f010b944:	66 a3 60 37 3f f0    	mov    %ax,0xf03f3760
f010b94a:	66 c7 05 62 37 3f f0 	movw   $0x8,0xf03f3762
f010b951:	08 00 
f010b953:	a0 64 37 3f f0       	mov    0xf03f3764,%al
f010b958:	83 e0 e0             	and    $0xffffffe0,%eax
f010b95b:	a2 64 37 3f f0       	mov    %al,0xf03f3764
f010b960:	a0 64 37 3f f0       	mov    0xf03f3764,%al
f010b965:	83 e0 1f             	and    $0x1f,%eax
f010b968:	a2 64 37 3f f0       	mov    %al,0xf03f3764
f010b96d:	a0 65 37 3f f0       	mov    0xf03f3765,%al
f010b972:	83 e0 f0             	and    $0xfffffff0,%eax
f010b975:	83 c8 0e             	or     $0xe,%eax
f010b978:	a2 65 37 3f f0       	mov    %al,0xf03f3765
f010b97d:	a0 65 37 3f f0       	mov    0xf03f3765,%al
f010b982:	83 e0 ef             	and    $0xffffffef,%eax
f010b985:	a2 65 37 3f f0       	mov    %al,0xf03f3765
f010b98a:	a0 65 37 3f f0       	mov    0xf03f3765,%al
f010b98f:	83 c8 60             	or     $0x60,%eax
f010b992:	a2 65 37 3f f0       	mov    %al,0xf03f3765
f010b997:	a0 65 37 3f f0       	mov    0xf03f3765,%al
f010b99c:	83 c8 80             	or     $0xffffff80,%eax
f010b99f:	a2 65 37 3f f0       	mov    %al,0xf03f3765
f010b9a4:	b8 6e cf 10 f0       	mov    $0xf010cf6e,%eax
f010b9a9:	c1 e8 10             	shr    $0x10,%eax
f010b9ac:	66 a3 66 37 3f f0    	mov    %ax,0xf03f3766
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b9b2:	b8 78 cf 10 f0       	mov    $0xf010cf78,%eax
f010b9b7:	66 a3 68 37 3f f0    	mov    %ax,0xf03f3768
f010b9bd:	66 c7 05 6a 37 3f f0 	movw   $0x8,0xf03f376a
f010b9c4:	08 00 
f010b9c6:	a0 6c 37 3f f0       	mov    0xf03f376c,%al
f010b9cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9ce:	a2 6c 37 3f f0       	mov    %al,0xf03f376c
f010b9d3:	a0 6c 37 3f f0       	mov    0xf03f376c,%al
f010b9d8:	83 e0 1f             	and    $0x1f,%eax
f010b9db:	a2 6c 37 3f f0       	mov    %al,0xf03f376c
f010b9e0:	a0 6d 37 3f f0       	mov    0xf03f376d,%al
f010b9e5:	83 c8 0f             	or     $0xf,%eax
f010b9e8:	a2 6d 37 3f f0       	mov    %al,0xf03f376d
f010b9ed:	a0 6d 37 3f f0       	mov    0xf03f376d,%al
f010b9f2:	83 e0 ef             	and    $0xffffffef,%eax
f010b9f5:	a2 6d 37 3f f0       	mov    %al,0xf03f376d
f010b9fa:	a0 6d 37 3f f0       	mov    0xf03f376d,%al
f010b9ff:	83 c8 60             	or     $0x60,%eax
f010ba02:	a2 6d 37 3f f0       	mov    %al,0xf03f376d
f010ba07:	a0 6d 37 3f f0       	mov    0xf03f376d,%al
f010ba0c:	83 c8 80             	or     $0xffffff80,%eax
f010ba0f:	a2 6d 37 3f f0       	mov    %al,0xf03f376d
f010ba14:	b8 78 cf 10 f0       	mov    $0xf010cf78,%eax
f010ba19:	c1 e8 10             	shr    $0x10,%eax
f010ba1c:	66 a3 6e 37 3f f0    	mov    %ax,0xf03f376e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010ba22:	b8 82 cf 10 f0       	mov    $0xf010cf82,%eax
f010ba27:	66 a3 70 37 3f f0    	mov    %ax,0xf03f3770
f010ba2d:	66 c7 05 72 37 3f f0 	movw   $0x8,0xf03f3772
f010ba34:	08 00 
f010ba36:	a0 74 37 3f f0       	mov    0xf03f3774,%al
f010ba3b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba3e:	a2 74 37 3f f0       	mov    %al,0xf03f3774
f010ba43:	a0 74 37 3f f0       	mov    0xf03f3774,%al
f010ba48:	83 e0 1f             	and    $0x1f,%eax
f010ba4b:	a2 74 37 3f f0       	mov    %al,0xf03f3774
f010ba50:	a0 75 37 3f f0       	mov    0xf03f3775,%al
f010ba55:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba58:	83 c8 0e             	or     $0xe,%eax
f010ba5b:	a2 75 37 3f f0       	mov    %al,0xf03f3775
f010ba60:	a0 75 37 3f f0       	mov    0xf03f3775,%al
f010ba65:	83 e0 ef             	and    $0xffffffef,%eax
f010ba68:	a2 75 37 3f f0       	mov    %al,0xf03f3775
f010ba6d:	a0 75 37 3f f0       	mov    0xf03f3775,%al
f010ba72:	83 c8 60             	or     $0x60,%eax
f010ba75:	a2 75 37 3f f0       	mov    %al,0xf03f3775
f010ba7a:	a0 75 37 3f f0       	mov    0xf03f3775,%al
f010ba7f:	83 c8 80             	or     $0xffffff80,%eax
f010ba82:	a2 75 37 3f f0       	mov    %al,0xf03f3775
f010ba87:	b8 82 cf 10 f0       	mov    $0xf010cf82,%eax
f010ba8c:	c1 e8 10             	shr    $0x10,%eax
f010ba8f:	66 a3 76 37 3f f0    	mov    %ax,0xf03f3776
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ba95:	b8 8c cf 10 f0       	mov    $0xf010cf8c,%eax
f010ba9a:	66 a3 78 37 3f f0    	mov    %ax,0xf03f3778
f010baa0:	66 c7 05 7a 37 3f f0 	movw   $0x8,0xf03f377a
f010baa7:	08 00 
f010baa9:	a0 7c 37 3f f0       	mov    0xf03f377c,%al
f010baae:	83 e0 e0             	and    $0xffffffe0,%eax
f010bab1:	a2 7c 37 3f f0       	mov    %al,0xf03f377c
f010bab6:	a0 7c 37 3f f0       	mov    0xf03f377c,%al
f010babb:	83 e0 1f             	and    $0x1f,%eax
f010babe:	a2 7c 37 3f f0       	mov    %al,0xf03f377c
f010bac3:	a0 7d 37 3f f0       	mov    0xf03f377d,%al
f010bac8:	83 c8 0f             	or     $0xf,%eax
f010bacb:	a2 7d 37 3f f0       	mov    %al,0xf03f377d
f010bad0:	a0 7d 37 3f f0       	mov    0xf03f377d,%al
f010bad5:	83 e0 ef             	and    $0xffffffef,%eax
f010bad8:	a2 7d 37 3f f0       	mov    %al,0xf03f377d
f010badd:	a0 7d 37 3f f0       	mov    0xf03f377d,%al
f010bae2:	83 c8 60             	or     $0x60,%eax
f010bae5:	a2 7d 37 3f f0       	mov    %al,0xf03f377d
f010baea:	a0 7d 37 3f f0       	mov    0xf03f377d,%al
f010baef:	83 c8 80             	or     $0xffffff80,%eax
f010baf2:	a2 7d 37 3f f0       	mov    %al,0xf03f377d
f010baf7:	b8 8c cf 10 f0       	mov    $0xf010cf8c,%eax
f010bafc:	c1 e8 10             	shr    $0x10,%eax
f010baff:	66 a3 7e 37 3f f0    	mov    %ax,0xf03f377e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010bb05:	b8 96 cf 10 f0       	mov    $0xf010cf96,%eax
f010bb0a:	66 a3 80 37 3f f0    	mov    %ax,0xf03f3780
f010bb10:	66 c7 05 82 37 3f f0 	movw   $0x8,0xf03f3782
f010bb17:	08 00 
f010bb19:	a0 84 37 3f f0       	mov    0xf03f3784,%al
f010bb1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb21:	a2 84 37 3f f0       	mov    %al,0xf03f3784
f010bb26:	a0 84 37 3f f0       	mov    0xf03f3784,%al
f010bb2b:	83 e0 1f             	and    $0x1f,%eax
f010bb2e:	a2 84 37 3f f0       	mov    %al,0xf03f3784
f010bb33:	a0 85 37 3f f0       	mov    0xf03f3785,%al
f010bb38:	83 c8 0f             	or     $0xf,%eax
f010bb3b:	a2 85 37 3f f0       	mov    %al,0xf03f3785
f010bb40:	a0 85 37 3f f0       	mov    0xf03f3785,%al
f010bb45:	83 e0 ef             	and    $0xffffffef,%eax
f010bb48:	a2 85 37 3f f0       	mov    %al,0xf03f3785
f010bb4d:	a0 85 37 3f f0       	mov    0xf03f3785,%al
f010bb52:	83 c8 60             	or     $0x60,%eax
f010bb55:	a2 85 37 3f f0       	mov    %al,0xf03f3785
f010bb5a:	a0 85 37 3f f0       	mov    0xf03f3785,%al
f010bb5f:	83 c8 80             	or     $0xffffff80,%eax
f010bb62:	a2 85 37 3f f0       	mov    %al,0xf03f3785
f010bb67:	b8 96 cf 10 f0       	mov    $0xf010cf96,%eax
f010bb6c:	c1 e8 10             	shr    $0x10,%eax
f010bb6f:	66 a3 86 37 3f f0    	mov    %ax,0xf03f3786
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010bb75:	b8 a0 cf 10 f0       	mov    $0xf010cfa0,%eax
f010bb7a:	66 a3 88 37 3f f0    	mov    %ax,0xf03f3788
f010bb80:	66 c7 05 8a 37 3f f0 	movw   $0x8,0xf03f378a
f010bb87:	08 00 
f010bb89:	a0 8c 37 3f f0       	mov    0xf03f378c,%al
f010bb8e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb91:	a2 8c 37 3f f0       	mov    %al,0xf03f378c
f010bb96:	a0 8c 37 3f f0       	mov    0xf03f378c,%al
f010bb9b:	83 e0 1f             	and    $0x1f,%eax
f010bb9e:	a2 8c 37 3f f0       	mov    %al,0xf03f378c
f010bba3:	a0 8d 37 3f f0       	mov    0xf03f378d,%al
f010bba8:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbab:	83 c8 0e             	or     $0xe,%eax
f010bbae:	a2 8d 37 3f f0       	mov    %al,0xf03f378d
f010bbb3:	a0 8d 37 3f f0       	mov    0xf03f378d,%al
f010bbb8:	83 e0 ef             	and    $0xffffffef,%eax
f010bbbb:	a2 8d 37 3f f0       	mov    %al,0xf03f378d
f010bbc0:	a0 8d 37 3f f0       	mov    0xf03f378d,%al
f010bbc5:	83 c8 60             	or     $0x60,%eax
f010bbc8:	a2 8d 37 3f f0       	mov    %al,0xf03f378d
f010bbcd:	a0 8d 37 3f f0       	mov    0xf03f378d,%al
f010bbd2:	83 c8 80             	or     $0xffffff80,%eax
f010bbd5:	a2 8d 37 3f f0       	mov    %al,0xf03f378d
f010bbda:	b8 a0 cf 10 f0       	mov    $0xf010cfa0,%eax
f010bbdf:	c1 e8 10             	shr    $0x10,%eax
f010bbe2:	66 a3 8e 37 3f f0    	mov    %ax,0xf03f378e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010bbe8:	b8 aa cf 10 f0       	mov    $0xf010cfaa,%eax
f010bbed:	66 a3 90 37 3f f0    	mov    %ax,0xf03f3790
f010bbf3:	66 c7 05 92 37 3f f0 	movw   $0x8,0xf03f3792
f010bbfa:	08 00 
f010bbfc:	a0 94 37 3f f0       	mov    0xf03f3794,%al
f010bc01:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc04:	a2 94 37 3f f0       	mov    %al,0xf03f3794
f010bc09:	a0 94 37 3f f0       	mov    0xf03f3794,%al
f010bc0e:	83 e0 1f             	and    $0x1f,%eax
f010bc11:	a2 94 37 3f f0       	mov    %al,0xf03f3794
f010bc16:	a0 95 37 3f f0       	mov    0xf03f3795,%al
f010bc1b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc1e:	83 c8 0e             	or     $0xe,%eax
f010bc21:	a2 95 37 3f f0       	mov    %al,0xf03f3795
f010bc26:	a0 95 37 3f f0       	mov    0xf03f3795,%al
f010bc2b:	83 e0 ef             	and    $0xffffffef,%eax
f010bc2e:	a2 95 37 3f f0       	mov    %al,0xf03f3795
f010bc33:	a0 95 37 3f f0       	mov    0xf03f3795,%al
f010bc38:	83 c8 60             	or     $0x60,%eax
f010bc3b:	a2 95 37 3f f0       	mov    %al,0xf03f3795
f010bc40:	a0 95 37 3f f0       	mov    0xf03f3795,%al
f010bc45:	83 c8 80             	or     $0xffffff80,%eax
f010bc48:	a2 95 37 3f f0       	mov    %al,0xf03f3795
f010bc4d:	b8 aa cf 10 f0       	mov    $0xf010cfaa,%eax
f010bc52:	c1 e8 10             	shr    $0x10,%eax
f010bc55:	66 a3 96 37 3f f0    	mov    %ax,0xf03f3796
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010bc5b:	b8 b4 cf 10 f0       	mov    $0xf010cfb4,%eax
f010bc60:	66 a3 98 37 3f f0    	mov    %ax,0xf03f3798
f010bc66:	66 c7 05 9a 37 3f f0 	movw   $0x8,0xf03f379a
f010bc6d:	08 00 
f010bc6f:	a0 9c 37 3f f0       	mov    0xf03f379c,%al
f010bc74:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc77:	a2 9c 37 3f f0       	mov    %al,0xf03f379c
f010bc7c:	a0 9c 37 3f f0       	mov    0xf03f379c,%al
f010bc81:	83 e0 1f             	and    $0x1f,%eax
f010bc84:	a2 9c 37 3f f0       	mov    %al,0xf03f379c
f010bc89:	a0 9d 37 3f f0       	mov    0xf03f379d,%al
f010bc8e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc91:	83 c8 0e             	or     $0xe,%eax
f010bc94:	a2 9d 37 3f f0       	mov    %al,0xf03f379d
f010bc99:	a0 9d 37 3f f0       	mov    0xf03f379d,%al
f010bc9e:	83 e0 ef             	and    $0xffffffef,%eax
f010bca1:	a2 9d 37 3f f0       	mov    %al,0xf03f379d
f010bca6:	a0 9d 37 3f f0       	mov    0xf03f379d,%al
f010bcab:	83 c8 60             	or     $0x60,%eax
f010bcae:	a2 9d 37 3f f0       	mov    %al,0xf03f379d
f010bcb3:	a0 9d 37 3f f0       	mov    0xf03f379d,%al
f010bcb8:	83 c8 80             	or     $0xffffff80,%eax
f010bcbb:	a2 9d 37 3f f0       	mov    %al,0xf03f379d
f010bcc0:	b8 b4 cf 10 f0       	mov    $0xf010cfb4,%eax
f010bcc5:	c1 e8 10             	shr    $0x10,%eax
f010bcc8:	66 a3 9e 37 3f f0    	mov    %ax,0xf03f379e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bcce:	b8 be cf 10 f0       	mov    $0xf010cfbe,%eax
f010bcd3:	66 a3 b0 37 3f f0    	mov    %ax,0xf03f37b0
f010bcd9:	66 c7 05 b2 37 3f f0 	movw   $0x8,0xf03f37b2
f010bce0:	08 00 
f010bce2:	a0 b4 37 3f f0       	mov    0xf03f37b4,%al
f010bce7:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcea:	a2 b4 37 3f f0       	mov    %al,0xf03f37b4
f010bcef:	a0 b4 37 3f f0       	mov    0xf03f37b4,%al
f010bcf4:	83 e0 1f             	and    $0x1f,%eax
f010bcf7:	a2 b4 37 3f f0       	mov    %al,0xf03f37b4
f010bcfc:	a0 b5 37 3f f0       	mov    0xf03f37b5,%al
f010bd01:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd04:	83 c8 0e             	or     $0xe,%eax
f010bd07:	a2 b5 37 3f f0       	mov    %al,0xf03f37b5
f010bd0c:	a0 b5 37 3f f0       	mov    0xf03f37b5,%al
f010bd11:	83 e0 ef             	and    $0xffffffef,%eax
f010bd14:	a2 b5 37 3f f0       	mov    %al,0xf03f37b5
f010bd19:	a0 b5 37 3f f0       	mov    0xf03f37b5,%al
f010bd1e:	83 c8 60             	or     $0x60,%eax
f010bd21:	a2 b5 37 3f f0       	mov    %al,0xf03f37b5
f010bd26:	a0 b5 37 3f f0       	mov    0xf03f37b5,%al
f010bd2b:	83 c8 80             	or     $0xffffff80,%eax
f010bd2e:	a2 b5 37 3f f0       	mov    %al,0xf03f37b5
f010bd33:	b8 be cf 10 f0       	mov    $0xf010cfbe,%eax
f010bd38:	c1 e8 10             	shr    $0x10,%eax
f010bd3b:	66 a3 b6 37 3f f0    	mov    %ax,0xf03f37b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bd41:	b8 c6 cf 10 f0       	mov    $0xf010cfc6,%eax
f010bd46:	66 a3 b8 37 3f f0    	mov    %ax,0xf03f37b8
f010bd4c:	66 c7 05 ba 37 3f f0 	movw   $0x8,0xf03f37ba
f010bd53:	08 00 
f010bd55:	a0 bc 37 3f f0       	mov    0xf03f37bc,%al
f010bd5a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd5d:	a2 bc 37 3f f0       	mov    %al,0xf03f37bc
f010bd62:	a0 bc 37 3f f0       	mov    0xf03f37bc,%al
f010bd67:	83 e0 1f             	and    $0x1f,%eax
f010bd6a:	a2 bc 37 3f f0       	mov    %al,0xf03f37bc
f010bd6f:	a0 bd 37 3f f0       	mov    0xf03f37bd,%al
f010bd74:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd77:	83 c8 0e             	or     $0xe,%eax
f010bd7a:	a2 bd 37 3f f0       	mov    %al,0xf03f37bd
f010bd7f:	a0 bd 37 3f f0       	mov    0xf03f37bd,%al
f010bd84:	83 e0 ef             	and    $0xffffffef,%eax
f010bd87:	a2 bd 37 3f f0       	mov    %al,0xf03f37bd
f010bd8c:	a0 bd 37 3f f0       	mov    0xf03f37bd,%al
f010bd91:	83 c8 60             	or     $0x60,%eax
f010bd94:	a2 bd 37 3f f0       	mov    %al,0xf03f37bd
f010bd99:	a0 bd 37 3f f0       	mov    0xf03f37bd,%al
f010bd9e:	83 c8 80             	or     $0xffffff80,%eax
f010bda1:	a2 bd 37 3f f0       	mov    %al,0xf03f37bd
f010bda6:	b8 c6 cf 10 f0       	mov    $0xf010cfc6,%eax
f010bdab:	c1 e8 10             	shr    $0x10,%eax
f010bdae:	66 a3 be 37 3f f0    	mov    %ax,0xf03f37be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bdb4:	b8 ca cf 10 f0       	mov    $0xf010cfca,%eax
f010bdb9:	66 a3 c0 37 3f f0    	mov    %ax,0xf03f37c0
f010bdbf:	66 c7 05 c2 37 3f f0 	movw   $0x8,0xf03f37c2
f010bdc6:	08 00 
f010bdc8:	a0 c4 37 3f f0       	mov    0xf03f37c4,%al
f010bdcd:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdd0:	a2 c4 37 3f f0       	mov    %al,0xf03f37c4
f010bdd5:	a0 c4 37 3f f0       	mov    0xf03f37c4,%al
f010bdda:	83 e0 1f             	and    $0x1f,%eax
f010bddd:	a2 c4 37 3f f0       	mov    %al,0xf03f37c4
f010bde2:	a0 c5 37 3f f0       	mov    0xf03f37c5,%al
f010bde7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdea:	83 c8 0e             	or     $0xe,%eax
f010bded:	a2 c5 37 3f f0       	mov    %al,0xf03f37c5
f010bdf2:	a0 c5 37 3f f0       	mov    0xf03f37c5,%al
f010bdf7:	83 e0 ef             	and    $0xffffffef,%eax
f010bdfa:	a2 c5 37 3f f0       	mov    %al,0xf03f37c5
f010bdff:	a0 c5 37 3f f0       	mov    0xf03f37c5,%al
f010be04:	83 c8 60             	or     $0x60,%eax
f010be07:	a2 c5 37 3f f0       	mov    %al,0xf03f37c5
f010be0c:	a0 c5 37 3f f0       	mov    0xf03f37c5,%al
f010be11:	83 c8 80             	or     $0xffffff80,%eax
f010be14:	a2 c5 37 3f f0       	mov    %al,0xf03f37c5
f010be19:	b8 ca cf 10 f0       	mov    $0xf010cfca,%eax
f010be1e:	c1 e8 10             	shr    $0x10,%eax
f010be21:	66 a3 c6 37 3f f0    	mov    %ax,0xf03f37c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010be27:	b8 ce cf 10 f0       	mov    $0xf010cfce,%eax
f010be2c:	66 a3 c8 37 3f f0    	mov    %ax,0xf03f37c8
f010be32:	66 c7 05 ca 37 3f f0 	movw   $0x8,0xf03f37ca
f010be39:	08 00 
f010be3b:	a0 cc 37 3f f0       	mov    0xf03f37cc,%al
f010be40:	83 e0 e0             	and    $0xffffffe0,%eax
f010be43:	a2 cc 37 3f f0       	mov    %al,0xf03f37cc
f010be48:	a0 cc 37 3f f0       	mov    0xf03f37cc,%al
f010be4d:	83 e0 1f             	and    $0x1f,%eax
f010be50:	a2 cc 37 3f f0       	mov    %al,0xf03f37cc
f010be55:	a0 cd 37 3f f0       	mov    0xf03f37cd,%al
f010be5a:	83 e0 f0             	and    $0xfffffff0,%eax
f010be5d:	83 c8 0e             	or     $0xe,%eax
f010be60:	a2 cd 37 3f f0       	mov    %al,0xf03f37cd
f010be65:	a0 cd 37 3f f0       	mov    0xf03f37cd,%al
f010be6a:	83 e0 ef             	and    $0xffffffef,%eax
f010be6d:	a2 cd 37 3f f0       	mov    %al,0xf03f37cd
f010be72:	a0 cd 37 3f f0       	mov    0xf03f37cd,%al
f010be77:	83 c8 60             	or     $0x60,%eax
f010be7a:	a2 cd 37 3f f0       	mov    %al,0xf03f37cd
f010be7f:	a0 cd 37 3f f0       	mov    0xf03f37cd,%al
f010be84:	83 c8 80             	or     $0xffffff80,%eax
f010be87:	a2 cd 37 3f f0       	mov    %al,0xf03f37cd
f010be8c:	b8 ce cf 10 f0       	mov    $0xf010cfce,%eax
f010be91:	c1 e8 10             	shr    $0x10,%eax
f010be94:	66 a3 ce 37 3f f0    	mov    %ax,0xf03f37ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010be9a:	b8 d2 cf 10 f0       	mov    $0xf010cfd2,%eax
f010be9f:	66 a3 e0 37 3f f0    	mov    %ax,0xf03f37e0
f010bea5:	66 c7 05 e2 37 3f f0 	movw   $0x8,0xf03f37e2
f010beac:	08 00 
f010beae:	a0 e4 37 3f f0       	mov    0xf03f37e4,%al
f010beb3:	83 e0 e0             	and    $0xffffffe0,%eax
f010beb6:	a2 e4 37 3f f0       	mov    %al,0xf03f37e4
f010bebb:	a0 e4 37 3f f0       	mov    0xf03f37e4,%al
f010bec0:	83 e0 1f             	and    $0x1f,%eax
f010bec3:	a2 e4 37 3f f0       	mov    %al,0xf03f37e4
f010bec8:	a0 e5 37 3f f0       	mov    0xf03f37e5,%al
f010becd:	83 e0 f0             	and    $0xfffffff0,%eax
f010bed0:	83 c8 0e             	or     $0xe,%eax
f010bed3:	a2 e5 37 3f f0       	mov    %al,0xf03f37e5
f010bed8:	a0 e5 37 3f f0       	mov    0xf03f37e5,%al
f010bedd:	83 e0 ef             	and    $0xffffffef,%eax
f010bee0:	a2 e5 37 3f f0       	mov    %al,0xf03f37e5
f010bee5:	a0 e5 37 3f f0       	mov    0xf03f37e5,%al
f010beea:	83 c8 60             	or     $0x60,%eax
f010beed:	a2 e5 37 3f f0       	mov    %al,0xf03f37e5
f010bef2:	a0 e5 37 3f f0       	mov    0xf03f37e5,%al
f010bef7:	83 c8 80             	or     $0xffffff80,%eax
f010befa:	a2 e5 37 3f f0       	mov    %al,0xf03f37e5
f010beff:	b8 d2 cf 10 f0       	mov    $0xf010cfd2,%eax
f010bf04:	c1 e8 10             	shr    $0x10,%eax
f010bf07:	66 a3 e6 37 3f f0    	mov    %ax,0xf03f37e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bf0d:	b8 d8 cf 10 f0       	mov    $0xf010cfd8,%eax
f010bf12:	66 a3 e8 37 3f f0    	mov    %ax,0xf03f37e8
f010bf18:	66 c7 05 ea 37 3f f0 	movw   $0x8,0xf03f37ea
f010bf1f:	08 00 
f010bf21:	a0 ec 37 3f f0       	mov    0xf03f37ec,%al
f010bf26:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf29:	a2 ec 37 3f f0       	mov    %al,0xf03f37ec
f010bf2e:	a0 ec 37 3f f0       	mov    0xf03f37ec,%al
f010bf33:	83 e0 1f             	and    $0x1f,%eax
f010bf36:	a2 ec 37 3f f0       	mov    %al,0xf03f37ec
f010bf3b:	a0 ed 37 3f f0       	mov    0xf03f37ed,%al
f010bf40:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf43:	83 c8 0e             	or     $0xe,%eax
f010bf46:	a2 ed 37 3f f0       	mov    %al,0xf03f37ed
f010bf4b:	a0 ed 37 3f f0       	mov    0xf03f37ed,%al
f010bf50:	83 e0 ef             	and    $0xffffffef,%eax
f010bf53:	a2 ed 37 3f f0       	mov    %al,0xf03f37ed
f010bf58:	a0 ed 37 3f f0       	mov    0xf03f37ed,%al
f010bf5d:	83 c8 60             	or     $0x60,%eax
f010bf60:	a2 ed 37 3f f0       	mov    %al,0xf03f37ed
f010bf65:	a0 ed 37 3f f0       	mov    0xf03f37ed,%al
f010bf6a:	83 c8 80             	or     $0xffffff80,%eax
f010bf6d:	a2 ed 37 3f f0       	mov    %al,0xf03f37ed
f010bf72:	b8 d8 cf 10 f0       	mov    $0xf010cfd8,%eax
f010bf77:	c1 e8 10             	shr    $0x10,%eax
f010bf7a:	66 a3 ee 37 3f f0    	mov    %ax,0xf03f37ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bf80:	b8 dc cf 10 f0       	mov    $0xf010cfdc,%eax
f010bf85:	66 a3 f0 37 3f f0    	mov    %ax,0xf03f37f0
f010bf8b:	66 c7 05 f2 37 3f f0 	movw   $0x8,0xf03f37f2
f010bf92:	08 00 
f010bf94:	a0 f4 37 3f f0       	mov    0xf03f37f4,%al
f010bf99:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf9c:	a2 f4 37 3f f0       	mov    %al,0xf03f37f4
f010bfa1:	a0 f4 37 3f f0       	mov    0xf03f37f4,%al
f010bfa6:	83 e0 1f             	and    $0x1f,%eax
f010bfa9:	a2 f4 37 3f f0       	mov    %al,0xf03f37f4
f010bfae:	a0 f5 37 3f f0       	mov    0xf03f37f5,%al
f010bfb3:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfb6:	83 c8 0e             	or     $0xe,%eax
f010bfb9:	a2 f5 37 3f f0       	mov    %al,0xf03f37f5
f010bfbe:	a0 f5 37 3f f0       	mov    0xf03f37f5,%al
f010bfc3:	83 e0 ef             	and    $0xffffffef,%eax
f010bfc6:	a2 f5 37 3f f0       	mov    %al,0xf03f37f5
f010bfcb:	a0 f5 37 3f f0       	mov    0xf03f37f5,%al
f010bfd0:	83 c8 60             	or     $0x60,%eax
f010bfd3:	a2 f5 37 3f f0       	mov    %al,0xf03f37f5
f010bfd8:	a0 f5 37 3f f0       	mov    0xf03f37f5,%al
f010bfdd:	83 c8 80             	or     $0xffffff80,%eax
f010bfe0:	a2 f5 37 3f f0       	mov    %al,0xf03f37f5
f010bfe5:	b8 dc cf 10 f0       	mov    $0xf010cfdc,%eax
f010bfea:	c1 e8 10             	shr    $0x10,%eax
f010bfed:	66 a3 f6 37 3f f0    	mov    %ax,0xf03f37f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bff3:	b8 e2 cf 10 f0       	mov    $0xf010cfe2,%eax
f010bff8:	66 a3 f8 37 3f f0    	mov    %ax,0xf03f37f8
f010bffe:	66 c7 05 fa 37 3f f0 	movw   $0x8,0xf03f37fa
f010c005:	08 00 
f010c007:	a0 fc 37 3f f0       	mov    0xf03f37fc,%al
f010c00c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c00f:	a2 fc 37 3f f0       	mov    %al,0xf03f37fc
f010c014:	a0 fc 37 3f f0       	mov    0xf03f37fc,%al
f010c019:	83 e0 1f             	and    $0x1f,%eax
f010c01c:	a2 fc 37 3f f0       	mov    %al,0xf03f37fc
f010c021:	a0 fd 37 3f f0       	mov    0xf03f37fd,%al
f010c026:	83 e0 f0             	and    $0xfffffff0,%eax
f010c029:	83 c8 0e             	or     $0xe,%eax
f010c02c:	a2 fd 37 3f f0       	mov    %al,0xf03f37fd
f010c031:	a0 fd 37 3f f0       	mov    0xf03f37fd,%al
f010c036:	83 e0 ef             	and    $0xffffffef,%eax
f010c039:	a2 fd 37 3f f0       	mov    %al,0xf03f37fd
f010c03e:	a0 fd 37 3f f0       	mov    0xf03f37fd,%al
f010c043:	83 c8 60             	or     $0x60,%eax
f010c046:	a2 fd 37 3f f0       	mov    %al,0xf03f37fd
f010c04b:	a0 fd 37 3f f0       	mov    0xf03f37fd,%al
f010c050:	83 c8 80             	or     $0xffffff80,%eax
f010c053:	a2 fd 37 3f f0       	mov    %al,0xf03f37fd
f010c058:	b8 e2 cf 10 f0       	mov    $0xf010cfe2,%eax
f010c05d:	c1 e8 10             	shr    $0x10,%eax
f010c060:	66 a3 fe 37 3f f0    	mov    %ax,0xf03f37fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010c066:	b8 e8 cf 10 f0       	mov    $0xf010cfe8,%eax
f010c06b:	66 a3 60 38 3f f0    	mov    %ax,0xf03f3860
f010c071:	66 c7 05 62 38 3f f0 	movw   $0x8,0xf03f3862
f010c078:	08 00 
f010c07a:	a0 64 38 3f f0       	mov    0xf03f3864,%al
f010c07f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c082:	a2 64 38 3f f0       	mov    %al,0xf03f3864
f010c087:	a0 64 38 3f f0       	mov    0xf03f3864,%al
f010c08c:	83 e0 1f             	and    $0x1f,%eax
f010c08f:	a2 64 38 3f f0       	mov    %al,0xf03f3864
f010c094:	a0 65 38 3f f0       	mov    0xf03f3865,%al
f010c099:	83 e0 f0             	and    $0xfffffff0,%eax
f010c09c:	83 c8 0e             	or     $0xe,%eax
f010c09f:	a2 65 38 3f f0       	mov    %al,0xf03f3865
f010c0a4:	a0 65 38 3f f0       	mov    0xf03f3865,%al
f010c0a9:	83 e0 ef             	and    $0xffffffef,%eax
f010c0ac:	a2 65 38 3f f0       	mov    %al,0xf03f3865
f010c0b1:	a0 65 38 3f f0       	mov    0xf03f3865,%al
f010c0b6:	83 c8 60             	or     $0x60,%eax
f010c0b9:	a2 65 38 3f f0       	mov    %al,0xf03f3865
f010c0be:	a0 65 38 3f f0       	mov    0xf03f3865,%al
f010c0c3:	83 c8 80             	or     $0xffffff80,%eax
f010c0c6:	a2 65 38 3f f0       	mov    %al,0xf03f3865
f010c0cb:	b8 e8 cf 10 f0       	mov    $0xf010cfe8,%eax
f010c0d0:	c1 e8 10             	shr    $0x10,%eax
f010c0d3:	66 a3 66 38 3f f0    	mov    %ax,0xf03f3866
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010c0d9:	b8 ee cf 10 f0       	mov    $0xf010cfee,%eax
f010c0de:	66 a3 68 38 3f f0    	mov    %ax,0xf03f3868
f010c0e4:	66 c7 05 6a 38 3f f0 	movw   $0x8,0xf03f386a
f010c0eb:	08 00 
f010c0ed:	a0 6c 38 3f f0       	mov    0xf03f386c,%al
f010c0f2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0f5:	a2 6c 38 3f f0       	mov    %al,0xf03f386c
f010c0fa:	a0 6c 38 3f f0       	mov    0xf03f386c,%al
f010c0ff:	83 e0 1f             	and    $0x1f,%eax
f010c102:	a2 6c 38 3f f0       	mov    %al,0xf03f386c
f010c107:	a0 6d 38 3f f0       	mov    0xf03f386d,%al
f010c10c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c10f:	83 c8 0e             	or     $0xe,%eax
f010c112:	a2 6d 38 3f f0       	mov    %al,0xf03f386d
f010c117:	a0 6d 38 3f f0       	mov    0xf03f386d,%al
f010c11c:	83 e0 ef             	and    $0xffffffef,%eax
f010c11f:	a2 6d 38 3f f0       	mov    %al,0xf03f386d
f010c124:	a0 6d 38 3f f0       	mov    0xf03f386d,%al
f010c129:	83 c8 60             	or     $0x60,%eax
f010c12c:	a2 6d 38 3f f0       	mov    %al,0xf03f386d
f010c131:	a0 6d 38 3f f0       	mov    0xf03f386d,%al
f010c136:	83 c8 80             	or     $0xffffff80,%eax
f010c139:	a2 6d 38 3f f0       	mov    %al,0xf03f386d
f010c13e:	b8 ee cf 10 f0       	mov    $0xf010cfee,%eax
f010c143:	c1 e8 10             	shr    $0x10,%eax
f010c146:	66 a3 6e 38 3f f0    	mov    %ax,0xf03f386e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010c14c:	b8 f4 cf 10 f0       	mov    $0xf010cff4,%eax
f010c151:	66 a3 70 38 3f f0    	mov    %ax,0xf03f3870
f010c157:	66 c7 05 72 38 3f f0 	movw   $0x8,0xf03f3872
f010c15e:	08 00 
f010c160:	a0 74 38 3f f0       	mov    0xf03f3874,%al
f010c165:	83 e0 e0             	and    $0xffffffe0,%eax
f010c168:	a2 74 38 3f f0       	mov    %al,0xf03f3874
f010c16d:	a0 74 38 3f f0       	mov    0xf03f3874,%al
f010c172:	83 e0 1f             	and    $0x1f,%eax
f010c175:	a2 74 38 3f f0       	mov    %al,0xf03f3874
f010c17a:	a0 75 38 3f f0       	mov    0xf03f3875,%al
f010c17f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c182:	83 c8 0e             	or     $0xe,%eax
f010c185:	a2 75 38 3f f0       	mov    %al,0xf03f3875
f010c18a:	a0 75 38 3f f0       	mov    0xf03f3875,%al
f010c18f:	83 e0 ef             	and    $0xffffffef,%eax
f010c192:	a2 75 38 3f f0       	mov    %al,0xf03f3875
f010c197:	a0 75 38 3f f0       	mov    0xf03f3875,%al
f010c19c:	83 c8 60             	or     $0x60,%eax
f010c19f:	a2 75 38 3f f0       	mov    %al,0xf03f3875
f010c1a4:	a0 75 38 3f f0       	mov    0xf03f3875,%al
f010c1a9:	83 c8 80             	or     $0xffffff80,%eax
f010c1ac:	a2 75 38 3f f0       	mov    %al,0xf03f3875
f010c1b1:	b8 f4 cf 10 f0       	mov    $0xf010cff4,%eax
f010c1b6:	c1 e8 10             	shr    $0x10,%eax
f010c1b9:	66 a3 76 38 3f f0    	mov    %ax,0xf03f3876
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c1bf:	b8 fa cf 10 f0       	mov    $0xf010cffa,%eax
f010c1c4:	66 a3 78 38 3f f0    	mov    %ax,0xf03f3878
f010c1ca:	66 c7 05 7a 38 3f f0 	movw   $0x8,0xf03f387a
f010c1d1:	08 00 
f010c1d3:	a0 7c 38 3f f0       	mov    0xf03f387c,%al
f010c1d8:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1db:	a2 7c 38 3f f0       	mov    %al,0xf03f387c
f010c1e0:	a0 7c 38 3f f0       	mov    0xf03f387c,%al
f010c1e5:	83 e0 1f             	and    $0x1f,%eax
f010c1e8:	a2 7c 38 3f f0       	mov    %al,0xf03f387c
f010c1ed:	a0 7d 38 3f f0       	mov    0xf03f387d,%al
f010c1f2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1f5:	83 c8 0e             	or     $0xe,%eax
f010c1f8:	a2 7d 38 3f f0       	mov    %al,0xf03f387d
f010c1fd:	a0 7d 38 3f f0       	mov    0xf03f387d,%al
f010c202:	83 e0 ef             	and    $0xffffffef,%eax
f010c205:	a2 7d 38 3f f0       	mov    %al,0xf03f387d
f010c20a:	a0 7d 38 3f f0       	mov    0xf03f387d,%al
f010c20f:	83 c8 60             	or     $0x60,%eax
f010c212:	a2 7d 38 3f f0       	mov    %al,0xf03f387d
f010c217:	a0 7d 38 3f f0       	mov    0xf03f387d,%al
f010c21c:	83 c8 80             	or     $0xffffff80,%eax
f010c21f:	a2 7d 38 3f f0       	mov    %al,0xf03f387d
f010c224:	b8 fa cf 10 f0       	mov    $0xf010cffa,%eax
f010c229:	c1 e8 10             	shr    $0x10,%eax
f010c22c:	66 a3 7e 38 3f f0    	mov    %ax,0xf03f387e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c232:	b8 00 d0 10 f0       	mov    $0xf010d000,%eax
f010c237:	66 a3 80 38 3f f0    	mov    %ax,0xf03f3880
f010c23d:	66 c7 05 82 38 3f f0 	movw   $0x8,0xf03f3882
f010c244:	08 00 
f010c246:	a0 84 38 3f f0       	mov    0xf03f3884,%al
f010c24b:	83 e0 e0             	and    $0xffffffe0,%eax
f010c24e:	a2 84 38 3f f0       	mov    %al,0xf03f3884
f010c253:	a0 84 38 3f f0       	mov    0xf03f3884,%al
f010c258:	83 e0 1f             	and    $0x1f,%eax
f010c25b:	a2 84 38 3f f0       	mov    %al,0xf03f3884
f010c260:	a0 85 38 3f f0       	mov    0xf03f3885,%al
f010c265:	83 e0 f0             	and    $0xfffffff0,%eax
f010c268:	83 c8 0e             	or     $0xe,%eax
f010c26b:	a2 85 38 3f f0       	mov    %al,0xf03f3885
f010c270:	a0 85 38 3f f0       	mov    0xf03f3885,%al
f010c275:	83 e0 ef             	and    $0xffffffef,%eax
f010c278:	a2 85 38 3f f0       	mov    %al,0xf03f3885
f010c27d:	a0 85 38 3f f0       	mov    0xf03f3885,%al
f010c282:	83 c8 60             	or     $0x60,%eax
f010c285:	a2 85 38 3f f0       	mov    %al,0xf03f3885
f010c28a:	a0 85 38 3f f0       	mov    0xf03f3885,%al
f010c28f:	83 c8 80             	or     $0xffffff80,%eax
f010c292:	a2 85 38 3f f0       	mov    %al,0xf03f3885
f010c297:	b8 00 d0 10 f0       	mov    $0xf010d000,%eax
f010c29c:	c1 e8 10             	shr    $0x10,%eax
f010c29f:	66 a3 86 38 3f f0    	mov    %ax,0xf03f3886
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c2a5:	b8 06 d0 10 f0       	mov    $0xf010d006,%eax
f010c2aa:	66 a3 88 38 3f f0    	mov    %ax,0xf03f3888
f010c2b0:	66 c7 05 8a 38 3f f0 	movw   $0x8,0xf03f388a
f010c2b7:	08 00 
f010c2b9:	a0 8c 38 3f f0       	mov    0xf03f388c,%al
f010c2be:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2c1:	a2 8c 38 3f f0       	mov    %al,0xf03f388c
f010c2c6:	a0 8c 38 3f f0       	mov    0xf03f388c,%al
f010c2cb:	83 e0 1f             	and    $0x1f,%eax
f010c2ce:	a2 8c 38 3f f0       	mov    %al,0xf03f388c
f010c2d3:	a0 8d 38 3f f0       	mov    0xf03f388d,%al
f010c2d8:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2db:	83 c8 0e             	or     $0xe,%eax
f010c2de:	a2 8d 38 3f f0       	mov    %al,0xf03f388d
f010c2e3:	a0 8d 38 3f f0       	mov    0xf03f388d,%al
f010c2e8:	83 e0 ef             	and    $0xffffffef,%eax
f010c2eb:	a2 8d 38 3f f0       	mov    %al,0xf03f388d
f010c2f0:	a0 8d 38 3f f0       	mov    0xf03f388d,%al
f010c2f5:	83 c8 60             	or     $0x60,%eax
f010c2f8:	a2 8d 38 3f f0       	mov    %al,0xf03f388d
f010c2fd:	a0 8d 38 3f f0       	mov    0xf03f388d,%al
f010c302:	83 c8 80             	or     $0xffffff80,%eax
f010c305:	a2 8d 38 3f f0       	mov    %al,0xf03f388d
f010c30a:	b8 06 d0 10 f0       	mov    $0xf010d006,%eax
f010c30f:	c1 e8 10             	shr    $0x10,%eax
f010c312:	66 a3 8e 38 3f f0    	mov    %ax,0xf03f388e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c318:	b8 0c d0 10 f0       	mov    $0xf010d00c,%eax
f010c31d:	66 a3 90 38 3f f0    	mov    %ax,0xf03f3890
f010c323:	66 c7 05 92 38 3f f0 	movw   $0x8,0xf03f3892
f010c32a:	08 00 
f010c32c:	a0 94 38 3f f0       	mov    0xf03f3894,%al
f010c331:	83 e0 e0             	and    $0xffffffe0,%eax
f010c334:	a2 94 38 3f f0       	mov    %al,0xf03f3894
f010c339:	a0 94 38 3f f0       	mov    0xf03f3894,%al
f010c33e:	83 e0 1f             	and    $0x1f,%eax
f010c341:	a2 94 38 3f f0       	mov    %al,0xf03f3894
f010c346:	a0 95 38 3f f0       	mov    0xf03f3895,%al
f010c34b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c34e:	83 c8 0e             	or     $0xe,%eax
f010c351:	a2 95 38 3f f0       	mov    %al,0xf03f3895
f010c356:	a0 95 38 3f f0       	mov    0xf03f3895,%al
f010c35b:	83 e0 ef             	and    $0xffffffef,%eax
f010c35e:	a2 95 38 3f f0       	mov    %al,0xf03f3895
f010c363:	a0 95 38 3f f0       	mov    0xf03f3895,%al
f010c368:	83 c8 60             	or     $0x60,%eax
f010c36b:	a2 95 38 3f f0       	mov    %al,0xf03f3895
f010c370:	a0 95 38 3f f0       	mov    0xf03f3895,%al
f010c375:	83 c8 80             	or     $0xffffff80,%eax
f010c378:	a2 95 38 3f f0       	mov    %al,0xf03f3895
f010c37d:	b8 0c d0 10 f0       	mov    $0xf010d00c,%eax
f010c382:	c1 e8 10             	shr    $0x10,%eax
f010c385:	66 a3 96 38 3f f0    	mov    %ax,0xf03f3896
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c38b:	b8 12 d0 10 f0       	mov    $0xf010d012,%eax
f010c390:	66 a3 98 38 3f f0    	mov    %ax,0xf03f3898
f010c396:	66 c7 05 9a 38 3f f0 	movw   $0x8,0xf03f389a
f010c39d:	08 00 
f010c39f:	a0 9c 38 3f f0       	mov    0xf03f389c,%al
f010c3a4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3a7:	a2 9c 38 3f f0       	mov    %al,0xf03f389c
f010c3ac:	a0 9c 38 3f f0       	mov    0xf03f389c,%al
f010c3b1:	83 e0 1f             	and    $0x1f,%eax
f010c3b4:	a2 9c 38 3f f0       	mov    %al,0xf03f389c
f010c3b9:	a0 9d 38 3f f0       	mov    0xf03f389d,%al
f010c3be:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3c1:	83 c8 0e             	or     $0xe,%eax
f010c3c4:	a2 9d 38 3f f0       	mov    %al,0xf03f389d
f010c3c9:	a0 9d 38 3f f0       	mov    0xf03f389d,%al
f010c3ce:	83 e0 ef             	and    $0xffffffef,%eax
f010c3d1:	a2 9d 38 3f f0       	mov    %al,0xf03f389d
f010c3d6:	a0 9d 38 3f f0       	mov    0xf03f389d,%al
f010c3db:	83 c8 60             	or     $0x60,%eax
f010c3de:	a2 9d 38 3f f0       	mov    %al,0xf03f389d
f010c3e3:	a0 9d 38 3f f0       	mov    0xf03f389d,%al
f010c3e8:	83 c8 80             	or     $0xffffff80,%eax
f010c3eb:	a2 9d 38 3f f0       	mov    %al,0xf03f389d
f010c3f0:	b8 12 d0 10 f0       	mov    $0xf010d012,%eax
f010c3f5:	c1 e8 10             	shr    $0x10,%eax
f010c3f8:	66 a3 9e 38 3f f0    	mov    %ax,0xf03f389e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c3fe:	b8 18 d0 10 f0       	mov    $0xf010d018,%eax
f010c403:	66 a3 a0 38 3f f0    	mov    %ax,0xf03f38a0
f010c409:	66 c7 05 a2 38 3f f0 	movw   $0x8,0xf03f38a2
f010c410:	08 00 
f010c412:	a0 a4 38 3f f0       	mov    0xf03f38a4,%al
f010c417:	83 e0 e0             	and    $0xffffffe0,%eax
f010c41a:	a2 a4 38 3f f0       	mov    %al,0xf03f38a4
f010c41f:	a0 a4 38 3f f0       	mov    0xf03f38a4,%al
f010c424:	83 e0 1f             	and    $0x1f,%eax
f010c427:	a2 a4 38 3f f0       	mov    %al,0xf03f38a4
f010c42c:	a0 a5 38 3f f0       	mov    0xf03f38a5,%al
f010c431:	83 e0 f0             	and    $0xfffffff0,%eax
f010c434:	83 c8 0e             	or     $0xe,%eax
f010c437:	a2 a5 38 3f f0       	mov    %al,0xf03f38a5
f010c43c:	a0 a5 38 3f f0       	mov    0xf03f38a5,%al
f010c441:	83 e0 ef             	and    $0xffffffef,%eax
f010c444:	a2 a5 38 3f f0       	mov    %al,0xf03f38a5
f010c449:	a0 a5 38 3f f0       	mov    0xf03f38a5,%al
f010c44e:	83 c8 60             	or     $0x60,%eax
f010c451:	a2 a5 38 3f f0       	mov    %al,0xf03f38a5
f010c456:	a0 a5 38 3f f0       	mov    0xf03f38a5,%al
f010c45b:	83 c8 80             	or     $0xffffff80,%eax
f010c45e:	a2 a5 38 3f f0       	mov    %al,0xf03f38a5
f010c463:	b8 18 d0 10 f0       	mov    $0xf010d018,%eax
f010c468:	c1 e8 10             	shr    $0x10,%eax
f010c46b:	66 a3 a6 38 3f f0    	mov    %ax,0xf03f38a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c471:	b8 1e d0 10 f0       	mov    $0xf010d01e,%eax
f010c476:	66 a3 a8 38 3f f0    	mov    %ax,0xf03f38a8
f010c47c:	66 c7 05 aa 38 3f f0 	movw   $0x8,0xf03f38aa
f010c483:	08 00 
f010c485:	a0 ac 38 3f f0       	mov    0xf03f38ac,%al
f010c48a:	83 e0 e0             	and    $0xffffffe0,%eax
f010c48d:	a2 ac 38 3f f0       	mov    %al,0xf03f38ac
f010c492:	a0 ac 38 3f f0       	mov    0xf03f38ac,%al
f010c497:	83 e0 1f             	and    $0x1f,%eax
f010c49a:	a2 ac 38 3f f0       	mov    %al,0xf03f38ac
f010c49f:	a0 ad 38 3f f0       	mov    0xf03f38ad,%al
f010c4a4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4a7:	83 c8 0e             	or     $0xe,%eax
f010c4aa:	a2 ad 38 3f f0       	mov    %al,0xf03f38ad
f010c4af:	a0 ad 38 3f f0       	mov    0xf03f38ad,%al
f010c4b4:	83 e0 ef             	and    $0xffffffef,%eax
f010c4b7:	a2 ad 38 3f f0       	mov    %al,0xf03f38ad
f010c4bc:	a0 ad 38 3f f0       	mov    0xf03f38ad,%al
f010c4c1:	83 c8 60             	or     $0x60,%eax
f010c4c4:	a2 ad 38 3f f0       	mov    %al,0xf03f38ad
f010c4c9:	a0 ad 38 3f f0       	mov    0xf03f38ad,%al
f010c4ce:	83 c8 80             	or     $0xffffff80,%eax
f010c4d1:	a2 ad 38 3f f0       	mov    %al,0xf03f38ad
f010c4d6:	b8 1e d0 10 f0       	mov    $0xf010d01e,%eax
f010c4db:	c1 e8 10             	shr    $0x10,%eax
f010c4de:	66 a3 ae 38 3f f0    	mov    %ax,0xf03f38ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c4e4:	b8 24 d0 10 f0       	mov    $0xf010d024,%eax
f010c4e9:	66 a3 b0 38 3f f0    	mov    %ax,0xf03f38b0
f010c4ef:	66 c7 05 b2 38 3f f0 	movw   $0x8,0xf03f38b2
f010c4f6:	08 00 
f010c4f8:	a0 b4 38 3f f0       	mov    0xf03f38b4,%al
f010c4fd:	83 e0 e0             	and    $0xffffffe0,%eax
f010c500:	a2 b4 38 3f f0       	mov    %al,0xf03f38b4
f010c505:	a0 b4 38 3f f0       	mov    0xf03f38b4,%al
f010c50a:	83 e0 1f             	and    $0x1f,%eax
f010c50d:	a2 b4 38 3f f0       	mov    %al,0xf03f38b4
f010c512:	a0 b5 38 3f f0       	mov    0xf03f38b5,%al
f010c517:	83 e0 f0             	and    $0xfffffff0,%eax
f010c51a:	83 c8 0e             	or     $0xe,%eax
f010c51d:	a2 b5 38 3f f0       	mov    %al,0xf03f38b5
f010c522:	a0 b5 38 3f f0       	mov    0xf03f38b5,%al
f010c527:	83 e0 ef             	and    $0xffffffef,%eax
f010c52a:	a2 b5 38 3f f0       	mov    %al,0xf03f38b5
f010c52f:	a0 b5 38 3f f0       	mov    0xf03f38b5,%al
f010c534:	83 c8 60             	or     $0x60,%eax
f010c537:	a2 b5 38 3f f0       	mov    %al,0xf03f38b5
f010c53c:	a0 b5 38 3f f0       	mov    0xf03f38b5,%al
f010c541:	83 c8 80             	or     $0xffffff80,%eax
f010c544:	a2 b5 38 3f f0       	mov    %al,0xf03f38b5
f010c549:	b8 24 d0 10 f0       	mov    $0xf010d024,%eax
f010c54e:	c1 e8 10             	shr    $0x10,%eax
f010c551:	66 a3 b6 38 3f f0    	mov    %ax,0xf03f38b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c557:	b8 2a d0 10 f0       	mov    $0xf010d02a,%eax
f010c55c:	66 a3 b8 38 3f f0    	mov    %ax,0xf03f38b8
f010c562:	66 c7 05 ba 38 3f f0 	movw   $0x8,0xf03f38ba
f010c569:	08 00 
f010c56b:	a0 bc 38 3f f0       	mov    0xf03f38bc,%al
f010c570:	83 e0 e0             	and    $0xffffffe0,%eax
f010c573:	a2 bc 38 3f f0       	mov    %al,0xf03f38bc
f010c578:	a0 bc 38 3f f0       	mov    0xf03f38bc,%al
f010c57d:	83 e0 1f             	and    $0x1f,%eax
f010c580:	a2 bc 38 3f f0       	mov    %al,0xf03f38bc
f010c585:	a0 bd 38 3f f0       	mov    0xf03f38bd,%al
f010c58a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c58d:	83 c8 0e             	or     $0xe,%eax
f010c590:	a2 bd 38 3f f0       	mov    %al,0xf03f38bd
f010c595:	a0 bd 38 3f f0       	mov    0xf03f38bd,%al
f010c59a:	83 e0 ef             	and    $0xffffffef,%eax
f010c59d:	a2 bd 38 3f f0       	mov    %al,0xf03f38bd
f010c5a2:	a0 bd 38 3f f0       	mov    0xf03f38bd,%al
f010c5a7:	83 c8 60             	or     $0x60,%eax
f010c5aa:	a2 bd 38 3f f0       	mov    %al,0xf03f38bd
f010c5af:	a0 bd 38 3f f0       	mov    0xf03f38bd,%al
f010c5b4:	83 c8 80             	or     $0xffffff80,%eax
f010c5b7:	a2 bd 38 3f f0       	mov    %al,0xf03f38bd
f010c5bc:	b8 2a d0 10 f0       	mov    $0xf010d02a,%eax
f010c5c1:	c1 e8 10             	shr    $0x10,%eax
f010c5c4:	66 a3 be 38 3f f0    	mov    %ax,0xf03f38be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c5ca:	b8 30 d0 10 f0       	mov    $0xf010d030,%eax
f010c5cf:	66 a3 c0 38 3f f0    	mov    %ax,0xf03f38c0
f010c5d5:	66 c7 05 c2 38 3f f0 	movw   $0x8,0xf03f38c2
f010c5dc:	08 00 
f010c5de:	a0 c4 38 3f f0       	mov    0xf03f38c4,%al
f010c5e3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5e6:	a2 c4 38 3f f0       	mov    %al,0xf03f38c4
f010c5eb:	a0 c4 38 3f f0       	mov    0xf03f38c4,%al
f010c5f0:	83 e0 1f             	and    $0x1f,%eax
f010c5f3:	a2 c4 38 3f f0       	mov    %al,0xf03f38c4
f010c5f8:	a0 c5 38 3f f0       	mov    0xf03f38c5,%al
f010c5fd:	83 e0 f0             	and    $0xfffffff0,%eax
f010c600:	83 c8 0e             	or     $0xe,%eax
f010c603:	a2 c5 38 3f f0       	mov    %al,0xf03f38c5
f010c608:	a0 c5 38 3f f0       	mov    0xf03f38c5,%al
f010c60d:	83 e0 ef             	and    $0xffffffef,%eax
f010c610:	a2 c5 38 3f f0       	mov    %al,0xf03f38c5
f010c615:	a0 c5 38 3f f0       	mov    0xf03f38c5,%al
f010c61a:	83 c8 60             	or     $0x60,%eax
f010c61d:	a2 c5 38 3f f0       	mov    %al,0xf03f38c5
f010c622:	a0 c5 38 3f f0       	mov    0xf03f38c5,%al
f010c627:	83 c8 80             	or     $0xffffff80,%eax
f010c62a:	a2 c5 38 3f f0       	mov    %al,0xf03f38c5
f010c62f:	b8 30 d0 10 f0       	mov    $0xf010d030,%eax
f010c634:	c1 e8 10             	shr    $0x10,%eax
f010c637:	66 a3 c6 38 3f f0    	mov    %ax,0xf03f38c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c63d:	b8 36 d0 10 f0       	mov    $0xf010d036,%eax
f010c642:	66 a3 c8 38 3f f0    	mov    %ax,0xf03f38c8
f010c648:	66 c7 05 ca 38 3f f0 	movw   $0x8,0xf03f38ca
f010c64f:	08 00 
f010c651:	a0 cc 38 3f f0       	mov    0xf03f38cc,%al
f010c656:	83 e0 e0             	and    $0xffffffe0,%eax
f010c659:	a2 cc 38 3f f0       	mov    %al,0xf03f38cc
f010c65e:	a0 cc 38 3f f0       	mov    0xf03f38cc,%al
f010c663:	83 e0 1f             	and    $0x1f,%eax
f010c666:	a2 cc 38 3f f0       	mov    %al,0xf03f38cc
f010c66b:	a0 cd 38 3f f0       	mov    0xf03f38cd,%al
f010c670:	83 e0 f0             	and    $0xfffffff0,%eax
f010c673:	83 c8 0e             	or     $0xe,%eax
f010c676:	a2 cd 38 3f f0       	mov    %al,0xf03f38cd
f010c67b:	a0 cd 38 3f f0       	mov    0xf03f38cd,%al
f010c680:	83 e0 ef             	and    $0xffffffef,%eax
f010c683:	a2 cd 38 3f f0       	mov    %al,0xf03f38cd
f010c688:	a0 cd 38 3f f0       	mov    0xf03f38cd,%al
f010c68d:	83 c8 60             	or     $0x60,%eax
f010c690:	a2 cd 38 3f f0       	mov    %al,0xf03f38cd
f010c695:	a0 cd 38 3f f0       	mov    0xf03f38cd,%al
f010c69a:	83 c8 80             	or     $0xffffff80,%eax
f010c69d:	a2 cd 38 3f f0       	mov    %al,0xf03f38cd
f010c6a2:	b8 36 d0 10 f0       	mov    $0xf010d036,%eax
f010c6a7:	c1 e8 10             	shr    $0x10,%eax
f010c6aa:	66 a3 ce 38 3f f0    	mov    %ax,0xf03f38ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c6b0:	b8 3c d0 10 f0       	mov    $0xf010d03c,%eax
f010c6b5:	66 a3 d0 38 3f f0    	mov    %ax,0xf03f38d0
f010c6bb:	66 c7 05 d2 38 3f f0 	movw   $0x8,0xf03f38d2
f010c6c2:	08 00 
f010c6c4:	a0 d4 38 3f f0       	mov    0xf03f38d4,%al
f010c6c9:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6cc:	a2 d4 38 3f f0       	mov    %al,0xf03f38d4
f010c6d1:	a0 d4 38 3f f0       	mov    0xf03f38d4,%al
f010c6d6:	83 e0 1f             	and    $0x1f,%eax
f010c6d9:	a2 d4 38 3f f0       	mov    %al,0xf03f38d4
f010c6de:	a0 d5 38 3f f0       	mov    0xf03f38d5,%al
f010c6e3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6e6:	83 c8 0e             	or     $0xe,%eax
f010c6e9:	a2 d5 38 3f f0       	mov    %al,0xf03f38d5
f010c6ee:	a0 d5 38 3f f0       	mov    0xf03f38d5,%al
f010c6f3:	83 e0 ef             	and    $0xffffffef,%eax
f010c6f6:	a2 d5 38 3f f0       	mov    %al,0xf03f38d5
f010c6fb:	a0 d5 38 3f f0       	mov    0xf03f38d5,%al
f010c700:	83 c8 60             	or     $0x60,%eax
f010c703:	a2 d5 38 3f f0       	mov    %al,0xf03f38d5
f010c708:	a0 d5 38 3f f0       	mov    0xf03f38d5,%al
f010c70d:	83 c8 80             	or     $0xffffff80,%eax
f010c710:	a2 d5 38 3f f0       	mov    %al,0xf03f38d5
f010c715:	b8 3c d0 10 f0       	mov    $0xf010d03c,%eax
f010c71a:	c1 e8 10             	shr    $0x10,%eax
f010c71d:	66 a3 d6 38 3f f0    	mov    %ax,0xf03f38d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c723:	b8 42 d0 10 f0       	mov    $0xf010d042,%eax
f010c728:	66 a3 d8 38 3f f0    	mov    %ax,0xf03f38d8
f010c72e:	66 c7 05 da 38 3f f0 	movw   $0x8,0xf03f38da
f010c735:	08 00 
f010c737:	a0 dc 38 3f f0       	mov    0xf03f38dc,%al
f010c73c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c73f:	a2 dc 38 3f f0       	mov    %al,0xf03f38dc
f010c744:	a0 dc 38 3f f0       	mov    0xf03f38dc,%al
f010c749:	83 e0 1f             	and    $0x1f,%eax
f010c74c:	a2 dc 38 3f f0       	mov    %al,0xf03f38dc
f010c751:	a0 dd 38 3f f0       	mov    0xf03f38dd,%al
f010c756:	83 e0 f0             	and    $0xfffffff0,%eax
f010c759:	83 c8 0e             	or     $0xe,%eax
f010c75c:	a2 dd 38 3f f0       	mov    %al,0xf03f38dd
f010c761:	a0 dd 38 3f f0       	mov    0xf03f38dd,%al
f010c766:	83 e0 ef             	and    $0xffffffef,%eax
f010c769:	a2 dd 38 3f f0       	mov    %al,0xf03f38dd
f010c76e:	a0 dd 38 3f f0       	mov    0xf03f38dd,%al
f010c773:	83 c8 60             	or     $0x60,%eax
f010c776:	a2 dd 38 3f f0       	mov    %al,0xf03f38dd
f010c77b:	a0 dd 38 3f f0       	mov    0xf03f38dd,%al
f010c780:	83 c8 80             	or     $0xffffff80,%eax
f010c783:	a2 dd 38 3f f0       	mov    %al,0xf03f38dd
f010c788:	b8 42 d0 10 f0       	mov    $0xf010d042,%eax
f010c78d:	c1 e8 10             	shr    $0x10,%eax
f010c790:	66 a3 de 38 3f f0    	mov    %ax,0xf03f38de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c796:	c7 05 84 3f 3f f0 00 	movl   $0xefc00000,0xf03f3f84
f010c79d:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c7a0:	66 c7 05 88 3f 3f f0 	movw   $0x10,0xf03f3f88
f010c7a7:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c7a9:	66 c7 05 88 19 17 f0 	movw   $0x68,0xf0171988
f010c7b0:	68 00 
f010c7b2:	b8 80 3f 3f f0       	mov    $0xf03f3f80,%eax
f010c7b7:	66 a3 8a 19 17 f0    	mov    %ax,0xf017198a
f010c7bd:	b8 80 3f 3f f0       	mov    $0xf03f3f80,%eax
f010c7c2:	c1 e8 10             	shr    $0x10,%eax
f010c7c5:	a2 8c 19 17 f0       	mov    %al,0xf017198c
f010c7ca:	a0 8d 19 17 f0       	mov    0xf017198d,%al
f010c7cf:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d2:	83 c8 09             	or     $0x9,%eax
f010c7d5:	a2 8d 19 17 f0       	mov    %al,0xf017198d
f010c7da:	a0 8d 19 17 f0       	mov    0xf017198d,%al
f010c7df:	83 c8 10             	or     $0x10,%eax
f010c7e2:	a2 8d 19 17 f0       	mov    %al,0xf017198d
f010c7e7:	a0 8d 19 17 f0       	mov    0xf017198d,%al
f010c7ec:	83 e0 9f             	and    $0xffffff9f,%eax
f010c7ef:	a2 8d 19 17 f0       	mov    %al,0xf017198d
f010c7f4:	a0 8d 19 17 f0       	mov    0xf017198d,%al
f010c7f9:	83 c8 80             	or     $0xffffff80,%eax
f010c7fc:	a2 8d 19 17 f0       	mov    %al,0xf017198d
f010c801:	a0 8e 19 17 f0       	mov    0xf017198e,%al
f010c806:	83 e0 f0             	and    $0xfffffff0,%eax
f010c809:	a2 8e 19 17 f0       	mov    %al,0xf017198e
f010c80e:	a0 8e 19 17 f0       	mov    0xf017198e,%al
f010c813:	83 e0 ef             	and    $0xffffffef,%eax
f010c816:	a2 8e 19 17 f0       	mov    %al,0xf017198e
f010c81b:	a0 8e 19 17 f0       	mov    0xf017198e,%al
f010c820:	83 e0 df             	and    $0xffffffdf,%eax
f010c823:	a2 8e 19 17 f0       	mov    %al,0xf017198e
f010c828:	a0 8e 19 17 f0       	mov    0xf017198e,%al
f010c82d:	83 c8 40             	or     $0x40,%eax
f010c830:	a2 8e 19 17 f0       	mov    %al,0xf017198e
f010c835:	a0 8e 19 17 f0       	mov    0xf017198e,%al
f010c83a:	83 e0 7f             	and    $0x7f,%eax
f010c83d:	a2 8e 19 17 f0       	mov    %al,0xf017198e
f010c842:	b8 80 3f 3f f0       	mov    $0xf03f3f80,%eax
f010c847:	c1 e8 18             	shr    $0x18,%eax
f010c84a:	a2 8f 19 17 f0       	mov    %al,0xf017198f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c84f:	a0 8d 19 17 f0       	mov    0xf017198d,%al
f010c854:	83 e0 ef             	and    $0xffffffef,%eax
f010c857:	a2 8d 19 17 f0       	mov    %al,0xf017198d
f010c85c:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c862:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c866:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c869:	0f 01 1d 94 1b 17 f0 	lidtl  0xf0171b94
}
f010c870:	90                   	nop
f010c871:	c9                   	leave  
f010c872:	c3                   	ret    

f010c873 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c873:	55                   	push   %ebp
f010c874:	89 e5                	mov    %esp,%ebp
f010c876:	53                   	push   %ebx
f010c877:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c87a:	83 ec 08             	sub    $0x8,%esp
f010c87d:	ff 75 08             	pushl  0x8(%ebp)
f010c880:	68 5b 69 12 f0       	push   $0xf012695b
f010c885:	e8 11 46 ff ff       	call   f0100e9b <cprintf>
f010c88a:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c88d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c890:	83 ec 0c             	sub    $0xc,%esp
f010c893:	50                   	push   %eax
f010c894:	e8 fd 00 00 00       	call   f010c996 <print_regs>
f010c899:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c89f:	8b 40 20             	mov    0x20(%eax),%eax
f010c8a2:	0f b7 c0             	movzwl %ax,%eax
f010c8a5:	83 ec 08             	sub    $0x8,%esp
f010c8a8:	50                   	push   %eax
f010c8a9:	68 6d 69 12 f0       	push   $0xf012696d
f010c8ae:	e8 e8 45 ff ff       	call   f0100e9b <cprintf>
f010c8b3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c8b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8b9:	8b 40 24             	mov    0x24(%eax),%eax
f010c8bc:	0f b7 c0             	movzwl %ax,%eax
f010c8bf:	83 ec 08             	sub    $0x8,%esp
f010c8c2:	50                   	push   %eax
f010c8c3:	68 80 69 12 f0       	push   $0xf0126980
f010c8c8:	e8 ce 45 ff ff       	call   f0100e9b <cprintf>
f010c8cd:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c8d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d3:	8b 58 28             	mov    0x28(%eax),%ebx
f010c8d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d9:	8b 40 28             	mov    0x28(%eax),%eax
f010c8dc:	83 ec 0c             	sub    $0xc,%esp
f010c8df:	50                   	push   %eax
f010c8e0:	e8 d0 ee ff ff       	call   f010b7b5 <trapname>
f010c8e5:	83 c4 10             	add    $0x10,%esp
f010c8e8:	89 c2                	mov    %eax,%edx
f010c8ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ed:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f0:	53                   	push   %ebx
f010c8f1:	52                   	push   %edx
f010c8f2:	50                   	push   %eax
f010c8f3:	68 93 69 12 f0       	push   $0xf0126993
f010c8f8:	e8 9e 45 ff ff       	call   f0100e9b <cprintf>
f010c8fd:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c900:	8b 45 08             	mov    0x8(%ebp),%eax
f010c903:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c906:	83 ec 08             	sub    $0x8,%esp
f010c909:	50                   	push   %eax
f010c90a:	68 aa 69 12 f0       	push   $0xf01269aa
f010c90f:	e8 87 45 ff ff       	call   f0100e9b <cprintf>
f010c914:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c917:	8b 45 08             	mov    0x8(%ebp),%eax
f010c91a:	8b 40 30             	mov    0x30(%eax),%eax
f010c91d:	83 ec 08             	sub    $0x8,%esp
f010c920:	50                   	push   %eax
f010c921:	68 b9 69 12 f0       	push   $0xf01269b9
f010c926:	e8 70 45 ff ff       	call   f0100e9b <cprintf>
f010c92b:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c931:	8b 40 34             	mov    0x34(%eax),%eax
f010c934:	0f b7 c0             	movzwl %ax,%eax
f010c937:	83 ec 08             	sub    $0x8,%esp
f010c93a:	50                   	push   %eax
f010c93b:	68 c8 69 12 f0       	push   $0xf01269c8
f010c940:	e8 56 45 ff ff       	call   f0100e9b <cprintf>
f010c945:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c948:	8b 45 08             	mov    0x8(%ebp),%eax
f010c94b:	8b 40 38             	mov    0x38(%eax),%eax
f010c94e:	83 ec 08             	sub    $0x8,%esp
f010c951:	50                   	push   %eax
f010c952:	68 db 69 12 f0       	push   $0xf01269db
f010c957:	e8 3f 45 ff ff       	call   f0100e9b <cprintf>
f010c95c:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c95f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c962:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c965:	83 ec 08             	sub    $0x8,%esp
f010c968:	50                   	push   %eax
f010c969:	68 ea 69 12 f0       	push   $0xf01269ea
f010c96e:	e8 28 45 ff ff       	call   f0100e9b <cprintf>
f010c973:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c976:	8b 45 08             	mov    0x8(%ebp),%eax
f010c979:	8b 40 40             	mov    0x40(%eax),%eax
f010c97c:	0f b7 c0             	movzwl %ax,%eax
f010c97f:	83 ec 08             	sub    $0x8,%esp
f010c982:	50                   	push   %eax
f010c983:	68 f9 69 12 f0       	push   $0xf01269f9
f010c988:	e8 0e 45 ff ff       	call   f0100e9b <cprintf>
f010c98d:	83 c4 10             	add    $0x10,%esp
}
f010c990:	90                   	nop
f010c991:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c994:	c9                   	leave  
f010c995:	c3                   	ret    

f010c996 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c996:	55                   	push   %ebp
f010c997:	89 e5                	mov    %esp,%ebp
f010c999:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c99c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c99f:	8b 00                	mov    (%eax),%eax
f010c9a1:	83 ec 08             	sub    $0x8,%esp
f010c9a4:	50                   	push   %eax
f010c9a5:	68 0c 6a 12 f0       	push   $0xf0126a0c
f010c9aa:	e8 ec 44 ff ff       	call   f0100e9b <cprintf>
f010c9af:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c9b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9b5:	8b 40 04             	mov    0x4(%eax),%eax
f010c9b8:	83 ec 08             	sub    $0x8,%esp
f010c9bb:	50                   	push   %eax
f010c9bc:	68 1b 6a 12 f0       	push   $0xf0126a1b
f010c9c1:	e8 d5 44 ff ff       	call   f0100e9b <cprintf>
f010c9c6:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c9c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9cc:	8b 40 08             	mov    0x8(%eax),%eax
f010c9cf:	83 ec 08             	sub    $0x8,%esp
f010c9d2:	50                   	push   %eax
f010c9d3:	68 2a 6a 12 f0       	push   $0xf0126a2a
f010c9d8:	e8 be 44 ff ff       	call   f0100e9b <cprintf>
f010c9dd:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c9e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9e3:	8b 40 0c             	mov    0xc(%eax),%eax
f010c9e6:	83 ec 08             	sub    $0x8,%esp
f010c9e9:	50                   	push   %eax
f010c9ea:	68 39 6a 12 f0       	push   $0xf0126a39
f010c9ef:	e8 a7 44 ff ff       	call   f0100e9b <cprintf>
f010c9f4:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c9f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fa:	8b 40 10             	mov    0x10(%eax),%eax
f010c9fd:	83 ec 08             	sub    $0x8,%esp
f010ca00:	50                   	push   %eax
f010ca01:	68 48 6a 12 f0       	push   $0xf0126a48
f010ca06:	e8 90 44 ff ff       	call   f0100e9b <cprintf>
f010ca0b:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010ca0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca11:	8b 40 14             	mov    0x14(%eax),%eax
f010ca14:	83 ec 08             	sub    $0x8,%esp
f010ca17:	50                   	push   %eax
f010ca18:	68 57 6a 12 f0       	push   $0xf0126a57
f010ca1d:	e8 79 44 ff ff       	call   f0100e9b <cprintf>
f010ca22:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010ca25:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca28:	8b 40 18             	mov    0x18(%eax),%eax
f010ca2b:	83 ec 08             	sub    $0x8,%esp
f010ca2e:	50                   	push   %eax
f010ca2f:	68 66 6a 12 f0       	push   $0xf0126a66
f010ca34:	e8 62 44 ff ff       	call   f0100e9b <cprintf>
f010ca39:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010ca3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca3f:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ca42:	83 ec 08             	sub    $0x8,%esp
f010ca45:	50                   	push   %eax
f010ca46:	68 75 6a 12 f0       	push   $0xf0126a75
f010ca4b:	e8 4b 44 ff ff       	call   f0100e9b <cprintf>
f010ca50:	83 c4 10             	add    $0x10,%esp
}
f010ca53:	90                   	nop
f010ca54:	c9                   	leave  
f010ca55:	c3                   	ret    

f010ca56 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010ca56:	55                   	push   %ebp
f010ca57:	89 e5                	mov    %esp,%ebp
f010ca59:	57                   	push   %edi
f010ca5a:	56                   	push   %esi
f010ca5b:	53                   	push   %ebx
f010ca5c:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010ca5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca62:	8b 40 28             	mov    0x28(%eax),%eax
f010ca65:	83 f8 0e             	cmp    $0xe,%eax
f010ca68:	75 29                	jne    f010ca93 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010ca6a:	83 ec 0c             	sub    $0xc,%esp
f010ca6d:	6a 01                	push   $0x1
f010ca6f:	e8 3b 18 00 00       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010ca74:	83 c4 10             	add    $0x10,%esp
f010ca77:	85 c0                	test   %eax,%eax
f010ca79:	74 05                	je     f010ca80 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ca7b:	e8 72 9a ff ff       	call   f01064f2 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ca80:	83 ec 0c             	sub    $0xc,%esp
f010ca83:	ff 75 08             	pushl  0x8(%ebp)
f010ca86:	e8 51 02 00 00       	call   f010ccdc <fault_handler>
f010ca8b:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010ca8e:	e9 bb 00 00 00       	jmp    f010cb4e <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ca93:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca96:	8b 40 28             	mov    0x28(%eax),%eax
f010ca99:	83 f8 30             	cmp    $0x30,%eax
f010ca9c:	75 42                	jne    f010cae0 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ca9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa1:	8b 78 04             	mov    0x4(%eax),%edi
f010caa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa7:	8b 30                	mov    (%eax),%esi
f010caa9:	8b 45 08             	mov    0x8(%ebp),%eax
f010caac:	8b 58 10             	mov    0x10(%eax),%ebx
f010caaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010cab2:	8b 48 18             	mov    0x18(%eax),%ecx
f010cab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010cab8:	8b 50 14             	mov    0x14(%eax),%edx
f010cabb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cabe:	8b 40 1c             	mov    0x1c(%eax),%eax
f010cac1:	83 ec 08             	sub    $0x8,%esp
f010cac4:	57                   	push   %edi
f010cac5:	56                   	push   %esi
f010cac6:	53                   	push   %ebx
f010cac7:	51                   	push   %ecx
f010cac8:	52                   	push   %edx
f010cac9:	50                   	push   %eax
f010caca:	e8 80 0e 00 00       	call   f010d94f <syscall>
f010cacf:	83 c4 20             	add    $0x20,%esp
f010cad2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010cad5:	8b 45 08             	mov    0x8(%ebp),%eax
f010cad8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010cadb:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010cade:	eb 6e                	jmp    f010cb4e <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010cae0:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae3:	8b 40 28             	mov    0x28(%eax),%eax
f010cae6:	83 f8 08             	cmp    $0x8,%eax
f010cae9:	75 17                	jne    f010cb02 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010caeb:	83 ec 04             	sub    $0x4,%esp
f010caee:	68 84 6a 12 f0       	push   $0xf0126a84
f010caf3:	68 e7 00 00 00       	push   $0xe7
f010caf8:	68 93 6a 12 f0       	push   $0xf0126a93
f010cafd:	e8 18 37 ff ff       	call   f010021a <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010cb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb05:	8b 40 28             	mov    0x28(%eax),%eax
f010cb08:	83 f8 20             	cmp    $0x20,%eax
f010cb0b:	75 07                	jne    f010cb14 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010cb0d:	e8 a3 99 ff ff       	call   f01064b5 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010cb12:	eb 3a                	jmp    f010cb4e <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010cb14:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb17:	8b 40 34             	mov    0x34(%eax),%eax
f010cb1a:	66 83 f8 08          	cmp    $0x8,%ax
f010cb1e:	75 17                	jne    f010cb37 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010cb20:	83 ec 04             	sub    $0x4,%esp
f010cb23:	68 a4 6a 12 f0       	push   $0xf0126aa4
f010cb28:	68 f4 00 00 00       	push   $0xf4
f010cb2d:	68 93 6a 12 f0       	push   $0xf0126a93
f010cb32:	e8 e3 36 ff ff       	call   f010021a <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010cb37:	83 ec 04             	sub    $0x4,%esp
f010cb3a:	68 c0 6a 12 f0       	push   $0xf0126ac0
f010cb3f:	68 f8 00 00 00       	push   $0xf8
f010cb44:	68 93 6a 12 f0       	push   $0xf0126a93
f010cb49:	e8 cc 36 ff ff       	call   f010021a <_panic>

			return;
		}
	}
	return;
}
f010cb4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010cb51:	5b                   	pop    %ebx
f010cb52:	5e                   	pop    %esi
f010cb53:	5f                   	pop    %edi
f010cb54:	5d                   	pop    %ebp
f010cb55:	c3                   	ret    

f010cb56 <trap>:

void trap(struct Trapframe *tf)
{
f010cb56:	55                   	push   %ebp
f010cb57:	89 e5                	mov    %esp,%ebp
f010cb59:	57                   	push   %edi
f010cb5a:	56                   	push   %esi
f010cb5b:	53                   	push   %ebx
f010cb5c:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010cb5f:	e8 d7 7f ff ff       	call   f0104b3b <kclock_stop>

	int userTrap = 0;
f010cb64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb6e:	8b 40 34             	mov    0x34(%eax),%eax
f010cb71:	0f b7 c0             	movzwl %ax,%eax
f010cb74:	83 e0 03             	and    $0x3,%eax
f010cb77:	83 f8 03             	cmp    $0x3,%eax
f010cb7a:	75 49                	jne    f010cbc5 <trap+0x6f>
		assert(curenv);
f010cb7c:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cb81:	85 c0                	test   %eax,%eax
f010cb83:	75 19                	jne    f010cb9e <trap+0x48>
f010cb85:	68 df 6a 12 f0       	push   $0xf0126adf
f010cb8a:	68 e6 6a 12 f0       	push   $0xf0126ae6
f010cb8f:	68 06 01 00 00       	push   $0x106
f010cb94:	68 93 6a 12 f0       	push   $0xf0126a93
f010cb99:	e8 7c 36 ff ff       	call   f010021a <_panic>
		curenv->env_tf = *tf;
f010cb9e:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010cba4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cba7:	89 c3                	mov    %eax,%ebx
f010cba9:	b8 11 00 00 00       	mov    $0x11,%eax
f010cbae:	89 d7                	mov    %edx,%edi
f010cbb0:	89 de                	mov    %ebx,%esi
f010cbb2:	89 c1                	mov    %eax,%ecx
f010cbb4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010cbb6:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cbbb:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010cbbe:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010cbc5:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbc8:	8b 40 28             	mov    0x28(%eax),%eax
f010cbcb:	83 f8 20             	cmp    $0x20,%eax
f010cbce:	75 40                	jne    f010cc10 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010cbd0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cbd4:	0f 84 a6 00 00 00    	je     f010cc80 <trap+0x12a>
		{
			assert(curenv);
f010cbda:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cbdf:	85 c0                	test   %eax,%eax
f010cbe1:	75 19                	jne    f010cbfc <trap+0xa6>
f010cbe3:	68 df 6a 12 f0       	push   $0xf0126adf
f010cbe8:	68 e6 6a 12 f0       	push   $0xf0126ae6
f010cbed:	68 12 01 00 00       	push   $0x112
f010cbf2:	68 93 6a 12 f0       	push   $0xf0126a93
f010cbf7:	e8 1e 36 ff ff       	call   f010021a <_panic>
			curenv->nClocks++ ;
f010cbfc:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cc01:	8b 90 ec 05 00 00    	mov    0x5ec(%eax),%edx
f010cc07:	42                   	inc    %edx
f010cc08:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
f010cc0e:	eb 70                	jmp    f010cc80 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010cc10:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc13:	8b 40 28             	mov    0x28(%eax),%eax
f010cc16:	83 f8 0e             	cmp    $0xe,%eax
f010cc19:	75 65                	jne    f010cc80 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010cc1b:	a0 e8 3f 3f f0       	mov    0xf03f3fe8,%al
f010cc20:	84 c0                	test   %al,%al
f010cc22:	74 5c                	je     f010cc80 <trap+0x12a>
			if (userTrap){
f010cc24:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc28:	74 2c                	je     f010cc56 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010cc2a:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cc2f:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010cc35:	8b 52 30             	mov    0x30(%edx),%edx
f010cc38:	89 d1                	mov    %edx,%ecx
f010cc3a:	8a 15 e8 3f 3f f0    	mov    0xf03f3fe8,%dl
f010cc40:	0f b6 d2             	movzbl %dl,%edx
f010cc43:	01 ca                	add    %ecx,%edx
f010cc45:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cc48:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cc4d:	83 ec 0c             	sub    $0xc,%esp
f010cc50:	50                   	push   %eax
f010cc51:	e8 70 d9 ff ff       	call   f010a5c6 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc59:	8b 40 30             	mov    0x30(%eax),%eax
f010cc5c:	89 c2                	mov    %eax,%edx
f010cc5e:	a0 e8 3f 3f f0       	mov    0xf03f3fe8,%al
f010cc63:	0f b6 c0             	movzbl %al,%eax
f010cc66:	01 d0                	add    %edx,%eax
f010cc68:	89 c2                	mov    %eax,%edx
f010cc6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc6d:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010cc70:	e8 f1 7e ff ff       	call   f0104b66 <kclock_resume>
				env_pop_tf(tf);
f010cc75:	83 ec 0c             	sub    $0xc,%esp
f010cc78:	ff 75 08             	pushl  0x8(%ebp)
f010cc7b:	e8 8d da ff ff       	call   f010a70d <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cc80:	83 ec 0c             	sub    $0xc,%esp
f010cc83:	ff 75 08             	pushl  0x8(%ebp)
f010cc86:	e8 cb fd ff ff       	call   f010ca56 <trap_dispatch>
f010cc8b:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cc8e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc92:	74 3d                	je     f010ccd1 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cc94:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cc99:	85 c0                	test   %eax,%eax
f010cc9b:	74 0d                	je     f010ccaa <trap+0x154>
f010cc9d:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cca2:	8b 40 54             	mov    0x54(%eax),%eax
f010cca5:	83 f8 02             	cmp    $0x2,%eax
f010cca8:	74 19                	je     f010ccc3 <trap+0x16d>
f010ccaa:	68 fc 6a 12 f0       	push   $0xf0126afc
f010ccaf:	68 e6 6a 12 f0       	push   $0xf0126ae6
f010ccb4:	68 27 01 00 00       	push   $0x127
f010ccb9:	68 93 6a 12 f0       	push   $0xf0126a93
f010ccbe:	e8 57 35 ff ff       	call   f010021a <_panic>
		env_run(curenv);
f010ccc3:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010ccc8:	83 ec 0c             	sub    $0xc,%esp
f010cccb:	50                   	push   %eax
f010cccc:	e8 f5 d8 ff ff       	call   f010a5c6 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010ccd1:	83 ec 0c             	sub    $0xc,%esp
f010ccd4:	ff 75 08             	pushl  0x8(%ebp)
f010ccd7:	e8 31 da ff ff       	call   f010a70d <env_pop_tf>

f010ccdc <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010ccdc:	55                   	push   %ebp
f010ccdd:	89 e5                	mov    %esp,%ebp
f010ccdf:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010cce2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cce9:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccec:	8b 40 34             	mov    0x34(%eax),%eax
f010ccef:	0f b7 c0             	movzwl %ax,%eax
f010ccf2:	83 e0 03             	and    $0x3,%eax
f010ccf5:	83 f8 03             	cmp    $0x3,%eax
f010ccf8:	75 07                	jne    f010cd01 <fault_handler+0x25>
		userTrap = 1;
f010ccfa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cd01:	0f 20 d0             	mov    %cr2,%eax
f010cd04:	89 45 dc             	mov    %eax,-0x24(%ebp)
	return val;
f010cd07:	8b 45 dc             	mov    -0x24(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010cd0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010cd0d:	a1 60 3f 3f f0       	mov    0xf03f3f60,%eax
f010cd12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cd15:	75 39                	jne    f010cd50 <fault_handler+0x74>
	{
		num_repeated_fault++ ;
f010cd17:	a0 64 3f 3f f0       	mov    0xf03f3f64,%al
f010cd1c:	40                   	inc    %eax
f010cd1d:	a2 64 3f 3f f0       	mov    %al,0xf03f3f64
		if (num_repeated_fault == 3)
f010cd22:	a0 64 3f 3f f0       	mov    0xf03f3f64,%al
f010cd27:	3c 03                	cmp    $0x3,%al
f010cd29:	75 2c                	jne    f010cd57 <fault_handler+0x7b>
		{
			print_trapframe(tf);
f010cd2b:	83 ec 0c             	sub    $0xc,%esp
f010cd2e:	ff 75 08             	pushl  0x8(%ebp)
f010cd31:	e8 3d fb ff ff       	call   f010c873 <print_trapframe>
f010cd36:	83 c4 10             	add    $0x10,%esp
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cd39:	ff 75 ec             	pushl  -0x14(%ebp)
f010cd3c:	68 2c 6b 12 f0       	push   $0xf0126b2c
f010cd41:	68 4c 01 00 00       	push   $0x14c
f010cd46:	68 93 6a 12 f0       	push   $0xf0126a93
f010cd4b:	e8 ca 34 ff ff       	call   f010021a <_panic>
		}
	}
	else
	{
		num_repeated_fault = 0;
f010cd50:	c6 05 64 3f 3f f0 00 	movb   $0x0,0xf03f3f64
	}
	last_fault_va = fault_va ;
f010cd57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd5a:	a3 60 3f 3f f0       	mov    %eax,0xf03f3f60
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cd5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd63:	75 49                	jne    f010cdae <fault_handler+0xd2>
	{
		//cprintf("trap from KERNEL\n");
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cd65:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cd6c:	77 20                	ja     f010cd8e <fault_handler+0xb2>
f010cd6e:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cd75:	76 17                	jbe    f010cd8e <fault_handler+0xb2>
			panic("Kernel: stack overflow exception!");
f010cd77:	83 ec 04             	sub    $0x4,%esp
f010cd7a:	68 78 6b 12 f0       	push   $0xf0126b78
f010cd7f:	68 5a 01 00 00       	push   $0x15a
f010cd84:	68 93 6a 12 f0       	push   $0xf0126a93
f010cd89:	e8 8c 34 ff ff       	call   f010021a <_panic>
#if USE_KHEAP
		if (fault_va >= KERNEL_HEAP_MAX)
f010cd8e:	81 7d ec ff ef ff ff 	cmpl   $0xffffefff,-0x14(%ebp)
f010cd95:	76 40                	jbe    f010cdd7 <fault_handler+0xfb>
			panic("Kernel: heap overflow exception!");
f010cd97:	83 ec 04             	sub    $0x4,%esp
f010cd9a:	68 9c 6b 12 f0       	push   $0xf0126b9c
f010cd9f:	68 5d 01 00 00       	push   $0x15d
f010cda4:	68 93 6a 12 f0       	push   $0xf0126a93
f010cda9:	e8 6c 34 ff ff       	call   f010021a <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		//cprintf("trap from USER\n");
		if (fault_va >= USTACKTOP && fault_va < USER_TOP)
f010cdae:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cdb5:	76 20                	jbe    f010cdd7 <fault_handler+0xfb>
f010cdb7:	81 7d ec ff ff bf ee 	cmpl   $0xeebfffff,-0x14(%ebp)
f010cdbe:	77 17                	ja     f010cdd7 <fault_handler+0xfb>
			panic("User: stack underflow exception!");
f010cdc0:	83 ec 04             	sub    $0x4,%esp
f010cdc3:	68 c0 6b 12 f0       	push   $0xf0126bc0
f010cdc8:	68 65 01 00 00       	push   $0x165
f010cdcd:	68 93 6a 12 f0       	push   $0xf0126a93
f010cdd2:	e8 43 34 ff ff       	call   f010021a <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cdd7:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010cddc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cddf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cde2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cde8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cdeb:	c1 ea 16             	shr    $0x16,%edx
f010cdee:	c1 e2 02             	shl    $0x2,%edx
f010cdf1:	01 d0                	add    %edx,%eax
f010cdf3:	8b 00                	mov    (%eax),%eax
f010cdf5:	83 e0 01             	and    $0x1,%eax
f010cdf8:	85 c0                	test   %eax,%eax
f010cdfa:	75 2b                	jne    f010ce27 <fault_handler+0x14b>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cdfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdff:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010ce05:	8d 50 01             	lea    0x1(%eax),%edx
f010ce08:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce0b:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)

		table_fault_handler(faulted_env, fault_va);
f010ce11:	83 ec 08             	sub    $0x8,%esp
f010ce14:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce17:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce1a:	e8 75 15 00 00       	call   f010e394 <table_fault_handler>
f010ce1f:	83 c4 10             	add    $0x10,%esp
f010ce22:	e9 1d 01 00 00       	jmp    f010cf44 <fault_handler+0x268>
	}
	else
	{
		if (userTrap)
f010ce27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce2b:	0f 84 95 00 00 00    	je     f010cec6 <fault_handler+0x1ea>
		{
			/*============================================================================================*/
			//TODO: [PROJECT'23.MS2 - #13] [3] PAGE FAULT HANDLER - Check for invalid pointers
			//(e.g. pointing to unmarked user heap page, kernel or wrong access rights),
			//your code is here
			int perms=pt_get_page_permissions(faulted_env->env_page_directory,fault_va);
f010ce31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce34:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ce3a:	83 ec 08             	sub    $0x8,%esp
f010ce3d:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce40:	50                   	push   %eax
f010ce41:	e8 6f be ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010ce46:	83 c4 10             	add    $0x10,%esp
f010ce49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			if((perms&(PERM_PRESENT))&& !(perms&(PERM_WRITEABLE))){
f010ce4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ce4f:	83 e0 01             	and    $0x1,%eax
f010ce52:	85 c0                	test   %eax,%eax
f010ce54:	74 1c                	je     f010ce72 <fault_handler+0x196>
f010ce56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ce59:	83 e0 02             	and    $0x2,%eax
f010ce5c:	85 c0                	test   %eax,%eax
f010ce5e:	75 12                	jne    f010ce72 <fault_handler+0x196>
				sched_kill_env(faulted_env->env_id);
f010ce60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce63:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce66:	83 ec 0c             	sub    $0xc,%esp
f010ce69:	50                   	push   %eax
f010ce6a:	e8 3e 88 ff ff       	call   f01056ad <sched_kill_env>
f010ce6f:	83 c4 10             	add    $0x10,%esp
			}
			if(fault_va>=USER_HEAP_START&&fault_va<USER_HEAP_MAX){
f010ce72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce75:	85 c0                	test   %eax,%eax
f010ce77:	79 27                	jns    f010cea0 <fault_handler+0x1c4>
f010ce79:	81 7d ec ff ff ff 9f 	cmpl   $0x9fffffff,-0x14(%ebp)
f010ce80:	77 1e                	ja     f010cea0 <fault_handler+0x1c4>
				if(!(perms&(MARKED))){
f010ce82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ce85:	25 00 04 00 00       	and    $0x400,%eax
f010ce8a:	85 c0                	test   %eax,%eax
f010ce8c:	75 12                	jne    f010cea0 <fault_handler+0x1c4>
					sched_kill_env(faulted_env->env_id);
f010ce8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce91:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce94:	83 ec 0c             	sub    $0xc,%esp
f010ce97:	50                   	push   %eax
f010ce98:	e8 10 88 ff ff       	call   f01056ad <sched_kill_env>
f010ce9d:	83 c4 10             	add    $0x10,%esp
				}
			}
			if(!(perms&(PERM_USER))&&(perms&(PERM_PRESENT))){
f010cea0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cea3:	83 e0 04             	and    $0x4,%eax
f010cea6:	85 c0                	test   %eax,%eax
f010cea8:	75 1c                	jne    f010cec6 <fault_handler+0x1ea>
f010ceaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cead:	83 e0 01             	and    $0x1,%eax
f010ceb0:	85 c0                	test   %eax,%eax
f010ceb2:	74 12                	je     f010cec6 <fault_handler+0x1ea>
				sched_kill_env(faulted_env->env_id);
f010ceb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ceb7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ceba:	83 ec 0c             	sub    $0xc,%esp
f010cebd:	50                   	push   %eax
f010cebe:	e8 ea 87 ff ff       	call   f01056ad <sched_kill_env>
f010cec3:	83 c4 10             	add    $0x10,%esp

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cec6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cec9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cecf:	83 ec 08             	sub    $0x8,%esp
f010ced2:	ff 75 ec             	pushl  -0x14(%ebp)
f010ced5:	50                   	push   %eax
f010ced6:	e8 da bd ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010cedb:	83 c4 10             	add    $0x10,%esp
f010cede:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if (perms & PERM_PRESENT)
f010cee1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cee4:	83 e0 01             	and    $0x1,%eax
f010cee7:	85 c0                	test   %eax,%eax
f010cee9:	74 17                	je     f010cf02 <fault_handler+0x226>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010ceeb:	ff 75 ec             	pushl  -0x14(%ebp)
f010ceee:	68 e4 6b 12 f0       	push   $0xf0126be4
f010cef3:	68 90 01 00 00       	push   $0x190
f010cef8:	68 93 6a 12 f0       	push   $0xf0126a93
f010cefd:	e8 18 33 ff ff       	call   f010021a <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cf02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf05:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010cf0b:	8d 50 01             	lea    0x1(%eax),%edx
f010cf0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf11:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cf17:	e8 56 14 00 00       	call   f010e372 <isBufferingEnabled>
f010cf1c:	84 c0                	test   %al,%al
f010cf1e:	74 13                	je     f010cf33 <fault_handler+0x257>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010cf20:	83 ec 08             	sub    $0x8,%esp
f010cf23:	ff 75 ec             	pushl  -0x14(%ebp)
f010cf26:	ff 75 e8             	pushl  -0x18(%ebp)
f010cf29:	e8 63 16 00 00       	call   f010e591 <__page_fault_handler_with_buffering>
f010cf2e:	83 c4 10             	add    $0x10,%esp
f010cf31:	eb 11                	jmp    f010cf44 <fault_handler+0x268>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cf33:	83 ec 08             	sub    $0x8,%esp
f010cf36:	ff 75 ec             	pushl  -0x14(%ebp)
f010cf39:	ff 75 e8             	pushl  -0x18(%ebp)
f010cf3c:	e8 77 14 00 00       	call   f010e3b8 <page_fault_handler>
f010cf41:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010cf44:	0f 20 d8             	mov    %cr3,%eax
f010cf47:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010cf4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf4d:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cf50:	90                   	nop
f010cf51:	c9                   	leave  
f010cf52:	c3                   	ret    
f010cf53:	90                   	nop

f010cf54 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cf54:	6a 0e                	push   $0xe
f010cf56:	e9 ed 00 00 00       	jmp    f010d048 <_alltraps>
f010cf5b:	90                   	nop

f010cf5c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cf5c:	6a 00                	push   $0x0
f010cf5e:	6a 30                	push   $0x30
f010cf60:	e9 e3 00 00 00       	jmp    f010d048 <_alltraps>
f010cf65:	90                   	nop

f010cf66 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cf66:	6a 08                	push   $0x8
f010cf68:	e9 db 00 00 00       	jmp    f010d048 <_alltraps>
f010cf6d:	90                   	nop

f010cf6e <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cf6e:	6a 00                	push   $0x0
f010cf70:	6a 00                	push   $0x0
f010cf72:	e9 d1 00 00 00       	jmp    f010d048 <_alltraps>
f010cf77:	90                   	nop

f010cf78 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cf78:	6a 00                	push   $0x0
f010cf7a:	6a 01                	push   $0x1
f010cf7c:	e9 c7 00 00 00       	jmp    f010d048 <_alltraps>
f010cf81:	90                   	nop

f010cf82 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cf82:	6a 00                	push   $0x0
f010cf84:	6a 02                	push   $0x2
f010cf86:	e9 bd 00 00 00       	jmp    f010d048 <_alltraps>
f010cf8b:	90                   	nop

f010cf8c <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cf8c:	6a 00                	push   $0x0
f010cf8e:	6a 03                	push   $0x3
f010cf90:	e9 b3 00 00 00       	jmp    f010d048 <_alltraps>
f010cf95:	90                   	nop

f010cf96 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cf96:	6a 00                	push   $0x0
f010cf98:	6a 04                	push   $0x4
f010cf9a:	e9 a9 00 00 00       	jmp    f010d048 <_alltraps>
f010cf9f:	90                   	nop

f010cfa0 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cfa0:	6a 00                	push   $0x0
f010cfa2:	6a 05                	push   $0x5
f010cfa4:	e9 9f 00 00 00       	jmp    f010d048 <_alltraps>
f010cfa9:	90                   	nop

f010cfaa <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cfaa:	6a 00                	push   $0x0
f010cfac:	6a 06                	push   $0x6
f010cfae:	e9 95 00 00 00       	jmp    f010d048 <_alltraps>
f010cfb3:	90                   	nop

f010cfb4 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cfb4:	6a 00                	push   $0x0
f010cfb6:	6a 07                	push   $0x7
f010cfb8:	e9 8b 00 00 00       	jmp    f010d048 <_alltraps>
f010cfbd:	90                   	nop

f010cfbe <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cfbe:	6a 0a                	push   $0xa
f010cfc0:	e9 83 00 00 00       	jmp    f010d048 <_alltraps>
f010cfc5:	90                   	nop

f010cfc6 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cfc6:	6a 0b                	push   $0xb
f010cfc8:	eb 7e                	jmp    f010d048 <_alltraps>

f010cfca <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cfca:	6a 0c                	push   $0xc
f010cfcc:	eb 7a                	jmp    f010d048 <_alltraps>

f010cfce <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cfce:	6a 0d                	push   $0xd
f010cfd0:	eb 76                	jmp    f010d048 <_alltraps>

f010cfd2 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cfd2:	6a 00                	push   $0x0
f010cfd4:	6a 10                	push   $0x10
f010cfd6:	eb 70                	jmp    f010d048 <_alltraps>

f010cfd8 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cfd8:	6a 11                	push   $0x11
f010cfda:	eb 6c                	jmp    f010d048 <_alltraps>

f010cfdc <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cfdc:	6a 00                	push   $0x0
f010cfde:	6a 12                	push   $0x12
f010cfe0:	eb 66                	jmp    f010d048 <_alltraps>

f010cfe2 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cfe2:	6a 00                	push   $0x0
f010cfe4:	6a 13                	push   $0x13
f010cfe6:	eb 60                	jmp    f010d048 <_alltraps>

f010cfe8 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cfe8:	6a 00                	push   $0x0
f010cfea:	6a 20                	push   $0x20
f010cfec:	eb 5a                	jmp    f010d048 <_alltraps>

f010cfee <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cfee:	6a 00                	push   $0x0
f010cff0:	6a 21                	push   $0x21
f010cff2:	eb 54                	jmp    f010d048 <_alltraps>

f010cff4 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cff4:	6a 00                	push   $0x0
f010cff6:	6a 22                	push   $0x22
f010cff8:	eb 4e                	jmp    f010d048 <_alltraps>

f010cffa <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cffa:	6a 00                	push   $0x0
f010cffc:	6a 23                	push   $0x23
f010cffe:	eb 48                	jmp    f010d048 <_alltraps>

f010d000 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010d000:	6a 00                	push   $0x0
f010d002:	6a 24                	push   $0x24
f010d004:	eb 42                	jmp    f010d048 <_alltraps>

f010d006 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010d006:	6a 00                	push   $0x0
f010d008:	6a 25                	push   $0x25
f010d00a:	eb 3c                	jmp    f010d048 <_alltraps>

f010d00c <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010d00c:	6a 00                	push   $0x0
f010d00e:	6a 26                	push   $0x26
f010d010:	eb 36                	jmp    f010d048 <_alltraps>

f010d012 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010d012:	6a 00                	push   $0x0
f010d014:	6a 27                	push   $0x27
f010d016:	eb 30                	jmp    f010d048 <_alltraps>

f010d018 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010d018:	6a 00                	push   $0x0
f010d01a:	6a 28                	push   $0x28
f010d01c:	eb 2a                	jmp    f010d048 <_alltraps>

f010d01e <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010d01e:	6a 00                	push   $0x0
f010d020:	6a 29                	push   $0x29
f010d022:	eb 24                	jmp    f010d048 <_alltraps>

f010d024 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010d024:	6a 00                	push   $0x0
f010d026:	6a 2a                	push   $0x2a
f010d028:	eb 1e                	jmp    f010d048 <_alltraps>

f010d02a <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010d02a:	6a 00                	push   $0x0
f010d02c:	6a 2b                	push   $0x2b
f010d02e:	eb 18                	jmp    f010d048 <_alltraps>

f010d030 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010d030:	6a 00                	push   $0x0
f010d032:	6a 2c                	push   $0x2c
f010d034:	eb 12                	jmp    f010d048 <_alltraps>

f010d036 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010d036:	6a 00                	push   $0x0
f010d038:	6a 2d                	push   $0x2d
f010d03a:	eb 0c                	jmp    f010d048 <_alltraps>

f010d03c <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010d03c:	6a 00                	push   $0x0
f010d03e:	6a 2e                	push   $0x2e
f010d040:	eb 06                	jmp    f010d048 <_alltraps>

f010d042 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010d042:	6a 00                	push   $0x0
f010d044:	6a 2f                	push   $0x2f
f010d046:	eb 00                	jmp    f010d048 <_alltraps>

f010d048 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010d048:	1e                   	push   %ds
push %es
f010d049:	06                   	push   %es
pushal
f010d04a:	60                   	pusha  

mov $(GD_KD), %ax
f010d04b:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010d04f:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010d051:	8e c0                	mov    %eax,%es

push %esp
f010d053:	54                   	push   %esp

call trap
f010d054:	e8 fd fa ff ff       	call   f010cb56 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010d059:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010d05a:	61                   	popa   
pop %es
f010d05b:	07                   	pop    %es
pop %ds
f010d05c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010d05d:	83 c4 08             	add    $0x8,%esp

iret
f010d060:	cf                   	iret   

f010d061 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010d061:	55                   	push   %ebp
f010d062:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d064:	8b 45 08             	mov    0x8(%ebp),%eax
f010d067:	8b 15 98 40 3f f0    	mov    0xf03f4098,%edx
f010d06d:	29 d0                	sub    %edx,%eax
f010d06f:	c1 f8 02             	sar    $0x2,%eax
f010d072:	89 c2                	mov    %eax,%edx
f010d074:	89 d0                	mov    %edx,%eax
f010d076:	c1 e0 03             	shl    $0x3,%eax
f010d079:	01 d0                	add    %edx,%eax
f010d07b:	c1 e0 03             	shl    $0x3,%eax
f010d07e:	01 d0                	add    %edx,%eax
f010d080:	c1 e0 03             	shl    $0x3,%eax
f010d083:	01 d0                	add    %edx,%eax
f010d085:	c1 e0 03             	shl    $0x3,%eax
f010d088:	01 d0                	add    %edx,%eax
f010d08a:	89 c1                	mov    %eax,%ecx
f010d08c:	c1 e1 0f             	shl    $0xf,%ecx
f010d08f:	01 c8                	add    %ecx,%eax
f010d091:	c1 e0 03             	shl    $0x3,%eax
f010d094:	01 d0                	add    %edx,%eax
f010d096:	f7 d8                	neg    %eax
}
f010d098:	5d                   	pop    %ebp
f010d099:	c3                   	ret    

f010d09a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010d09a:	55                   	push   %ebp
f010d09b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d09d:	ff 75 08             	pushl  0x8(%ebp)
f010d0a0:	e8 bc ff ff ff       	call   f010d061 <to_frame_number>
f010d0a5:	83 c4 04             	add    $0x4,%esp
f010d0a8:	c1 e0 0c             	shl    $0xc,%eax
}
f010d0ab:	c9                   	leave  
f010d0ac:	c3                   	ret    

f010d0ad <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010d0ad:	55                   	push   %ebp
f010d0ae:	89 e5                	mov    %esp,%ebp
f010d0b0:	83 ec 18             	sub    $0x18,%esp
f010d0b3:	8b 45 10             	mov    0x10(%ebp),%eax
f010d0b6:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010d0b9:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010d0bd:	74 23                	je     f010d0e2 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010d0bf:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d0c4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d0c7:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010d0cd:	83 c2 5c             	add    $0x5c,%edx
f010d0d0:	83 ec 04             	sub    $0x4,%esp
f010d0d3:	50                   	push   %eax
f010d0d4:	52                   	push   %edx
f010d0d5:	68 d0 6d 12 f0       	push   $0xf0126dd0
f010d0da:	e8 bc 3d ff ff       	call   f0100e9b <cprintf>
f010d0df:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010d0e2:	83 ec 04             	sub    $0x4,%esp
f010d0e5:	ff 75 08             	pushl  0x8(%ebp)
f010d0e8:	ff 75 0c             	pushl  0xc(%ebp)
f010d0eb:	68 d9 6d 12 f0       	push   $0xf0126dd9
f010d0f0:	e8 a6 3d ff ff       	call   f0100e9b <cprintf>
f010d0f5:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010d0f8:	90                   	nop
f010d0f9:	c9                   	leave  
f010d0fa:	c3                   	ret    

f010d0fb <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d0fb:	55                   	push   %ebp
f010d0fc:	89 e5                	mov    %esp,%ebp
f010d0fe:	83 ec 18             	sub    $0x18,%esp
f010d101:	8b 45 08             	mov    0x8(%ebp),%eax
f010d104:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d107:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d10b:	83 ec 08             	sub    $0x8,%esp
f010d10e:	50                   	push   %eax
f010d10f:	68 de 6d 12 f0       	push   $0xf0126dde
f010d114:	e8 82 3d ff ff       	call   f0100e9b <cprintf>
f010d119:	83 c4 10             	add    $0x10,%esp
}
f010d11c:	90                   	nop
f010d11d:	c9                   	leave  
f010d11e:	c3                   	ret    

f010d11f <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d11f:	55                   	push   %ebp
f010d120:	89 e5                	mov    %esp,%ebp
f010d122:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010d125:	e8 a7 3b ff ff       	call   f0100cd1 <cons_getc2>
f010d12a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010d12d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d130:	c9                   	leave  
f010d131:	c3                   	ret    

f010d132 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d132:	55                   	push   %ebp
f010d133:	89 e5                	mov    %esp,%ebp
f010d135:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010d138:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d13d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d140:	83 ec 0c             	sub    $0xc,%esp
f010d143:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d146:	50                   	push   %eax
f010d147:	e8 9d a2 ff ff       	call   f01073e9 <allocate_frame>
f010d14c:	83 c4 10             	add    $0x10,%esp
f010d14f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d152:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d156:	75 08                	jne    f010d160 <__sys_allocate_page+0x2e>
		return r ;
f010d158:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d15b:	e9 f2 00 00 00       	jmp    f010d252 <__sys_allocate_page+0x120>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d160:	8b 45 08             	mov    0x8(%ebp),%eax
f010d163:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d168:	77 0c                	ja     f010d176 <__sys_allocate_page+0x44>
f010d16a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d16d:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d172:	85 c0                	test   %eax,%eax
f010d174:	74 0a                	je     f010d180 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d176:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d17b:	e9 d2 00 00 00       	jmp    f010d252 <__sys_allocate_page+0x120>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d180:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d183:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d188:	83 f8 04             	cmp    $0x4,%eax
f010d18b:	74 0a                	je     f010d197 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d18d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d192:	e9 bb 00 00 00       	jmp    f010d252 <__sys_allocate_page+0x120>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d197:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d19a:	83 ec 0c             	sub    $0xc,%esp
f010d19d:	50                   	push   %eax
f010d19e:	e8 f7 fe ff ff       	call   f010d09a <to_physical_address>
f010d1a3:	83 c4 10             	add    $0x10,%esp
f010d1a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010d1a9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d1ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1af:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d1b5:	6a 02                	push   $0x2
f010d1b7:	68 00 00 80 ef       	push   $0xef800000
f010d1bc:	52                   	push   %edx
f010d1bd:	50                   	push   %eax
f010d1be:	e8 78 a6 ff ff       	call   f010783b <map_frame>
f010d1c3:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010d1c6:	83 ec 04             	sub    $0x4,%esp
f010d1c9:	68 00 10 00 00       	push   $0x1000
f010d1ce:	6a 00                	push   $0x0
f010d1d0:	68 00 00 80 ef       	push   $0xef800000
f010d1d5:	e8 f8 4a 01 00       	call   f0121cd2 <memset>
f010d1da:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010d1dd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d1e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1e3:	8b 40 08             	mov    0x8(%eax),%eax
f010d1e6:	40                   	inc    %eax
f010d1e7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010d1eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1ee:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d1f4:	83 ec 08             	sub    $0x8,%esp
f010d1f7:	68 00 00 80 ef       	push   $0xef800000
f010d1fc:	50                   	push   %eax
f010d1fd:	e8 99 a7 ff ff       	call   f010799b <unmap_frame>
f010d202:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010d205:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d208:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d20b:	8b 40 08             	mov    0x8(%eax),%eax
f010d20e:	48                   	dec    %eax
f010d20f:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d213:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d216:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d219:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d21c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d222:	ff 75 0c             	pushl  0xc(%ebp)
f010d225:	51                   	push   %ecx
f010d226:	52                   	push   %edx
f010d227:	50                   	push   %eax
f010d228:	e8 0e a6 ff ff       	call   f010783b <map_frame>
f010d22d:	83 c4 10             	add    $0x10,%esp
f010d230:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d233:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d237:	75 14                	jne    f010d24d <__sys_allocate_page+0x11b>
	{
		decrement_references(ptr_frame_info);
f010d239:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d23c:	83 ec 0c             	sub    $0xc,%esp
f010d23f:	50                   	push   %eax
f010d240:	e8 36 a3 ff ff       	call   f010757b <decrement_references>
f010d245:	83 c4 10             	add    $0x10,%esp
		return r;
f010d248:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d24b:	eb 05                	jmp    f010d252 <__sys_allocate_page+0x120>
	}
	return 0 ;
f010d24d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d252:	c9                   	leave  
f010d253:	c3                   	ret    

f010d254 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d254:	55                   	push   %ebp
f010d255:	89 e5                	mov    %esp,%ebp
f010d257:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d25a:	83 ec 04             	sub    $0x4,%esp
f010d25d:	68 e1 6d 12 f0       	push   $0xf0126de1
f010d262:	68 b4 00 00 00       	push   $0xb4
f010d267:	68 ff 6d 12 f0       	push   $0xf0126dff
f010d26c:	e8 a9 2f ff ff       	call   f010021a <_panic>

f010d271 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d271:	55                   	push   %ebp
f010d272:	89 e5                	mov    %esp,%ebp
f010d274:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d277:	83 ec 04             	sub    $0x4,%esp
f010d27a:	68 14 6e 12 f0       	push   $0xf0126e14
f010d27f:	68 c5 00 00 00       	push   $0xc5
f010d284:	68 ff 6d 12 f0       	push   $0xf0126dff
f010d289:	e8 8c 2f ff ff       	call   f010021a <_panic>

f010d28e <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d28e:	55                   	push   %ebp
f010d28f:	89 e5                	mov    %esp,%ebp
f010d291:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d294:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d299:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d29f:	83 ec 04             	sub    $0x4,%esp
f010d2a2:	ff 75 0c             	pushl  0xc(%ebp)
f010d2a5:	ff 75 08             	pushl  0x8(%ebp)
f010d2a8:	50                   	push   %eax
f010d2a9:	e8 eb c7 ff ff       	call   f0109a99 <calculate_required_frames>
f010d2ae:	83 c4 10             	add    $0x10,%esp
}
f010d2b1:	c9                   	leave  
f010d2b2:	c3                   	ret    

f010d2b3 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d2b3:	55                   	push   %ebp
f010d2b4:	89 e5                	mov    %esp,%ebp
f010d2b6:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d2b9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d2bc:	83 ec 0c             	sub    $0xc,%esp
f010d2bf:	50                   	push   %eax
f010d2c0:	e8 58 a8 ff ff       	call   f0107b1d <calculate_available_frames>
f010d2c5:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d2c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d2cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2ce:	01 d0                	add    %edx,%eax
}
f010d2d0:	c9                   	leave  
f010d2d1:	c3                   	ret    

f010d2d2 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d2d2:	55                   	push   %ebp
f010d2d3:	89 e5                	mov    %esp,%ebp
f010d2d5:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d2d8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d2db:	83 ec 0c             	sub    $0xc,%esp
f010d2de:	50                   	push   %eax
f010d2df:	e8 39 a8 ff ff       	call   f0107b1d <calculate_available_frames>
f010d2e4:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d2e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d2ea:	c9                   	leave  
f010d2eb:	c3                   	ret    

f010d2ec <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d2ec:	55                   	push   %ebp
f010d2ed:	89 e5                	mov    %esp,%ebp
f010d2ef:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d2f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d2f5:	83 ec 0c             	sub    $0xc,%esp
f010d2f8:	50                   	push   %eax
f010d2f9:	e8 1f a8 ff ff       	call   f0107b1d <calculate_available_frames>
f010d2fe:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d301:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d304:	c9                   	leave  
f010d305:	c3                   	ret    

f010d306 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d306:	55                   	push   %ebp
f010d307:	89 e5                	mov    %esp,%ebp
f010d309:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d30c:	83 ec 0c             	sub    $0xc,%esp
f010d30f:	ff 75 08             	pushl  0x8(%ebp)
f010d312:	e8 e8 36 01 00       	call   f01209ff <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d317:	83 c4 10             	add    $0x10,%esp
}
f010d31a:	c9                   	leave  
f010d31b:	c3                   	ret    

f010d31c <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d31c:	55                   	push   %ebp
f010d31d:	89 e5                	mov    %esp,%ebp
f010d31f:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d322:	e8 30 36 01 00       	call   f0120957 <scarce_memory>
}
f010d327:	90                   	nop
f010d328:	c9                   	leave  
f010d329:	c3                   	ret    

f010d32a <sys_clearFFL>:

void sys_clearFFL()
{
f010d32a:	55                   	push   %ebp
f010d32b:	89 e5                	mov    %esp,%ebp
f010d32d:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d330:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f010d335:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d338:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d33f:	eb 12                	jmp    f010d353 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d341:	83 ec 0c             	sub    $0xc,%esp
f010d344:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d347:	50                   	push   %eax
f010d348:	e8 9c a0 ff ff       	call   f01073e9 <allocate_frame>
f010d34d:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d350:	ff 45 f4             	incl   -0xc(%ebp)
f010d353:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d356:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d359:	7c e6                	jl     f010d341 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d35b:	90                   	nop
f010d35c:	c9                   	leave  
f010d35d:	c3                   	ret    

f010d35e <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d35e:	55                   	push   %ebp
f010d35f:	89 e5                	mov    %esp,%ebp
f010d361:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d364:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d369:	83 ec 0c             	sub    $0xc,%esp
f010d36c:	50                   	push   %eax
f010d36d:	e8 31 73 ff ff       	call   f01046a3 <pf_calculate_allocated_pages>
f010d372:	83 c4 10             	add    $0x10,%esp
}
f010d375:	c9                   	leave  
f010d376:	c3                   	ret    

f010d377 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d377:	55                   	push   %ebp
f010d378:	89 e5                	mov    %esp,%ebp
f010d37a:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d37d:	e8 f0 0f 00 00       	call   f010e372 <isBufferingEnabled>
f010d382:	84 c0                	test   %al,%al
f010d384:	74 19                	je     f010d39f <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d386:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d38b:	83 ec 04             	sub    $0x4,%esp
f010d38e:	ff 75 0c             	pushl  0xc(%ebp)
f010d391:	ff 75 08             	pushl  0x8(%ebp)
f010d394:	50                   	push   %eax
f010d395:	e8 0f c8 ff ff       	call   f0109ba9 <__free_user_mem_with_buffering>
f010d39a:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d39d:	eb 18                	jmp    f010d3b7 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d39f:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d3a4:	83 ec 04             	sub    $0x4,%esp
f010d3a7:	ff 75 0c             	pushl  0xc(%ebp)
f010d3aa:	ff 75 08             	pushl  0x8(%ebp)
f010d3ad:	50                   	push   %eax
f010d3ae:	e8 8a c7 ff ff       	call   f0109b3d <free_user_mem>
f010d3b3:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d3b6:	90                   	nop
}
f010d3b7:	c9                   	leave  
f010d3b8:	c3                   	ret    

f010d3b9 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d3b9:	55                   	push   %ebp
f010d3ba:	89 e5                	mov    %esp,%ebp
f010d3bc:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d3bf:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d3c4:	83 ec 04             	sub    $0x4,%esp
f010d3c7:	ff 75 0c             	pushl  0xc(%ebp)
f010d3ca:	ff 75 08             	pushl  0x8(%ebp)
f010d3cd:	50                   	push   %eax
f010d3ce:	e8 e0 c6 ff ff       	call   f0109ab3 <allocate_user_mem>
f010d3d3:	83 c4 10             	add    $0x10,%esp
	return;
f010d3d6:	90                   	nop
}
f010d3d7:	c9                   	leave  
f010d3d8:	c3                   	ret    

f010d3d9 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d3d9:	55                   	push   %ebp
f010d3da:	89 e5                	mov    %esp,%ebp
f010d3dc:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d3df:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d3e4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d3ea:	ff 75 10             	pushl  0x10(%ebp)
f010d3ed:	ff 75 0c             	pushl  0xc(%ebp)
f010d3f0:	ff 75 08             	pushl  0x8(%ebp)
f010d3f3:	50                   	push   %eax
f010d3f4:	e8 6c c6 ff ff       	call   f0109a65 <allocate_chunk>
f010d3f9:	83 c4 10             	add    $0x10,%esp
	return;
f010d3fc:	90                   	nop
}
f010d3fd:	c9                   	leave  
f010d3fe:	c3                   	ret    

f010d3ff <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d3ff:	55                   	push   %ebp
f010d400:	89 e5                	mov    %esp,%ebp
f010d402:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d405:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d40a:	ff 75 10             	pushl  0x10(%ebp)
f010d40d:	ff 75 0c             	pushl  0xc(%ebp)
f010d410:	ff 75 08             	pushl  0x8(%ebp)
f010d413:	50                   	push   %eax
f010d414:	e8 ad c7 ff ff       	call   f0109bc6 <move_user_mem>
f010d419:	83 c4 10             	add    $0x10,%esp
	return;
f010d41c:	90                   	nop
}
f010d41d:	c9                   	leave  
f010d41e:	c3                   	ret    

f010d41f <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d41f:	55                   	push   %ebp
f010d420:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d422:	a1 64 40 3f f0       	mov    0xf03f4064,%eax
}
f010d427:	5d                   	pop    %ebp
f010d428:	c3                   	ret    

f010d429 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d429:	55                   	push   %ebp
f010d42a:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d42c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d42f:	a3 64 40 3f f0       	mov    %eax,0xf03f4064
}
f010d434:	90                   	nop
f010d435:	5d                   	pop    %ebp
f010d436:	c3                   	ret    

f010d437 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d437:	55                   	push   %ebp
f010d438:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d43a:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d43f:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010d445:	8b 52 38             	mov    0x38(%edx),%edx
f010d448:	80 e6 fd             	and    $0xfd,%dh
f010d44b:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d44e:	90                   	nop
f010d44f:	5d                   	pop    %ebp
f010d450:	c3                   	ret    

f010d451 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d451:	55                   	push   %ebp
f010d452:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d454:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d459:	8b 15 38 37 3f f0    	mov    0xf03f3738,%edx
f010d45f:	8b 52 38             	mov    0x38(%edx),%edx
f010d462:	80 ce 02             	or     $0x2,%dh
f010d465:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d468:	90                   	nop
f010d469:	5d                   	pop    %ebp
f010d46a:	c3                   	ret    

f010d46b <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d46b:	55                   	push   %ebp
f010d46c:	89 e5                	mov    %esp,%ebp
f010d46e:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d471:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d476:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d479:	83 ec 04             	sub    $0x4,%esp
f010d47c:	ff 75 0c             	pushl  0xc(%ebp)
f010d47f:	ff 75 08             	pushl  0x8(%ebp)
f010d482:	50                   	push   %eax
f010d483:	e8 82 14 00 00       	call   f010e90a <createSemaphore>
f010d488:	83 c4 10             	add    $0x10,%esp
}
f010d48b:	c9                   	leave  
f010d48c:	c3                   	ret    

f010d48d <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d48d:	55                   	push   %ebp
f010d48e:	89 e5                	mov    %esp,%ebp
f010d490:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d493:	83 ec 08             	sub    $0x8,%esp
f010d496:	ff 75 0c             	pushl  0xc(%ebp)
f010d499:	ff 75 08             	pushl  0x8(%ebp)
f010d49c:	e8 86 14 00 00       	call   f010e927 <waitSemaphore>
f010d4a1:	83 c4 10             	add    $0x10,%esp
}
f010d4a4:	90                   	nop
f010d4a5:	c9                   	leave  
f010d4a6:	c3                   	ret    

f010d4a7 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d4a7:	55                   	push   %ebp
f010d4a8:	89 e5                	mov    %esp,%ebp
f010d4aa:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d4ad:	83 ec 08             	sub    $0x8,%esp
f010d4b0:	ff 75 0c             	pushl  0xc(%ebp)
f010d4b3:	ff 75 08             	pushl  0x8(%ebp)
f010d4b6:	e8 89 14 00 00       	call   f010e944 <signalSemaphore>
f010d4bb:	83 c4 10             	add    $0x10,%esp
}
f010d4be:	90                   	nop
f010d4bf:	c9                   	leave  
f010d4c0:	c3                   	ret    

f010d4c1 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d4c1:	55                   	push   %ebp
f010d4c2:	89 e5                	mov    %esp,%ebp
f010d4c4:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d4c7:	83 ec 08             	sub    $0x8,%esp
f010d4ca:	ff 75 0c             	pushl  0xc(%ebp)
f010d4cd:	ff 75 08             	pushl  0x8(%ebp)
f010d4d0:	e8 ad 12 00 00       	call   f010e782 <get_semaphore_object_ID>
f010d4d5:	83 c4 10             	add    $0x10,%esp
f010d4d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d4db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4df:	78 0c                	js     f010d4ed <sys_getSemaphoreValue+0x2c>
f010d4e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4e4:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010d4e9:	39 c2                	cmp    %eax,%edx
f010d4eb:	72 19                	jb     f010d506 <sys_getSemaphoreValue+0x45>
f010d4ed:	68 34 6e 12 f0       	push   $0xf0126e34
f010d4f2:	68 59 6e 12 f0       	push   $0xf0126e59
f010d4f7:	68 4d 01 00 00       	push   $0x14d
f010d4fc:	68 ff 6d 12 f0       	push   $0xf0126dff
f010d501:	e8 14 2d ff ff       	call   f010021a <_panic>

	return semaphores[semID].value ;
f010d506:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010d50c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d50f:	89 d0                	mov    %edx,%eax
f010d511:	c1 e0 02             	shl    $0x2,%eax
f010d514:	01 d0                	add    %edx,%eax
f010d516:	01 c0                	add    %eax,%eax
f010d518:	01 d0                	add    %edx,%eax
f010d51a:	01 c0                	add    %eax,%eax
f010d51c:	01 d0                	add    %edx,%eax
f010d51e:	c1 e0 02             	shl    $0x2,%eax
f010d521:	01 c8                	add    %ecx,%eax
f010d523:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d526:	c9                   	leave  
f010d527:	c3                   	ret    

f010d528 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d528:	55                   	push   %ebp
f010d529:	89 e5                	mov    %esp,%ebp
f010d52b:	83 ec 18             	sub    $0x18,%esp
f010d52e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d531:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d534:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d538:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d53d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d540:	83 ec 0c             	sub    $0xc,%esp
f010d543:	ff 75 14             	pushl  0x14(%ebp)
f010d546:	52                   	push   %edx
f010d547:	ff 75 0c             	pushl  0xc(%ebp)
f010d54a:	ff 75 08             	pushl  0x8(%ebp)
f010d54d:	50                   	push   %eax
f010d54e:	e8 46 ab ff ff       	call   f0108099 <createSharedObject>
f010d553:	83 c4 20             	add    $0x20,%esp
}
f010d556:	c9                   	leave  
f010d557:	c3                   	ret    

f010d558 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d558:	55                   	push   %ebp
f010d559:	89 e5                	mov    %esp,%ebp
f010d55b:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d55e:	83 ec 08             	sub    $0x8,%esp
f010d561:	ff 75 0c             	pushl  0xc(%ebp)
f010d564:	ff 75 08             	pushl  0x8(%ebp)
f010d567:	e8 50 ab ff ff       	call   f01080bc <getSizeOfSharedObject>
f010d56c:	83 c4 10             	add    $0x10,%esp
}
f010d56f:	c9                   	leave  
f010d570:	c3                   	ret    

f010d571 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d571:	55                   	push   %ebp
f010d572:	89 e5                	mov    %esp,%ebp
f010d574:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d577:	83 ec 04             	sub    $0x4,%esp
f010d57a:	ff 75 10             	pushl  0x10(%ebp)
f010d57d:	ff 75 0c             	pushl  0xc(%ebp)
f010d580:	ff 75 08             	pushl  0x8(%ebp)
f010d583:	e8 51 ab ff ff       	call   f01080d9 <getSharedObject>
f010d588:	83 c4 10             	add    $0x10,%esp
}
f010d58b:	c9                   	leave  
f010d58c:	c3                   	ret    

f010d58d <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d58d:	55                   	push   %ebp
f010d58e:	89 e5                	mov    %esp,%ebp
f010d590:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d593:	83 ec 08             	sub    $0x8,%esp
f010d596:	ff 75 0c             	pushl  0xc(%ebp)
f010d599:	ff 75 08             	pushl  0x8(%ebp)
f010d59c:	e8 55 ab ff ff       	call   f01080f6 <freeSharedObject>
f010d5a1:	83 c4 10             	add    $0x10,%esp
}
f010d5a4:	c9                   	leave  
f010d5a5:	c3                   	ret    

f010d5a6 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d5a6:	55                   	push   %ebp
f010d5a7:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d5a9:	a1 5c 40 3f f0       	mov    0xf03f405c,%eax
}
f010d5ae:	5d                   	pop    %ebp
f010d5af:	c3                   	ret    

f010d5b0 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d5b0:	55                   	push   %ebp
f010d5b1:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d5b3:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d5b8:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d5bb:	5d                   	pop    %ebp
f010d5bc:	c3                   	ret    

f010d5bd <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d5bd:	55                   	push   %ebp
f010d5be:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d5c0:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d5c5:	89 c2                	mov    %eax,%edx
f010d5c7:	a1 34 37 3f f0       	mov    0xf03f3734,%eax
f010d5cc:	29 c2                	sub    %eax,%edx
f010d5ce:	89 d0                	mov    %edx,%eax
f010d5d0:	c1 f8 04             	sar    $0x4,%eax
f010d5d3:	89 c2                	mov    %eax,%edx
f010d5d5:	89 d0                	mov    %edx,%eax
f010d5d7:	c1 e0 03             	shl    $0x3,%eax
f010d5da:	01 d0                	add    %edx,%eax
f010d5dc:	01 c0                	add    %eax,%eax
f010d5de:	01 d0                	add    %edx,%eax
f010d5e0:	c1 e0 03             	shl    $0x3,%eax
f010d5e3:	01 d0                	add    %edx,%eax
f010d5e5:	89 c1                	mov    %eax,%ecx
f010d5e7:	c1 e1 08             	shl    $0x8,%ecx
f010d5ea:	01 c8                	add    %ecx,%eax
f010d5ec:	01 c0                	add    %eax,%eax
f010d5ee:	01 d0                	add    %edx,%eax
f010d5f0:	01 c0                	add    %eax,%eax
f010d5f2:	01 d0                	add    %edx,%eax
f010d5f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d5fb:	01 d0                	add    %edx,%eax
f010d5fd:	89 c2                	mov    %eax,%edx
f010d5ff:	c1 e2 09             	shl    $0x9,%edx
f010d602:	29 c2                	sub    %eax,%edx
f010d604:	89 d0                	mov    %edx,%eax
f010d606:	f7 d8                	neg    %eax
}
f010d608:	5d                   	pop    %ebp
f010d609:	c3                   	ret    

f010d60a <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d60a:	55                   	push   %ebp
f010d60b:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d60d:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d612:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d615:	5d                   	pop    %ebp
f010d616:	c3                   	ret    

f010d617 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d617:	55                   	push   %ebp
f010d618:	89 e5                	mov    %esp,%ebp
f010d61a:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d61d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d621:	75 0a                	jne    f010d62d <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d623:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d628:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d62b:	eb 22                	jmp    f010d64f <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d62d:	83 ec 04             	sub    $0x4,%esp
f010d630:	6a 00                	push   $0x0
f010d632:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d635:	50                   	push   %eax
f010d636:	ff 75 08             	pushl  0x8(%ebp)
f010d639:	e8 0a d0 ff ff       	call   f010a648 <envid2env>
f010d63e:	83 c4 10             	add    $0x10,%esp
f010d641:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d644:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d648:	79 05                	jns    f010d64f <sys_destroy_env+0x38>
	{
		return r;
f010d64a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d64d:	eb 5e                	jmp    f010d6ad <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d64f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d652:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d657:	39 c2                	cmp    %eax,%edx
f010d659:	75 1b                	jne    f010d676 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d65b:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d660:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d663:	83 ec 08             	sub    $0x8,%esp
f010d666:	50                   	push   %eax
f010d667:	68 6e 6e 12 f0       	push   $0xf0126e6e
f010d66c:	e8 2a 38 ff ff       	call   f0100e9b <cprintf>
f010d671:	83 c4 10             	add    $0x10,%esp
f010d674:	eb 20                	jmp    f010d696 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d676:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d679:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d67c:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d681:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d684:	83 ec 04             	sub    $0x4,%esp
f010d687:	52                   	push   %edx
f010d688:	50                   	push   %eax
f010d689:	68 89 6e 12 f0       	push   $0xf0126e89
f010d68e:	e8 08 38 ff ff       	call   f0100e9b <cprintf>
f010d693:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d696:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d699:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d69c:	83 ec 0c             	sub    $0xc,%esp
f010d69f:	50                   	push   %eax
f010d6a0:	e8 08 80 ff ff       	call   f01056ad <sched_kill_env>
f010d6a5:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d6a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d6ad:	c9                   	leave  
f010d6ae:	c3                   	ret    

f010d6af <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d6af:	55                   	push   %ebp
f010d6b0:	89 e5                	mov    %esp,%ebp
f010d6b2:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d6b5:	e8 6f cf ff ff       	call   f010a629 <env_exit>
	//env_run_cmd_prmpt();
}
f010d6ba:	90                   	nop
f010d6bb:	c9                   	leave  
f010d6bc:	c3                   	ret    

f010d6bd <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d6bd:	55                   	push   %ebp
f010d6be:	89 e5                	mov    %esp,%ebp
f010d6c0:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d6c3:	ff 75 14             	pushl  0x14(%ebp)
f010d6c6:	ff 75 10             	pushl  0x10(%ebp)
f010d6c9:	ff 75 0c             	pushl  0xc(%ebp)
f010d6cc:	ff 75 08             	pushl  0x8(%ebp)
f010d6cf:	e8 0f c5 ff ff       	call   f0109be3 <env_create>
f010d6d4:	83 c4 10             	add    $0x10,%esp
f010d6d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d6da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6de:	75 07                	jne    f010d6e7 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d6e0:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d6e5:	eb 14                	jmp    f010d6fb <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d6e7:	83 ec 0c             	sub    $0xc,%esp
f010d6ea:	ff 75 f4             	pushl  -0xc(%ebp)
f010d6ed:	e8 e4 7c ff ff       	call   f01053d6 <sched_new_env>
f010d6f2:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d6f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6f8:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d6fb:	c9                   	leave  
f010d6fc:	c3                   	ret    

f010d6fd <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d6fd:	55                   	push   %ebp
f010d6fe:	89 e5                	mov    %esp,%ebp
f010d700:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d703:	8b 45 08             	mov    0x8(%ebp),%eax
f010d706:	83 ec 0c             	sub    $0xc,%esp
f010d709:	50                   	push   %eax
f010d70a:	e8 e4 7c ff ff       	call   f01053f3 <sched_run_env>
f010d70f:	83 c4 10             	add    $0x10,%esp
}
f010d712:	90                   	nop
f010d713:	c9                   	leave  
f010d714:	c3                   	ret    

f010d715 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d715:	55                   	push   %ebp
f010d716:	89 e5                	mov    %esp,%ebp
f010d718:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d71b:	0f 31                	rdtsc  
f010d71d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d720:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d723:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d726:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d729:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d72c:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d72f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d732:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d735:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d738:	89 01                	mov    %eax,(%ecx)
f010d73a:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d73d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d740:	c9                   	leave  
f010d741:	c2 04 00             	ret    $0x4

f010d744 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d744:	55                   	push   %ebp
f010d745:	89 e5                	mov    %esp,%ebp
f010d747:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d74a:	0f 20 d0             	mov    %cr2,%eax
f010d74d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d750:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d753:	90                   	nop
}
f010d754:	c9                   	leave  
f010d755:	c3                   	ret    

f010d756 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d756:	55                   	push   %ebp
f010d757:	89 e5                	mov    %esp,%ebp
f010d759:	83 ec 04             	sub    $0x4,%esp
f010d75c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d75f:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d762:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d765:	a2 e8 3f 3f f0       	mov    %al,0xf03f3fe8
}
f010d76a:	90                   	nop
f010d76b:	c9                   	leave  
f010d76c:	c3                   	ret    

f010d76d <sys_sbrk>:
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/

void* sys_sbrk(int increment)
{
f010d76d:	55                   	push   %ebp
f010d76e:	89 e5                	mov    %esp,%ebp
f010d770:	83 ec 38             	sub    $0x38,%esp
	 */
	//struct Env* env = curenv; //the current running Environment to adjust its break limit


	//**************************env declaration*************************************
	struct Env* env = curenv; //the current running Environment to adjust its break limit
f010d773:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d778:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr =NULL;
f010d77b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	if (increment == 0)
f010d782:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d786:	75 0e                	jne    f010d796 <sys_sbrk+0x29>
	{
		return (void*)env->segmentbreak;
f010d788:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d78b:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
f010d791:	e9 a7 01 00 00       	jmp    f010d93d <sys_sbrk+0x1d0>
	}
	if (increment > 0){
f010d796:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d79a:	0f 8e 0a 01 00 00    	jle    f010d8aa <sys_sbrk+0x13d>
		if( ROUNDUP((env->segmentbreak + increment), PAGE_SIZE)<=env->limit){
f010d7a0:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010d7a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7aa:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
f010d7b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7b3:	01 c2                	add    %eax,%edx
f010d7b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7b8:	01 d0                	add    %edx,%eax
f010d7ba:	48                   	dec    %eax
f010d7bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d7be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7c1:	ba 00 00 00 00       	mov    $0x0,%edx
f010d7c6:	f7 75 ec             	divl   -0x14(%ebp)
f010d7c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7cc:	29 d0                	sub    %edx,%eax
f010d7ce:	89 c2                	mov    %eax,%edx
f010d7d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7d3:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
f010d7d9:	39 c2                	cmp    %eax,%edx
f010d7db:	0f 87 bf 00 00 00    	ja     f010d8a0 <sys_sbrk+0x133>
			uint32 newBreak=env->segmentbreak;
f010d7e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7e4:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
f010d7ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			env->segmentbreak = ROUNDUP(env->segmentbreak + increment, PAGE_SIZE);
f010d7ed:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010d7f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7f7:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
f010d7fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010d800:	01 c2                	add    %eax,%edx
f010d802:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d805:	01 d0                	add    %edx,%eax
f010d807:	48                   	dec    %eax
f010d808:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d80b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d80e:	ba 00 00 00 00       	mov    $0x0,%edx
f010d813:	f7 75 e0             	divl   -0x20(%ebp)
f010d816:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d819:	29 d0                	sub    %edx,%eax
f010d81b:	89 c2                	mov    %eax,%edx
f010d81d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d820:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
			for(uint32 i=newBreak;i<env->segmentbreak;i+=PAGE_SIZE)
f010d826:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d829:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d82c:	eb 5c                	jmp    f010d88a <sys_sbrk+0x11d>
			{
				if(get_page_table(env->env_page_directory,i,&ptr)==TABLE_NOT_EXIST)
f010d82e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d831:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d837:	83 ec 04             	sub    $0x4,%esp
f010d83a:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010d83d:	52                   	push   %edx
f010d83e:	ff 75 f4             	pushl  -0xc(%ebp)
f010d841:	50                   	push   %eax
f010d842:	e8 64 9d ff ff       	call   f01075ab <get_page_table>
f010d847:	83 c4 10             	add    $0x10,%esp
f010d84a:	83 f8 01             	cmp    $0x1,%eax
f010d84d:	75 18                	jne    f010d867 <sys_sbrk+0xfa>
				{
					create_page_table(env->env_page_directory,i);
f010d84f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d852:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d858:	83 ec 08             	sub    $0x8,%esp
f010d85b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d85e:	50                   	push   %eax
f010d85f:	e8 9d 9e ff ff       	call   f0107701 <create_page_table>
f010d864:	83 c4 10             	add    $0x10,%esp
				}
				pt_set_page_permissions(env->env_page_directory,i,MARKED,0);
f010d867:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d86a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d870:	6a 00                	push   $0x0
f010d872:	68 00 04 00 00       	push   $0x400
f010d877:	ff 75 f4             	pushl  -0xc(%ebp)
f010d87a:	50                   	push   %eax
f010d87b:	e8 71 b3 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010d880:	83 c4 10             	add    $0x10,%esp
	}
	if (increment > 0){
		if( ROUNDUP((env->segmentbreak + increment), PAGE_SIZE)<=env->limit){
			uint32 newBreak=env->segmentbreak;
			env->segmentbreak = ROUNDUP(env->segmentbreak + increment, PAGE_SIZE);
			for(uint32 i=newBreak;i<env->segmentbreak;i+=PAGE_SIZE)
f010d883:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010d88a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d88d:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
f010d893:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d896:	77 96                	ja     f010d82e <sys_sbrk+0xc1>
				{
					create_page_table(env->env_page_directory,i);
				}
				pt_set_page_permissions(env->env_page_directory,i,MARKED,0);
			}
			return (void*)newBreak;
f010d898:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d89b:	e9 9d 00 00 00       	jmp    f010d93d <sys_sbrk+0x1d0>
		}
		else
			return (void*)-1;
f010d8a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d8a5:	e9 93 00 00 00       	jmp    f010d93d <sys_sbrk+0x1d0>

	}
	if (increment < 0) {
f010d8aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d8ae:	0f 89 84 00 00 00    	jns    f010d938 <sys_sbrk+0x1cb>
		uint32 newBreak = env->segmentbreak + increment;
f010d8b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8b7:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
f010d8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8c0:	01 d0                	add    %edx,%eax
f010d8c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (newBreak <USER_HEAP_START)
f010d8c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d8c8:	85 c0                	test   %eax,%eax
f010d8ca:	78 07                	js     f010d8d3 <sys_sbrk+0x166>
		{
			return (void*)-1;
f010d8cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d8d1:	eb 6a                	jmp    f010d93d <sys_sbrk+0x1d0>
		}
		uint32 i;
		for(i = env->segmentbreak;i>=newBreak;i-=1){
f010d8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d6:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
f010d8dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010d8df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d8e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d8e5:	72 51                	jb     f010d938 <sys_sbrk+0x1cb>
			if(i%PAGE_SIZE==0){
f010d8e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d8ea:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d8ef:	85 c0                	test   %eax,%eax
f010d8f1:	75 34                	jne    f010d927 <sys_sbrk+0x1ba>

				pt_set_page_permissions(env->env_page_directory,i,0,MARKED);
f010d8f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8f6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d8fc:	68 00 04 00 00       	push   $0x400
f010d901:	6a 00                	push   $0x0
f010d903:	ff 75 d4             	pushl  -0x2c(%ebp)
f010d906:	50                   	push   %eax
f010d907:	e8 e5 b2 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010d90c:	83 c4 10             	add    $0x10,%esp
				unmap_frame(env->env_page_directory,i);
f010d90f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d912:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d918:	83 ec 08             	sub    $0x8,%esp
f010d91b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010d91e:	50                   	push   %eax
f010d91f:	e8 77 a0 ff ff       	call   f010799b <unmap_frame>
f010d924:	83 c4 10             	add    $0x10,%esp
			}
			env->segmentbreak = newBreak;
f010d927:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d92a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010d92d:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
			return (void*)newBreak;
f010d933:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d936:	eb 05                	jmp    f010d93d <sys_sbrk+0x1d0>
		}
	}
	return 0;
f010d938:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d93d:	c9                   	leave  
f010d93e:	c3                   	ret    

f010d93f <sys_hard_limit>:

uint32 sys_hard_limit(){
f010d93f:	55                   	push   %ebp
f010d940:	89 e5                	mov    %esp,%ebp
	return curenv->limit;
f010d942:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d947:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
}
f010d94d:	5d                   	pop    %ebp
f010d94e:	c3                   	ret    

f010d94f <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d94f:	55                   	push   %ebp
f010d950:	89 e5                	mov    %esp,%ebp
f010d952:	56                   	push   %esi
f010d953:	53                   	push   %ebx
f010d954:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010d957:	83 7d 08 33          	cmpl   $0x33,0x8(%ebp)
f010d95b:	0f 87 b9 04 00 00    	ja     f010de1a <syscall+0x4cb>
f010d961:	8b 45 08             	mov    0x8(%ebp),%eax
f010d964:	c1 e0 02             	shl    $0x2,%eax
f010d967:	05 a4 6e 12 f0       	add    $0xf0126ea4,%eax
f010d96c:	8b 00                	mov    (%eax),%eax
f010d96e:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:

		return (uint32)sys_sbrk((int)a1);
f010d970:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d973:	83 ec 0c             	sub    $0xc,%esp
f010d976:	50                   	push   %eax
f010d977:	e8 f1 fd ff ff       	call   f010d76d <sys_sbrk>
f010d97c:	83 c4 10             	add    $0x10,%esp
f010d97f:	e9 9b 04 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_free_user_mem:
		if(a1 + a2 <=USER_LIMIT && a1 + a2 >=0 && a1){
f010d984:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d987:	8b 45 10             	mov    0x10(%ebp),%eax
f010d98a:	01 d0                	add    %edx,%eax
f010d98c:	3d 00 00 80 ef       	cmp    $0xef800000,%eax
f010d991:	77 19                	ja     f010d9ac <syscall+0x5d>
f010d993:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d997:	74 13                	je     f010d9ac <syscall+0x5d>
			sys_free_user_mem(a1 , a2);
f010d999:	83 ec 08             	sub    $0x8,%esp
f010d99c:	ff 75 10             	pushl  0x10(%ebp)
f010d99f:	ff 75 0c             	pushl  0xc(%ebp)
f010d9a2:	e8 d0 f9 ff ff       	call   f010d377 <sys_free_user_mem>
f010d9a7:	83 c4 10             	add    $0x10,%esp
f010d9aa:	eb 14                	jmp    f010d9c0 <syscall+0x71>
		}
		else{

			sched_kill_env(curenv->env_id);
f010d9ac:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d9b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d9b4:	83 ec 0c             	sub    $0xc,%esp
f010d9b7:	50                   	push   %eax
f010d9b8:	e8 f0 7c ff ff       	call   f01056ad <sched_kill_env>
f010d9bd:	83 c4 10             	add    $0x10,%esp
		}
		return 0;
f010d9c0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9c5:	e9 55 04 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_allocate_user_mem:
		if(!a1|| a1 + a2 > USER_LIMIT || a1 + a2 <0){
f010d9ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d9ce:	74 0f                	je     f010d9df <syscall+0x90>
f010d9d0:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d9d3:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9d6:	01 d0                	add    %edx,%eax
f010d9d8:	3d 00 00 80 ef       	cmp    $0xef800000,%eax
f010d9dd:	76 16                	jbe    f010d9f5 <syscall+0xa6>
			sched_kill_env(curenv->env_id);
f010d9df:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010d9e4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d9e7:	83 ec 0c             	sub    $0xc,%esp
f010d9ea:	50                   	push   %eax
f010d9eb:	e8 bd 7c ff ff       	call   f01056ad <sched_kill_env>
f010d9f0:	83 c4 10             	add    $0x10,%esp
f010d9f3:	eb 11                	jmp    f010da06 <syscall+0xb7>
		}
		else{
			sys_allocate_user_mem(a1 ,a2);
f010d9f5:	83 ec 08             	sub    $0x8,%esp
f010d9f8:	ff 75 10             	pushl  0x10(%ebp)
f010d9fb:	ff 75 0c             	pushl  0xc(%ebp)
f010d9fe:	e8 b6 f9 ff ff       	call   f010d3b9 <sys_allocate_user_mem>
f010da03:	83 c4 10             	add    $0x10,%esp
		}
		return 0;
f010da06:	b8 00 00 00 00       	mov    $0x0,%eax
f010da0b:	e9 0f 04 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_hard_limit:
		return sys_hard_limit();
f010da10:	e8 2a ff ff ff       	call   f010d93f <sys_hard_limit>
f010da15:	e9 05 04 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
		//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010da1a:	8b 45 14             	mov    0x14(%ebp),%eax
f010da1d:	0f b6 d0             	movzbl %al,%edx
f010da20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da23:	83 ec 04             	sub    $0x4,%esp
f010da26:	52                   	push   %edx
f010da27:	ff 75 10             	pushl  0x10(%ebp)
f010da2a:	50                   	push   %eax
f010da2b:	e8 7d f6 ff ff       	call   f010d0ad <sys_cputs>
f010da30:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da33:	b8 00 00 00 00       	mov    $0x0,%eax
f010da38:	e9 e2 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010da3d:	e8 dd f6 ff ff       	call   f010d11f <sys_cgetc>
f010da42:	e9 d8 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010da47:	83 ec 08             	sub    $0x8,%esp
f010da4a:	ff 75 10             	pushl  0x10(%ebp)
f010da4d:	ff 75 0c             	pushl  0xc(%ebp)
f010da50:	e8 39 f8 ff ff       	call   f010d28e <sys_calculate_required_frames>
f010da55:	83 c4 10             	add    $0x10,%esp
f010da58:	e9 c2 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010da5d:	e8 51 f8 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f010da62:	e9 b8 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010da67:	e8 66 f8 ff ff       	call   f010d2d2 <sys_calculate_modified_frames>
f010da6c:	e9 ae 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010da71:	e8 76 f8 ff ff       	call   f010d2ec <sys_calculate_notmod_frames>
f010da76:	e9 a4 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010da7b:	e8 de f8 ff ff       	call   f010d35e <sys_pf_calculate_allocated_pages>
f010da80:	e9 9a 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010da85:	83 ec 0c             	sub    $0xc,%esp
f010da88:	ff 75 0c             	pushl  0xc(%ebp)
f010da8b:	e8 76 f8 ff ff       	call   f010d306 <sys_calculate_pages_tobe_removed_ready_exit>
f010da90:	83 c4 10             	add    $0x10,%esp
f010da93:	e9 87 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010da98:	e8 7f f8 ff ff       	call   f010d31c <sys_scarce_memory>
		return 0;
f010da9d:	b8 00 00 00 00       	mov    $0x0,%eax
f010daa2:	e9 78 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010daa7:	83 ec 04             	sub    $0x4,%esp
f010daaa:	ff 75 14             	pushl  0x14(%ebp)
f010daad:	ff 75 10             	pushl  0x10(%ebp)
f010dab0:	ff 75 0c             	pushl  0xc(%ebp)
f010dab3:	e8 21 f9 ff ff       	call   f010d3d9 <sys_allocate_chunk>
f010dab8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dabb:	b8 00 00 00 00       	mov    $0x0,%eax
f010dac0:	e9 5a 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010dac5:	8b 55 10             	mov    0x10(%ebp),%edx
f010dac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dacb:	83 ec 08             	sub    $0x8,%esp
f010dace:	52                   	push   %edx
f010dacf:	50                   	push   %eax
f010dad0:	e8 5d f6 ff ff       	call   f010d132 <__sys_allocate_page>
f010dad5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dad8:	b8 00 00 00 00       	mov    $0x0,%eax
f010dadd:	e9 3d 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010dae2:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010dae5:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dae8:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010daeb:	8b 55 10             	mov    0x10(%ebp),%edx
f010daee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daf1:	83 ec 0c             	sub    $0xc,%esp
f010daf4:	56                   	push   %esi
f010daf5:	53                   	push   %ebx
f010daf6:	51                   	push   %ecx
f010daf7:	52                   	push   %edx
f010daf8:	50                   	push   %eax
f010daf9:	e8 56 f7 ff ff       	call   f010d254 <__sys_map_frame>
f010dafe:	83 c4 20             	add    $0x20,%esp
		return 0;
f010db01:	b8 00 00 00 00       	mov    $0x0,%eax
f010db06:	e9 14 03 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010db0b:	8b 55 10             	mov    0x10(%ebp),%edx
f010db0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db11:	83 ec 08             	sub    $0x8,%esp
f010db14:	52                   	push   %edx
f010db15:	50                   	push   %eax
f010db16:	e8 56 f7 ff ff       	call   f010d271 <__sys_unmap_frame>
f010db1b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db1e:	b8 00 00 00 00       	mov    $0x0,%eax
f010db23:	e9 f7 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010db28:	e8 0a f9 ff ff       	call   f010d437 <sys_disable_interrupt>
		return 0;
f010db2d:	b8 00 00 00 00       	mov    $0x0,%eax
f010db32:	e9 e8 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010db37:	e8 15 f9 ff ff       	call   f010d451 <sys_enable_interrupt>
		return 0;
f010db3c:	b8 00 00 00 00       	mov    $0x0,%eax
f010db41:	e9 d9 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010db46:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db49:	0f be c0             	movsbl %al,%eax
f010db4c:	83 ec 0c             	sub    $0xc,%esp
f010db4f:	50                   	push   %eax
f010db50:	e8 a6 f5 ff ff       	call   f010d0fb <sys_cputc>
f010db55:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db58:	b8 00 00 00 00       	mov    $0x0,%eax
f010db5d:	e9 bd 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010db62:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db65:	0f be c0             	movsbl %al,%eax
f010db68:	83 ec 0c             	sub    $0xc,%esp
f010db6b:	50                   	push   %eax
f010db6c:	e8 b9 f7 ff ff       	call   f010d32a <sys_clearFFL>
f010db71:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db74:	b8 00 00 00 00       	mov    $0x0,%eax
f010db79:	e9 a1 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010db7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db81:	83 ec 08             	sub    $0x8,%esp
f010db84:	ff 75 10             	pushl  0x10(%ebp)
f010db87:	50                   	push   %eax
f010db88:	e8 de f8 ff ff       	call   f010d46b <sys_createSemaphore>
f010db8d:	83 c4 10             	add    $0x10,%esp
f010db90:	e9 8a 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010db95:	8b 55 10             	mov    0x10(%ebp),%edx
f010db98:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db9b:	83 ec 08             	sub    $0x8,%esp
f010db9e:	52                   	push   %edx
f010db9f:	50                   	push   %eax
f010dba0:	e8 e8 f8 ff ff       	call   f010d48d <sys_waitSemaphore>
f010dba5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dba8:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbad:	e9 6d 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010dbb2:	8b 55 10             	mov    0x10(%ebp),%edx
f010dbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb8:	83 ec 08             	sub    $0x8,%esp
f010dbbb:	52                   	push   %edx
f010dbbc:	50                   	push   %eax
f010dbbd:	e8 e5 f8 ff ff       	call   f010d4a7 <sys_signalSemaphore>
f010dbc2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbc5:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbca:	e9 50 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010dbcf:	8b 55 10             	mov    0x10(%ebp),%edx
f010dbd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd5:	83 ec 08             	sub    $0x8,%esp
f010dbd8:	52                   	push   %edx
f010dbd9:	50                   	push   %eax
f010dbda:	e8 e2 f8 ff ff       	call   f010d4c1 <sys_getSemaphoreValue>
f010dbdf:	83 c4 10             	add    $0x10,%esp
f010dbe2:	e9 38 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dbe7:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dbea:	8b 45 14             	mov    0x14(%ebp),%eax
f010dbed:	0f b6 d0             	movzbl %al,%edx
f010dbf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbf3:	51                   	push   %ecx
f010dbf4:	52                   	push   %edx
f010dbf5:	ff 75 10             	pushl  0x10(%ebp)
f010dbf8:	50                   	push   %eax
f010dbf9:	e8 2a f9 ff ff       	call   f010d528 <sys_createSharedObject>
f010dbfe:	83 c4 10             	add    $0x10,%esp
f010dc01:	e9 19 02 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010dc06:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dc09:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc0f:	83 ec 04             	sub    $0x4,%esp
f010dc12:	51                   	push   %ecx
f010dc13:	52                   	push   %edx
f010dc14:	50                   	push   %eax
f010dc15:	e8 57 f9 ff ff       	call   f010d571 <sys_getSharedObject>
f010dc1a:	83 c4 10             	add    $0x10,%esp
f010dc1d:	e9 fd 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010dc22:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc25:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc28:	83 ec 08             	sub    $0x8,%esp
f010dc2b:	52                   	push   %edx
f010dc2c:	50                   	push   %eax
f010dc2d:	e8 5b f9 ff ff       	call   f010d58d <sys_freeSharedObject>
f010dc32:	83 c4 10             	add    $0x10,%esp
f010dc35:	e9 e5 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dc3a:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc40:	83 ec 08             	sub    $0x8,%esp
f010dc43:	52                   	push   %edx
f010dc44:	50                   	push   %eax
f010dc45:	e8 0e f9 ff ff       	call   f010d558 <sys_getSizeOfSharedObject>
f010dc4a:	83 c4 10             	add    $0x10,%esp
f010dc4d:	e9 cd 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dc52:	e8 4f f9 ff ff       	call   f010d5a6 <sys_getMaxShares>
f010dc57:	e9 c3 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dc5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc5f:	ff 75 18             	pushl  0x18(%ebp)
f010dc62:	ff 75 14             	pushl  0x14(%ebp)
f010dc65:	ff 75 10             	pushl  0x10(%ebp)
f010dc68:	50                   	push   %eax
f010dc69:	e8 4f fa ff ff       	call   f010d6bd <sys_create_env>
f010dc6e:	83 c4 10             	add    $0x10,%esp
f010dc71:	e9 a9 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dc76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc79:	83 ec 0c             	sub    $0xc,%esp
f010dc7c:	50                   	push   %eax
f010dc7d:	e8 7b fa ff ff       	call   f010d6fd <sys_run_env>
f010dc82:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc85:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc8a:	e9 90 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dc8f:	e8 29 f9 ff ff       	call   f010d5bd <sys_getenvindex>
f010dc94:	e9 86 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dc99:	e8 12 f9 ff ff       	call   f010d5b0 <sys_getenvid>
f010dc9e:	e9 7c 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dca3:	e8 62 f9 ff ff       	call   f010d60a <sys_getparentenvid>
f010dca8:	e9 72 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dcad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcb0:	83 ec 0c             	sub    $0xc,%esp
f010dcb3:	50                   	push   %eax
f010dcb4:	e8 5e f9 ff ff       	call   f010d617 <sys_destroy_env>
f010dcb9:	83 c4 10             	add    $0x10,%esp
f010dcbc:	e9 5e 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dcc1:	e8 e9 f9 ff ff       	call   f010d6af <sys_exit_env>
		return 0;
f010dcc6:	b8 00 00 00 00       	mov    $0x0,%eax
f010dccb:	e9 4f 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dcd0:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dcd3:	83 ec 0c             	sub    $0xc,%esp
f010dcd6:	50                   	push   %eax
f010dcd7:	e8 39 fa ff ff       	call   f010d715 <sys_get_virtual_time>
f010dcdc:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dcdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dce5:	8b 45 10             	mov    0x10(%ebp),%eax
f010dce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dceb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dcee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dcf1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dcf3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dcf9:	89 10                	mov    %edx,(%eax)
		return 0;
f010dcfb:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd00:	e9 1a 01 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dd05:	83 ec 04             	sub    $0x4,%esp
f010dd08:	ff 75 14             	pushl  0x14(%ebp)
f010dd0b:	ff 75 10             	pushl  0x10(%ebp)
f010dd0e:	ff 75 0c             	pushl  0xc(%ebp)
f010dd11:	e8 e9 f6 ff ff       	call   f010d3ff <sys_move_user_mem>
f010dd16:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd19:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd1e:	e9 fc 00 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dd23:	e8 1c fa ff ff       	call   f010d744 <sys_rcr2>
f010dd28:	e9 f2 00 00 00       	jmp    f010de1f <syscall+0x4d0>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dd2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd30:	0f b6 c0             	movzbl %al,%eax
f010dd33:	83 ec 0c             	sub    $0xc,%esp
f010dd36:	50                   	push   %eax
f010dd37:	e8 1a fa ff ff       	call   f010d756 <sys_bypassPageFault>
f010dd3c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd3f:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd44:	e9 d6 00 00 00       	jmp    f010de1f <syscall+0x4d0>

	case SYS_rsttst:
		rsttst();
f010dd49:	e8 d1 29 01 00       	call   f012071f <rsttst>
		return 0;
f010dd4e:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd53:	e9 c7 00 00 00       	jmp    f010de1f <syscall+0x4d0>
	case SYS_inctst:
		inctst();
f010dd58:	e8 d2 29 01 00       	call   f012072f <inctst>
		return 0;
f010dd5d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd62:	e9 b8 00 00 00       	jmp    f010de1f <syscall+0x4d0>
	case SYS_chktst:
		chktst(a1);
f010dd67:	83 ec 0c             	sub    $0xc,%esp
f010dd6a:	ff 75 0c             	pushl  0xc(%ebp)
f010dd6d:	e8 bc 2a 01 00       	call   f012082e <chktst>
f010dd72:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd75:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd7a:	e9 a0 00 00 00       	jmp    f010de1f <syscall+0x4d0>
	case SYS_gettst:
		return gettst();
f010dd7f:	e8 bc 29 01 00       	call   f0120740 <gettst>
f010dd84:	e9 96 00 00 00       	jmp    f010de1f <syscall+0x4d0>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010dd89:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010dd8c:	8b 45 18             	mov    0x18(%ebp),%eax
f010dd8f:	0f be c0             	movsbl %al,%eax
f010dd92:	83 ec 0c             	sub    $0xc,%esp
f010dd95:	52                   	push   %edx
f010dd96:	50                   	push   %eax
f010dd97:	ff 75 14             	pushl  0x14(%ebp)
f010dd9a:	ff 75 10             	pushl  0x10(%ebp)
f010dd9d:	ff 75 0c             	pushl  0xc(%ebp)
f010dda0:	e8 a5 29 01 00       	call   f012074a <tst>
f010dda5:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dda8:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddad:	eb 70                	jmp    f010de1f <syscall+0x4d0>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010ddaf:	e8 6b f6 ff ff       	call   f010d41f <sys_get_heap_strategy>
f010ddb4:	eb 69                	jmp    f010de1f <syscall+0x4d0>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010ddb6:	83 ec 0c             	sub    $0xc,%esp
f010ddb9:	ff 75 0c             	pushl  0xc(%ebp)
f010ddbc:	e8 68 f6 ff ff       	call   f010d429 <sys_set_uheap_strategy>
f010ddc1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ddc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc9:	eb 54                	jmp    f010de1f <syscall+0x4d0>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010ddcb:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010ddce:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ddd1:	8b 55 10             	mov    0x10(%ebp),%edx
f010ddd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddd7:	53                   	push   %ebx
f010ddd8:	51                   	push   %ecx
f010ddd9:	52                   	push   %edx
f010ddda:	50                   	push   %eax
f010dddb:	e8 04 16 00 00       	call   f010f3e4 <sys_check_LRU_lists>
f010dde0:	83 c4 10             	add    $0x10,%esp
f010dde3:	eb 3a                	jmp    f010de1f <syscall+0x4d0>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dde5:	8b 55 10             	mov    0x10(%ebp),%edx
f010dde8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddeb:	83 ec 08             	sub    $0x8,%esp
f010ddee:	52                   	push   %edx
f010ddef:	50                   	push   %eax
f010ddf0:	e8 71 17 00 00       	call   f010f566 <sys_check_LRU_lists_free>
f010ddf5:	83 c4 10             	add    $0x10,%esp
f010ddf8:	eb 25                	jmp    f010de1f <syscall+0x4d0>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010ddfa:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010ddfd:	8b 55 10             	mov    0x10(%ebp),%edx
f010de00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de03:	51                   	push   %ecx
f010de04:	ff 75 14             	pushl  0x14(%ebp)
f010de07:	52                   	push   %edx
f010de08:	50                   	push   %eax
f010de09:	e8 c3 18 00 00       	call   f010f6d1 <sys_check_WS_list>
f010de0e:	83 c4 10             	add    $0x10,%esp
f010de11:	eb 0c                	jmp    f010de1f <syscall+0x4d0>

	case NSYSCALLS:
		return 	-E_INVAL;
f010de13:	b8 03 00 00 00       	mov    $0x3,%eax
f010de18:	eb 05                	jmp    f010de1f <syscall+0x4d0>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010de1a:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010de1f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010de22:	5b                   	pop    %ebx
f010de23:	5e                   	pop    %esi
f010de24:	5d                   	pop    %ebp
f010de25:	c3                   	ret    

f010de26 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010de26:	55                   	push   %ebp
f010de27:	89 e5                	mov    %esp,%ebp
f010de29:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010de2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de2f:	8b 00                	mov    (%eax),%eax
f010de31:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de34:	8b 45 10             	mov    0x10(%ebp),%eax
f010de37:	8b 00                	mov    (%eax),%eax
f010de39:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010de3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010de43:	e9 ca 00 00 00       	jmp    f010df12 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010de48:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010de4e:	01 d0                	add    %edx,%eax
f010de50:	89 c2                	mov    %eax,%edx
f010de52:	c1 ea 1f             	shr    $0x1f,%edx
f010de55:	01 d0                	add    %edx,%eax
f010de57:	d1 f8                	sar    %eax
f010de59:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de5f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010de62:	eb 03                	jmp    f010de67 <stab_binsearch+0x41>
			m--;
f010de64:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010de67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de6a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010de6d:	7c 1e                	jl     f010de8d <stab_binsearch+0x67>
f010de6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de72:	89 d0                	mov    %edx,%eax
f010de74:	01 c0                	add    %eax,%eax
f010de76:	01 d0                	add    %edx,%eax
f010de78:	c1 e0 02             	shl    $0x2,%eax
f010de7b:	89 c2                	mov    %eax,%edx
f010de7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010de80:	01 d0                	add    %edx,%eax
f010de82:	8a 40 04             	mov    0x4(%eax),%al
f010de85:	0f b6 c0             	movzbl %al,%eax
f010de88:	3b 45 14             	cmp    0x14(%ebp),%eax
f010de8b:	75 d7                	jne    f010de64 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010de8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de90:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010de93:	7d 09                	jge    f010de9e <stab_binsearch+0x78>
			l = true_m + 1;
f010de95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de98:	40                   	inc    %eax
f010de99:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010de9c:	eb 74                	jmp    f010df12 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010de9e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010dea5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dea8:	89 d0                	mov    %edx,%eax
f010deaa:	01 c0                	add    %eax,%eax
f010deac:	01 d0                	add    %edx,%eax
f010deae:	c1 e0 02             	shl    $0x2,%eax
f010deb1:	89 c2                	mov    %eax,%edx
f010deb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010deb6:	01 d0                	add    %edx,%eax
f010deb8:	8b 40 08             	mov    0x8(%eax),%eax
f010debb:	3b 45 18             	cmp    0x18(%ebp),%eax
f010debe:	73 11                	jae    f010ded1 <stab_binsearch+0xab>
			*region_left = m;
f010dec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dec6:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010dec8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010decb:	40                   	inc    %eax
f010decc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010decf:	eb 41                	jmp    f010df12 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010ded1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ded4:	89 d0                	mov    %edx,%eax
f010ded6:	01 c0                	add    %eax,%eax
f010ded8:	01 d0                	add    %edx,%eax
f010deda:	c1 e0 02             	shl    $0x2,%eax
f010dedd:	89 c2                	mov    %eax,%edx
f010dedf:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee2:	01 d0                	add    %edx,%eax
f010dee4:	8b 40 08             	mov    0x8(%eax),%eax
f010dee7:	3b 45 18             	cmp    0x18(%ebp),%eax
f010deea:	76 14                	jbe    f010df00 <stab_binsearch+0xda>
			*region_right = m - 1;
f010deec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010deef:	8d 50 ff             	lea    -0x1(%eax),%edx
f010def2:	8b 45 10             	mov    0x10(%ebp),%eax
f010def5:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010def7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010defa:	48                   	dec    %eax
f010defb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010defe:	eb 12                	jmp    f010df12 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010df00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df03:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df06:	89 10                	mov    %edx,(%eax)
			l = m;
f010df08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010df0e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010df12:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010df15:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010df18:	0f 8e 2a ff ff ff    	jle    f010de48 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010df1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010df22:	75 0f                	jne    f010df33 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010df24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df27:	8b 00                	mov    (%eax),%eax
f010df29:	8d 50 ff             	lea    -0x1(%eax),%edx
f010df2c:	8b 45 10             	mov    0x10(%ebp),%eax
f010df2f:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010df31:	eb 3d                	jmp    f010df70 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010df33:	8b 45 10             	mov    0x10(%ebp),%eax
f010df36:	8b 00                	mov    (%eax),%eax
f010df38:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010df3b:	eb 03                	jmp    f010df40 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010df3d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010df40:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df43:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010df45:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010df48:	7d 1e                	jge    f010df68 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010df4a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010df4d:	89 d0                	mov    %edx,%eax
f010df4f:	01 c0                	add    %eax,%eax
f010df51:	01 d0                	add    %edx,%eax
f010df53:	c1 e0 02             	shl    $0x2,%eax
f010df56:	89 c2                	mov    %eax,%edx
f010df58:	8b 45 08             	mov    0x8(%ebp),%eax
f010df5b:	01 d0                	add    %edx,%eax
f010df5d:	8a 40 04             	mov    0x4(%eax),%al
f010df60:	0f b6 c0             	movzbl %al,%eax
f010df63:	3b 45 14             	cmp    0x14(%ebp),%eax
f010df66:	75 d5                	jne    f010df3d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010df68:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df6b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010df6e:	89 10                	mov    %edx,(%eax)
	}
}
f010df70:	90                   	nop
f010df71:	c9                   	leave  
f010df72:	c3                   	ret    

f010df73 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010df73:	55                   	push   %ebp
f010df74:	89 e5                	mov    %esp,%ebp
f010df76:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010df79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df7c:	c7 00 74 6f 12 f0    	movl   $0xf0126f74,(%eax)
	info->eip_line = 0;
f010df82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df85:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010df8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df8f:	c7 40 08 74 6f 12 f0 	movl   $0xf0126f74,0x8(%eax)
	info->eip_fn_namelen = 9;
f010df96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df99:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010dfa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa3:	8b 55 08             	mov    0x8(%ebp),%edx
f010dfa6:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010dfa9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfac:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010dfb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfb6:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010dfbb:	76 1e                	jbe    f010dfdb <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010dfbd:	c7 45 f4 ac ba 12 f0 	movl   $0xf012baac,-0xc(%ebp)
		stab_end = __STAB_END__;
f010dfc4:	c7 45 f0 8c bc 15 f0 	movl   $0xf015bc8c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010dfcb:	c7 45 ec 8d bc 15 f0 	movl   $0xf015bc8d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010dfd2:	c7 45 e8 0a 8e 16 f0 	movl   $0xf0168e0a,-0x18(%ebp)
f010dfd9:	eb 2a                	jmp    f010e005 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010dfdb:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010dfe2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dfe5:	8b 00                	mov    (%eax),%eax
f010dfe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010dfea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dfed:	8b 40 04             	mov    0x4(%eax),%eax
f010dff0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010dff3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dff6:	8b 40 08             	mov    0x8(%eax),%eax
f010dff9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dffc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dfff:	8b 40 0c             	mov    0xc(%eax),%eax
f010e002:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e005:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e008:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e00b:	76 0a                	jbe    f010e017 <debuginfo_eip+0xa4>
f010e00d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e010:	48                   	dec    %eax
f010e011:	8a 00                	mov    (%eax),%al
f010e013:	84 c0                	test   %al,%al
f010e015:	74 0a                	je     f010e021 <debuginfo_eip+0xae>
		return -1;
f010e017:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e01c:	e9 01 02 00 00       	jmp    f010e222 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e021:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e028:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e02b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e02e:	29 c2                	sub    %eax,%edx
f010e030:	89 d0                	mov    %edx,%eax
f010e032:	c1 f8 02             	sar    $0x2,%eax
f010e035:	89 c2                	mov    %eax,%edx
f010e037:	89 d0                	mov    %edx,%eax
f010e039:	c1 e0 02             	shl    $0x2,%eax
f010e03c:	01 d0                	add    %edx,%eax
f010e03e:	c1 e0 02             	shl    $0x2,%eax
f010e041:	01 d0                	add    %edx,%eax
f010e043:	c1 e0 02             	shl    $0x2,%eax
f010e046:	01 d0                	add    %edx,%eax
f010e048:	89 c1                	mov    %eax,%ecx
f010e04a:	c1 e1 08             	shl    $0x8,%ecx
f010e04d:	01 c8                	add    %ecx,%eax
f010e04f:	89 c1                	mov    %eax,%ecx
f010e051:	c1 e1 10             	shl    $0x10,%ecx
f010e054:	01 c8                	add    %ecx,%eax
f010e056:	01 c0                	add    %eax,%eax
f010e058:	01 d0                	add    %edx,%eax
f010e05a:	48                   	dec    %eax
f010e05b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e05e:	ff 75 08             	pushl  0x8(%ebp)
f010e061:	6a 64                	push   $0x64
f010e063:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e066:	50                   	push   %eax
f010e067:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e06a:	50                   	push   %eax
f010e06b:	ff 75 f4             	pushl  -0xc(%ebp)
f010e06e:	e8 b3 fd ff ff       	call   f010de26 <stab_binsearch>
f010e073:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e076:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e079:	85 c0                	test   %eax,%eax
f010e07b:	75 0a                	jne    f010e087 <debuginfo_eip+0x114>
		return -1;
f010e07d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e082:	e9 9b 01 00 00       	jmp    f010e222 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e087:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e08a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e08d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e090:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e093:	ff 75 08             	pushl  0x8(%ebp)
f010e096:	6a 24                	push   $0x24
f010e098:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e09b:	50                   	push   %eax
f010e09c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e09f:	50                   	push   %eax
f010e0a0:	ff 75 f4             	pushl  -0xc(%ebp)
f010e0a3:	e8 7e fd ff ff       	call   f010de26 <stab_binsearch>
f010e0a8:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e0ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e0ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e0b1:	39 c2                	cmp    %eax,%edx
f010e0b3:	0f 8f 86 00 00 00    	jg     f010e13f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e0b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e0bc:	89 c2                	mov    %eax,%edx
f010e0be:	89 d0                	mov    %edx,%eax
f010e0c0:	01 c0                	add    %eax,%eax
f010e0c2:	01 d0                	add    %edx,%eax
f010e0c4:	c1 e0 02             	shl    $0x2,%eax
f010e0c7:	89 c2                	mov    %eax,%edx
f010e0c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0cc:	01 d0                	add    %edx,%eax
f010e0ce:	8b 00                	mov    (%eax),%eax
f010e0d0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e0d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e0d6:	29 d1                	sub    %edx,%ecx
f010e0d8:	89 ca                	mov    %ecx,%edx
f010e0da:	39 d0                	cmp    %edx,%eax
f010e0dc:	73 22                	jae    f010e100 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e0de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e0e1:	89 c2                	mov    %eax,%edx
f010e0e3:	89 d0                	mov    %edx,%eax
f010e0e5:	01 c0                	add    %eax,%eax
f010e0e7:	01 d0                	add    %edx,%eax
f010e0e9:	c1 e0 02             	shl    $0x2,%eax
f010e0ec:	89 c2                	mov    %eax,%edx
f010e0ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0f1:	01 d0                	add    %edx,%eax
f010e0f3:	8b 10                	mov    (%eax),%edx
f010e0f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e0f8:	01 c2                	add    %eax,%edx
f010e0fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0fd:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e100:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e103:	89 c2                	mov    %eax,%edx
f010e105:	89 d0                	mov    %edx,%eax
f010e107:	01 c0                	add    %eax,%eax
f010e109:	01 d0                	add    %edx,%eax
f010e10b:	c1 e0 02             	shl    $0x2,%eax
f010e10e:	89 c2                	mov    %eax,%edx
f010e110:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e113:	01 d0                	add    %edx,%eax
f010e115:	8b 50 08             	mov    0x8(%eax),%edx
f010e118:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e11b:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e11e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e121:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e124:	8b 40 10             	mov    0x10(%eax),%eax
f010e127:	29 c2                	sub    %eax,%edx
f010e129:	89 d0                	mov    %edx,%eax
f010e12b:	c1 f8 02             	sar    $0x2,%eax
f010e12e:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e131:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e134:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e137:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e13a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e13d:	eb 15                	jmp    f010e154 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e13f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e142:	8b 55 08             	mov    0x8(%ebp),%edx
f010e145:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e148:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e14b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e14e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e151:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e154:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e157:	8b 40 08             	mov    0x8(%eax),%eax
f010e15a:	83 ec 08             	sub    $0x8,%esp
f010e15d:	6a 3a                	push   $0x3a
f010e15f:	50                   	push   %eax
f010e160:	e8 41 3b 01 00       	call   f0121ca6 <strfind>
f010e165:	83 c4 10             	add    $0x10,%esp
f010e168:	89 c2                	mov    %eax,%edx
f010e16a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e16d:	8b 40 08             	mov    0x8(%eax),%eax
f010e170:	29 c2                	sub    %eax,%edx
f010e172:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e175:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e178:	eb 03                	jmp    f010e17d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e17a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e17d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e180:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e183:	7c 4e                	jl     f010e1d3 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e185:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e188:	89 d0                	mov    %edx,%eax
f010e18a:	01 c0                	add    %eax,%eax
f010e18c:	01 d0                	add    %edx,%eax
f010e18e:	c1 e0 02             	shl    $0x2,%eax
f010e191:	89 c2                	mov    %eax,%edx
f010e193:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e196:	01 d0                	add    %edx,%eax
f010e198:	8a 40 04             	mov    0x4(%eax),%al
f010e19b:	3c 84                	cmp    $0x84,%al
f010e19d:	74 34                	je     f010e1d3 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e19f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1a2:	89 d0                	mov    %edx,%eax
f010e1a4:	01 c0                	add    %eax,%eax
f010e1a6:	01 d0                	add    %edx,%eax
f010e1a8:	c1 e0 02             	shl    $0x2,%eax
f010e1ab:	89 c2                	mov    %eax,%edx
f010e1ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1b0:	01 d0                	add    %edx,%eax
f010e1b2:	8a 40 04             	mov    0x4(%eax),%al
f010e1b5:	3c 64                	cmp    $0x64,%al
f010e1b7:	75 c1                	jne    f010e17a <debuginfo_eip+0x207>
f010e1b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1bc:	89 d0                	mov    %edx,%eax
f010e1be:	01 c0                	add    %eax,%eax
f010e1c0:	01 d0                	add    %edx,%eax
f010e1c2:	c1 e0 02             	shl    $0x2,%eax
f010e1c5:	89 c2                	mov    %eax,%edx
f010e1c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1ca:	01 d0                	add    %edx,%eax
f010e1cc:	8b 40 08             	mov    0x8(%eax),%eax
f010e1cf:	85 c0                	test   %eax,%eax
f010e1d1:	74 a7                	je     f010e17a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e1d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e1d6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e1d9:	7c 42                	jl     f010e21d <debuginfo_eip+0x2aa>
f010e1db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1de:	89 d0                	mov    %edx,%eax
f010e1e0:	01 c0                	add    %eax,%eax
f010e1e2:	01 d0                	add    %edx,%eax
f010e1e4:	c1 e0 02             	shl    $0x2,%eax
f010e1e7:	89 c2                	mov    %eax,%edx
f010e1e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1ec:	01 d0                	add    %edx,%eax
f010e1ee:	8b 00                	mov    (%eax),%eax
f010e1f0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e1f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e1f6:	29 d1                	sub    %edx,%ecx
f010e1f8:	89 ca                	mov    %ecx,%edx
f010e1fa:	39 d0                	cmp    %edx,%eax
f010e1fc:	73 1f                	jae    f010e21d <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e1fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e201:	89 d0                	mov    %edx,%eax
f010e203:	01 c0                	add    %eax,%eax
f010e205:	01 d0                	add    %edx,%eax
f010e207:	c1 e0 02             	shl    $0x2,%eax
f010e20a:	89 c2                	mov    %eax,%edx
f010e20c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e20f:	01 d0                	add    %edx,%eax
f010e211:	8b 10                	mov    (%eax),%edx
f010e213:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e216:	01 c2                	add    %eax,%edx
f010e218:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e21b:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e21d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e222:	c9                   	leave  
f010e223:	c3                   	ret    

f010e224 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e224:	55                   	push   %ebp
f010e225:	89 e5                	mov    %esp,%ebp
f010e227:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e22a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e22e:	74 1c                	je     f010e24c <setPageReplacmentAlgorithmLRU+0x28>
f010e230:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e234:	74 16                	je     f010e24c <setPageReplacmentAlgorithmLRU+0x28>
f010e236:	68 80 6f 12 f0       	push   $0xf0126f80
f010e23b:	68 ca 6f 12 f0       	push   $0xf0126fca
f010e240:	6a 18                	push   $0x18
f010e242:	68 df 6f 12 f0       	push   $0xf0126fdf
f010e247:	e8 ce 1f ff ff       	call   f010021a <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e24c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e24f:	a3 d4 40 3f f0       	mov    %eax,0xf03f40d4
}
f010e254:	90                   	nop
f010e255:	c9                   	leave  
f010e256:	c3                   	ret    

f010e257 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e257:	55                   	push   %ebp
f010e258:	89 e5                	mov    %esp,%ebp
f010e25a:	c7 05 d4 40 3f f0 03 	movl   $0x3,0xf03f40d4
f010e261:	00 00 00 
f010e264:	90                   	nop
f010e265:	5d                   	pop    %ebp
f010e266:	c3                   	ret    

f010e267 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e267:	55                   	push   %ebp
f010e268:	89 e5                	mov    %esp,%ebp
f010e26a:	c7 05 d4 40 3f f0 04 	movl   $0x4,0xf03f40d4
f010e271:	00 00 00 
f010e274:	90                   	nop
f010e275:	5d                   	pop    %ebp
f010e276:	c3                   	ret    

f010e277 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e277:	55                   	push   %ebp
f010e278:	89 e5                	mov    %esp,%ebp
f010e27a:	c7 05 d4 40 3f f0 05 	movl   $0x5,0xf03f40d4
f010e281:	00 00 00 
f010e284:	90                   	nop
f010e285:	5d                   	pop    %ebp
f010e286:	c3                   	ret    

f010e287 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e287:	55                   	push   %ebp
f010e288:	89 e5                	mov    %esp,%ebp
f010e28a:	c7 05 d4 40 3f f0 07 	movl   $0x7,0xf03f40d4
f010e291:	00 00 00 
f010e294:	90                   	nop
f010e295:	5d                   	pop    %ebp
f010e296:	c3                   	ret    

f010e297 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e297:	55                   	push   %ebp
f010e298:	89 e5                	mov    %esp,%ebp
f010e29a:	c7 05 d4 40 3f f0 06 	movl   $0x6,0xf03f40d4
f010e2a1:	00 00 00 
f010e2a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2a7:	a3 18 40 3f f0       	mov    %eax,0xf03f4018
f010e2ac:	90                   	nop
f010e2ad:	5d                   	pop    %ebp
f010e2ae:	c3                   	ret    

f010e2af <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e2af:	55                   	push   %ebp
f010e2b0:	89 e5                	mov    %esp,%ebp
f010e2b2:	8b 15 d4 40 3f f0    	mov    0xf03f40d4,%edx
f010e2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2bb:	39 c2                	cmp    %eax,%edx
f010e2bd:	0f 94 c0             	sete   %al
f010e2c0:	0f b6 c0             	movzbl %al,%eax
f010e2c3:	5d                   	pop    %ebp
f010e2c4:	c3                   	ret    

f010e2c5 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e2c5:	55                   	push   %ebp
f010e2c6:	89 e5                	mov    %esp,%ebp
f010e2c8:	a1 d4 40 3f f0       	mov    0xf03f40d4,%eax
f010e2cd:	83 f8 03             	cmp    $0x3,%eax
f010e2d0:	75 07                	jne    f010e2d9 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e2d2:	b8 01 00 00 00       	mov    $0x1,%eax
f010e2d7:	eb 05                	jmp    f010e2de <isPageReplacmentAlgorithmCLOCK+0x19>
f010e2d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2de:	5d                   	pop    %ebp
f010e2df:	c3                   	ret    

f010e2e0 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e2e0:	55                   	push   %ebp
f010e2e1:	89 e5                	mov    %esp,%ebp
f010e2e3:	a1 d4 40 3f f0       	mov    0xf03f40d4,%eax
f010e2e8:	83 f8 04             	cmp    $0x4,%eax
f010e2eb:	75 07                	jne    f010e2f4 <isPageReplacmentAlgorithmFIFO+0x14>
f010e2ed:	b8 01 00 00 00       	mov    $0x1,%eax
f010e2f2:	eb 05                	jmp    f010e2f9 <isPageReplacmentAlgorithmFIFO+0x19>
f010e2f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2f9:	5d                   	pop    %ebp
f010e2fa:	c3                   	ret    

f010e2fb <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e2fb:	55                   	push   %ebp
f010e2fc:	89 e5                	mov    %esp,%ebp
f010e2fe:	a1 d4 40 3f f0       	mov    0xf03f40d4,%eax
f010e303:	83 f8 05             	cmp    $0x5,%eax
f010e306:	75 07                	jne    f010e30f <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e308:	b8 01 00 00 00       	mov    $0x1,%eax
f010e30d:	eb 05                	jmp    f010e314 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e30f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e314:	5d                   	pop    %ebp
f010e315:	c3                   	ret    

f010e316 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e316:	55                   	push   %ebp
f010e317:	89 e5                	mov    %esp,%ebp
f010e319:	a1 d4 40 3f f0       	mov    0xf03f40d4,%eax
f010e31e:	83 f8 07             	cmp    $0x7,%eax
f010e321:	75 07                	jne    f010e32a <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e323:	b8 01 00 00 00       	mov    $0x1,%eax
f010e328:	eb 05                	jmp    f010e32f <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e32a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e32f:	5d                   	pop    %ebp
f010e330:	c3                   	ret    

f010e331 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e331:	55                   	push   %ebp
f010e332:	89 e5                	mov    %esp,%ebp
f010e334:	a1 d4 40 3f f0       	mov    0xf03f40d4,%eax
f010e339:	83 f8 06             	cmp    $0x6,%eax
f010e33c:	75 07                	jne    f010e345 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e33e:	b8 01 00 00 00       	mov    $0x1,%eax
f010e343:	eb 05                	jmp    f010e34a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e345:	b8 00 00 00 00       	mov    $0x0,%eax
f010e34a:	5d                   	pop    %ebp
f010e34b:	c3                   	ret    

f010e34c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e34c:	55                   	push   %ebp
f010e34d:	89 e5                	mov    %esp,%ebp
f010e34f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e352:	a3 94 40 3f f0       	mov    %eax,0xf03f4094
f010e357:	90                   	nop
f010e358:	5d                   	pop    %ebp
f010e359:	c3                   	ret    

f010e35a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e35a:	55                   	push   %ebp
f010e35b:	89 e5                	mov    %esp,%ebp
f010e35d:	a1 94 40 3f f0       	mov    0xf03f4094,%eax
f010e362:	5d                   	pop    %ebp
f010e363:	c3                   	ret    

f010e364 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e364:	55                   	push   %ebp
f010e365:	89 e5                	mov    %esp,%ebp
f010e367:	8b 45 08             	mov    0x8(%ebp),%eax
f010e36a:	a3 ec 40 3f f0       	mov    %eax,0xf03f40ec
f010e36f:	90                   	nop
f010e370:	5d                   	pop    %ebp
f010e371:	c3                   	ret    

f010e372 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e372:	55                   	push   %ebp
f010e373:	89 e5                	mov    %esp,%ebp
f010e375:	a1 ec 40 3f f0       	mov    0xf03f40ec,%eax
f010e37a:	5d                   	pop    %ebp
f010e37b:	c3                   	ret    

f010e37c <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e37c:	55                   	push   %ebp
f010e37d:	89 e5                	mov    %esp,%ebp
f010e37f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e382:	a3 fc 40 3f f0       	mov    %eax,0xf03f40fc
f010e387:	90                   	nop
f010e388:	5d                   	pop    %ebp
f010e389:	c3                   	ret    

f010e38a <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e38a:	55                   	push   %ebp
f010e38b:	89 e5                	mov    %esp,%ebp
f010e38d:	a1 fc 40 3f f0       	mov    0xf03f40fc,%eax
f010e392:	5d                   	pop    %ebp
f010e393:	c3                   	ret    

f010e394 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e394:	55                   	push   %ebp
f010e395:	89 e5                	mov    %esp,%ebp
f010e397:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e39a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e39d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010e3a3:	83 ec 08             	sub    $0x8,%esp
f010e3a6:	ff 75 0c             	pushl  0xc(%ebp)
f010e3a9:	50                   	push   %eax
f010e3aa:	e8 52 93 ff ff       	call   f0107701 <create_page_table>
f010e3af:	83 c4 10             	add    $0x10,%esp
f010e3b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e3b5:	90                   	nop
f010e3b6:	c9                   	leave  
f010e3b7:	c3                   	ret    

f010e3b8 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e3b8:	55                   	push   %ebp
f010e3b9:	89 e5                	mov    %esp,%ebp
f010e3bb:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	struct WorkingSetElement *victimWSElement = NULL;
f010e3be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 wsSize = LIST_SIZE(&(curenv->page_WS_list));
f010e3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3c8:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f010e3ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
#else
	int iWS =curenv->page_last_WS_index;
	uint32 wsSize = env_page_ws_get_size(curenv);
#endif

	if(wsSize < (curenv->page_WS_max_size))
f010e3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3d4:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f010e3da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e3dd:	0f 86 65 01 00 00    	jbe    f010e548 <page_fault_handler+0x190>
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		//panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
		struct FrameInfo* x;

		if(pf_read_env_page(curenv,(void*)fault_va)==E_PAGE_NOT_EXIST_IN_PF){
f010e3e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3e6:	83 ec 08             	sub    $0x8,%esp
f010e3e9:	50                   	push   %eax
f010e3ea:	ff 75 08             	pushl  0x8(%ebp)
f010e3ed:	e8 90 5f ff ff       	call   f0104382 <pf_read_env_page>
f010e3f2:	83 c4 10             	add    $0x10,%esp
f010e3f5:	83 f8 f7             	cmp    $0xfffffff7,%eax
f010e3f8:	0f 85 90 01 00 00    	jne    f010e58e <page_fault_handler+0x1d6>

			if((fault_va>=USER_HEAP_START&&fault_va<USER_HEAP_MAX)||(fault_va>=USTACKBOTTOM&&fault_va<USTACKTOP)){
f010e3fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e401:	85 c0                	test   %eax,%eax
f010e403:	79 09                	jns    f010e40e <page_fault_handler+0x56>
f010e405:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e40c:	76 38                	jbe    f010e446 <page_fault_handler+0x8e>
f010e40e:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010e415:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e418:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e41d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010e420:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e423:	ba 00 00 00 00       	mov    $0x0,%edx
f010e428:	f7 75 ec             	divl   -0x14(%ebp)
f010e42b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e42e:	29 d0                	sub    %edx,%eax
f010e430:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e433:	0f 87 fb 00 00 00    	ja     f010e534 <page_fault_handler+0x17c>
f010e439:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e440:	0f 87 ee 00 00 00    	ja     f010e534 <page_fault_handler+0x17c>
				if(allocate_frame(&x)==0){
f010e446:	83 ec 0c             	sub    $0xc,%esp
f010e449:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010e44c:	50                   	push   %eax
f010e44d:	e8 97 8f ff ff       	call   f01073e9 <allocate_frame>
f010e452:	83 c4 10             	add    $0x10,%esp
f010e455:	85 c0                	test   %eax,%eax
f010e457:	0f 85 30 01 00 00    	jne    f010e58d <page_fault_handler+0x1d5>
					map_frame(curenv->env_page_directory,x,fault_va,PERM_USER|PERM_WRITEABLE|MARKED);
f010e45d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e460:	8b 45 08             	mov    0x8(%ebp),%eax
f010e463:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010e469:	68 06 04 00 00       	push   $0x406
f010e46e:	ff 75 0c             	pushl  0xc(%ebp)
f010e471:	52                   	push   %edx
f010e472:	50                   	push   %eax
f010e473:	e8 c3 93 ff ff       	call   f010783b <map_frame>
f010e478:	83 c4 10             	add    $0x10,%esp
					struct WorkingSetElement * ele=env_page_ws_list_create_element(curenv,fault_va);
f010e47b:	83 ec 08             	sub    $0x8,%esp
f010e47e:	ff 75 0c             	pushl  0xc(%ebp)
f010e481:	ff 75 08             	pushl  0x8(%ebp)
f010e484:	e8 9e a9 ff ff       	call   f0108e27 <env_page_ws_list_create_element>
f010e489:	83 c4 10             	add    $0x10,%esp
f010e48c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					LIST_INSERT_TAIL(&curenv->page_WS_list,ele);
f010e48f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e493:	75 14                	jne    f010e4a9 <page_fault_handler+0xf1>
f010e495:	83 ec 04             	sub    $0x4,%esp
f010e498:	68 fc 6f 12 f0       	push   $0xf0126ffc
f010e49d:	6a 64                	push   $0x64
f010e49f:	68 df 6f 12 f0       	push   $0xf0126fdf
f010e4a4:	e8 71 1d ff ff       	call   f010021a <_panic>
f010e4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4ac:	8b 90 c8 00 00 00    	mov    0xc8(%eax),%edx
f010e4b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4b5:	89 50 14             	mov    %edx,0x14(%eax)
f010e4b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4bb:	8b 40 14             	mov    0x14(%eax),%eax
f010e4be:	85 c0                	test   %eax,%eax
f010e4c0:	74 11                	je     f010e4d3 <page_fault_handler+0x11b>
f010e4c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4c5:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
f010e4cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4ce:	89 50 10             	mov    %edx,0x10(%eax)
f010e4d1:	eb 0c                	jmp    f010e4df <page_fault_handler+0x127>
f010e4d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4d9:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
f010e4df:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4e5:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
f010e4eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4ee:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010e4f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4f8:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f010e4fe:	8d 50 01             	lea    0x1(%eax),%edx
f010e501:	8b 45 08             	mov    0x8(%ebp),%eax
f010e504:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
					if(curenv->page_WS_list.size==curenv->page_WS_max_size){
f010e50a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e50d:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010e513:	8b 45 08             	mov    0x8(%ebp),%eax
f010e516:	8b 80 dc 00 00 00    	mov    0xdc(%eax),%eax
f010e51c:	39 c2                	cmp    %eax,%edx
f010e51e:	75 6d                	jne    f010e58d <page_fault_handler+0x1d5>
						curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list);
f010e520:	8b 45 08             	mov    0x8(%ebp),%eax
f010e523:	8b 90 c4 00 00 00    	mov    0xc4(%eax),%edx
f010e529:	8b 45 08             	mov    0x8(%ebp),%eax
f010e52c:	89 90 d4 00 00 00    	mov    %edx,0xd4(%eax)
		struct FrameInfo* x;

		if(pf_read_env_page(curenv,(void*)fault_va)==E_PAGE_NOT_EXIST_IN_PF){

			if((fault_va>=USER_HEAP_START&&fault_va<USER_HEAP_MAX)||(fault_va>=USTACKBOTTOM&&fault_va<USTACKTOP)){
				if(allocate_frame(&x)==0){
f010e532:	eb 59                	jmp    f010e58d <page_fault_handler+0x1d5>

				}

			}
			else
				sched_kill_env(curenv->env_id);
f010e534:	8b 45 08             	mov    0x8(%ebp),%eax
f010e537:	8b 40 4c             	mov    0x4c(%eax),%eax
f010e53a:	83 ec 0c             	sub    $0xc,%esp
f010e53d:	50                   	push   %eax
f010e53e:	e8 6a 71 ff ff       	call   f01056ad <sched_kill_env>
f010e543:	83 c4 10             	add    $0x10,%esp
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010e546:	eb 46                	jmp    f010e58e <page_fault_handler+0x1d6>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010e548:	e8 93 fd ff ff       	call   f010e2e0 <isPageReplacmentAlgorithmFIFO>
f010e54d:	85 c0                	test   %eax,%eax
f010e54f:	74 14                	je     f010e565 <page_fault_handler+0x1ad>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010e551:	83 ec 04             	sub    $0x4,%esp
f010e554:	68 20 70 12 f0       	push   $0xf0127020
f010e559:	6a 7b                	push   $0x7b
f010e55b:	68 df 6f 12 f0       	push   $0xf0126fdf
f010e560:	e8 b5 1c ff ff       	call   f010021a <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010e565:	83 ec 0c             	sub    $0xc,%esp
f010e568:	6a 02                	push   $0x2
f010e56a:	e8 40 fd ff ff       	call   f010e2af <isPageReplacmentAlgorithmLRU>
f010e56f:	83 c4 10             	add    $0x10,%esp
f010e572:	85 c0                	test   %eax,%eax
f010e574:	74 18                	je     f010e58e <page_fault_handler+0x1d6>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010e576:	83 ec 04             	sub    $0x4,%esp
f010e579:	68 64 70 12 f0       	push   $0xf0127064
f010e57e:	68 81 00 00 00       	push   $0x81
f010e583:	68 df 6f 12 f0       	push   $0xf0126fdf
f010e588:	e8 8d 1c ff ff       	call   f010021a <_panic>
		struct FrameInfo* x;

		if(pf_read_env_page(curenv,(void*)fault_va)==E_PAGE_NOT_EXIST_IN_PF){

			if((fault_va>=USER_HEAP_START&&fault_va<USER_HEAP_MAX)||(fault_va>=USTACKBOTTOM&&fault_va<USTACKTOP)){
				if(allocate_frame(&x)==0){
f010e58d:	90                   	nop
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010e58e:	90                   	nop
f010e58f:	c9                   	leave  
f010e590:	c3                   	ret    

f010e591 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e591:	55                   	push   %ebp
f010e592:	89 e5                	mov    %esp,%ebp
f010e594:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010e597:	83 ec 04             	sub    $0x4,%esp
f010e59a:	68 a8 70 12 f0       	push   $0xf01270a8
f010e59f:	68 8a 00 00 00       	push   $0x8a
f010e5a4:	68 df 6f 12 f0       	push   $0xf0126fdf
f010e5a9:	e8 6c 1c ff ff       	call   f010021a <_panic>

f010e5ae <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e5ae:	55                   	push   %ebp
f010e5af:	89 e5                	mov    %esp,%ebp
f010e5b1:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e5b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5b7:	a3 f8 3f 3f f0       	mov    %eax,0xf03f3ff8
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e5bc:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5bf:	89 d0                	mov    %edx,%eax
f010e5c1:	c1 e0 02             	shl    $0x2,%eax
f010e5c4:	01 d0                	add    %edx,%eax
f010e5c6:	01 c0                	add    %eax,%eax
f010e5c8:	01 d0                	add    %edx,%eax
f010e5ca:	01 c0                	add    %eax,%eax
f010e5cc:	01 d0                	add    %edx,%eax
f010e5ce:	c1 e0 02             	shl    $0x2,%eax
f010e5d1:	83 ec 0c             	sub    $0xc,%esp
f010e5d4:	50                   	push   %eax
f010e5d5:	e8 c7 9f ff ff       	call   f01085a1 <kmalloc>
f010e5da:	83 c4 10             	add    $0x10,%esp
f010e5dd:	a3 40 40 3f f0       	mov    %eax,0xf03f4040
	if (semaphores == NULL)
f010e5e2:	a1 40 40 3f f0       	mov    0xf03f4040,%eax
f010e5e7:	85 c0                	test   %eax,%eax
f010e5e9:	75 14                	jne    f010e5ff <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e5eb:	83 ec 04             	sub    $0x4,%esp
f010e5ee:	68 cc 70 12 f0       	push   $0xf01270cc
f010e5f3:	6a 1e                	push   $0x1e
f010e5f5:	68 0c 71 12 f0       	push   $0xf012710c
f010e5fa:	e8 1b 1c ff ff       	call   f010021a <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e5ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e606:	e9 bd 00 00 00       	jmp    f010e6c8 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e60b:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e611:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e614:	89 d0                	mov    %edx,%eax
f010e616:	c1 e0 02             	shl    $0x2,%eax
f010e619:	01 d0                	add    %edx,%eax
f010e61b:	01 c0                	add    %eax,%eax
f010e61d:	01 d0                	add    %edx,%eax
f010e61f:	01 c0                	add    %eax,%eax
f010e621:	01 d0                	add    %edx,%eax
f010e623:	c1 e0 02             	shl    $0x2,%eax
f010e626:	01 c8                	add    %ecx,%eax
f010e628:	83 ec 04             	sub    $0x4,%esp
f010e62b:	6a 5c                	push   $0x5c
f010e62d:	6a 00                	push   $0x0
f010e62f:	50                   	push   %eax
f010e630:	e8 9d 36 01 00       	call   f0121cd2 <memset>
f010e635:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e638:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e63e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e641:	89 d0                	mov    %edx,%eax
f010e643:	c1 e0 02             	shl    $0x2,%eax
f010e646:	01 d0                	add    %edx,%eax
f010e648:	01 c0                	add    %eax,%eax
f010e64a:	01 d0                	add    %edx,%eax
f010e64c:	01 c0                	add    %eax,%eax
f010e64e:	01 d0                	add    %edx,%eax
f010e650:	c1 e0 02             	shl    $0x2,%eax
f010e653:	01 c8                	add    %ecx,%eax
f010e655:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e659:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e65f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e662:	89 d0                	mov    %edx,%eax
f010e664:	c1 e0 02             	shl    $0x2,%eax
f010e667:	01 d0                	add    %edx,%eax
f010e669:	01 c0                	add    %eax,%eax
f010e66b:	01 d0                	add    %edx,%eax
f010e66d:	01 c0                	add    %eax,%eax
f010e66f:	01 d0                	add    %edx,%eax
f010e671:	c1 e0 02             	shl    $0x2,%eax
f010e674:	01 c8                	add    %ecx,%eax
f010e676:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e67d:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e683:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e686:	89 d0                	mov    %edx,%eax
f010e688:	c1 e0 02             	shl    $0x2,%eax
f010e68b:	01 d0                	add    %edx,%eax
f010e68d:	01 c0                	add    %eax,%eax
f010e68f:	01 d0                	add    %edx,%eax
f010e691:	01 c0                	add    %eax,%eax
f010e693:	01 d0                	add    %edx,%eax
f010e695:	c1 e0 02             	shl    $0x2,%eax
f010e698:	01 c8                	add    %ecx,%eax
f010e69a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e6a1:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e6a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6aa:	89 d0                	mov    %edx,%eax
f010e6ac:	c1 e0 02             	shl    $0x2,%eax
f010e6af:	01 d0                	add    %edx,%eax
f010e6b1:	01 c0                	add    %eax,%eax
f010e6b3:	01 d0                	add    %edx,%eax
f010e6b5:	01 c0                	add    %eax,%eax
f010e6b7:	01 d0                	add    %edx,%eax
f010e6b9:	c1 e0 02             	shl    $0x2,%eax
f010e6bc:	01 c8                	add    %ecx,%eax
f010e6be:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e6c5:	ff 45 f4             	incl   -0xc(%ebp)
f010e6c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6cb:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010e6d0:	39 c2                	cmp    %eax,%edx
f010e6d2:	0f 82 33 ff ff ff    	jb     f010e60b <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e6d8:	90                   	nop
f010e6d9:	c9                   	leave  
f010e6da:	c3                   	ret    

f010e6db <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e6db:	55                   	push   %ebp
f010e6dc:	89 e5                	mov    %esp,%ebp
f010e6de:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010e6e1:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e6e8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010e6ef:	eb 2f                	jmp    f010e720 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e6f1:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e6f7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010e6fa:	89 d0                	mov    %edx,%eax
f010e6fc:	c1 e0 02             	shl    $0x2,%eax
f010e6ff:	01 d0                	add    %edx,%eax
f010e701:	01 c0                	add    %eax,%eax
f010e703:	01 d0                	add    %edx,%eax
f010e705:	01 c0                	add    %eax,%eax
f010e707:	01 d0                	add    %edx,%eax
f010e709:	c1 e0 02             	shl    $0x2,%eax
f010e70c:	01 c8                	add    %ecx,%eax
f010e70e:	8a 40 58             	mov    0x58(%eax),%al
f010e711:	84 c0                	test   %al,%al
f010e713:	74 08                	je     f010e71d <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e715:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010e718:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010e71b:	eb 0f                	jmp    f010e72c <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e71d:	ff 45 f8             	incl   -0x8(%ebp)
f010e720:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010e723:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010e728:	39 c2                	cmp    %eax,%edx
f010e72a:	72 c5                	jb     f010e6f1 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e72c:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010e730:	75 07                	jne    f010e739 <allocate_semaphore_object+0x5e>
	{
		return E_NO_SEMAPHORE ;
f010e732:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e737:	eb 47                	jmp    f010e780 <allocate_semaphore_object+0xa5>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e739:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e73f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e742:	89 d0                	mov    %edx,%eax
f010e744:	c1 e0 02             	shl    $0x2,%eax
f010e747:	01 d0                	add    %edx,%eax
f010e749:	01 c0                	add    %eax,%eax
f010e74b:	01 d0                	add    %edx,%eax
f010e74d:	01 c0                	add    %eax,%eax
f010e74f:	01 d0                	add    %edx,%eax
f010e751:	c1 e0 02             	shl    $0x2,%eax
f010e754:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e757:	8b 45 08             	mov    0x8(%ebp),%eax
f010e75a:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e75c:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e762:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e765:	89 d0                	mov    %edx,%eax
f010e767:	c1 e0 02             	shl    $0x2,%eax
f010e76a:	01 d0                	add    %edx,%eax
f010e76c:	01 c0                	add    %eax,%eax
f010e76e:	01 d0                	add    %edx,%eax
f010e770:	01 c0                	add    %eax,%eax
f010e772:	01 d0                	add    %edx,%eax
f010e774:	c1 e0 02             	shl    $0x2,%eax
f010e777:	01 c8                	add    %ecx,%eax
f010e779:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e77d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010e780:	c9                   	leave  
f010e781:	c3                   	ret    

f010e782 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e782:	55                   	push   %ebp
f010e783:	89 e5                	mov    %esp,%ebp
f010e785:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e788:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e78f:	e9 84 00 00 00       	jmp    f010e818 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e794:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e79a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e79d:	89 d0                	mov    %edx,%eax
f010e79f:	c1 e0 02             	shl    $0x2,%eax
f010e7a2:	01 d0                	add    %edx,%eax
f010e7a4:	01 c0                	add    %eax,%eax
f010e7a6:	01 d0                	add    %edx,%eax
f010e7a8:	01 c0                	add    %eax,%eax
f010e7aa:	01 d0                	add    %edx,%eax
f010e7ac:	c1 e0 02             	shl    $0x2,%eax
f010e7af:	01 c8                	add    %ecx,%eax
f010e7b1:	8a 40 58             	mov    0x58(%eax),%al
f010e7b4:	84 c0                	test   %al,%al
f010e7b6:	75 5c                	jne    f010e814 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e7b8:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e7be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7c1:	89 d0                	mov    %edx,%eax
f010e7c3:	c1 e0 02             	shl    $0x2,%eax
f010e7c6:	01 d0                	add    %edx,%eax
f010e7c8:	01 c0                	add    %eax,%eax
f010e7ca:	01 d0                	add    %edx,%eax
f010e7cc:	01 c0                	add    %eax,%eax
f010e7ce:	01 d0                	add    %edx,%eax
f010e7d0:	c1 e0 02             	shl    $0x2,%eax
f010e7d3:	01 c8                	add    %ecx,%eax
f010e7d5:	8b 00                	mov    (%eax),%eax
f010e7d7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e7da:	75 39                	jne    f010e815 <get_semaphore_object_ID+0x93>
f010e7dc:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e7e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7e5:	89 d0                	mov    %edx,%eax
f010e7e7:	c1 e0 02             	shl    $0x2,%eax
f010e7ea:	01 d0                	add    %edx,%eax
f010e7ec:	01 c0                	add    %eax,%eax
f010e7ee:	01 d0                	add    %edx,%eax
f010e7f0:	01 c0                	add    %eax,%eax
f010e7f2:	01 d0                	add    %edx,%eax
f010e7f4:	c1 e0 02             	shl    $0x2,%eax
f010e7f7:	01 c8                	add    %ecx,%eax
f010e7f9:	83 c0 04             	add    $0x4,%eax
f010e7fc:	83 ec 08             	sub    $0x8,%esp
f010e7ff:	50                   	push   %eax
f010e800:	ff 75 0c             	pushl  0xc(%ebp)
f010e803:	e8 e8 33 01 00       	call   f0121bf0 <strcmp>
f010e808:	83 c4 10             	add    $0x10,%esp
f010e80b:	85 c0                	test   %eax,%eax
f010e80d:	75 06                	jne    f010e815 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e80f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e812:	eb 19                	jmp    f010e82d <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e814:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e815:	ff 45 f4             	incl   -0xc(%ebp)
f010e818:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e81b:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010e820:	39 c2                	cmp    %eax,%edx
f010e822:	0f 82 6c ff ff ff    	jb     f010e794 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e828:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e82d:	c9                   	leave  
f010e82e:	c3                   	ret    

f010e82f <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e82f:	55                   	push   %ebp
f010e830:	89 e5                	mov    %esp,%ebp
f010e832:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e835:	a1 f8 3f 3f f0       	mov    0xf03f3ff8,%eax
f010e83a:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e83d:	72 0a                	jb     f010e849 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e83f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e844:	e9 bf 00 00 00       	jmp    f010e908 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e849:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e84f:	8b 55 08             	mov    0x8(%ebp),%edx
f010e852:	89 d0                	mov    %edx,%eax
f010e854:	c1 e0 02             	shl    $0x2,%eax
f010e857:	01 d0                	add    %edx,%eax
f010e859:	01 c0                	add    %eax,%eax
f010e85b:	01 d0                	add    %edx,%eax
f010e85d:	01 c0                	add    %eax,%eax
f010e85f:	01 d0                	add    %edx,%eax
f010e861:	c1 e0 02             	shl    $0x2,%eax
f010e864:	01 c8                	add    %ecx,%eax
f010e866:	83 ec 04             	sub    $0x4,%esp
f010e869:	6a 5c                	push   $0x5c
f010e86b:	6a 00                	push   $0x0
f010e86d:	50                   	push   %eax
f010e86e:	e8 5f 34 01 00       	call   f0121cd2 <memset>
f010e873:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e876:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e87c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e87f:	89 d0                	mov    %edx,%eax
f010e881:	c1 e0 02             	shl    $0x2,%eax
f010e884:	01 d0                	add    %edx,%eax
f010e886:	01 c0                	add    %eax,%eax
f010e888:	01 d0                	add    %edx,%eax
f010e88a:	01 c0                	add    %eax,%eax
f010e88c:	01 d0                	add    %edx,%eax
f010e88e:	c1 e0 02             	shl    $0x2,%eax
f010e891:	01 c8                	add    %ecx,%eax
f010e893:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e897:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e89d:	8b 55 08             	mov    0x8(%ebp),%edx
f010e8a0:	89 d0                	mov    %edx,%eax
f010e8a2:	c1 e0 02             	shl    $0x2,%eax
f010e8a5:	01 d0                	add    %edx,%eax
f010e8a7:	01 c0                	add    %eax,%eax
f010e8a9:	01 d0                	add    %edx,%eax
f010e8ab:	01 c0                	add    %eax,%eax
f010e8ad:	01 d0                	add    %edx,%eax
f010e8af:	c1 e0 02             	shl    $0x2,%eax
f010e8b2:	01 c8                	add    %ecx,%eax
f010e8b4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e8bb:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e8c1:	8b 55 08             	mov    0x8(%ebp),%edx
f010e8c4:	89 d0                	mov    %edx,%eax
f010e8c6:	c1 e0 02             	shl    $0x2,%eax
f010e8c9:	01 d0                	add    %edx,%eax
f010e8cb:	01 c0                	add    %eax,%eax
f010e8cd:	01 d0                	add    %edx,%eax
f010e8cf:	01 c0                	add    %eax,%eax
f010e8d1:	01 d0                	add    %edx,%eax
f010e8d3:	c1 e0 02             	shl    $0x2,%eax
f010e8d6:	01 c8                	add    %ecx,%eax
f010e8d8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e8df:	8b 0d 40 40 3f f0    	mov    0xf03f4040,%ecx
f010e8e5:	8b 55 08             	mov    0x8(%ebp),%edx
f010e8e8:	89 d0                	mov    %edx,%eax
f010e8ea:	c1 e0 02             	shl    $0x2,%eax
f010e8ed:	01 d0                	add    %edx,%eax
f010e8ef:	01 c0                	add    %eax,%eax
f010e8f1:	01 d0                	add    %edx,%eax
f010e8f3:	01 c0                	add    %eax,%eax
f010e8f5:	01 d0                	add    %edx,%eax
f010e8f7:	c1 e0 02             	shl    $0x2,%eax
f010e8fa:	01 c8                	add    %ecx,%eax
f010e8fc:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e903:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e908:	c9                   	leave  
f010e909:	c3                   	ret    

f010e90a <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e90a:	55                   	push   %ebp
f010e90b:	89 e5                	mov    %esp,%ebp
f010e90d:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010e910:	83 ec 04             	sub    $0x4,%esp
f010e913:	68 2c 71 12 f0       	push   $0xf012712c
f010e918:	68 95 00 00 00       	push   $0x95
f010e91d:	68 0c 71 12 f0       	push   $0xf012710c
f010e922:	e8 f3 18 ff ff       	call   f010021a <_panic>

f010e927 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e927:	55                   	push   %ebp
f010e928:	89 e5                	mov    %esp,%ebp
f010e92a:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010e92d:	83 ec 04             	sub    $0x4,%esp
f010e930:	68 5c 71 12 f0       	push   $0xf012715c
f010e935:	68 9e 00 00 00       	push   $0x9e
f010e93a:	68 0c 71 12 f0       	push   $0xf012710c
f010e93f:	e8 d6 18 ff ff       	call   f010021a <_panic>

f010e944 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e944:	55                   	push   %ebp
f010e945:	89 e5                	mov    %esp,%ebp
f010e947:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010e94a:	83 ec 04             	sub    $0x4,%esp
f010e94d:	68 88 71 12 f0       	push   $0xf0127188
f010e952:	68 a6 00 00 00       	push   $0xa6
f010e957:	68 0c 71 12 f0       	push   $0xf012710c
f010e95c:	e8 b9 18 ff ff       	call   f010021a <_panic>

f010e961 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010e961:	55                   	push   %ebp
f010e962:	89 e5                	mov    %esp,%ebp
f010e964:	c7 05 a4 40 3f f0 01 	movl   $0x1,0xf03f40a4
f010e96b:	00 00 00 
f010e96e:	90                   	nop
f010e96f:	5d                   	pop    %ebp
f010e970:	c3                   	ret    

f010e971 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010e971:	55                   	push   %ebp
f010e972:	89 e5                	mov    %esp,%ebp
f010e974:	c7 05 a4 40 3f f0 02 	movl   $0x2,0xf03f40a4
f010e97b:	00 00 00 
f010e97e:	90                   	nop
f010e97f:	5d                   	pop    %ebp
f010e980:	c3                   	ret    

f010e981 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010e981:	55                   	push   %ebp
f010e982:	89 e5                	mov    %esp,%ebp
f010e984:	c7 05 a4 40 3f f0 03 	movl   $0x3,0xf03f40a4
f010e98b:	00 00 00 
f010e98e:	90                   	nop
f010e98f:	5d                   	pop    %ebp
f010e990:	c3                   	ret    

f010e991 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010e991:	55                   	push   %ebp
f010e992:	89 e5                	mov    %esp,%ebp
f010e994:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f010e999:	83 f8 01             	cmp    $0x1,%eax
f010e99c:	75 04                	jne    f010e9a2 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010e99e:	b0 01                	mov    $0x1,%al
f010e9a0:	eb 02                	jmp    f010e9a4 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010e9a2:	b0 00                	mov    $0x0,%al
f010e9a4:	5d                   	pop    %ebp
f010e9a5:	c3                   	ret    

f010e9a6 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010e9a6:	55                   	push   %ebp
f010e9a7:	89 e5                	mov    %esp,%ebp
f010e9a9:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f010e9ae:	83 f8 02             	cmp    $0x2,%eax
f010e9b1:	75 04                	jne    f010e9b7 <isKHeapPlacementStrategyBESTFIT+0x11>
f010e9b3:	b0 01                	mov    $0x1,%al
f010e9b5:	eb 02                	jmp    f010e9b9 <isKHeapPlacementStrategyBESTFIT+0x13>
f010e9b7:	b0 00                	mov    $0x0,%al
f010e9b9:	5d                   	pop    %ebp
f010e9ba:	c3                   	ret    

f010e9bb <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010e9bb:	55                   	push   %ebp
f010e9bc:	89 e5                	mov    %esp,%ebp
f010e9be:	a1 a4 40 3f f0       	mov    0xf03f40a4,%eax
f010e9c3:	83 f8 03             	cmp    $0x3,%eax
f010e9c6:	75 04                	jne    f010e9cc <isKHeapPlacementStrategyNEXTFIT+0x11>
f010e9c8:	b0 01                	mov    $0x1,%al
f010e9ca:	eb 02                	jmp    f010e9ce <isKHeapPlacementStrategyNEXTFIT+0x13>
f010e9cc:	b0 00                	mov    $0x0,%al
f010e9ce:	5d                   	pop    %ebp
f010e9cf:	c3                   	ret    

f010e9d0 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010e9d0:	55                   	push   %ebp
f010e9d1:	89 e5                	mov    %esp,%ebp
f010e9d3:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010e9d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e9dd:	eb 26                	jmp    f010ea05 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010e9df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e9e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e9ec:	01 c2                	add    %eax,%edx
f010e9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9f1:	40                   	inc    %eax
f010e9f2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010e9f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e9fc:	01 c8                	add    %ecx,%eax
f010e9fe:	8b 00                	mov    (%eax),%eax
f010ea00:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010ea02:	ff 45 f4             	incl   -0xc(%ebp)
f010ea05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea08:	48                   	dec    %eax
f010ea09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ea0c:	7f d1                	jg     f010e9df <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010ea0e:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010ea11:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010ea18:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010ea1f:	eb 35                	jmp    f010ea56 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010ea21:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ea24:	89 d0                	mov    %edx,%eax
f010ea26:	01 c0                	add    %eax,%eax
f010ea28:	01 d0                	add    %edx,%eax
f010ea2a:	c1 e0 02             	shl    $0x2,%eax
f010ea2d:	05 a0 1b 17 f0       	add    $0xf0171ba0,%eax
f010ea32:	8b 10                	mov    (%eax),%edx
f010ea34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ea37:	8b 00                	mov    (%eax),%eax
f010ea39:	83 ec 08             	sub    $0x8,%esp
f010ea3c:	52                   	push   %edx
f010ea3d:	50                   	push   %eax
f010ea3e:	e8 ad 31 01 00       	call   f0121bf0 <strcmp>
f010ea43:	83 c4 10             	add    $0x10,%esp
f010ea46:	85 c0                	test   %eax,%eax
f010ea48:	75 09                	jne    f010ea53 <tst_handler+0x83>
		{
			test_found = 1;
f010ea4a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010ea51:	eb 0f                	jmp    f010ea62 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010ea53:	ff 45 ec             	incl   -0x14(%ebp)
f010ea56:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ea59:	a1 3c 1c 17 f0       	mov    0xf0171c3c,%eax
f010ea5e:	39 c2                	cmp    %eax,%edx
f010ea60:	72 bf                	jb     f010ea21 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010ea62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ea66:	74 29                	je     f010ea91 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010ea68:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ea6b:	89 d0                	mov    %edx,%eax
f010ea6d:	01 c0                	add    %eax,%eax
f010ea6f:	01 d0                	add    %edx,%eax
f010ea71:	c1 e0 02             	shl    $0x2,%eax
f010ea74:	05 a8 1b 17 f0       	add    $0xf0171ba8,%eax
f010ea79:	8b 00                	mov    (%eax),%eax
f010ea7b:	83 ec 08             	sub    $0x8,%esp
f010ea7e:	ff 75 0c             	pushl  0xc(%ebp)
f010ea81:	ff 75 08             	pushl  0x8(%ebp)
f010ea84:	ff d0                	call   *%eax
f010ea86:	83 c4 10             	add    $0x10,%esp
f010ea89:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010ea8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ea8f:	eb 1b                	jmp    f010eaac <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010ea91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ea94:	8b 00                	mov    (%eax),%eax
f010ea96:	83 ec 08             	sub    $0x8,%esp
f010ea99:	50                   	push   %eax
f010ea9a:	68 3c 74 12 f0       	push   $0xf012743c
f010ea9f:	e8 f7 23 ff ff       	call   f0100e9b <cprintf>
f010eaa4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010eaa7:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010eaac:	c9                   	leave  
f010eaad:	c3                   	ret    

f010eaae <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010eaae:	55                   	push   %ebp
f010eaaf:	89 e5                	mov    %esp,%ebp
f010eab1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010eab4:	e8 3f b0 00 00       	call   f0119af8 <test_three_creation_functions>
	return 0;
f010eab9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eabe:	c9                   	leave  
f010eabf:	c3                   	ret    

f010eac0 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010eac0:	55                   	push   %ebp
f010eac1:	89 e5                	mov    %esp,%ebp
f010eac3:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010eac6:	e8 ca 5e 00 00       	call   f0114995 <test_priority_normal_and_higher>
	return 0;
f010eacb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ead0:	c9                   	leave  
f010ead1:	c3                   	ret    

f010ead2 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010ead2:	55                   	push   %ebp
f010ead3:	89 e5                	mov    %esp,%ebp
f010ead5:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010ead8:	e8 d2 5e 00 00       	call   f01149af <test_priority_normal_and_lower>
	return 0;
f010eadd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eae2:	c9                   	leave  
f010eae3:	c3                   	ret    

f010eae4 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010eae4:	55                   	push   %ebp
f010eae5:	89 e5                	mov    %esp,%ebp
f010eae7:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010eaea:	e8 bc b1 00 00       	call   f0119cab <test_kfreeall>
	return 0;
f010eaef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eaf4:	c9                   	leave  
f010eaf5:	c3                   	ret    

f010eaf6 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010eaf6:	55                   	push   %ebp
f010eaf7:	89 e5                	mov    %esp,%ebp
f010eaf9:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010eafc:	e8 fe c0 00 00       	call   f011abff <test_kexpand>
	return 0;
f010eb01:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb06:	c9                   	leave  
f010eb07:	c3                   	ret    

f010eb08 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010eb08:	55                   	push   %ebp
f010eb09:	89 e5                	mov    %esp,%ebp
f010eb0b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010eb0e:	e8 39 c9 00 00       	call   f011b44c <test_kshrink>
	return 0;
f010eb13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb18:	c9                   	leave  
f010eb19:	c3                   	ret    

f010eb1a <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010eb1a:	55                   	push   %ebp
f010eb1b:	89 e5                	mov    %esp,%ebp
f010eb1d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010eb20:	e8 34 d2 00 00       	call   f011bd59 <test_kfreelast>
	return 0;
f010eb25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb2a:	c9                   	leave  
f010eb2b:	c3                   	ret    

f010eb2c <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010eb2c:	55                   	push   %ebp
f010eb2d:	89 e5                	mov    %esp,%ebp
f010eb2f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010eb32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eb35:	83 c0 04             	add    $0x4,%eax
f010eb38:	8b 00                	mov    (%eax),%eax
f010eb3a:	83 ec 04             	sub    $0x4,%esp
f010eb3d:	6a 0a                	push   $0xa
f010eb3f:	6a 00                	push   $0x0
f010eb41:	50                   	push   %eax
f010eb42:	e8 fd 32 01 00       	call   f0121e44 <strtol>
f010eb47:	83 c4 10             	add    $0x10,%esp
f010eb4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010eb4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010eb54:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010eb5b:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f010eb60:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010eb63:	eb 3b                	jmp    f010eba0 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010eb65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb68:	83 c0 5c             	add    $0x5c,%eax
f010eb6b:	83 ec 08             	sub    $0x8,%esp
f010eb6e:	68 4f 74 12 f0       	push   $0xf012744f
f010eb73:	50                   	push   %eax
f010eb74:	e8 77 30 01 00       	call   f0121bf0 <strcmp>
f010eb79:	83 c4 10             	add    $0x10,%esp
f010eb7c:	85 c0                	test   %eax,%eax
f010eb7e:	75 12                	jne    f010eb92 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010eb80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eb84:	74 07                	je     f010eb8d <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010eb86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010eb8d:	ff 45 f4             	incl   -0xc(%ebp)
f010eb90:	eb 06                	jmp    f010eb98 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010eb92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eb96:	74 31                	je     f010ebc9 <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010eb98:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f010eb9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010eba0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010eba4:	74 08                	je     f010ebae <tst_sc_MLFQ+0x82>
f010eba6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eba9:	8b 40 44             	mov    0x44(%eax),%eax
f010ebac:	eb 05                	jmp    f010ebb3 <tst_sc_MLFQ+0x87>
f010ebae:	b8 00 00 00 00       	mov    $0x0,%eax
f010ebb3:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f010ebb8:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f010ebbd:	85 c0                	test   %eax,%eax
f010ebbf:	75 a4                	jne    f010eb65 <tst_sc_MLFQ+0x39>
f010ebc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ebc5:	75 9e                	jne    f010eb65 <tst_sc_MLFQ+0x39>
f010ebc7:	eb 01                	jmp    f010ebca <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010ebc9:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010ebca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ebcd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010ebd0:	75 12                	jne    f010ebe4 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010ebd2:	83 ec 0c             	sub    $0xc,%esp
f010ebd5:	68 58 74 12 f0       	push   $0xf0127458
f010ebda:	e8 bc 22 ff ff       	call   f0100e9b <cprintf>
f010ebdf:	83 c4 10             	add    $0x10,%esp
f010ebe2:	eb 17                	jmp    f010ebfb <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010ebe4:	83 ec 04             	sub    $0x4,%esp
f010ebe7:	68 91 74 12 f0       	push   $0xf0127491
f010ebec:	68 94 00 00 00       	push   $0x94
f010ebf1:	68 a7 74 12 f0       	push   $0xf01274a7
f010ebf6:	e8 1f 16 ff ff       	call   f010021a <_panic>
	}
	return 0;
f010ebfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ec00:	c9                   	leave  
f010ec01:	c3                   	ret    

f010ec02 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010ec02:	55                   	push   %ebp
f010ec03:	89 e5                	mov    %esp,%ebp
f010ec05:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010ec08:	e8 96 0d 00 00       	call   f010f9a3 <TestAutoCompleteCommand>
f010ec0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010ec10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ec15:	c9                   	leave  
f010ec16:	c3                   	ret    

f010ec17 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010ec17:	55                   	push   %ebp
f010ec18:	89 e5                	mov    %esp,%ebp
f010ec1a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010ec1d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010ec21:	74 1a                	je     f010ec3d <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010ec23:	83 ec 0c             	sub    $0xc,%esp
f010ec26:	68 c0 74 12 f0       	push   $0xf01274c0
f010ec2b:	e8 6b 22 ff ff       	call   f0100e9b <cprintf>
f010ec30:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ec33:	b8 00 00 00 00       	mov    $0x0,%eax
f010ec38:	e9 2f 01 00 00       	jmp    f010ed6c <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010ec3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec40:	83 c0 04             	add    $0x4,%eax
f010ec43:	8b 00                	mov    (%eax),%eax
f010ec45:	83 ec 08             	sub    $0x8,%esp
f010ec48:	68 fd 74 12 f0       	push   $0xf01274fd
f010ec4d:	50                   	push   %eax
f010ec4e:	e8 9d 2f 01 00       	call   f0121bf0 <strcmp>
f010ec53:	83 c4 10             	add    $0x10,%esp
f010ec56:	85 c0                	test   %eax,%eax
f010ec58:	75 0a                	jne    f010ec64 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010ec5a:	e8 80 06 00 00       	call   f010f2df <test_initialize_dynamic_allocator>
f010ec5f:	e9 03 01 00 00       	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010ec64:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec67:	83 c0 04             	add    $0x4,%eax
f010ec6a:	8b 00                	mov    (%eax),%eax
f010ec6c:	83 ec 08             	sub    $0x8,%esp
f010ec6f:	68 02 75 12 f0       	push   $0xf0127502
f010ec74:	50                   	push   %eax
f010ec75:	e8 76 2f 01 00       	call   f0121bf0 <strcmp>
f010ec7a:	83 c4 10             	add    $0x10,%esp
f010ec7d:	85 c0                	test   %eax,%eax
f010ec7f:	75 0a                	jne    f010ec8b <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010ec81:	e8 8d 06 00 00       	call   f010f313 <test_alloc_block_FF>
f010ec86:	e9 dc 00 00 00       	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010ec8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec8e:	83 c0 04             	add    $0x4,%eax
f010ec91:	8b 00                	mov    (%eax),%eax
f010ec93:	83 ec 08             	sub    $0x8,%esp
f010ec96:	68 0a 75 12 f0       	push   $0xf012750a
f010ec9b:	50                   	push   %eax
f010ec9c:	e8 4f 2f 01 00       	call   f0121bf0 <strcmp>
f010eca1:	83 c4 10             	add    $0x10,%esp
f010eca4:	85 c0                	test   %eax,%eax
f010eca6:	75 0a                	jne    f010ecb2 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010eca8:	e8 83 06 00 00       	call   f010f330 <test_alloc_block_BF>
f010ecad:	e9 b5 00 00 00       	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010ecb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ecb5:	83 c0 04             	add    $0x4,%eax
f010ecb8:	8b 00                	mov    (%eax),%eax
f010ecba:	83 ec 08             	sub    $0x8,%esp
f010ecbd:	68 12 75 12 f0       	push   $0xf0127512
f010ecc2:	50                   	push   %eax
f010ecc3:	e8 28 2f 01 00       	call   f0121bf0 <strcmp>
f010ecc8:	83 c4 10             	add    $0x10,%esp
f010eccb:	85 c0                	test   %eax,%eax
f010eccd:	75 0a                	jne    f010ecd9 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010eccf:	e8 79 06 00 00       	call   f010f34d <test_alloc_block_NF>
f010ecd4:	e9 8e 00 00 00       	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010ecd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ecdc:	83 c0 04             	add    $0x4,%eax
f010ecdf:	8b 00                	mov    (%eax),%eax
f010ece1:	83 ec 08             	sub    $0x8,%esp
f010ece4:	68 1a 75 12 f0       	push   $0xf012751a
f010ece9:	50                   	push   %eax
f010ecea:	e8 01 2f 01 00       	call   f0121bf0 <strcmp>
f010ecef:	83 c4 10             	add    $0x10,%esp
f010ecf2:	85 c0                	test   %eax,%eax
f010ecf4:	75 07                	jne    f010ecfd <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010ecf6:	e8 58 06 00 00       	call   f010f353 <test_free_block_FF>
f010ecfb:	eb 6a                	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010ecfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ed00:	83 c0 04             	add    $0x4,%eax
f010ed03:	8b 00                	mov    (%eax),%eax
f010ed05:	83 ec 08             	sub    $0x8,%esp
f010ed08:	68 21 75 12 f0       	push   $0xf0127521
f010ed0d:	50                   	push   %eax
f010ed0e:	e8 dd 2e 01 00       	call   f0121bf0 <strcmp>
f010ed13:	83 c4 10             	add    $0x10,%esp
f010ed16:	85 c0                	test   %eax,%eax
f010ed18:	75 07                	jne    f010ed21 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010ed1a:	e8 51 06 00 00       	call   f010f370 <test_free_block_BF>
f010ed1f:	eb 46                	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010ed21:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ed24:	83 c0 04             	add    $0x4,%eax
f010ed27:	8b 00                	mov    (%eax),%eax
f010ed29:	83 ec 08             	sub    $0x8,%esp
f010ed2c:	68 28 75 12 f0       	push   $0xf0127528
f010ed31:	50                   	push   %eax
f010ed32:	e8 b9 2e 01 00       	call   f0121bf0 <strcmp>
f010ed37:	83 c4 10             	add    $0x10,%esp
f010ed3a:	85 c0                	test   %eax,%eax
f010ed3c:	75 07                	jne    f010ed45 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010ed3e:	e8 4a 06 00 00       	call   f010f38d <test_free_block_NF>
f010ed43:	eb 22                	jmp    f010ed67 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010ed45:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ed48:	83 c0 04             	add    $0x4,%eax
f010ed4b:	8b 00                	mov    (%eax),%eax
f010ed4d:	83 ec 08             	sub    $0x8,%esp
f010ed50:	68 2f 75 12 f0       	push   $0xf012752f
f010ed55:	50                   	push   %eax
f010ed56:	e8 95 2e 01 00       	call   f0121bf0 <strcmp>
f010ed5b:	83 c4 10             	add    $0x10,%esp
f010ed5e:	85 c0                	test   %eax,%eax
f010ed60:	75 05                	jne    f010ed67 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010ed62:	e8 43 06 00 00       	call   f010f3aa <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010ed67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ed6c:	c9                   	leave  
f010ed6d:	c3                   	ret    

f010ed6e <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010ed6e:	55                   	push   %ebp
f010ed6f:	89 e5                	mov    %esp,%ebp
f010ed71:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010ed74:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010ed78:	74 1a                	je     f010ed94 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010ed7a:	83 ec 0c             	sub    $0xc,%esp
f010ed7d:	68 3c 75 12 f0       	push   $0xf012753c
f010ed82:	e8 14 21 ff ff       	call   f0100e9b <cprintf>
f010ed87:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ed8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed8f:	e9 e1 00 00 00       	jmp    f010ee75 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010ed94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ed97:	83 c0 04             	add    $0x4,%eax
f010ed9a:	8b 00                	mov    (%eax),%eax
f010ed9c:	83 ec 08             	sub    $0x8,%esp
f010ed9f:	68 75 75 12 f0       	push   $0xf0127575
f010eda4:	50                   	push   %eax
f010eda5:	e8 46 2e 01 00       	call   f0121bf0 <strcmp>
f010edaa:	83 c4 10             	add    $0x10,%esp
f010edad:	85 c0                	test   %eax,%eax
f010edaf:	75 0a                	jne    f010edbb <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010edb1:	e8 f3 12 00 00       	call   f01100a9 <test_cut_paste_pages>
f010edb6:	e9 b5 00 00 00       	jmp    f010ee70 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010edbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010edbe:	83 c0 04             	add    $0x4,%eax
f010edc1:	8b 00                	mov    (%eax),%eax
f010edc3:	83 ec 08             	sub    $0x8,%esp
f010edc6:	68 7e 75 12 f0       	push   $0xf012757e
f010edcb:	50                   	push   %eax
f010edcc:	e8 1f 2e 01 00       	call   f0121bf0 <strcmp>
f010edd1:	83 c4 10             	add    $0x10,%esp
f010edd4:	85 c0                	test   %eax,%eax
f010edd6:	75 0a                	jne    f010ede2 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010edd8:	e8 1d 1d 00 00       	call   f0110afa <test_copy_paste_chunk>
f010eddd:	e9 8e 00 00 00       	jmp    f010ee70 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010ede2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ede5:	83 c0 04             	add    $0x4,%eax
f010ede8:	8b 00                	mov    (%eax),%eax
f010edea:	83 ec 08             	sub    $0x8,%esp
f010eded:	68 88 75 12 f0       	push   $0xf0127588
f010edf2:	50                   	push   %eax
f010edf3:	e8 f8 2d 01 00       	call   f0121bf0 <strcmp>
f010edf8:	83 c4 10             	add    $0x10,%esp
f010edfb:	85 c0                	test   %eax,%eax
f010edfd:	75 07                	jne    f010ee06 <tst_chunks+0x98>
	{
		test_share_chunk();
f010edff:	e8 fa 2d 00 00       	call   f0111bfe <test_share_chunk>
f010ee04:	eb 6a                	jmp    f010ee70 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010ee06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ee09:	83 c0 04             	add    $0x4,%eax
f010ee0c:	8b 00                	mov    (%eax),%eax
f010ee0e:	83 ec 08             	sub    $0x8,%esp
f010ee11:	68 8e 75 12 f0       	push   $0xf012758e
f010ee16:	50                   	push   %eax
f010ee17:	e8 d4 2d 01 00       	call   f0121bf0 <strcmp>
f010ee1c:	83 c4 10             	add    $0x10,%esp
f010ee1f:	85 c0                	test   %eax,%eax
f010ee21:	75 07                	jne    f010ee2a <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010ee23:	e8 04 38 00 00       	call   f011262c <test_allocate_chunk>
f010ee28:	eb 46                	jmp    f010ee70 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010ee2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ee2d:	83 c0 04             	add    $0x4,%eax
f010ee30:	8b 00                	mov    (%eax),%eax
f010ee32:	83 ec 08             	sub    $0x8,%esp
f010ee35:	68 97 75 12 f0       	push   $0xf0127597
f010ee3a:	50                   	push   %eax
f010ee3b:	e8 b0 2d 01 00       	call   f0121bf0 <strcmp>
f010ee40:	83 c4 10             	add    $0x10,%esp
f010ee43:	85 c0                	test   %eax,%eax
f010ee45:	75 07                	jne    f010ee4e <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010ee47:	e8 ed 40 00 00       	call   f0112f39 <test_calculate_required_frames>
f010ee4c:	eb 22                	jmp    f010ee70 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010ee4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ee51:	83 c0 04             	add    $0x4,%eax
f010ee54:	8b 00                	mov    (%eax),%eax
f010ee56:	83 ec 08             	sub    $0x8,%esp
f010ee59:	68 a6 75 12 f0       	push   $0xf01275a6
f010ee5e:	50                   	push   %eax
f010ee5f:	e8 8c 2d 01 00       	call   f0121bf0 <strcmp>
f010ee64:	83 c4 10             	add    $0x10,%esp
f010ee67:	85 c0                	test   %eax,%eax
f010ee69:	75 05                	jne    f010ee70 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010ee6b:	e8 43 49 00 00       	call   f01137b3 <test_calculate_allocated_space>
	}
	return 0;
f010ee70:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ee75:	c9                   	leave  
f010ee76:	c3                   	ret    

f010ee77 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010ee77:	55                   	push   %ebp
f010ee78:	89 e5                	mov    %esp,%ebp
f010ee7a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010ee7d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010ee81:	74 1a                	je     f010ee9d <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010ee83:	83 ec 0c             	sub    $0xc,%esp
f010ee86:	68 b8 75 12 f0       	push   $0xf01275b8
f010ee8b:	e8 0b 20 ff ff       	call   f0100e9b <cprintf>
f010ee90:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ee93:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee98:	e9 ba 00 00 00       	jmp    f010ef57 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010ee9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eea0:	83 c0 04             	add    $0x4,%eax
f010eea3:	8b 00                	mov    (%eax),%eax
f010eea5:	83 ec 08             	sub    $0x8,%esp
f010eea8:	68 ee 75 12 f0       	push   $0xf01275ee
f010eead:	50                   	push   %eax
f010eeae:	e8 3d 2d 01 00       	call   f0121bf0 <strcmp>
f010eeb3:	83 c4 10             	add    $0x10,%esp
f010eeb6:	85 c0                	test   %eax,%eax
f010eeb8:	75 0a                	jne    f010eec4 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010eeba:	e8 69 0c 00 00       	call   f010fb28 <test_pt_set_page_permissions>
f010eebf:	e9 8e 00 00 00       	jmp    f010ef52 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010eec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eec7:	83 c0 04             	add    $0x4,%eax
f010eeca:	8b 00                	mov    (%eax),%eax
f010eecc:	83 ec 08             	sub    $0x8,%esp
f010eecf:	68 f6 75 12 f0       	push   $0xf01275f6
f010eed4:	50                   	push   %eax
f010eed5:	e8 16 2d 01 00       	call   f0121bf0 <strcmp>
f010eeda:	83 c4 10             	add    $0x10,%esp
f010eedd:	85 c0                	test   %eax,%eax
f010eedf:	75 07                	jne    f010eee8 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010eee1:	e8 a5 0e 00 00       	call   f010fd8b <test_pt_set_page_permissions_invalid_va>
f010eee6:	eb 6a                	jmp    f010ef52 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010eee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eeeb:	83 c0 04             	add    $0x4,%eax
f010eeee:	8b 00                	mov    (%eax),%eax
f010eef0:	83 ec 08             	sub    $0x8,%esp
f010eef3:	68 fe 75 12 f0       	push   $0xf01275fe
f010eef8:	50                   	push   %eax
f010eef9:	e8 f2 2c 01 00       	call   f0121bf0 <strcmp>
f010eefe:	83 c4 10             	add    $0x10,%esp
f010ef01:	85 c0                	test   %eax,%eax
f010ef03:	75 07                	jne    f010ef0c <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010ef05:	e8 ca 0e 00 00       	call   f010fdd4 <test_pt_get_page_permissions>
f010ef0a:	eb 46                	jmp    f010ef52 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010ef0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef0f:	83 c0 04             	add    $0x4,%eax
f010ef12:	8b 00                	mov    (%eax),%eax
f010ef14:	83 ec 08             	sub    $0x8,%esp
f010ef17:	68 06 76 12 f0       	push   $0xf0127606
f010ef1c:	50                   	push   %eax
f010ef1d:	e8 ce 2c 01 00       	call   f0121bf0 <strcmp>
f010ef22:	83 c4 10             	add    $0x10,%esp
f010ef25:	85 c0                	test   %eax,%eax
f010ef27:	75 07                	jne    f010ef30 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010ef29:	e8 ea 0f 00 00       	call   f010ff18 <test_pt_clear_page_table_entry>
f010ef2e:	eb 22                	jmp    f010ef52 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010ef30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef33:	83 c0 04             	add    $0x4,%eax
f010ef36:	8b 00                	mov    (%eax),%eax
f010ef38:	83 ec 08             	sub    $0x8,%esp
f010ef3b:	68 0d 76 12 f0       	push   $0xf012760d
f010ef40:	50                   	push   %eax
f010ef41:	e8 aa 2c 01 00       	call   f0121bf0 <strcmp>
f010ef46:	83 c4 10             	add    $0x10,%esp
f010ef49:	85 c0                	test   %eax,%eax
f010ef4b:	75 05                	jne    f010ef52 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010ef4d:	e8 1f 11 00 00       	call   f0110071 <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010ef52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ef57:	c9                   	leave  
f010ef58:	c3                   	ret    

f010ef59 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010ef59:	55                   	push   %ebp
f010ef5a:	89 e5                	mov    %esp,%ebp
f010ef5c:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010ef5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef62:	83 c0 08             	add    $0x8,%eax
f010ef65:	8b 00                	mov    (%eax),%eax
f010ef67:	83 ec 08             	sub    $0x8,%esp
f010ef6a:	68 14 76 12 f0       	push   $0xf0127614
f010ef6f:	50                   	push   %eax
f010ef70:	e8 7b 2c 01 00       	call   f0121bf0 <strcmp>
f010ef75:	83 c4 10             	add    $0x10,%esp
f010ef78:	85 c0                	test   %eax,%eax
f010ef7a:	75 20                	jne    f010ef9c <tst_kheap+0x43>
f010ef7c:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010ef80:	74 1a                	je     f010ef9c <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010ef82:	83 ec 0c             	sub    $0xc,%esp
f010ef85:	68 1c 76 12 f0       	push   $0xf012761c
f010ef8a:	e8 0c 1f ff ff       	call   f0100e9b <cprintf>
f010ef8f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ef92:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef97:	e9 41 03 00 00       	jmp    f010f2dd <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010ef9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef9f:	83 c0 08             	add    $0x8,%eax
f010efa2:	8b 00                	mov    (%eax),%eax
f010efa4:	83 ec 08             	sub    $0x8,%esp
f010efa7:	68 14 76 12 f0       	push   $0xf0127614
f010efac:	50                   	push   %eax
f010efad:	e8 3e 2c 01 00       	call   f0121bf0 <strcmp>
f010efb2:	83 c4 10             	add    $0x10,%esp
f010efb5:	85 c0                	test   %eax,%eax
f010efb7:	74 20                	je     f010efd9 <tst_kheap+0x80>
f010efb9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010efbd:	74 1a                	je     f010efd9 <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010efbf:	83 ec 0c             	sub    $0xc,%esp
f010efc2:	68 6c 76 12 f0       	push   $0xf012766c
f010efc7:	e8 cf 1e ff ff       	call   f0100e9b <cprintf>
f010efcc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010efcf:	b8 00 00 00 00       	mov    $0x0,%eax
f010efd4:	e9 04 03 00 00       	jmp    f010f2dd <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010efd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010efdc:	83 c0 04             	add    $0x4,%eax
f010efdf:	8b 00                	mov    (%eax),%eax
f010efe1:	83 ec 08             	sub    $0x8,%esp
f010efe4:	68 b1 76 12 f0       	push   $0xf01276b1
f010efe9:	50                   	push   %eax
f010efea:	e8 01 2c 01 00       	call   f0121bf0 <strcmp>
f010efef:	83 c4 10             	add    $0x10,%esp
f010eff2:	85 c0                	test   %eax,%eax
f010eff4:	74 1d                	je     f010f013 <tst_kheap+0xba>
f010eff6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eff9:	83 c0 04             	add    $0x4,%eax
f010effc:	8b 00                	mov    (%eax),%eax
f010effe:	83 ec 08             	sub    $0x8,%esp
f010f001:	68 b4 76 12 f0       	push   $0xf01276b4
f010f006:	50                   	push   %eax
f010f007:	e8 e4 2b 01 00       	call   f0121bf0 <strcmp>
f010f00c:	83 c4 10             	add    $0x10,%esp
f010f00f:	85 c0                	test   %eax,%eax
f010f011:	75 1a                	jne    f010f02d <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010f013:	e8 49 f9 ff ff       	call   f010e961 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010f018:	83 ec 0c             	sub    $0xc,%esp
f010f01b:	68 b8 76 12 f0       	push   $0xf01276b8
f010f020:	e8 76 1e ff ff       	call   f0100e9b <cprintf>
f010f025:	83 c4 10             	add    $0x10,%esp
f010f028:	e9 a0 00 00 00       	jmp    f010f0cd <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010f02d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f030:	83 c0 04             	add    $0x4,%eax
f010f033:	8b 00                	mov    (%eax),%eax
f010f035:	83 ec 08             	sub    $0x8,%esp
f010f038:	68 e5 76 12 f0       	push   $0xf01276e5
f010f03d:	50                   	push   %eax
f010f03e:	e8 ad 2b 01 00       	call   f0121bf0 <strcmp>
f010f043:	83 c4 10             	add    $0x10,%esp
f010f046:	85 c0                	test   %eax,%eax
f010f048:	74 1d                	je     f010f067 <tst_kheap+0x10e>
f010f04a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f04d:	83 c0 04             	add    $0x4,%eax
f010f050:	8b 00                	mov    (%eax),%eax
f010f052:	83 ec 08             	sub    $0x8,%esp
f010f055:	68 e8 76 12 f0       	push   $0xf01276e8
f010f05a:	50                   	push   %eax
f010f05b:	e8 90 2b 01 00       	call   f0121bf0 <strcmp>
f010f060:	83 c4 10             	add    $0x10,%esp
f010f063:	85 c0                	test   %eax,%eax
f010f065:	75 17                	jne    f010f07e <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010f067:	e8 05 f9 ff ff       	call   f010e971 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010f06c:	83 ec 0c             	sub    $0xc,%esp
f010f06f:	68 ec 76 12 f0       	push   $0xf01276ec
f010f074:	e8 22 1e ff ff       	call   f0100e9b <cprintf>
f010f079:	83 c4 10             	add    $0x10,%esp
f010f07c:	eb 4f                	jmp    f010f0cd <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010f07e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f081:	83 c0 04             	add    $0x4,%eax
f010f084:	8b 00                	mov    (%eax),%eax
f010f086:	83 ec 08             	sub    $0x8,%esp
f010f089:	68 18 77 12 f0       	push   $0xf0127718
f010f08e:	50                   	push   %eax
f010f08f:	e8 5c 2b 01 00       	call   f0121bf0 <strcmp>
f010f094:	83 c4 10             	add    $0x10,%esp
f010f097:	85 c0                	test   %eax,%eax
f010f099:	74 1d                	je     f010f0b8 <tst_kheap+0x15f>
f010f09b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f09e:	83 c0 04             	add    $0x4,%eax
f010f0a1:	8b 00                	mov    (%eax),%eax
f010f0a3:	83 ec 08             	sub    $0x8,%esp
f010f0a6:	68 1b 77 12 f0       	push   $0xf012771b
f010f0ab:	50                   	push   %eax
f010f0ac:	e8 3f 2b 01 00       	call   f0121bf0 <strcmp>
f010f0b1:	83 c4 10             	add    $0x10,%esp
f010f0b4:	85 c0                	test   %eax,%eax
f010f0b6:	75 15                	jne    f010f0cd <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010f0b8:	e8 c4 f8 ff ff       	call   f010e981 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010f0bd:	83 ec 0c             	sub    $0xc,%esp
f010f0c0:	68 20 77 12 f0       	push   $0xf0127720
f010f0c5:	e8 d1 1d ff ff       	call   f0100e9b <cprintf>
f010f0ca:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010f0cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f0d0:	83 c0 08             	add    $0x8,%eax
f010f0d3:	8b 00                	mov    (%eax),%eax
f010f0d5:	83 ec 08             	sub    $0x8,%esp
f010f0d8:	68 14 76 12 f0       	push   $0xf0127614
f010f0dd:	50                   	push   %eax
f010f0de:	e8 0d 2b 01 00       	call   f0121bf0 <strcmp>
f010f0e3:	83 c4 10             	add    $0x10,%esp
f010f0e6:	85 c0                	test   %eax,%eax
f010f0e8:	0f 85 13 01 00 00    	jne    f010f201 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f0ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f0f1:	83 c0 0c             	add    $0xc,%eax
f010f0f4:	8b 00                	mov    (%eax),%eax
f010f0f6:	83 ec 04             	sub    $0x4,%esp
f010f0f9:	6a 0a                	push   $0xa
f010f0fb:	6a 00                	push   $0x0
f010f0fd:	50                   	push   %eax
f010f0fe:	e8 41 2d 01 00       	call   f0121e44 <strtol>
f010f103:	83 c4 10             	add    $0x10,%esp
f010f106:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f109:	e8 83 f8 ff ff       	call   f010e991 <isKHeapPlacementStrategyFIRSTFIT>
f010f10e:	84 c0                	test   %al,%al
f010f110:	74 54                	je     f010f166 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010f112:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f116:	75 1a                	jne    f010f132 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f118:	83 ec 0c             	sub    $0xc,%esp
f010f11b:	68 4c 77 12 f0       	push   $0xf012774c
f010f120:	e8 76 1d ff ff       	call   f0100e9b <cprintf>
f010f125:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f128:	b8 00 00 00 00       	mov    $0x0,%eax
f010f12d:	e9 ab 01 00 00       	jmp    f010f2dd <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010f132:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f136:	75 0a                	jne    f010f142 <tst_kheap+0x1e9>
				test_kmalloc();
f010f138:	e8 8f 58 00 00       	call   f01149cc <test_kmalloc>
f010f13d:	e9 b5 00 00 00       	jmp    f010f1f7 <tst_kheap+0x29e>
			else if (testNum == 2)
f010f142:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f146:	75 0a                	jne    f010f152 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010f148:	e8 a5 63 00 00       	call   f01154f2 <test_kmalloc_firstfit1>
f010f14d:	e9 a5 00 00 00       	jmp    f010f1f7 <tst_kheap+0x29e>
			else if (testNum == 3)
f010f152:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f156:	0f 85 9b 00 00 00    	jne    f010f1f7 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010f15c:	e8 25 6e 00 00       	call   f0115f86 <test_kmalloc_firstfit2>
f010f161:	e9 91 00 00 00       	jmp    f010f1f7 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010f166:	e8 3b f8 ff ff       	call   f010e9a6 <isKHeapPlacementStrategyBESTFIT>
f010f16b:	84 c0                	test   %al,%al
f010f16d:	74 47                	je     f010f1b6 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010f16f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f173:	75 1a                	jne    f010f18f <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010f175:	83 ec 0c             	sub    $0xc,%esp
f010f178:	68 9c 77 12 f0       	push   $0xf012779c
f010f17d:	e8 19 1d ff ff       	call   f0100e9b <cprintf>
f010f182:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f185:	b8 00 00 00 00       	mov    $0x0,%eax
f010f18a:	e9 4e 01 00 00       	jmp    f010f2dd <tst_kheap+0x384>
			}
			if (testNum == 1)
f010f18f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f193:	75 07                	jne    f010f19c <tst_kheap+0x243>
				test_kmalloc();
f010f195:	e8 32 58 00 00       	call   f01149cc <test_kmalloc>
f010f19a:	eb 5b                	jmp    f010f1f7 <tst_kheap+0x29e>
			else if (testNum == 2)
f010f19c:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f1a0:	75 07                	jne    f010f1a9 <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010f1a2:	e8 d7 a8 00 00       	call   f0119a7e <test_kmalloc_bestfit1>
f010f1a7:	eb 4e                	jmp    f010f1f7 <tst_kheap+0x29e>
			else if (testNum == 3)
f010f1a9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f1ad:	75 48                	jne    f010f1f7 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010f1af:	e8 e7 a8 00 00       	call   f0119a9b <test_kmalloc_bestfit2>
f010f1b4:	eb 41                	jmp    f010f1f7 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010f1b6:	e8 00 f8 ff ff       	call   f010e9bb <isKHeapPlacementStrategyNEXTFIT>
f010f1bb:	84 c0                	test   %al,%al
f010f1bd:	74 38                	je     f010f1f7 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010f1bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f1c3:	75 1a                	jne    f010f1df <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010f1c5:	83 ec 0c             	sub    $0xc,%esp
f010f1c8:	68 ec 77 12 f0       	push   $0xf01277ec
f010f1cd:	e8 c9 1c ff ff       	call   f0100e9b <cprintf>
f010f1d2:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f1d5:	b8 00 00 00 00       	mov    $0x0,%eax
f010f1da:	e9 fe 00 00 00       	jmp    f010f2dd <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010f1df:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f1e3:	75 07                	jne    f010f1ec <tst_kheap+0x293>
				test_kmalloc();
f010f1e5:	e8 e2 57 00 00       	call   f01149cc <test_kmalloc>
f010f1ea:	eb 0b                	jmp    f010f1f7 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010f1ec:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f1f0:	75 05                	jne    f010f1f7 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010f1f2:	e8 67 a8 00 00       	call   f0119a5e <test_kmalloc_nextfit>
		}
		return 0;
f010f1f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010f1fc:	e9 dc 00 00 00       	jmp    f010f2dd <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010f201:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f204:	83 c0 08             	add    $0x8,%eax
f010f207:	8b 00                	mov    (%eax),%eax
f010f209:	83 ec 08             	sub    $0x8,%esp
f010f20c:	68 3a 78 12 f0       	push   $0xf012783a
f010f211:	50                   	push   %eax
f010f212:	e8 d9 29 01 00       	call   f0121bf0 <strcmp>
f010f217:	83 c4 10             	add    $0x10,%esp
f010f21a:	85 c0                	test   %eax,%eax
f010f21c:	75 28                	jne    f010f246 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010f21e:	e8 83 f7 ff ff       	call   f010e9a6 <isKHeapPlacementStrategyBESTFIT>
f010f223:	84 c0                	test   %al,%al
f010f225:	75 09                	jne    f010f230 <tst_kheap+0x2d7>
f010f227:	e8 65 f7 ff ff       	call   f010e991 <isKHeapPlacementStrategyFIRSTFIT>
f010f22c:	84 c0                	test   %al,%al
f010f22e:	74 07                	je     f010f237 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010f230:	e8 0a 78 00 00       	call   f0116a3f <test_kfree_bestfirstfit>
f010f235:	eb 05                	jmp    f010f23c <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010f237:	e8 9c a8 00 00       	call   f0119ad8 <test_kfree>
		}
		return 0;
f010f23c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f241:	e9 97 00 00 00       	jmp    f010f2dd <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010f246:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f249:	83 c0 08             	add    $0x8,%eax
f010f24c:	8b 00                	mov    (%eax),%eax
f010f24e:	83 ec 08             	sub    $0x8,%esp
f010f251:	68 40 78 12 f0       	push   $0xf0127840
f010f256:	50                   	push   %eax
f010f257:	e8 94 29 01 00       	call   f0121bf0 <strcmp>
f010f25c:	83 c4 10             	add    $0x10,%esp
f010f25f:	85 c0                	test   %eax,%eax
f010f261:	75 0c                	jne    f010f26f <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010f263:	e8 e2 8d 00 00       	call   f011804a <test_kheap_phys_addr>
		return 0;
f010f268:	b8 00 00 00 00       	mov    $0x0,%eax
f010f26d:	eb 6e                	jmp    f010f2dd <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010f26f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f272:	83 c0 08             	add    $0x8,%eax
f010f275:	8b 00                	mov    (%eax),%eax
f010f277:	83 ec 08             	sub    $0x8,%esp
f010f27a:	68 4a 78 12 f0       	push   $0xf012784a
f010f27f:	50                   	push   %eax
f010f280:	e8 6b 29 01 00       	call   f0121bf0 <strcmp>
f010f285:	83 c4 10             	add    $0x10,%esp
f010f288:	85 c0                	test   %eax,%eax
f010f28a:	75 0c                	jne    f010f298 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010f28c:	e8 33 9b 00 00       	call   f0118dc4 <test_kheap_virt_addr>
		return 0;
f010f291:	b8 00 00 00 00       	mov    $0x0,%eax
f010f296:	eb 45                	jmp    f010f2dd <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010f298:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f29b:	83 c0 08             	add    $0x8,%eax
f010f29e:	8b 00                	mov    (%eax),%eax
f010f2a0:	83 ec 08             	sub    $0x8,%esp
f010f2a3:	68 54 78 12 f0       	push   $0xf0127854
f010f2a8:	50                   	push   %eax
f010f2a9:	e8 42 29 01 00       	call   f0121bf0 <strcmp>
f010f2ae:	83 c4 10             	add    $0x10,%esp
f010f2b1:	85 c0                	test   %eax,%eax
f010f2b3:	75 23                	jne    f010f2d8 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010f2b5:	e8 01 f7 ff ff       	call   f010e9bb <isKHeapPlacementStrategyNEXTFIT>
f010f2ba:	84 c0                	test   %al,%al
f010f2bc:	74 05                	je     f010f2c3 <tst_kheap+0x36a>
		{
			test_krealloc();
f010f2be:	e8 7e e4 00 00       	call   f011d741 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010f2c3:	e8 de f6 ff ff       	call   f010e9a6 <isKHeapPlacementStrategyBESTFIT>
f010f2c8:	84 c0                	test   %al,%al
f010f2ca:	74 05                	je     f010f2d1 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010f2cc:	e8 45 fc 00 00       	call   f011ef16 <test_krealloc_BF>
		}
		return 0;
f010f2d1:	b8 00 00 00 00       	mov    $0x0,%eax
f010f2d6:	eb 05                	jmp    f010f2dd <tst_kheap+0x384>
	}
	return 0;
f010f2d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f2dd:	c9                   	leave  
f010f2de:	c3                   	ret    

f010f2df <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010f2df:	55                   	push   %ebp
f010f2e0:	89 e5                	mov    %esp,%ebp
f010f2e2:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_initialize_dynamic_allocator: the kernel heap should be diabled. make sure USE_KHEAP = 0");
f010f2e5:	83 ec 04             	sub    $0x4,%esp
f010f2e8:	68 60 78 12 f0       	push   $0xf0127860
f010f2ed:	6a 17                	push   $0x17
f010f2ef:	68 c0 78 12 f0       	push   $0xf01278c0
f010f2f4:	e8 21 0f ff ff       	call   f010021a <_panic>

f010f2f9 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010f2f9:	55                   	push   %ebp
f010f2fa:	89 e5                	mov    %esp,%ebp
f010f2fc:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f2ff:	83 ec 04             	sub    $0x4,%esp
f010f302:	68 e4 78 12 f0       	push   $0xf01278e4
f010f307:	6a 3a                	push   $0x3a
f010f309:	68 c0 78 12 f0       	push   $0xf01278c0
f010f30e:	e8 07 0f ff ff       	call   f010021a <_panic>

f010f313 <test_alloc_block_FF>:
	}
	return eval;
}

void test_alloc_block_FF()
{
f010f313:	55                   	push   %ebp
f010f314:	89 e5                	mov    %esp,%ebp
f010f316:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f319:	83 ec 04             	sub    $0x4,%esp
f010f31c:	68 34 79 12 f0       	push   $0xf0127934
f010f321:	68 be 00 00 00       	push   $0xbe
f010f326:	68 c0 78 12 f0       	push   $0xf01278c0
f010f32b:	e8 ea 0e ff ff       	call   f010021a <_panic>

f010f330 <test_alloc_block_BF>:
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
}

void test_alloc_block_BF()
{
f010f330:	55                   	push   %ebp
f010f331:	89 e5                	mov    %esp,%ebp
f010f333:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f336:	83 ec 04             	sub    $0x4,%esp
f010f339:	68 88 79 12 f0       	push   $0xf0127988
f010f33e:	68 41 01 00 00       	push   $0x141
f010f343:	68 c0 78 12 f0       	push   $0xf01278c0
f010f348:	e8 cd 0e ff ff       	call   f010021a <_panic>

f010f34d <test_alloc_block_NF>:
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
}

void test_alloc_block_NF()
{
f010f34d:	55                   	push   %ebp
f010f34e:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f350:	90                   	nop
f010f351:	5d                   	pop    %ebp
f010f352:	c3                   	ret    

f010f353 <test_free_block_FF>:

void test_free_block_FF()
{
f010f353:	55                   	push   %ebp
f010f354:	89 e5                	mov    %esp,%ebp
f010f356:	83 ec 08             	sub    $0x8,%esp

#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f359:	83 ec 04             	sub    $0x4,%esp
f010f35c:	68 dc 79 12 f0       	push   $0xf01279dc
f010f361:	68 e5 01 00 00       	push   $0x1e5
f010f366:	68 c0 78 12 f0       	push   $0xf01278c0
f010f36b:	e8 aa 0e ff ff       	call   f010021a <_panic>

f010f370 <test_free_block_BF>:
	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);

}

void test_free_block_BF()
{
f010f370:	55                   	push   %ebp
f010f371:	89 e5                	mov    %esp,%ebp
f010f373:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f376:	83 ec 04             	sub    $0x4,%esp
f010f379:	68 dc 79 12 f0       	push   $0xf01279dc
f010f37e:	68 79 03 00 00       	push   $0x379
f010f383:	68 c0 78 12 f0       	push   $0xf01278c0
f010f388:	e8 8d 0e ff ff       	call   f010021a <_panic>

f010f38d <test_free_block_NF>:
	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");

}

void test_free_block_NF()
{
f010f38d:	55                   	push   %ebp
f010f38e:	89 e5                	mov    %esp,%ebp
f010f390:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f010f393:	83 ec 04             	sub    $0x4,%esp
f010f396:	68 29 7a 12 f0       	push   $0xf0127a29
f010f39b:	68 8e 04 00 00       	push   $0x48e
f010f3a0:	68 c0 78 12 f0       	push   $0xf01278c0
f010f3a5:	e8 70 0e ff ff       	call   f010021a <_panic>

f010f3aa <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f010f3aa:	55                   	push   %ebp
f010f3ab:	89 e5                	mov    %esp,%ebp
f010f3ad:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f3b0:	83 ec 04             	sub    $0x4,%esp
f010f3b3:	68 dc 79 12 f0       	push   $0xf01279dc
f010f3b8:	68 94 04 00 00       	push   $0x494
f010f3bd:	68 c0 78 12 f0       	push   $0xf01278c0
f010f3c2:	e8 53 0e ff ff       	call   f010021a <_panic>

f010f3c7 <test_realloc_block_FF_COMPLETE>:

}


void test_realloc_block_FF_COMPLETE()
{
f010f3c7:	55                   	push   %ebp
f010f3c8:	89 e5                	mov    %esp,%ebp
f010f3ca:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
f010f3cd:	83 ec 04             	sub    $0x4,%esp
f010f3d0:	68 dc 79 12 f0       	push   $0xf01279dc
f010f3d5:	68 aa 05 00 00       	push   $0x5aa
f010f3da:	68 c0 78 12 f0       	push   $0xf01278c0
f010f3df:	e8 36 0e ff ff       	call   f010021a <_panic>

f010f3e4 <sys_check_LRU_lists>:
#include <kern/proc/user_environment.h>
#include <kern/mem/working_set_manager.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010f3e4:	55                   	push   %ebp
f010f3e5:	89 e5                	mov    %esp,%ebp
f010f3e7:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010f3ea:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010f3ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010f3f2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010f3f9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010f400:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010f404:	0f 84 a5 00 00 00    	je     f010f4af <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010f40a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010f411:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f414:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f010f41a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f41d:	eb 4a                	jmp    f010f469 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010f41f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f422:	8b 00                	mov    (%eax),%eax
f010f424:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010f427:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f42a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f42f:	89 c2                	mov    %eax,%edx
f010f431:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f434:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f43b:	8b 45 08             	mov    0x8(%ebp),%eax
f010f43e:	01 c8                	add    %ecx,%eax
f010f440:	8b 00                	mov    (%eax),%eax
f010f442:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010f445:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f448:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f44d:	39 c2                	cmp    %eax,%edx
f010f44f:	74 09                	je     f010f45a <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010f451:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010f458:	eb 3e                	jmp    f010f498 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010f45a:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010f45d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f460:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010f466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f46d:	74 08                	je     f010f477 <sys_check_LRU_lists+0x93>
f010f46f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f472:	8b 40 10             	mov    0x10(%eax),%eax
f010f475:	eb 05                	jmp    f010f47c <sys_check_LRU_lists+0x98>
f010f477:	b8 00 00 00 00       	mov    $0x0,%eax
f010f47c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010f47f:	89 82 9c 05 00 00    	mov    %eax,0x59c(%edx)
f010f485:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f488:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010f48e:	85 c0                	test   %eax,%eax
f010f490:	75 8d                	jne    f010f41f <sys_check_LRU_lists+0x3b>
f010f492:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f496:	75 87                	jne    f010f41f <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010f498:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f49b:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f010f4a1:	8b 45 10             	mov    0x10(%ebp),%eax
f010f4a4:	39 c2                	cmp    %eax,%edx
f010f4a6:	74 07                	je     f010f4af <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010f4a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010f4af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010f4b3:	0f 84 a5 00 00 00    	je     f010f55e <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010f4b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010f4c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f4c3:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010f4c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f4cc:	eb 4a                	jmp    f010f518 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010f4ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f4d1:	8b 00                	mov    (%eax),%eax
f010f4d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010f4d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f4de:	89 c2                	mov    %eax,%edx
f010f4e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4e3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f4ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4ed:	01 c8                	add    %ecx,%eax
f010f4ef:	8b 00                	mov    (%eax),%eax
f010f4f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010f4f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f4f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f4fc:	39 c2                	cmp    %eax,%edx
f010f4fe:	74 09                	je     f010f509 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010f500:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010f507:	eb 3e                	jmp    f010f547 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010f509:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010f50c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f50f:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010f515:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f518:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f51c:	74 08                	je     f010f526 <sys_check_LRU_lists+0x142>
f010f51e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f521:	8b 40 10             	mov    0x10(%eax),%eax
f010f524:	eb 05                	jmp    f010f52b <sys_check_LRU_lists+0x147>
f010f526:	b8 00 00 00 00       	mov    $0x0,%eax
f010f52b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010f52e:	89 82 ac 05 00 00    	mov    %eax,0x5ac(%edx)
f010f534:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f537:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010f53d:	85 c0                	test   %eax,%eax
f010f53f:	75 8d                	jne    f010f4ce <sys_check_LRU_lists+0xea>
f010f541:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f545:	75 87                	jne    f010f4ce <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010f547:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f54a:	8b 90 b0 05 00 00    	mov    0x5b0(%eax),%edx
f010f550:	8b 45 14             	mov    0x14(%ebp),%eax
f010f553:	39 c2                	cmp    %eax,%edx
f010f555:	74 07                	je     f010f55e <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010f557:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010f55e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f561:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010f564:	c9                   	leave  
f010f565:	c3                   	ret    

f010f566 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010f566:	55                   	push   %ebp
f010f567:	89 e5                	mov    %esp,%ebp
f010f569:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010f56c:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010f571:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010f574:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010f57b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f57e:	8b 80 94 05 00 00    	mov    0x594(%eax),%eax
f010f584:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010f587:	eb 65                	jmp    f010f5ee <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010f589:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010f590:	eb 3a                	jmp    f010f5cc <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010f592:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f595:	8b 00                	mov    (%eax),%eax
f010f597:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010f59a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f59d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f5a2:	89 c2                	mov    %eax,%edx
f010f5a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f5a7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f5ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010f5b1:	01 c8                	add    %ecx,%eax
f010f5b3:	8b 00                	mov    (%eax),%eax
f010f5b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010f5b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f5c0:	39 c2                	cmp    %eax,%edx
f010f5c2:	75 05                	jne    f010f5c9 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010f5c4:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010f5c7:	eb 0b                	jmp    f010f5d4 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010f5c9:	ff 45 f4             	incl   -0xc(%ebp)
f010f5cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f5cf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010f5d2:	7c be                	jl     f010f592 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010f5d4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f5d8:	7e 08                	jle    f010f5e2 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010f5da:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f5dd:	e9 ed 00 00 00       	jmp    f010f6cf <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010f5e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5e5:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010f5eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010f5ee:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010f5f2:	74 08                	je     f010f5fc <sys_check_LRU_lists_free+0x96>
f010f5f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f5f7:	8b 40 10             	mov    0x10(%eax),%eax
f010f5fa:	eb 05                	jmp    f010f601 <sys_check_LRU_lists_free+0x9b>
f010f5fc:	b8 00 00 00 00       	mov    $0x0,%eax
f010f601:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f604:	89 82 9c 05 00 00    	mov    %eax,0x59c(%edx)
f010f60a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f60d:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010f613:	85 c0                	test   %eax,%eax
f010f615:	0f 85 6e ff ff ff    	jne    f010f589 <sys_check_LRU_lists_free+0x23>
f010f61b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010f61f:	0f 85 64 ff ff ff    	jne    f010f589 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010f625:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f628:	8b 80 a4 05 00 00    	mov    0x5a4(%eax),%eax
f010f62e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010f631:	eb 62                	jmp    f010f695 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010f633:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010f63a:	eb 3a                	jmp    f010f676 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010f63c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f63f:	8b 00                	mov    (%eax),%eax
f010f641:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010f644:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f647:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f64c:	89 c2                	mov    %eax,%edx
f010f64e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f651:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f658:	8b 45 08             	mov    0x8(%ebp),%eax
f010f65b:	01 c8                	add    %ecx,%eax
f010f65d:	8b 00                	mov    (%eax),%eax
f010f65f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010f662:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f665:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f66a:	39 c2                	cmp    %eax,%edx
f010f66c:	75 05                	jne    f010f673 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010f66e:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010f671:	eb 0b                	jmp    f010f67e <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010f673:	ff 45 f0             	incl   -0x10(%ebp)
f010f676:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f679:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010f67c:	7c be                	jl     f010f63c <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010f67e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f682:	7e 05                	jle    f010f689 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010f684:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f687:	eb 46                	jmp    f010f6cf <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010f689:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f68c:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010f692:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010f695:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010f699:	74 08                	je     f010f6a3 <sys_check_LRU_lists_free+0x13d>
f010f69b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f69e:	8b 40 10             	mov    0x10(%eax),%eax
f010f6a1:	eb 05                	jmp    f010f6a8 <sys_check_LRU_lists_free+0x142>
f010f6a3:	b8 00 00 00 00       	mov    $0x0,%eax
f010f6a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f6ab:	89 82 ac 05 00 00    	mov    %eax,0x5ac(%edx)
f010f6b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6b4:	8b 80 ac 05 00 00    	mov    0x5ac(%eax),%eax
f010f6ba:	85 c0                	test   %eax,%eax
f010f6bc:	0f 85 71 ff ff ff    	jne    f010f633 <sys_check_LRU_lists_free+0xcd>
f010f6c2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010f6c6:	0f 85 67 ff ff ff    	jne    f010f633 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010f6cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010f6cf:	c9                   	leave  
f010f6d0:	c3                   	ret    

f010f6d1 <sys_check_WS_list>:
 * = 1: check entire list (order is important)
 * = 2: check only the existence of the given set of elements
 * = 3: check only the NOT existence of the given set of elements
 */
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_status)
{
f010f6d1:	55                   	push   %ebp
f010f6d2:	89 e5                	mov    %esp,%ebp
f010f6d4:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	cprintf("CURRENT WS CONTENT BEFORE CHECKING:\n");
f010f6d7:	83 ec 0c             	sub    $0xc,%esp
f010f6da:	68 3c 7a 12 f0       	push   $0xf0127a3c
f010f6df:	e8 b7 17 ff ff       	call   f0100e9b <cprintf>
f010f6e4:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(curenv);
f010f6e7:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010f6ec:	83 ec 0c             	sub    $0xc,%esp
f010f6ef:	50                   	push   %eax
f010f6f0:	e8 d3 9c ff ff       	call   f01093c8 <env_page_ws_print>
f010f6f5:	83 c4 10             	add    $0x10,%esp
	struct Env* env = curenv;
f010f6f8:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f010f6fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int WS_list_validation = 1;
f010f700:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	if (chk_status == 0 || chk_status == 1)
f010f707:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f010f70b:	74 06                	je     f010f713 <sys_check_WS_list+0x42>
f010f70d:	83 7d 14 01          	cmpl   $0x1,0x14(%ebp)
f010f711:	75 1f                	jne    f010f732 <sys_check_WS_list+0x61>
	{
		if(LIST_SIZE(&(env->page_WS_list)) != actual_WS_list_size)
f010f713:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f716:	8b 90 d0 00 00 00    	mov    0xd0(%eax),%edx
f010f71c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f71f:	39 c2                	cmp    %eax,%edx
f010f721:	74 0f                	je     f010f732 <sys_check_WS_list+0x61>
		{
			return WS_list_validation = 0;
f010f723:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010f72a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f72d:	e9 6f 02 00 00       	jmp    f010f9a1 <sys_check_WS_list+0x2d0>
		}
	}
	//if it's required to check the last_WS_element
	if (last_WS_element_content != 0)
f010f732:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010f736:	74 39                	je     f010f771 <sys_check_WS_list+0xa0>
	{
		if (ROUNDDOWN(env->page_last_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(last_WS_element_content, PAGE_SIZE))
f010f738:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f73b:	8b 80 d4 00 00 00    	mov    0xd4(%eax),%eax
f010f741:	8b 00                	mov    (%eax),%eax
f010f743:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010f746:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f749:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f74e:	89 c2                	mov    %eax,%edx
f010f750:	8b 45 10             	mov    0x10(%ebp),%eax
f010f753:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f756:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f759:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f75e:	39 c2                	cmp    %eax,%edx
f010f760:	74 0f                	je     f010f771 <sys_check_WS_list+0xa0>
		{
			return WS_list_validation = 0;
f010f762:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010f769:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f76c:	e9 30 02 00 00       	jmp    f010f9a1 <sys_check_WS_list+0x2d0>
		}
	}
	//if the order of the content is important to check
	if (chk_status == 1)
f010f771:	83 7d 14 01          	cmpl   $0x1,0x14(%ebp)
f010f775:	0f 85 96 00 00 00    	jne    f010f811 <sys_check_WS_list+0x140>
	{
		int idx_WS_list = 0;
f010f77b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f782:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f785:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f010f78b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f78e:	eb 4d                	jmp    f010f7dd <sys_check_WS_list+0x10c>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(WS_list_content[idx_WS_list], PAGE_SIZE))
f010f790:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f793:	8b 00                	mov    (%eax),%eax
f010f795:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010f798:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f79b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f7a0:	89 c2                	mov    %eax,%edx
f010f7a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7a5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f7ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010f7af:	01 c8                	add    %ecx,%eax
f010f7b1:	8b 00                	mov    (%eax),%eax
f010f7b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f7b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f7b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f7be:	39 c2                	cmp    %eax,%edx
f010f7c0:	74 0c                	je     f010f7ce <sys_check_WS_list+0xfd>
			{
				WS_list_validation = 0;
f010f7c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f010f7c9:	e9 d0 01 00 00       	jmp    f010f99e <sys_check_WS_list+0x2cd>
			}
			idx_WS_list++;
f010f7ce:	ff 45 ec             	incl   -0x14(%ebp)
	}
	//if the order of the content is important to check
	if (chk_status == 1)
	{
		int idx_WS_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f7d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f7d4:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f7da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f7dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f7e1:	74 08                	je     f010f7eb <sys_check_WS_list+0x11a>
f010f7e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f7e6:	8b 40 10             	mov    0x10(%eax),%eax
f010f7e9:	eb 05                	jmp    f010f7f0 <sys_check_WS_list+0x11f>
f010f7eb:	b8 00 00 00 00       	mov    $0x0,%eax
f010f7f0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010f7f3:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f010f7f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f7fc:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f802:	85 c0                	test   %eax,%eax
f010f804:	75 8a                	jne    f010f790 <sys_check_WS_list+0xbf>
f010f806:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f80a:	75 84                	jne    f010f790 <sys_check_WS_list+0xbf>
f010f80c:	e9 8d 01 00 00       	jmp    f010f99e <sys_check_WS_list+0x2cd>
				break;
			}
			idx_WS_list++;
		}
	}
	else if (chk_status == 0 || chk_status == 2)
f010f811:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f010f815:	74 0a                	je     f010f821 <sys_check_WS_list+0x150>
f010f817:	83 7d 14 02          	cmpl   $0x2,0x14(%ebp)
f010f81b:	0f 85 be 00 00 00    	jne    f010f8df <sys_check_WS_list+0x20e>
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
f010f821:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f828:	e9 a1 00 00 00       	jmp    f010f8ce <sys_check_WS_list+0x1fd>
		{
			bool found = 0;
f010f82d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f837:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f010f83d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f840:	eb 47                	jmp    f010f889 <sys_check_WS_list+0x1b8>
			{
				if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(WS_list_content[idx_expected_list], PAGE_SIZE))
f010f842:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f845:	8b 00                	mov    (%eax),%eax
f010f847:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010f84a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f84d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f852:	89 c2                	mov    %eax,%edx
f010f854:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f857:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010f861:	01 c8                	add    %ecx,%eax
f010f863:	8b 00                	mov    (%eax),%eax
f010f865:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010f868:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f86b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f870:	39 c2                	cmp    %eax,%edx
f010f872:	75 09                	jne    f010f87d <sys_check_WS_list+0x1ac>
				{
					found = 1;
f010f874:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					break;
f010f87b:	eb 3b                	jmp    f010f8b8 <sys_check_WS_list+0x1e7>
	else if (chk_status == 0 || chk_status == 2)
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
		{
			bool found = 0;
			LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f87d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f880:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f886:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f889:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f88d:	74 08                	je     f010f897 <sys_check_WS_list+0x1c6>
f010f88f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f892:	8b 40 10             	mov    0x10(%eax),%eax
f010f895:	eb 05                	jmp    f010f89c <sys_check_WS_list+0x1cb>
f010f897:	b8 00 00 00 00       	mov    $0x0,%eax
f010f89c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010f89f:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f010f8a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f8a8:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f8ae:	85 c0                	test   %eax,%eax
f010f8b0:	75 90                	jne    f010f842 <sys_check_WS_list+0x171>
f010f8b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f8b6:	75 8a                	jne    f010f842 <sys_check_WS_list+0x171>
				{
					found = 1;
					break;
				}
			}
			if (!found)
f010f8b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f8bc:	75 0d                	jne    f010f8cb <sys_check_WS_list+0x1fa>
			{
				WS_list_validation = 0;
f010f8be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f010f8c5:	90                   	nop
			idx_WS_list++;
		}
	}
	else if (chk_status == 0 || chk_status == 2)
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
f010f8c6:	e9 d3 00 00 00       	jmp    f010f99e <sys_check_WS_list+0x2cd>
f010f8cb:	ff 45 e8             	incl   -0x18(%ebp)
f010f8ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f8d1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010f8d4:	0f 8c 53 ff ff ff    	jl     f010f82d <sys_check_WS_list+0x15c>
f010f8da:	e9 bf 00 00 00       	jmp    f010f99e <sys_check_WS_list+0x2cd>
				break;
			}
		}
	}
	//Check NON-EXITENCE of the Given Addresses
	else if (chk_status == 3)
f010f8df:	83 7d 14 03          	cmpl   $0x3,0x14(%ebp)
f010f8e3:	0f 85 b5 00 00 00    	jne    f010f99e <sys_check_WS_list+0x2cd>
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
f010f8e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010f8f0:	e9 9d 00 00 00       	jmp    f010f992 <sys_check_WS_list+0x2c1>
		{
			bool found = 0;
f010f8f5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f8fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f8ff:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
f010f905:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f908:	eb 47                	jmp    f010f951 <sys_check_WS_list+0x280>
			{
				if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(WS_list_content[idx_expected_list], PAGE_SIZE))
f010f90a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f90d:	8b 00                	mov    (%eax),%eax
f010f90f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010f912:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f915:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f91a:	89 c2                	mov    %eax,%edx
f010f91c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f91f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f926:	8b 45 08             	mov    0x8(%ebp),%eax
f010f929:	01 c8                	add    %ecx,%eax
f010f92b:	8b 00                	mov    (%eax),%eax
f010f92d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f930:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f933:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010f938:	39 c2                	cmp    %eax,%edx
f010f93a:	75 09                	jne    f010f945 <sys_check_WS_list+0x274>
				{
					found = 1;
f010f93c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
					break;
f010f943:	eb 3b                	jmp    f010f980 <sys_check_WS_list+0x2af>
	else if (chk_status == 3)
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
		{
			bool found = 0;
			LIST_FOREACH(ptr_WS_element, &(env->page_WS_list))
f010f945:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f948:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f94e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f951:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f955:	74 08                	je     f010f95f <sys_check_WS_list+0x28e>
f010f957:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f95a:	8b 40 10             	mov    0x10(%eax),%eax
f010f95d:	eb 05                	jmp    f010f964 <sys_check_WS_list+0x293>
f010f95f:	b8 00 00 00 00       	mov    $0x0,%eax
f010f964:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010f967:	89 82 cc 00 00 00    	mov    %eax,0xcc(%edx)
f010f96d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f970:	8b 80 cc 00 00 00    	mov    0xcc(%eax),%eax
f010f976:	85 c0                	test   %eax,%eax
f010f978:	75 90                	jne    f010f90a <sys_check_WS_list+0x239>
f010f97a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f97e:	75 8a                	jne    f010f90a <sys_check_WS_list+0x239>
				{
					found = 1;
					break;
				}
			}
			if (found)
f010f980:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f984:	74 09                	je     f010f98f <sys_check_WS_list+0x2be>
			{
				WS_list_validation = 0;
f010f986:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f010f98d:	eb 0f                	jmp    f010f99e <sys_check_WS_list+0x2cd>
		}
	}
	//Check NON-EXITENCE of the Given Addresses
	else if (chk_status == 3)
	{
		for (int idx_expected_list = 0; idx_expected_list < actual_WS_list_size; ++idx_expected_list)
f010f98f:	ff 45 e0             	incl   -0x20(%ebp)
f010f992:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f995:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010f998:	0f 8c 57 ff ff ff    	jl     f010f8f5 <sys_check_WS_list+0x224>
				break;
			}
		}
	}

	return WS_list_validation;
f010f99e:	8b 45 f4             	mov    -0xc(%ebp),%eax
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
	return 0;
#endif
}
f010f9a1:	c9                   	leave  
f010f9a2:	c3                   	ret    

f010f9a3 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f010f9a3:	55                   	push   %ebp
f010f9a4:	89 e5                	mov    %esp,%ebp
f010f9a6:	57                   	push   %edi
f010f9a7:	56                   	push   %esi
f010f9a8:	53                   	push   %ebx
f010f9a9:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f010f9af:	83 ec 0c             	sub    $0xc,%esp
f010f9b2:	68 64 7a 12 f0       	push   $0xf0127a64
f010f9b7:	e8 df 14 ff ff       	call   f0100e9b <cprintf>
f010f9bc:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f010f9bf:	83 ec 0c             	sub    $0xc,%esp
f010f9c2:	68 88 7a 12 f0       	push   $0xf0127a88
f010f9c7:	e8 cf 14 ff ff       	call   f0100e9b <cprintf>
f010f9cc:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f010f9cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f010f9d6:	83 ec 0c             	sub    $0xc,%esp
f010f9d9:	68 a4 7a 12 f0       	push   $0xf0127aa4
f010f9de:	e8 b8 14 ff ff       	call   f0100e9b <cprintf>
f010f9e3:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f010f9e6:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f9e9:	bb 5e 7b 12 f0       	mov    $0xf0127b5e,%ebx
f010f9ee:	ba 03 00 00 00       	mov    $0x3,%edx
f010f9f3:	89 c7                	mov    %eax,%edi
f010f9f5:	89 de                	mov    %ebx,%esi
f010f9f7:	89 d1                	mov    %edx,%ecx
f010f9f9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010f9fb:	8d 55 8c             	lea    -0x74(%ebp),%edx
f010f9fe:	b9 16 00 00 00       	mov    $0x16,%ecx
f010fa03:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa08:	89 d7                	mov    %edx,%edi
f010fa0a:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f010fa0c:	83 ec 0c             	sub    $0xc,%esp
f010fa0f:	8d 45 80             	lea    -0x80(%ebp),%eax
f010fa12:	50                   	push   %eax
f010fa13:	e8 15 22 ff ff       	call   f0101c2d <execute_command>
f010fa18:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fa1b:	83 ec 0c             	sub    $0xc,%esp
f010fa1e:	68 d2 7a 12 f0       	push   $0xf0127ad2
f010fa23:	e8 73 14 ff ff       	call   f0100e9b <cprintf>
f010fa28:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f010fa2b:	83 ec 0c             	sub    $0xc,%esp
f010fa2e:	68 e8 7a 12 f0       	push   $0xf0127ae8
f010fa33:	e8 63 14 ff ff       	call   f0100e9b <cprintf>
f010fa38:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f010fa3b:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f010fa42:	65 00 00 
f010fa45:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f010fa4b:	b9 18 00 00 00       	mov    $0x18,%ecx
f010fa50:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa55:	89 d7                	mov    %edx,%edi
f010fa57:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f010fa59:	83 ec 0c             	sub    $0xc,%esp
f010fa5c:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f010fa62:	50                   	push   %eax
f010fa63:	e8 c5 21 ff ff       	call   f0101c2d <execute_command>
f010fa68:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fa6b:	83 ec 0c             	sub    $0xc,%esp
f010fa6e:	68 d2 7a 12 f0       	push   $0xf0127ad2
f010fa73:	e8 23 14 ff ff       	call   f0100e9b <cprintf>
f010fa78:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f010fa7b:	83 ec 0c             	sub    $0xc,%esp
f010fa7e:	68 10 7b 12 f0       	push   $0xf0127b10
f010fa83:	e8 13 14 ff ff       	call   f0100e9b <cprintf>
f010fa88:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f010fa8b:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f010fa92:	75 00 00 
f010fa95:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f010fa9b:	b9 18 00 00 00       	mov    $0x18,%ecx
f010faa0:	b8 00 00 00 00       	mov    $0x0,%eax
f010faa5:	89 d7                	mov    %edx,%edi
f010faa7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f010faa9:	83 ec 0c             	sub    $0xc,%esp
f010faac:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f010fab2:	50                   	push   %eax
f010fab3:	e8 75 21 ff ff       	call   f0101c2d <execute_command>
f010fab8:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fabb:	83 ec 0c             	sub    $0xc,%esp
f010fabe:	68 d2 7a 12 f0       	push   $0xf0127ad2
f010fac3:	e8 d3 13 ff ff       	call   f0100e9b <cprintf>
f010fac8:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f010facb:	83 ec 0c             	sub    $0xc,%esp
f010face:	68 38 7b 12 f0       	push   $0xf0127b38
f010fad3:	e8 c3 13 ff ff       	call   f0100e9b <cprintf>
f010fad8:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f010fadb:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f010fae2:	6d 6d 00 
f010fae5:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f010faeb:	b9 18 00 00 00       	mov    $0x18,%ecx
f010faf0:	b8 00 00 00 00       	mov    $0x0,%eax
f010faf5:	89 d7                	mov    %edx,%edi
f010faf7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f010faf9:	83 ec 0c             	sub    $0xc,%esp
f010fafc:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f010fb02:	50                   	push   %eax
f010fb03:	e8 25 21 ff ff       	call   f0101c2d <execute_command>
f010fb08:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fb0b:	83 ec 0c             	sub    $0xc,%esp
f010fb0e:	68 d2 7a 12 f0       	push   $0xf0127ad2
f010fb13:	e8 83 13 ff ff       	call   f0100e9b <cprintf>
f010fb18:	83 c4 10             	add    $0x10,%esp
	return 0;
f010fb1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010fb20:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fb23:	5b                   	pop    %ebx
f010fb24:	5e                   	pop    %esi
f010fb25:	5f                   	pop    %edi
f010fb26:	5d                   	pop    %ebp
f010fb27:	c3                   	ret    

f010fb28 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f010fb28:	55                   	push   %ebp
f010fb29:	89 e5                	mov    %esp,%ebp
f010fb2b:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f010fb2e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f010fb35:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f010fb3c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fb43:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fb48:	ff 75 ec             	pushl  -0x14(%ebp)
f010fb4b:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb4e:	ff 75 f4             	pushl  -0xc(%ebp)
f010fb51:	50                   	push   %eax
f010fb52:	e8 9a 90 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fb57:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fb5a:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fb5f:	ff 75 ec             	pushl  -0x14(%ebp)
f010fb62:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb65:	ff 75 f4             	pushl  -0xc(%ebp)
f010fb68:	50                   	push   %eax
f010fb69:	e8 8c 4b 00 00       	call   f01146fa <CP>
f010fb6e:	83 c4 10             	add    $0x10,%esp
f010fb71:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fb74:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fb78:	74 14                	je     f010fb8e <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f010fb7a:	83 ec 04             	sub    $0x4,%esp
f010fb7d:	68 c4 7b 12 f0       	push   $0xf0127bc4
f010fb82:	6a 5a                	push   $0x5a
f010fb84:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fb89:	e8 8c 06 ff ff       	call   f010021a <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f010fb8e:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f010fb95:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f010fb9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fba3:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fba8:	ff 75 ec             	pushl  -0x14(%ebp)
f010fbab:	ff 75 f0             	pushl  -0x10(%ebp)
f010fbae:	ff 75 f4             	pushl  -0xc(%ebp)
f010fbb1:	50                   	push   %eax
f010fbb2:	e8 3a 90 ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fbb7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fbba:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fbbf:	ff 75 ec             	pushl  -0x14(%ebp)
f010fbc2:	ff 75 f0             	pushl  -0x10(%ebp)
f010fbc5:	ff 75 f4             	pushl  -0xc(%ebp)
f010fbc8:	50                   	push   %eax
f010fbc9:	e8 2c 4b 00 00       	call   f01146fa <CP>
f010fbce:	83 c4 10             	add    $0x10,%esp
f010fbd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fbd4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fbd8:	74 14                	je     f010fbee <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f010fbda:	83 ec 04             	sub    $0x4,%esp
f010fbdd:	68 04 7c 12 f0       	push   $0xf0127c04
f010fbe2:	6a 66                	push   $0x66
f010fbe4:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fbe9:	e8 2c 06 ff ff       	call   f010021a <_panic>
	}

	va = 0xEF800000;
f010fbee:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f010fbf5:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f010fbfc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fc03:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fc08:	ff 75 ec             	pushl  -0x14(%ebp)
f010fc0b:	ff 75 f0             	pushl  -0x10(%ebp)
f010fc0e:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc11:	50                   	push   %eax
f010fc12:	e8 da 8f ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fc17:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fc1a:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fc1f:	ff 75 ec             	pushl  -0x14(%ebp)
f010fc22:	ff 75 f0             	pushl  -0x10(%ebp)
f010fc25:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc28:	50                   	push   %eax
f010fc29:	e8 cc 4a 00 00       	call   f01146fa <CP>
f010fc2e:	83 c4 10             	add    $0x10,%esp
f010fc31:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fc34:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc38:	74 14                	je     f010fc4e <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f010fc3a:	83 ec 04             	sub    $0x4,%esp
f010fc3d:	68 28 7c 12 f0       	push   $0xf0127c28
f010fc42:	6a 71                	push   $0x71
f010fc44:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fc49:	e8 cc 05 ff ff       	call   f010021a <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f010fc4e:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f010fc55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f010fc5c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fc63:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fc68:	ff 75 ec             	pushl  -0x14(%ebp)
f010fc6b:	ff 75 f0             	pushl  -0x10(%ebp)
f010fc6e:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc71:	50                   	push   %eax
f010fc72:	e8 7a 8f ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fc77:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fc7a:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fc7f:	ff 75 ec             	pushl  -0x14(%ebp)
f010fc82:	ff 75 f0             	pushl  -0x10(%ebp)
f010fc85:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc88:	50                   	push   %eax
f010fc89:	e8 6c 4a 00 00       	call   f01146fa <CP>
f010fc8e:	83 c4 10             	add    $0x10,%esp
f010fc91:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fc94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc98:	74 14                	je     f010fcae <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f010fc9a:	83 ec 04             	sub    $0x4,%esp
f010fc9d:	68 4c 7c 12 f0       	push   $0xf0127c4c
f010fca2:	6a 7d                	push   $0x7d
f010fca4:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fca9:	e8 6c 05 ff ff       	call   f010021a <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f010fcae:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f010fcb5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f010fcbc:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fcc3:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fcc8:	ff 75 ec             	pushl  -0x14(%ebp)
f010fccb:	ff 75 f0             	pushl  -0x10(%ebp)
f010fcce:	ff 75 f4             	pushl  -0xc(%ebp)
f010fcd1:	50                   	push   %eax
f010fcd2:	e8 1a 8f ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fcd7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fcda:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fcdf:	ff 75 ec             	pushl  -0x14(%ebp)
f010fce2:	ff 75 f0             	pushl  -0x10(%ebp)
f010fce5:	ff 75 f4             	pushl  -0xc(%ebp)
f010fce8:	50                   	push   %eax
f010fce9:	e8 0c 4a 00 00       	call   f01146fa <CP>
f010fcee:	83 c4 10             	add    $0x10,%esp
f010fcf1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fcf4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fcf8:	74 17                	je     f010fd11 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f010fcfa:	83 ec 04             	sub    $0x4,%esp
f010fcfd:	68 70 7c 12 f0       	push   $0xf0127c70
f010fd02:	68 89 00 00 00       	push   $0x89
f010fd07:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fd0c:	e8 09 05 ff ff       	call   f010021a <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f010fd11:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f010fd18:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f010fd1f:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fd26:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fd2b:	ff 75 ec             	pushl  -0x14(%ebp)
f010fd2e:	ff 75 f0             	pushl  -0x10(%ebp)
f010fd31:	ff 75 f4             	pushl  -0xc(%ebp)
f010fd34:	50                   	push   %eax
f010fd35:	e8 b7 8e ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fd3a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fd3d:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fd42:	ff 75 ec             	pushl  -0x14(%ebp)
f010fd45:	ff 75 f0             	pushl  -0x10(%ebp)
f010fd48:	ff 75 f4             	pushl  -0xc(%ebp)
f010fd4b:	50                   	push   %eax
f010fd4c:	e8 a9 49 00 00       	call   f01146fa <CP>
f010fd51:	83 c4 10             	add    $0x10,%esp
f010fd54:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fd57:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd5b:	74 17                	je     f010fd74 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f010fd5d:	83 ec 04             	sub    $0x4,%esp
f010fd60:	68 94 7c 12 f0       	push   $0xf0127c94
f010fd65:	68 95 00 00 00       	push   $0x95
f010fd6a:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fd6f:	e8 a6 04 ff ff       	call   f010021a <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f010fd74:	83 ec 0c             	sub    $0xc,%esp
f010fd77:	68 c0 7c 12 f0       	push   $0xf0127cc0
f010fd7c:	e8 1a 11 ff ff       	call   f0100e9b <cprintf>
f010fd81:	83 c4 10             	add    $0x10,%esp
	return 0;
f010fd84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010fd89:	c9                   	leave  
f010fd8a:	c3                   	ret    

f010fd8b <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f010fd8b:	55                   	push   %ebp
f010fd8c:	89 e5                	mov    %esp,%ebp
f010fd8e:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f010fd91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f010fd98:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f010fd9f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fda6:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fdab:	ff 75 ec             	pushl  -0x14(%ebp)
f010fdae:	ff 75 f0             	pushl  -0x10(%ebp)
f010fdb1:	ff 75 f4             	pushl  -0xc(%ebp)
f010fdb4:	50                   	push   %eax
f010fdb5:	e8 37 8e ff ff       	call   f0108bf1 <pt_set_page_permissions>
f010fdba:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f010fdbd:	83 ec 04             	sub    $0x4,%esp
f010fdc0:	68 10 7d 12 f0       	push   $0xf0127d10
f010fdc5:	68 a2 00 00 00       	push   $0xa2
f010fdca:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fdcf:	e8 46 04 ff ff       	call   f010021a <_panic>

f010fdd4 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f010fdd4:	55                   	push   %ebp
f010fdd5:	89 e5                	mov    %esp,%ebp
f010fdd7:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f010fdda:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f010fde1:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fde6:	83 ec 08             	sub    $0x8,%esp
f010fde9:	ff 75 f4             	pushl  -0xc(%ebp)
f010fdec:	50                   	push   %eax
f010fded:	e8 c3 8e ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010fdf2:	83 c4 10             	add    $0x10,%esp
f010fdf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f010fdf8:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f010fdfc:	74 17                	je     f010fe15 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f010fdfe:	83 ec 04             	sub    $0x4,%esp
f010fe01:	68 ac 7d 12 f0       	push   $0xf0127dac
f010fe06:	68 b0 00 00 00       	push   $0xb0
f010fe0b:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fe10:	e8 05 04 ff ff       	call   f010021a <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f010fe15:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f010fe1c:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fe21:	83 ec 08             	sub    $0x8,%esp
f010fe24:	ff 75 f4             	pushl  -0xc(%ebp)
f010fe27:	50                   	push   %eax
f010fe28:	e8 88 8e ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010fe2d:	83 c4 10             	add    $0x10,%esp
f010fe30:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f010fe33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe37:	74 17                	je     f010fe50 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f010fe39:	83 ec 04             	sub    $0x4,%esp
f010fe3c:	68 d0 7d 12 f0       	push   $0xf0127dd0
f010fe41:	68 b8 00 00 00       	push   $0xb8
f010fe46:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fe4b:	e8 ca 03 ff ff       	call   f010021a <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f010fe50:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f010fe57:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fe5c:	83 ec 08             	sub    $0x8,%esp
f010fe5f:	ff 75 f4             	pushl  -0xc(%ebp)
f010fe62:	50                   	push   %eax
f010fe63:	e8 4d 8e ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010fe68:	83 c4 10             	add    $0x10,%esp
f010fe6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f010fe6e:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010fe72:	74 17                	je     f010fe8b <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f010fe74:	83 ec 04             	sub    $0x4,%esp
f010fe77:	68 f4 7d 12 f0       	push   $0xf0127df4
f010fe7c:	68 c0 00 00 00       	push   $0xc0
f010fe81:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fe86:	e8 8f 03 ff ff       	call   f010021a <_panic>
	}

	va = 0xF1000000;
f010fe8b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f010fe92:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fe97:	83 ec 08             	sub    $0x8,%esp
f010fe9a:	ff 75 f4             	pushl  -0xc(%ebp)
f010fe9d:	50                   	push   %eax
f010fe9e:	e8 12 8e ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010fea3:	83 c4 10             	add    $0x10,%esp
f010fea6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f010fea9:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010fead:	74 17                	je     f010fec6 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f010feaf:	83 ec 04             	sub    $0x4,%esp
f010feb2:	68 18 7e 12 f0       	push   $0xf0127e18
f010feb7:	68 c7 00 00 00       	push   $0xc7
f010febc:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fec1:	e8 54 03 ff ff       	call   f010021a <_panic>
	}

	va = 0xF0001000;
f010fec6:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f010fecd:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010fed2:	83 ec 08             	sub    $0x8,%esp
f010fed5:	ff 75 f4             	pushl  -0xc(%ebp)
f010fed8:	50                   	push   %eax
f010fed9:	e8 d7 8d ff ff       	call   f0108cb5 <pt_get_page_permissions>
f010fede:	83 c4 10             	add    $0x10,%esp
f010fee1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f010fee4:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010fee8:	74 17                	je     f010ff01 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f010feea:	83 ec 04             	sub    $0x4,%esp
f010feed:	68 3c 7e 12 f0       	push   $0xf0127e3c
f010fef2:	68 ce 00 00 00       	push   $0xce
f010fef7:	68 e6 7b 12 f0       	push   $0xf0127be6
f010fefc:	e8 19 03 ff ff       	call   f010021a <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f010ff01:	83 ec 0c             	sub    $0xc,%esp
f010ff04:	68 60 7e 12 f0       	push   $0xf0127e60
f010ff09:	e8 8d 0f ff ff       	call   f0100e9b <cprintf>
f010ff0e:	83 c4 10             	add    $0x10,%esp
	return 0;
f010ff11:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ff16:	c9                   	leave  
f010ff17:	c3                   	ret    

f010ff18 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f010ff18:	55                   	push   %ebp
f010ff19:	89 e5                	mov    %esp,%ebp
f010ff1b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f010ff1e:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f010ff25:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ff2a:	83 ec 08             	sub    $0x8,%esp
f010ff2d:	ff 75 f4             	pushl  -0xc(%ebp)
f010ff30:	50                   	push   %eax
f010ff31:	e8 c8 8d ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f010ff36:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f010ff39:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ff3e:	83 ec 08             	sub    $0x8,%esp
f010ff41:	ff 75 f4             	pushl  -0xc(%ebp)
f010ff44:	50                   	push   %eax
f010ff45:	e8 0c 47 00 00       	call   f0114656 <CE>
f010ff4a:	83 c4 10             	add    $0x10,%esp
f010ff4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f010ff50:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010ff54:	74 17                	je     f010ff6d <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f010ff56:	83 ec 04             	sub    $0x4,%esp
f010ff59:	68 a8 7e 12 f0       	push   $0xf0127ea8
f010ff5e:	68 de 00 00 00       	push   $0xde
f010ff63:	68 e6 7b 12 f0       	push   $0xf0127be6
f010ff68:	e8 ad 02 ff ff       	call   f010021a <_panic>
	}

	va = 0xF0001000;
f010ff6d:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f010ff74:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ff79:	83 ec 08             	sub    $0x8,%esp
f010ff7c:	ff 75 f4             	pushl  -0xc(%ebp)
f010ff7f:	50                   	push   %eax
f010ff80:	e8 79 8d ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f010ff85:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f010ff88:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ff8d:	83 ec 08             	sub    $0x8,%esp
f010ff90:	ff 75 f4             	pushl  -0xc(%ebp)
f010ff93:	50                   	push   %eax
f010ff94:	e8 bd 46 00 00       	call   f0114656 <CE>
f010ff99:	83 c4 10             	add    $0x10,%esp
f010ff9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f010ff9f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010ffa3:	74 17                	je     f010ffbc <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f010ffa5:	83 ec 04             	sub    $0x4,%esp
f010ffa8:	68 d4 7e 12 f0       	push   $0xf0127ed4
f010ffad:	68 e6 00 00 00       	push   $0xe6
f010ffb2:	68 e6 7b 12 f0       	push   $0xf0127be6
f010ffb7:	e8 5e 02 ff ff       	call   f010021a <_panic>
	}

	va = 0xEF800000;
f010ffbc:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f010ffc3:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ffc8:	83 ec 08             	sub    $0x8,%esp
f010ffcb:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffce:	50                   	push   %eax
f010ffcf:	e8 2a 8d ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f010ffd4:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f010ffd7:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f010ffdc:	83 ec 08             	sub    $0x8,%esp
f010ffdf:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffe2:	50                   	push   %eax
f010ffe3:	e8 6e 46 00 00       	call   f0114656 <CE>
f010ffe8:	83 c4 10             	add    $0x10,%esp
f010ffeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f010ffee:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010fff2:	74 17                	je     f011000b <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f010fff4:	83 ec 04             	sub    $0x4,%esp
f010fff7:	68 00 7f 12 f0       	push   $0xf0127f00
f010fffc:	68 ee 00 00 00       	push   $0xee
f0110001:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110006:	e8 0f 02 ff ff       	call   f010021a <_panic>
	}

	va = 0xF0000000;
f011000b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110012:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0110017:	83 ec 08             	sub    $0x8,%esp
f011001a:	ff 75 f4             	pushl  -0xc(%ebp)
f011001d:	50                   	push   %eax
f011001e:	e8 db 8c ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f0110023:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110026:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011002b:	83 ec 08             	sub    $0x8,%esp
f011002e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110031:	50                   	push   %eax
f0110032:	e8 1f 46 00 00       	call   f0114656 <CE>
f0110037:	83 c4 10             	add    $0x10,%esp
f011003a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011003d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110041:	74 17                	je     f011005a <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0110043:	83 ec 04             	sub    $0x4,%esp
f0110046:	68 2c 7f 12 f0       	push   $0xf0127f2c
f011004b:	68 f6 00 00 00       	push   $0xf6
f0110050:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110055:	e8 c0 01 ff ff       	call   f010021a <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f011005a:	83 ec 0c             	sub    $0xc,%esp
f011005d:	68 58 7f 12 f0       	push   $0xf0127f58
f0110062:	e8 34 0e ff ff       	call   f0100e9b <cprintf>
f0110067:	83 c4 10             	add    $0x10,%esp
	return 0;
f011006a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011006f:	c9                   	leave  
f0110070:	c3                   	ret    

f0110071 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0110071:	55                   	push   %ebp
f0110072:	89 e5                	mov    %esp,%ebp
f0110074:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0110077:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011007e:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0110083:	83 ec 08             	sub    $0x8,%esp
f0110086:	ff 75 f4             	pushl  -0xc(%ebp)
f0110089:	50                   	push   %eax
f011008a:	e8 6f 8c ff ff       	call   f0108cfe <pt_clear_page_table_entry>
f011008f:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0110092:	83 ec 04             	sub    $0x4,%esp
f0110095:	68 a4 7f 12 f0       	push   $0xf0127fa4
f011009a:	68 01 01 00 00       	push   $0x101
f011009f:	68 e6 7b 12 f0       	push   $0xf0127be6
f01100a4:	e8 71 01 ff ff       	call   f010021a <_panic>

f01100a9 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01100a9:	55                   	push   %ebp
f01100aa:	89 e5                	mov    %esp,%ebp
f01100ac:	57                   	push   %edi
f01100ad:	56                   	push   %esi
f01100ae:	53                   	push   %ebx
f01100af:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01100b5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01100bb:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f01100c0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01100c5:	89 c7                	mov    %eax,%edi
f01100c7:	89 de                	mov    %ebx,%esi
f01100c9:	89 d1                	mov    %edx,%ecx
f01100cb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01100cd:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01100d3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01100d8:	b0 00                	mov    $0x0,%al
f01100da:	89 d7                	mov    %edx,%edi
f01100dc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01100de:	6a 00                	push   $0x0
f01100e0:	6a 0a                	push   $0xa
f01100e2:	6a 14                	push   $0x14
f01100e4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01100ea:	50                   	push   %eax
f01100eb:	e8 f3 9a ff ff       	call   f0109be3 <env_create>
f01100f0:	83 c4 10             	add    $0x10,%esp
f01100f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01100f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01100f9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01100ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110102:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110105:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011010b:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011010e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110111:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110114:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f011011b:	75 70 20 
f011011e:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110125:	00 00 00 
f0110128:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011012e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110133:	b8 00 00 00 00       	mov    $0x0,%eax
f0110138:	89 d7                	mov    %edx,%edi
f011013a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011013c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011013f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110142:	83 ec 08             	sub    $0x8,%esp
f0110145:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011014b:	52                   	push   %edx
f011014c:	50                   	push   %eax
f011014d:	e8 38 1e 01 00       	call   f0121f8a <ltostr>
f0110152:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110155:	83 ec 04             	sub    $0x4,%esp
f0110158:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011015e:	50                   	push   %eax
f011015f:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110165:	50                   	push   %eax
f0110166:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011016c:	50                   	push   %eax
f011016d:	e8 10 1f 01 00       	call   f0122082 <strcconcat>
f0110172:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110175:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011017c:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110183:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011018a:	83 ec 0c             	sub    $0xc,%esp
f011018d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110190:	e8 a3 45 00 00       	call   f0114738 <ClearUserSpace>
f0110195:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0110198:	83 ec 04             	sub    $0x4,%esp
f011019b:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01101a1:	50                   	push   %eax
f01101a2:	68 3a 80 12 f0       	push   $0xf012803a
f01101a7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01101ad:	50                   	push   %eax
f01101ae:	e8 cf 1e 01 00       	call   f0122082 <strcconcat>
f01101b3:	83 c4 10             	add    $0x10,%esp
f01101b6:	83 ec 0c             	sub    $0xc,%esp
f01101b9:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01101bf:	50                   	push   %eax
f01101c0:	e8 68 1a ff ff       	call   f0101c2d <execute_command>
f01101c5:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01101c8:	83 ec 04             	sub    $0x4,%esp
f01101cb:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01101d1:	50                   	push   %eax
f01101d2:	68 45 80 12 f0       	push   $0xf0128045
f01101d7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01101dd:	50                   	push   %eax
f01101de:	e8 9f 1e 01 00       	call   f0122082 <strcconcat>
f01101e3:	83 c4 10             	add    $0x10,%esp
f01101e6:	83 ec 0c             	sub    $0xc,%esp
f01101e9:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01101ef:	50                   	push   %eax
f01101f0:	e8 38 1a ff ff       	call   f0101c2d <execute_command>
f01101f5:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01101f8:	83 ec 04             	sub    $0x4,%esp
f01101fb:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110201:	50                   	push   %eax
f0110202:	68 50 80 12 f0       	push   $0xf0128050
f0110207:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011020d:	50                   	push   %eax
f011020e:	e8 6f 1e 01 00       	call   f0122082 <strcconcat>
f0110213:	83 c4 10             	add    $0x10,%esp
f0110216:	83 ec 0c             	sub    $0xc,%esp
f0110219:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011021f:	50                   	push   %eax
f0110220:	e8 08 1a ff ff       	call   f0101c2d <execute_command>
f0110225:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0110228:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011022f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110232:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0110235:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f011023c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011023f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0110242:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0110249:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011024c:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011024f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110252:	83 ec 08             	sub    $0x8,%esp
f0110255:	50                   	push   %eax
f0110256:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110259:	e8 bb 44 00 00       	call   f0114719 <GP>
f011025e:	83 c4 10             	add    $0x10,%esp
f0110261:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0110264:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011026b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0110272:	e8 3c d0 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110277:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011027a:	83 ec 0c             	sub    $0xc,%esp
f011027d:	68 5c 80 12 f0       	push   $0xf012805c
f0110282:	e8 14 0c ff ff       	call   f0100e9b <cprintf>
f0110287:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011028a:	6a 03                	push   $0x3
f011028c:	68 00 00 90 02       	push   $0x2900000
f0110291:	68 00 00 80 02       	push   $0x2800000
f0110296:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110299:	e8 79 97 ff ff       	call   f0109a17 <cut_paste_pages>
f011029e:	83 c4 10             	add    $0x10,%esp
f01102a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01102a4:	e8 0a d0 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01102a9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01102ac:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01102b3:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01102b7:	75 08                	jne    f01102c1 <test_cut_paste_pages+0x218>
f01102b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01102bc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01102bf:	74 2b                	je     f01102ec <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01102c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01102c4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01102c7:	83 ec 0c             	sub    $0xc,%esp
f01102ca:	50                   	push   %eax
f01102cb:	ff 75 b4             	pushl  -0x4c(%ebp)
f01102ce:	68 8c 80 12 f0       	push   $0xf012808c
f01102d3:	68 3a 01 00 00       	push   $0x13a
f01102d8:	68 e6 7b 12 f0       	push   $0xf0127be6
f01102dd:	e8 46 01 ff ff       	call   f0100428 <_warn>
f01102e2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01102e5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01102ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01102f0:	74 04                	je     f01102f6 <test_cut_paste_pages+0x24d>
f01102f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01102f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01102fd:	83 ec 08             	sub    $0x8,%esp
f0110300:	6a 00                	push   $0x0
f0110302:	6a 01                	push   $0x1
f0110304:	6a 00                	push   $0x0
f0110306:	68 ff 0f 00 00       	push   $0xfff
f011030b:	ff 75 bc             	pushl  -0x44(%ebp)
f011030e:	6a 01                	push   $0x1
f0110310:	68 00 30 00 00       	push   $0x3000
f0110315:	68 00 00 90 02       	push   $0x2900000
f011031a:	68 00 00 80 02       	push   $0x2800000
f011031f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110322:	e8 45 44 00 00       	call   f011476c <CCP>
f0110327:	83 c4 30             	add    $0x30,%esp
f011032a:	83 f8 01             	cmp    $0x1,%eax
f011032d:	74 21                	je     f0110350 <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011032f:	83 ec 04             	sub    $0x4,%esp
f0110332:	68 e0 80 12 f0       	push   $0xf01280e0
f0110337:	68 42 01 00 00       	push   $0x142
f011033c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110341:	e8 e2 00 ff ff       	call   f0100428 <_warn>
f0110346:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110349:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0110350:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110354:	74 04                	je     f011035a <test_cut_paste_pages+0x2b1>
f0110356:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f011035a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0110361:	83 ec 04             	sub    $0x4,%esp
f0110364:	6a 00                	push   $0x0
f0110366:	68 00 00 90 02       	push   $0x2900000
f011036b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011036e:	e8 d5 41 00 00       	call   f0114548 <CB>
f0110373:	83 c4 10             	add    $0x10,%esp
f0110376:	85 c0                	test   %eax,%eax
f0110378:	0f 84 f6 00 00 00    	je     f0110474 <test_cut_paste_pages+0x3cb>
f011037e:	83 ec 04             	sub    $0x4,%esp
f0110381:	6a 00                	push   $0x0
f0110383:	68 00 10 90 02       	push   $0x2901000
f0110388:	ff 75 d4             	pushl  -0x2c(%ebp)
f011038b:	e8 b8 41 00 00       	call   f0114548 <CB>
f0110390:	83 c4 10             	add    $0x10,%esp
f0110393:	85 c0                	test   %eax,%eax
f0110395:	0f 84 d9 00 00 00    	je     f0110474 <test_cut_paste_pages+0x3cb>
f011039b:	83 ec 04             	sub    $0x4,%esp
f011039e:	6a 00                	push   $0x0
f01103a0:	68 00 20 90 02       	push   $0x2902000
f01103a5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01103a8:	e8 9b 41 00 00       	call   f0114548 <CB>
f01103ad:	83 c4 10             	add    $0x10,%esp
f01103b0:	85 c0                	test   %eax,%eax
f01103b2:	0f 84 bc 00 00 00    	je     f0110474 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f01103b8:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01103bf:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01103c6:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01103cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01103d0:	8a 00                	mov    (%eax),%al
f01103d2:	3c 61                	cmp    $0x61,%al
f01103d4:	75 12                	jne    f01103e8 <test_cut_paste_pages+0x33f>
f01103d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01103d9:	8a 00                	mov    (%eax),%al
f01103db:	3c 62                	cmp    $0x62,%al
f01103dd:	75 09                	jne    f01103e8 <test_cut_paste_pages+0x33f>
f01103df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01103e2:	8a 00                	mov    (%eax),%al
f01103e4:	3c 63                	cmp    $0x63,%al
f01103e6:	74 21                	je     f0110409 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01103e8:	83 ec 04             	sub    $0x4,%esp
f01103eb:	68 2c 81 12 f0       	push   $0xf012812c
f01103f0:	68 4f 01 00 00       	push   $0x14f
f01103f5:	68 e6 7b 12 f0       	push   $0xf0127be6
f01103fa:	e8 29 00 ff ff       	call   f0100428 <_warn>
f01103ff:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110402:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0110409:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011040d:	74 04                	je     f0110413 <test_cut_paste_pages+0x36a>
f011040f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110413:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011041a:	83 ec 04             	sub    $0x4,%esp
f011041d:	6a 01                	push   $0x1
f011041f:	68 00 10 90 02       	push   $0x2901000
f0110424:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110427:	e8 1c 41 00 00       	call   f0114548 <CB>
f011042c:	83 c4 10             	add    $0x10,%esp
f011042f:	85 c0                	test   %eax,%eax
f0110431:	74 41                	je     f0110474 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f0110433:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110436:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0110439:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011043c:	8a 00                	mov    (%eax),%al
f011043e:	3c 79                	cmp    $0x79,%al
f0110440:	74 21                	je     f0110463 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110442:	83 ec 04             	sub    $0x4,%esp
f0110445:	68 2c 81 12 f0       	push   $0xf012812c
f011044a:	68 5a 01 00 00       	push   $0x15a
f011044f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110454:	e8 cf ff fe ff       	call   f0100428 <_warn>
f0110459:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011045c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0110463:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110467:	74 04                	je     f011046d <test_cut_paste_pages+0x3c4>
f0110469:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011046d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0110474:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110477:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011047a:	6a 02                	push   $0x2
f011047c:	68 00 f0 bf 02       	push   $0x2bff000
f0110481:	68 00 10 90 02       	push   $0x2901000
f0110486:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110489:	e8 89 95 ff ff       	call   f0109a17 <cut_paste_pages>
f011048e:	83 c4 10             	add    $0x10,%esp
f0110491:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110494:	e8 1a ce ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110499:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011049c:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01104a0:	75 0b                	jne    f01104ad <test_cut_paste_pages+0x404>
f01104a2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01104a5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01104a8:	83 f8 01             	cmp    $0x1,%eax
f01104ab:	74 2b                	je     f01104d8 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01104ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01104b0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01104b3:	83 ec 0c             	sub    $0xc,%esp
f01104b6:	50                   	push   %eax
f01104b7:	ff 75 b4             	pushl  -0x4c(%ebp)
f01104ba:	68 8c 80 12 f0       	push   $0xf012808c
f01104bf:	68 6b 01 00 00       	push   $0x16b
f01104c4:	68 e6 7b 12 f0       	push   $0xf0127be6
f01104c9:	e8 5a ff fe ff       	call   f0100428 <_warn>
f01104ce:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01104d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01104d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01104dc:	74 04                	je     f01104e2 <test_cut_paste_pages+0x439>
f01104de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01104e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01104e9:	83 ec 08             	sub    $0x8,%esp
f01104ec:	6a 00                	push   $0x0
f01104ee:	6a 01                	push   $0x1
f01104f0:	6a 00                	push   $0x0
f01104f2:	68 ff 0f 00 00       	push   $0xfff
f01104f7:	ff 75 bc             	pushl  -0x44(%ebp)
f01104fa:	6a 01                	push   $0x1
f01104fc:	68 00 20 00 00       	push   $0x2000
f0110501:	68 00 f0 bf 02       	push   $0x2bff000
f0110506:	68 00 10 90 02       	push   $0x2901000
f011050b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011050e:	e8 59 42 00 00       	call   f011476c <CCP>
f0110513:	83 c4 30             	add    $0x30,%esp
f0110516:	83 f8 01             	cmp    $0x1,%eax
f0110519:	74 21                	je     f011053c <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011051b:	83 ec 04             	sub    $0x4,%esp
f011051e:	68 e0 80 12 f0       	push   $0xf01280e0
f0110523:	68 73 01 00 00       	push   $0x173
f0110528:	68 e6 7b 12 f0       	push   $0xf0127be6
f011052d:	e8 f6 fe fe ff       	call   f0100428 <_warn>
f0110532:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110535:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011053c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110540:	74 04                	je     f0110546 <test_cut_paste_pages+0x49d>
f0110542:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110546:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011054d:	83 ec 04             	sub    $0x4,%esp
f0110550:	6a 00                	push   $0x0
f0110552:	68 ff f7 bf 02       	push   $0x2bff7ff
f0110557:	ff 75 d4             	pushl  -0x2c(%ebp)
f011055a:	e8 e9 3f 00 00       	call   f0114548 <CB>
f011055f:	83 c4 10             	add    $0x10,%esp
f0110562:	85 c0                	test   %eax,%eax
f0110564:	74 6b                	je     f01105d1 <test_cut_paste_pages+0x528>
f0110566:	83 ec 04             	sub    $0x4,%esp
f0110569:	6a 00                	push   $0x0
f011056b:	68 ff 0f c0 02       	push   $0x2c00fff
f0110570:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110573:	e8 d0 3f 00 00       	call   f0114548 <CB>
f0110578:	83 c4 10             	add    $0x10,%esp
f011057b:	85 c0                	test   %eax,%eax
f011057d:	74 52                	je     f01105d1 <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f011057f:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0110586:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011058d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110590:	8a 00                	mov    (%eax),%al
f0110592:	3c 79                	cmp    $0x79,%al
f0110594:	75 09                	jne    f011059f <test_cut_paste_pages+0x4f6>
f0110596:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110599:	8a 00                	mov    (%eax),%al
f011059b:	3c 63                	cmp    $0x63,%al
f011059d:	74 21                	je     f01105c0 <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011059f:	83 ec 04             	sub    $0x4,%esp
f01105a2:	68 2c 81 12 f0       	push   $0xf012812c
f01105a7:	68 7f 01 00 00       	push   $0x17f
f01105ac:	68 e6 7b 12 f0       	push   $0xf0127be6
f01105b1:	e8 72 fe fe ff       	call   f0100428 <_warn>
f01105b6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01105b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01105c0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01105c4:	74 04                	je     f01105ca <test_cut_paste_pages+0x521>
f01105c6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01105ca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01105d1:	83 ec 0c             	sub    $0xc,%esp
f01105d4:	68 65 81 12 f0       	push   $0xf0128165
f01105d9:	e8 bd 08 ff ff       	call   f0100e9b <cprintf>
f01105de:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01105e1:	83 ec 0c             	sub    $0xc,%esp
f01105e4:	68 74 81 12 f0       	push   $0xf0128174
f01105e9:	e8 ad 08 ff ff       	call   f0100e9b <cprintf>
f01105ee:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01105f1:	83 ec 04             	sub    $0x4,%esp
f01105f4:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01105fa:	50                   	push   %eax
f01105fb:	68 9d 81 12 f0       	push   $0xf012819d
f0110600:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110606:	50                   	push   %eax
f0110607:	e8 76 1a 01 00       	call   f0122082 <strcconcat>
f011060c:	83 c4 10             	add    $0x10,%esp
f011060f:	83 ec 0c             	sub    $0xc,%esp
f0110612:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0110618:	50                   	push   %eax
f0110619:	e8 0f 16 ff ff       	call   f0101c2d <execute_command>
f011061e:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0110621:	83 ec 04             	sub    $0x4,%esp
f0110624:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011062a:	50                   	push   %eax
f011062b:	68 a8 81 12 f0       	push   $0xf01281a8
f0110630:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110636:	50                   	push   %eax
f0110637:	e8 46 1a 01 00       	call   f0122082 <strcconcat>
f011063c:	83 c4 10             	add    $0x10,%esp
f011063f:	83 ec 0c             	sub    $0xc,%esp
f0110642:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0110648:	50                   	push   %eax
f0110649:	e8 df 15 ff ff       	call   f0101c2d <execute_command>
f011064e:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0110651:	83 ec 04             	sub    $0x4,%esp
f0110654:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011065a:	50                   	push   %eax
f011065b:	68 b3 81 12 f0       	push   $0xf01281b3
f0110660:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110666:	50                   	push   %eax
f0110667:	e8 16 1a 01 00       	call   f0122082 <strcconcat>
f011066c:	83 c4 10             	add    $0x10,%esp
f011066f:	83 ec 0c             	sub    $0xc,%esp
f0110672:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0110678:	50                   	push   %eax
f0110679:	e8 af 15 ff ff       	call   f0101c2d <execute_command>
f011067e:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0110681:	83 ec 04             	sub    $0x4,%esp
f0110684:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011068a:	50                   	push   %eax
f011068b:	68 be 81 12 f0       	push   $0xf01281be
f0110690:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110696:	50                   	push   %eax
f0110697:	e8 e6 19 01 00       	call   f0122082 <strcconcat>
f011069c:	83 c4 10             	add    $0x10,%esp
f011069f:	83 ec 0c             	sub    $0xc,%esp
f01106a2:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01106a8:	50                   	push   %eax
f01106a9:	e8 7f 15 ff ff       	call   f0101c2d <execute_command>
f01106ae:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01106b1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01106b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106bb:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01106be:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01106c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106c8:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01106cb:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01106d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106d5:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01106d8:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01106df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106e2:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01106e5:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01106ec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106ef:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01106f2:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01106f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01106fc:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01106ff:	83 ec 08             	sub    $0x8,%esp
f0110702:	68 00 00 c0 01       	push   $0x1c00000
f0110707:	ff 75 d4             	pushl  -0x2c(%ebp)
f011070a:	e8 0a 40 00 00       	call   f0114719 <GP>
f011070f:	83 c4 10             	add    $0x10,%esp
f0110712:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0110715:	83 ec 08             	sub    $0x8,%esp
f0110718:	68 00 00 40 01       	push   $0x1400000
f011071d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110720:	e8 f4 3f 00 00       	call   f0114719 <GP>
f0110725:	83 c4 10             	add    $0x10,%esp
f0110728:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011072b:	e8 83 cb ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110730:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0110733:	6a 01                	push   $0x1
f0110735:	68 00 00 40 01       	push   $0x1400000
f011073a:	68 00 00 c0 01       	push   $0x1c00000
f011073f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110742:	e8 d0 92 ff ff       	call   f0109a17 <cut_paste_pages>
f0110747:	83 c4 10             	add    $0x10,%esp
f011074a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011074d:	e8 61 cb ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110752:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0110755:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0110759:	75 08                	jne    f0110763 <test_cut_paste_pages+0x6ba>
f011075b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011075e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110761:	74 2b                	je     f011078e <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110763:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110766:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110769:	83 ec 0c             	sub    $0xc,%esp
f011076c:	50                   	push   %eax
f011076d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110770:	68 cc 81 12 f0       	push   $0xf01281cc
f0110775:	68 a2 01 00 00       	push   $0x1a2
f011077a:	68 e6 7b 12 f0       	push   $0xf0127be6
f011077f:	e8 a4 fc fe ff       	call   f0100428 <_warn>
f0110784:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110787:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011078e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110792:	74 04                	je     f0110798 <test_cut_paste_pages+0x6ef>
f0110794:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110798:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011079f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01107a6:	83 ec 08             	sub    $0x8,%esp
f01107a9:	6a 00                	push   $0x0
f01107ab:	68 ff 0f 00 00       	push   $0xfff
f01107b0:	ff 75 a4             	pushl  -0x5c(%ebp)
f01107b3:	68 ff 0f 00 00       	push   $0xfff
f01107b8:	ff 75 a0             	pushl  -0x60(%ebp)
f01107bb:	6a 01                	push   $0x1
f01107bd:	68 00 10 00 00       	push   $0x1000
f01107c2:	68 00 00 40 01       	push   $0x1400000
f01107c7:	68 00 00 c0 01       	push   $0x1c00000
f01107cc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01107cf:	e8 98 3f 00 00       	call   f011476c <CCP>
f01107d4:	83 c4 30             	add    $0x30,%esp
f01107d7:	83 f8 01             	cmp    $0x1,%eax
f01107da:	74 28                	je     f0110804 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01107dc:	83 ec 04             	sub    $0x4,%esp
f01107df:	68 e0 80 12 f0       	push   $0xf01280e0
f01107e4:	68 ab 01 00 00       	push   $0x1ab
f01107e9:	68 e6 7b 12 f0       	push   $0xf0127be6
f01107ee:	e8 35 fc fe ff       	call   f0100428 <_warn>
f01107f3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01107f6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01107fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0110804:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110808:	74 04                	je     f011080e <test_cut_paste_pages+0x765>
f011080a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011080e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0110815:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110819:	0f 84 92 00 00 00    	je     f01108b1 <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f011081f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0110826:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011082d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0110834:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011083b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0110842:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0110849:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011084c:	8a 00                	mov    (%eax),%al
f011084e:	3c 61                	cmp    $0x61,%al
f0110850:	75 2d                	jne    f011087f <test_cut_paste_pages+0x7d6>
f0110852:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110855:	8a 00                	mov    (%eax),%al
f0110857:	3c 78                	cmp    $0x78,%al
f0110859:	75 24                	jne    f011087f <test_cut_paste_pages+0x7d6>
f011085b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011085e:	8a 00                	mov    (%eax),%al
f0110860:	3c 62                	cmp    $0x62,%al
f0110862:	75 1b                	jne    f011087f <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0110864:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110867:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0110869:	3c 79                	cmp    $0x79,%al
f011086b:	75 12                	jne    f011087f <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011086d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110870:	8a 00                	mov    (%eax),%al
f0110872:	3c 63                	cmp    $0x63,%al
f0110874:	75 09                	jne    f011087f <test_cut_paste_pages+0x7d6>
f0110876:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110879:	8a 00                	mov    (%eax),%al
f011087b:	3c 7a                	cmp    $0x7a,%al
f011087d:	74 21                	je     f01108a0 <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011087f:	83 ec 04             	sub    $0x4,%esp
f0110882:	68 2c 81 12 f0       	push   $0xf012812c
f0110887:	68 bd 01 00 00       	push   $0x1bd
f011088c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110891:	e8 92 fb fe ff       	call   f0100428 <_warn>
f0110896:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110899:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01108a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108a4:	74 04                	je     f01108aa <test_cut_paste_pages+0x801>
f01108a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01108aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01108b1:	e8 fd c9 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01108b6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01108b9:	6a 03                	push   $0x3
f01108bb:	68 00 f0 bf 01       	push   $0x1bff000
f01108c0:	68 00 00 40 01       	push   $0x1400000
f01108c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01108c8:	e8 4a 91 ff ff       	call   f0109a17 <cut_paste_pages>
f01108cd:	83 c4 10             	add    $0x10,%esp
f01108d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01108d3:	e8 db c9 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01108d8:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01108db:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01108df:	75 08                	jne    f01108e9 <test_cut_paste_pages+0x840>
f01108e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01108e4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01108e7:	74 2b                	je     f0110914 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01108e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01108ec:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01108ef:	83 ec 0c             	sub    $0xc,%esp
f01108f2:	50                   	push   %eax
f01108f3:	ff 75 b4             	pushl  -0x4c(%ebp)
f01108f6:	68 cc 81 12 f0       	push   $0xf01281cc
f01108fb:	68 cc 01 00 00       	push   $0x1cc
f0110900:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110905:	e8 1e fb fe ff       	call   f0100428 <_warn>
f011090a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011090d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110914:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110918:	74 04                	je     f011091e <test_cut_paste_pages+0x875>
f011091a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011091e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0110925:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011092c:	83 ec 04             	sub    $0x4,%esp
f011092f:	6a 00                	push   $0x0
f0110931:	68 00 00 40 01       	push   $0x1400000
f0110936:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110939:	e8 0a 3c 00 00       	call   f0114548 <CB>
f011093e:	83 c4 10             	add    $0x10,%esp
f0110941:	83 f8 01             	cmp    $0x1,%eax
f0110944:	0f 85 80 00 00 00    	jne    f01109ca <test_cut_paste_pages+0x921>
f011094a:	83 ec 04             	sub    $0x4,%esp
f011094d:	6a 00                	push   $0x0
f011094f:	68 00 10 40 01       	push   $0x1401000
f0110954:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110957:	e8 ec 3b 00 00       	call   f0114548 <CB>
f011095c:	83 c4 10             	add    $0x10,%esp
f011095f:	83 f8 01             	cmp    $0x1,%eax
f0110962:	75 66                	jne    f01109ca <test_cut_paste_pages+0x921>
f0110964:	83 ec 04             	sub    $0x4,%esp
f0110967:	6a 00                	push   $0x0
f0110969:	68 00 20 40 01       	push   $0x1402000
f011096e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110971:	e8 d2 3b 00 00       	call   f0114548 <CB>
f0110976:	83 c4 10             	add    $0x10,%esp
f0110979:	83 f8 01             	cmp    $0x1,%eax
f011097c:	75 4c                	jne    f01109ca <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011097e:	83 ec 04             	sub    $0x4,%esp
f0110981:	6a 00                	push   $0x0
f0110983:	68 00 f0 bf 01       	push   $0x1bff000
f0110988:	ff 75 d4             	pushl  -0x2c(%ebp)
f011098b:	e8 b8 3b 00 00       	call   f0114548 <CB>
f0110990:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0110993:	85 c0                	test   %eax,%eax
f0110995:	75 33                	jne    f01109ca <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0110997:	83 ec 04             	sub    $0x4,%esp
f011099a:	6a 00                	push   $0x0
f011099c:	68 00 00 c0 01       	push   $0x1c00000
f01109a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01109a4:	e8 9f 3b 00 00       	call   f0114548 <CB>
f01109a9:	83 c4 10             	add    $0x10,%esp
f01109ac:	83 f8 01             	cmp    $0x1,%eax
f01109af:	75 19                	jne    f01109ca <test_cut_paste_pages+0x921>
f01109b1:	83 ec 04             	sub    $0x4,%esp
f01109b4:	6a 00                	push   $0x0
f01109b6:	68 00 10 c0 01       	push   $0x1c01000
f01109bb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01109be:	e8 85 3b 00 00       	call   f0114548 <CB>
f01109c3:	83 c4 10             	add    $0x10,%esp
f01109c6:	85 c0                	test   %eax,%eax
f01109c8:	74 28                	je     f01109f2 <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01109ca:	83 ec 04             	sub    $0x4,%esp
f01109cd:	68 2c 82 12 f0       	push   $0xf012822c
f01109d2:	68 d5 01 00 00       	push   $0x1d5
f01109d7:	68 e6 7b 12 f0       	push   $0xf0127be6
f01109dc:	e8 47 fa fe ff       	call   f0100428 <_warn>
f01109e1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01109e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01109eb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01109f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01109f6:	74 04                	je     f01109fc <test_cut_paste_pages+0x953>
f01109f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01109fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0110a03:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110a07:	0f 84 99 00 00 00    	je     f0110aa6 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0110a0d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0110a14:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0110a1b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0110a22:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0110a29:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0110a30:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0110a37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a3a:	8a 00                	mov    (%eax),%al
f0110a3c:	3c 61                	cmp    $0x61,%al
f0110a3e:	75 2d                	jne    f0110a6d <test_cut_paste_pages+0x9c4>
f0110a40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110a43:	8a 00                	mov    (%eax),%al
f0110a45:	3c 78                	cmp    $0x78,%al
f0110a47:	75 24                	jne    f0110a6d <test_cut_paste_pages+0x9c4>
f0110a49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110a4c:	8a 00                	mov    (%eax),%al
f0110a4e:	3c 62                	cmp    $0x62,%al
f0110a50:	75 1b                	jne    f0110a6d <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0110a52:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110a55:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0110a57:	3c 79                	cmp    $0x79,%al
f0110a59:	75 12                	jne    f0110a6d <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0110a5b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110a5e:	8a 00                	mov    (%eax),%al
f0110a60:	3c 63                	cmp    $0x63,%al
f0110a62:	75 09                	jne    f0110a6d <test_cut_paste_pages+0x9c4>
f0110a64:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a67:	8a 00                	mov    (%eax),%al
f0110a69:	3c 7a                	cmp    $0x7a,%al
f0110a6b:	74 28                	je     f0110a95 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0110a6d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0110a74:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110a7b:	83 ec 04             	sub    $0x4,%esp
f0110a7e:	68 2c 81 12 f0       	push   $0xf012812c
f0110a83:	68 e9 01 00 00       	push   $0x1e9
f0110a88:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110a8d:	e8 96 f9 fe ff       	call   f0100428 <_warn>
f0110a92:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0110a95:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110a99:	74 04                	je     f0110a9f <test_cut_paste_pages+0x9f6>
f0110a9b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110a9f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0110aa6:	83 ec 0c             	sub    $0xc,%esp
f0110aa9:	68 65 82 12 f0       	push   $0xf0128265
f0110aae:	e8 e8 03 ff ff       	call   f0100e9b <cprintf>
f0110ab3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0110ab6:	83 ec 08             	sub    $0x8,%esp
f0110ab9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110abc:	68 74 82 12 f0       	push   $0xf0128274
f0110ac1:	e8 d5 03 ff ff       	call   f0100e9b <cprintf>
f0110ac6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0110ac9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0110acd:	75 10                	jne    f0110adf <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0110acf:	83 ec 0c             	sub    $0xc,%esp
f0110ad2:	68 a8 82 12 f0       	push   $0xf01282a8
f0110ad7:	e8 bf 03 ff ff       	call   f0100e9b <cprintf>
f0110adc:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0110adf:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0110ae4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0110ae7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110aea:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0110aed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110af2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110af5:	5b                   	pop    %ebx
f0110af6:	5e                   	pop    %esi
f0110af7:	5f                   	pop    %edi
f0110af8:	5d                   	pop    %ebp
f0110af9:	c3                   	ret    

f0110afa <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0110afa:	55                   	push   %ebp
f0110afb:	89 e5                	mov    %esp,%ebp
f0110afd:	57                   	push   %edi
f0110afe:	56                   	push   %esi
f0110aff:	53                   	push   %ebx
f0110b00:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110b06:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0110b0c:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f0110b11:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110b16:	89 c7                	mov    %eax,%edi
f0110b18:	89 de                	mov    %ebx,%esi
f0110b1a:	89 d1                	mov    %edx,%ecx
f0110b1c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110b1e:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0110b24:	b9 23 00 00 00       	mov    $0x23,%ecx
f0110b29:	b0 00                	mov    $0x0,%al
f0110b2b:	89 d7                	mov    %edx,%edi
f0110b2d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0110b2f:	6a 00                	push   $0x0
f0110b31:	6a 0a                	push   $0xa
f0110b33:	6a 14                	push   $0x14
f0110b35:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0110b3b:	50                   	push   %eax
f0110b3c:	e8 a2 90 ff ff       	call   f0109be3 <env_create>
f0110b41:	83 c4 10             	add    $0x10,%esp
f0110b44:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0110b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110b4a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0110b50:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110b53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110b56:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0110b5c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0110b62:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110b68:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110b6b:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0110b72:	75 70 20 
f0110b75:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0110b7c:	00 00 00 
f0110b7f:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0110b85:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110b8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b8f:	89 d7                	mov    %edx,%edi
f0110b91:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0110b93:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110b96:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110b99:	83 ec 08             	sub    $0x8,%esp
f0110b9c:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0110ba2:	52                   	push   %edx
f0110ba3:	50                   	push   %eax
f0110ba4:	e8 e1 13 01 00       	call   f0121f8a <ltostr>
f0110ba9:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110bac:	83 ec 04             	sub    $0x4,%esp
f0110baf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0110bb5:	50                   	push   %eax
f0110bb6:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0110bbc:	50                   	push   %eax
f0110bbd:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0110bc3:	50                   	push   %eax
f0110bc4:	e8 b9 14 01 00       	call   f0122082 <strcconcat>
f0110bc9:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0110bcc:	83 ec 0c             	sub    $0xc,%esp
f0110bcf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110bd2:	e8 61 3b 00 00       	call   f0114738 <ClearUserSpace>
f0110bd7:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0110bda:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0110be1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0110be8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0110bef:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0110bf6:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0110bfd:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0110c04:	83 ec 0c             	sub    $0xc,%esp
f0110c07:	68 1c 83 12 f0       	push   $0xf012831c
f0110c0c:	e8 8a 02 ff ff       	call   f0100e9b <cprintf>
f0110c11:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0110c14:	83 ec 04             	sub    $0x4,%esp
f0110c17:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0110c1d:	50                   	push   %eax
f0110c1e:	68 52 83 12 f0       	push   $0xf0128352
f0110c23:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0110c29:	50                   	push   %eax
f0110c2a:	e8 53 14 01 00       	call   f0122082 <strcconcat>
f0110c2f:	83 c4 10             	add    $0x10,%esp
f0110c32:	83 ec 0c             	sub    $0xc,%esp
f0110c35:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0110c3b:	50                   	push   %eax
f0110c3c:	e8 ec 0f ff ff       	call   f0101c2d <execute_command>
f0110c41:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0110c44:	83 ec 04             	sub    $0x4,%esp
f0110c47:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0110c4d:	50                   	push   %eax
f0110c4e:	68 57 83 12 f0       	push   $0xf0128357
f0110c53:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0110c59:	50                   	push   %eax
f0110c5a:	e8 23 14 01 00       	call   f0122082 <strcconcat>
f0110c5f:	83 c4 10             	add    $0x10,%esp
f0110c62:	83 ec 0c             	sub    $0xc,%esp
f0110c65:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0110c6b:	50                   	push   %eax
f0110c6c:	e8 bc 0f ff ff       	call   f0101c2d <execute_command>
f0110c71:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0110c74:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0110c7a:	bb 5d 86 12 f0       	mov    $0xf012865d,%ebx
f0110c7f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110c84:	89 c7                	mov    %eax,%edi
f0110c86:	89 de                	mov    %ebx,%esi
f0110c88:	89 d1                	mov    %edx,%ecx
f0110c8a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110c8c:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0110c92:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110c97:	b0 00                	mov    $0x0,%al
f0110c99:	89 d7                	mov    %edx,%edi
f0110c9b:	f3 aa                	rep stos %al,%es:(%edi)
f0110c9d:	83 ec 0c             	sub    $0xc,%esp
f0110ca0:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0110ca6:	50                   	push   %eax
f0110ca7:	e8 81 0f ff ff       	call   f0101c2d <execute_command>
f0110cac:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0110caf:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0110cb5:	bb c1 86 12 f0       	mov    $0xf01286c1,%ebx
f0110cba:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110cbf:	89 c7                	mov    %eax,%edi
f0110cc1:	89 de                	mov    %ebx,%esi
f0110cc3:	89 d1                	mov    %edx,%ecx
f0110cc5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110cc7:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0110ccd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110cd2:	b0 00                	mov    $0x0,%al
f0110cd4:	89 d7                	mov    %edx,%edi
f0110cd6:	f3 aa                	rep stos %al,%es:(%edi)
f0110cd8:	83 ec 0c             	sub    $0xc,%esp
f0110cdb:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0110ce1:	50                   	push   %eax
f0110ce2:	e8 46 0f ff ff       	call   f0101c2d <execute_command>
f0110ce7:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0110cea:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0110cf0:	bb 25 87 12 f0       	mov    $0xf0128725,%ebx
f0110cf5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110cfa:	89 c7                	mov    %eax,%edi
f0110cfc:	89 de                	mov    %ebx,%esi
f0110cfe:	89 d1                	mov    %edx,%ecx
f0110d00:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110d02:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0110d08:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110d0d:	b0 00                	mov    $0x0,%al
f0110d0f:	89 d7                	mov    %edx,%edi
f0110d11:	f3 aa                	rep stos %al,%es:(%edi)
f0110d13:	83 ec 0c             	sub    $0xc,%esp
f0110d16:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0110d1c:	50                   	push   %eax
f0110d1d:	e8 0b 0f ff ff       	call   f0101c2d <execute_command>
f0110d22:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0110d25:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0110d2b:	bb 89 87 12 f0       	mov    $0xf0128789,%ebx
f0110d30:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110d35:	89 c7                	mov    %eax,%edi
f0110d37:	89 de                	mov    %ebx,%esi
f0110d39:	89 d1                	mov    %edx,%ecx
f0110d3b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110d3d:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0110d43:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110d48:	b0 00                	mov    $0x0,%al
f0110d4a:	89 d7                	mov    %edx,%edi
f0110d4c:	f3 aa                	rep stos %al,%es:(%edi)
f0110d4e:	83 ec 0c             	sub    $0xc,%esp
f0110d51:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0110d57:	50                   	push   %eax
f0110d58:	e8 d0 0e ff ff       	call   f0101c2d <execute_command>
f0110d5d:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0110d60:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0110d66:	bb ed 87 12 f0       	mov    $0xf01287ed,%ebx
f0110d6b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110d70:	89 c7                	mov    %eax,%edi
f0110d72:	89 de                	mov    %ebx,%esi
f0110d74:	89 d1                	mov    %edx,%ecx
f0110d76:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110d78:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0110d7e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110d83:	b0 00                	mov    $0x0,%al
f0110d85:	89 d7                	mov    %edx,%edi
f0110d87:	f3 aa                	rep stos %al,%es:(%edi)
f0110d89:	83 ec 0c             	sub    $0xc,%esp
f0110d8c:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0110d92:	50                   	push   %eax
f0110d93:	e8 95 0e ff ff       	call   f0101c2d <execute_command>
f0110d98:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0110d9b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0110da1:	bb 51 88 12 f0       	mov    $0xf0128851,%ebx
f0110da6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110dab:	89 c7                	mov    %eax,%edi
f0110dad:	89 de                	mov    %ebx,%esi
f0110daf:	89 d1                	mov    %edx,%ecx
f0110db1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110db3:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0110db9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110dbe:	b0 00                	mov    $0x0,%al
f0110dc0:	89 d7                	mov    %edx,%edi
f0110dc2:	f3 aa                	rep stos %al,%es:(%edi)
f0110dc4:	83 ec 0c             	sub    $0xc,%esp
f0110dc7:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0110dcd:	50                   	push   %eax
f0110dce:	e8 5a 0e ff ff       	call   f0101c2d <execute_command>
f0110dd3:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0110dd6:	83 ec 04             	sub    $0x4,%esp
f0110dd9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0110ddf:	50                   	push   %eax
f0110de0:	68 5f 83 12 f0       	push   $0xf012835f
f0110de5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0110deb:	50                   	push   %eax
f0110dec:	e8 91 12 01 00       	call   f0122082 <strcconcat>
f0110df1:	83 c4 10             	add    $0x10,%esp
f0110df4:	83 ec 0c             	sub    $0xc,%esp
f0110df7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0110dfd:	50                   	push   %eax
f0110dfe:	e8 2a 0e ff ff       	call   f0101c2d <execute_command>
f0110e03:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0110e06:	83 ec 04             	sub    $0x4,%esp
f0110e09:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0110e0f:	50                   	push   %eax
f0110e10:	68 69 83 12 f0       	push   $0xf0128369
f0110e15:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0110e1b:	50                   	push   %eax
f0110e1c:	e8 61 12 01 00       	call   f0122082 <strcconcat>
f0110e21:	83 c4 10             	add    $0x10,%esp
f0110e24:	83 ec 0c             	sub    $0xc,%esp
f0110e27:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0110e2d:	50                   	push   %eax
f0110e2e:	e8 fa 0d ff ff       	call   f0101c2d <execute_command>
f0110e33:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0110e36:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0110e3c:	bb b5 88 12 f0       	mov    $0xf01288b5,%ebx
f0110e41:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110e46:	89 c7                	mov    %eax,%edi
f0110e48:	89 de                	mov    %ebx,%esi
f0110e4a:	89 d1                	mov    %edx,%ecx
f0110e4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110e4e:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0110e54:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110e59:	b0 00                	mov    $0x0,%al
f0110e5b:	89 d7                	mov    %edx,%edi
f0110e5d:	f3 aa                	rep stos %al,%es:(%edi)
f0110e5f:	83 ec 0c             	sub    $0xc,%esp
f0110e62:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0110e68:	50                   	push   %eax
f0110e69:	e8 bf 0d ff ff       	call   f0101c2d <execute_command>
f0110e6e:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0110e71:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0110e77:	bb 19 89 12 f0       	mov    $0xf0128919,%ebx
f0110e7c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110e81:	89 c7                	mov    %eax,%edi
f0110e83:	89 de                	mov    %ebx,%esi
f0110e85:	89 d1                	mov    %edx,%ecx
f0110e87:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110e89:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0110e8f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110e94:	b0 00                	mov    $0x0,%al
f0110e96:	89 d7                	mov    %edx,%edi
f0110e98:	f3 aa                	rep stos %al,%es:(%edi)
f0110e9a:	83 ec 0c             	sub    $0xc,%esp
f0110e9d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0110ea3:	50                   	push   %eax
f0110ea4:	e8 84 0d ff ff       	call   f0101c2d <execute_command>
f0110ea9:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0110eac:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0110eb2:	bb 7d 89 12 f0       	mov    $0xf012897d,%ebx
f0110eb7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110ebc:	89 c7                	mov    %eax,%edi
f0110ebe:	89 de                	mov    %ebx,%esi
f0110ec0:	89 d1                	mov    %edx,%ecx
f0110ec2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110ec4:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0110eca:	b9 55 00 00 00       	mov    $0x55,%ecx
f0110ecf:	b0 00                	mov    $0x0,%al
f0110ed1:	89 d7                	mov    %edx,%edi
f0110ed3:	f3 aa                	rep stos %al,%es:(%edi)
f0110ed5:	83 ec 0c             	sub    $0xc,%esp
f0110ed8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0110ede:	50                   	push   %eax
f0110edf:	e8 49 0d ff ff       	call   f0101c2d <execute_command>
f0110ee4:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0110ee7:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0110eee:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0110ef5:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0110efc:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0110f03:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0110f0a:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0110f11:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0110f18:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0110f1f:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0110f26:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0110f2d:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0110f34:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0110f3b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110f3e:	8a 00                	mov    (%eax),%al
f0110f40:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0110f46:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110f49:	8a 00                	mov    (%eax),%al
f0110f4b:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0110f51:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110f54:	8a 00                	mov    (%eax),%al
f0110f56:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0110f5c:	e8 52 c3 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110f61:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0110f64:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0110f67:	89 d0                	mov    %edx,%eax
f0110f69:	01 c0                	add    %eax,%eax
f0110f6b:	01 d0                	add    %edx,%eax
f0110f6d:	01 c0                	add    %eax,%eax
f0110f6f:	50                   	push   %eax
f0110f70:	68 00 00 10 00       	push   $0x100000
f0110f75:	6a 00                	push   $0x0
f0110f77:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f7a:	e8 b2 8a ff ff       	call   f0109a31 <copy_paste_chunk>
f0110f7f:	83 c4 10             	add    $0x10,%esp
f0110f82:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0110f85:	e8 29 c3 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0110f8a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0110f8d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0110f94:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0110f98:	75 08                	jne    f0110fa2 <test_copy_paste_chunk+0x4a8>
f0110f9a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110f9d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0110fa0:	74 2b                	je     f0110fcd <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0110fa2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110fa5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0110fa8:	83 ec 0c             	sub    $0xc,%esp
f0110fab:	50                   	push   %eax
f0110fac:	ff 75 88             	pushl  -0x78(%ebp)
f0110faf:	68 78 83 12 f0       	push   $0xf0128378
f0110fb4:	68 3c 02 00 00       	push   $0x23c
f0110fb9:	68 e6 7b 12 f0       	push   $0xf0127be6
f0110fbe:	e8 65 f4 fe ff       	call   f0100428 <_warn>
f0110fc3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0110fc6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0110fcd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110fd1:	74 04                	je     f0110fd7 <test_copy_paste_chunk+0x4dd>
f0110fd3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0110fd7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0110fde:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110fe1:	8a 00                	mov    (%eax),%al
f0110fe3:	3c 61                	cmp    $0x61,%al
f0110fe5:	75 75                	jne    f011105c <test_copy_paste_chunk+0x562>
f0110fe7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110fea:	8a 00                	mov    (%eax),%al
f0110fec:	3c 78                	cmp    $0x78,%al
f0110fee:	75 6c                	jne    f011105c <test_copy_paste_chunk+0x562>
f0110ff0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ff3:	8a 00                	mov    (%eax),%al
f0110ff5:	3c 62                	cmp    $0x62,%al
f0110ff7:	75 63                	jne    f011105c <test_copy_paste_chunk+0x562>
f0110ff9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110ffc:	8a 00                	mov    (%eax),%al
f0110ffe:	3c 79                	cmp    $0x79,%al
f0111000:	75 5a                	jne    f011105c <test_copy_paste_chunk+0x562>
f0111002:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111005:	8a 00                	mov    (%eax),%al
f0111007:	3c 63                	cmp    $0x63,%al
f0111009:	75 51                	jne    f011105c <test_copy_paste_chunk+0x562>
f011100b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011100e:	8a 00                	mov    (%eax),%al
f0111010:	3c 7a                	cmp    $0x7a,%al
f0111012:	75 48                	jne    f011105c <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0111014:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111017:	8a 00                	mov    (%eax),%al
f0111019:	3c 64                	cmp    $0x64,%al
f011101b:	75 3f                	jne    f011105c <test_copy_paste_chunk+0x562>
f011101d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111020:	8a 10                	mov    (%eax),%dl
f0111022:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111028:	38 c2                	cmp    %al,%dl
f011102a:	75 30                	jne    f011105c <test_copy_paste_chunk+0x562>
f011102c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011102f:	8a 00                	mov    (%eax),%al
f0111031:	3c 65                	cmp    $0x65,%al
f0111033:	75 27                	jne    f011105c <test_copy_paste_chunk+0x562>
f0111035:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111038:	8a 10                	mov    (%eax),%dl
f011103a:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111040:	38 c2                	cmp    %al,%dl
f0111042:	75 18                	jne    f011105c <test_copy_paste_chunk+0x562>
f0111044:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111047:	8a 00                	mov    (%eax),%al
f0111049:	3c 66                	cmp    $0x66,%al
f011104b:	75 0f                	jne    f011105c <test_copy_paste_chunk+0x562>
f011104d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111050:	8a 10                	mov    (%eax),%dl
f0111052:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111058:	38 c2                	cmp    %al,%dl
f011105a:	74 21                	je     f011107d <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011105c:	83 ec 04             	sub    $0x4,%esp
f011105f:	68 dc 83 12 f0       	push   $0xf01283dc
f0111064:	68 45 02 00 00       	push   $0x245
f0111069:	68 e6 7b 12 f0       	push   $0xf0127be6
f011106e:	e8 b5 f3 fe ff       	call   f0100428 <_warn>
f0111073:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011107d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111081:	74 04                	je     f0111087 <test_copy_paste_chunk+0x58d>
f0111083:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111087:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f011108e:	83 ec 0c             	sub    $0xc,%esp
f0111091:	68 16 84 12 f0       	push   $0xf0128416
f0111096:	e8 00 fe fe ff       	call   f0100e9b <cprintf>
f011109b:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f011109e:	83 ec 0c             	sub    $0xc,%esp
f01110a1:	68 28 84 12 f0       	push   $0xf0128428
f01110a6:	e8 f0 fd fe ff       	call   f0100e9b <cprintf>
f01110ab:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01110ae:	83 ec 04             	sub    $0x4,%esp
f01110b1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01110b7:	50                   	push   %eax
f01110b8:	68 5e 84 12 f0       	push   $0xf012845e
f01110bd:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01110c3:	50                   	push   %eax
f01110c4:	e8 b9 0f 01 00       	call   f0122082 <strcconcat>
f01110c9:	83 c4 10             	add    $0x10,%esp
f01110cc:	83 ec 0c             	sub    $0xc,%esp
f01110cf:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01110d5:	50                   	push   %eax
f01110d6:	e8 52 0b ff ff       	call   f0101c2d <execute_command>
f01110db:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01110de:	83 ec 04             	sub    $0x4,%esp
f01110e1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01110e7:	50                   	push   %eax
f01110e8:	68 68 84 12 f0       	push   $0xf0128468
f01110ed:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01110f3:	50                   	push   %eax
f01110f4:	e8 89 0f 01 00       	call   f0122082 <strcconcat>
f01110f9:	83 c4 10             	add    $0x10,%esp
f01110fc:	83 ec 0c             	sub    $0xc,%esp
f01110ff:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111105:	50                   	push   %eax
f0111106:	e8 22 0b ff ff       	call   f0101c2d <execute_command>
f011110b:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f011110e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111114:	bb e1 89 12 f0       	mov    $0xf01289e1,%ebx
f0111119:	ba 0f 00 00 00       	mov    $0xf,%edx
f011111e:	89 c7                	mov    %eax,%edi
f0111120:	89 de                	mov    %ebx,%esi
f0111122:	89 d1                	mov    %edx,%ecx
f0111124:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111126:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011112c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111131:	b0 00                	mov    $0x0,%al
f0111133:	89 d7                	mov    %edx,%edi
f0111135:	f3 aa                	rep stos %al,%es:(%edi)
f0111137:	83 ec 0c             	sub    $0xc,%esp
f011113a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111140:	50                   	push   %eax
f0111141:	e8 e7 0a ff ff       	call   f0101c2d <execute_command>
f0111146:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111149:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011114f:	bb 45 8a 12 f0       	mov    $0xf0128a45,%ebx
f0111154:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111159:	89 c7                	mov    %eax,%edi
f011115b:	89 de                	mov    %ebx,%esi
f011115d:	89 d1                	mov    %edx,%ecx
f011115f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111161:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111167:	b9 55 00 00 00       	mov    $0x55,%ecx
f011116c:	b0 00                	mov    $0x0,%al
f011116e:	89 d7                	mov    %edx,%edi
f0111170:	f3 aa                	rep stos %al,%es:(%edi)
f0111172:	83 ec 0c             	sub    $0xc,%esp
f0111175:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011117b:	50                   	push   %eax
f011117c:	e8 ac 0a ff ff       	call   f0101c2d <execute_command>
f0111181:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0111184:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011118a:	bb a9 8a 12 f0       	mov    $0xf0128aa9,%ebx
f011118f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111194:	89 c7                	mov    %eax,%edi
f0111196:	89 de                	mov    %ebx,%esi
f0111198:	89 d1                	mov    %edx,%ecx
f011119a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011119c:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01111a2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01111a7:	b0 00                	mov    $0x0,%al
f01111a9:	89 d7                	mov    %edx,%edi
f01111ab:	f3 aa                	rep stos %al,%es:(%edi)
f01111ad:	83 ec 0c             	sub    $0xc,%esp
f01111b0:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01111b6:	50                   	push   %eax
f01111b7:	e8 71 0a ff ff       	call   f0101c2d <execute_command>
f01111bc:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01111bf:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01111c5:	bb 0d 8b 12 f0       	mov    $0xf0128b0d,%ebx
f01111ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01111cf:	89 c7                	mov    %eax,%edi
f01111d1:	89 de                	mov    %ebx,%esi
f01111d3:	89 d1                	mov    %edx,%ecx
f01111d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01111d7:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01111dd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01111e2:	b0 00                	mov    $0x0,%al
f01111e4:	89 d7                	mov    %edx,%edi
f01111e6:	f3 aa                	rep stos %al,%es:(%edi)
f01111e8:	83 ec 0c             	sub    $0xc,%esp
f01111eb:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01111f1:	50                   	push   %eax
f01111f2:	e8 36 0a ff ff       	call   f0101c2d <execute_command>
f01111f7:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01111fa:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111200:	bb 71 8b 12 f0       	mov    $0xf0128b71,%ebx
f0111205:	ba 0f 00 00 00       	mov    $0xf,%edx
f011120a:	89 c7                	mov    %eax,%edi
f011120c:	89 de                	mov    %ebx,%esi
f011120e:	89 d1                	mov    %edx,%ecx
f0111210:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111212:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111218:	b9 55 00 00 00       	mov    $0x55,%ecx
f011121d:	b0 00                	mov    $0x0,%al
f011121f:	89 d7                	mov    %edx,%edi
f0111221:	f3 aa                	rep stos %al,%es:(%edi)
f0111223:	83 ec 0c             	sub    $0xc,%esp
f0111226:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011122c:	50                   	push   %eax
f011122d:	e8 fb 09 ff ff       	call   f0101c2d <execute_command>
f0111232:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0111235:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011123b:	bb d5 8b 12 f0       	mov    $0xf0128bd5,%ebx
f0111240:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111245:	89 c7                	mov    %eax,%edi
f0111247:	89 de                	mov    %ebx,%esi
f0111249:	89 d1                	mov    %edx,%ecx
f011124b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011124d:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111253:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111258:	b0 00                	mov    $0x0,%al
f011125a:	89 d7                	mov    %edx,%edi
f011125c:	f3 aa                	rep stos %al,%es:(%edi)
f011125e:	83 ec 0c             	sub    $0xc,%esp
f0111261:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111267:	50                   	push   %eax
f0111268:	e8 c0 09 ff ff       	call   f0101c2d <execute_command>
f011126d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0111270:	83 ec 04             	sub    $0x4,%esp
f0111273:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111279:	50                   	push   %eax
f011127a:	68 72 84 12 f0       	push   $0xf0128472
f011127f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111285:	50                   	push   %eax
f0111286:	e8 f7 0d 01 00       	call   f0122082 <strcconcat>
f011128b:	83 c4 10             	add    $0x10,%esp
f011128e:	83 ec 0c             	sub    $0xc,%esp
f0111291:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111297:	50                   	push   %eax
f0111298:	e8 90 09 ff ff       	call   f0101c2d <execute_command>
f011129d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01112a0:	83 ec 04             	sub    $0x4,%esp
f01112a3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01112a9:	50                   	push   %eax
f01112aa:	68 7c 84 12 f0       	push   $0xf012847c
f01112af:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01112b5:	50                   	push   %eax
f01112b6:	e8 c7 0d 01 00       	call   f0122082 <strcconcat>
f01112bb:	83 c4 10             	add    $0x10,%esp
f01112be:	83 ec 0c             	sub    $0xc,%esp
f01112c1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01112c7:	50                   	push   %eax
f01112c8:	e8 60 09 ff ff       	call   f0101c2d <execute_command>
f01112cd:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01112d0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01112d6:	bb 39 8c 12 f0       	mov    $0xf0128c39,%ebx
f01112db:	ba 0f 00 00 00       	mov    $0xf,%edx
f01112e0:	89 c7                	mov    %eax,%edi
f01112e2:	89 de                	mov    %ebx,%esi
f01112e4:	89 d1                	mov    %edx,%ecx
f01112e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01112e8:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01112ee:	b9 55 00 00 00       	mov    $0x55,%ecx
f01112f3:	b0 00                	mov    $0x0,%al
f01112f5:	89 d7                	mov    %edx,%edi
f01112f7:	f3 aa                	rep stos %al,%es:(%edi)
f01112f9:	83 ec 0c             	sub    $0xc,%esp
f01112fc:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111302:	50                   	push   %eax
f0111303:	e8 25 09 ff ff       	call   f0101c2d <execute_command>
f0111308:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f011130b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111311:	bb 9d 8c 12 f0       	mov    $0xf0128c9d,%ebx
f0111316:	ba 0f 00 00 00       	mov    $0xf,%edx
f011131b:	89 c7                	mov    %eax,%edi
f011131d:	89 de                	mov    %ebx,%esi
f011131f:	89 d1                	mov    %edx,%ecx
f0111321:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111323:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111329:	b9 55 00 00 00       	mov    $0x55,%ecx
f011132e:	b0 00                	mov    $0x0,%al
f0111330:	89 d7                	mov    %edx,%edi
f0111332:	f3 aa                	rep stos %al,%es:(%edi)
f0111334:	83 ec 0c             	sub    $0xc,%esp
f0111337:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011133d:	50                   	push   %eax
f011133e:	e8 ea 08 ff ff       	call   f0101c2d <execute_command>
f0111343:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0111346:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011134c:	bb 01 8d 12 f0       	mov    $0xf0128d01,%ebx
f0111351:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111356:	89 c7                	mov    %eax,%edi
f0111358:	89 de                	mov    %ebx,%esi
f011135a:	89 d1                	mov    %edx,%ecx
f011135c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011135e:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111364:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111369:	b0 00                	mov    $0x0,%al
f011136b:	89 d7                	mov    %edx,%edi
f011136d:	f3 aa                	rep stos %al,%es:(%edi)
f011136f:	83 ec 0c             	sub    $0xc,%esp
f0111372:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111378:	50                   	push   %eax
f0111379:	e8 af 08 ff ff       	call   f0101c2d <execute_command>
f011137e:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0111381:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0111388:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011138f:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0111396:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011139d:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01113a4:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01113ab:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01113b2:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01113b9:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01113c0:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01113c7:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01113ce:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01113d5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01113d8:	8a 00                	mov    (%eax),%al
f01113da:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01113e0:	e8 ce be ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01113e5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01113e8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01113eb:	89 d0                	mov    %edx,%eax
f01113ed:	01 c0                	add    %eax,%eax
f01113ef:	01 d0                	add    %edx,%eax
f01113f1:	01 c0                	add    %eax,%eax
f01113f3:	50                   	push   %eax
f01113f4:	68 00 00 40 00       	push   $0x400000
f01113f9:	68 00 00 20 00       	push   $0x200000
f01113fe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111401:	e8 2b 86 ff ff       	call   f0109a31 <copy_paste_chunk>
f0111406:	83 c4 10             	add    $0x10,%esp
f0111409:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011140c:	e8 a2 be ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111411:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111414:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011141b:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011141f:	75 08                	jne    f0111429 <test_copy_paste_chunk+0x92f>
f0111421:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111424:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111427:	74 2b                	je     f0111454 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111429:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011142c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011142f:	83 ec 0c             	sub    $0xc,%esp
f0111432:	50                   	push   %eax
f0111433:	ff 75 80             	pushl  -0x80(%ebp)
f0111436:	68 88 84 12 f0       	push   $0xf0128488
f011143b:	68 75 02 00 00       	push   $0x275
f0111440:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111445:	e8 de ef fe ff       	call   f0100428 <_warn>
f011144a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011144d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111454:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111458:	74 04                	je     f011145e <test_copy_paste_chunk+0x964>
f011145a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011145e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0111465:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f011146c:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011146f:	83 ec 08             	sub    $0x8,%esp
f0111472:	6a 01                	push   $0x1
f0111474:	6a 07                	push   $0x7
f0111476:	6a 07                	push   $0x7
f0111478:	6a 07                	push   $0x7
f011147a:	6a 07                	push   $0x7
f011147c:	6a 01                	push   $0x1
f011147e:	68 00 20 00 00       	push   $0x2000
f0111483:	68 00 00 40 00       	push   $0x400000
f0111488:	68 00 00 20 00       	push   $0x200000
f011148d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111490:	e8 d7 32 00 00       	call   f011476c <CCP>
f0111495:	83 c4 30             	add    $0x30,%esp
f0111498:	83 f8 01             	cmp    $0x1,%eax
f011149b:	74 2b                	je     f01114c8 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011149d:	83 ec 04             	sub    $0x4,%esp
f01114a0:	68 dc 84 12 f0       	push   $0xf01284dc
f01114a5:	68 7e 02 00 00       	push   $0x27e
f01114aa:	68 e6 7b 12 f0       	push   $0xf0127be6
f01114af:	e8 74 ef fe ff       	call   f0100428 <_warn>
f01114b4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01114b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01114be:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01114c5:	00 00 00 
		}
		if (correct) eval += 5 ;
f01114c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01114cc:	74 04                	je     f01114d2 <test_copy_paste_chunk+0x9d8>
f01114ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01114d2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01114d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01114dc:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01114df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01114e2:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01114e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01114e8:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01114eb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01114ee:	8a 00                	mov    (%eax),%al
f01114f0:	3c 61                	cmp    $0x61,%al
f01114f2:	75 69                	jne    f011155d <test_copy_paste_chunk+0xa63>
f01114f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01114f7:	8a 00                	mov    (%eax),%al
f01114f9:	3c 61                	cmp    $0x61,%al
f01114fb:	75 60                	jne    f011155d <test_copy_paste_chunk+0xa63>
f01114fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111500:	8a 00                	mov    (%eax),%al
f0111502:	3c 79                	cmp    $0x79,%al
f0111504:	75 57                	jne    f011155d <test_copy_paste_chunk+0xa63>
f0111506:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111509:	8a 00                	mov    (%eax),%al
f011150b:	3c 62                	cmp    $0x62,%al
f011150d:	75 4e                	jne    f011155d <test_copy_paste_chunk+0xa63>
f011150f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111512:	8a 00                	mov    (%eax),%al
f0111514:	3c 63                	cmp    $0x63,%al
f0111516:	75 45                	jne    f011155d <test_copy_paste_chunk+0xa63>
f0111518:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011151b:	8a 00                	mov    (%eax),%al
f011151d:	3c 7a                	cmp    $0x7a,%al
f011151f:	75 3c                	jne    f011155d <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0111521:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111524:	8a 00                	mov    (%eax),%al
f0111526:	3c 77                	cmp    $0x77,%al
f0111528:	75 33                	jne    f011155d <test_copy_paste_chunk+0xa63>
f011152a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011152d:	8a 00                	mov    (%eax),%al
f011152f:	3c 64                	cmp    $0x64,%al
f0111531:	75 2a                	jne    f011155d <test_copy_paste_chunk+0xa63>
f0111533:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111536:	8a 00                	mov    (%eax),%al
f0111538:	3c 65                	cmp    $0x65,%al
f011153a:	75 21                	jne    f011155d <test_copy_paste_chunk+0xa63>
f011153c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011153f:	8a 00                	mov    (%eax),%al
f0111541:	3c 65                	cmp    $0x65,%al
f0111543:	75 18                	jne    f011155d <test_copy_paste_chunk+0xa63>
f0111545:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111548:	8a 00                	mov    (%eax),%al
f011154a:	3c 66                	cmp    $0x66,%al
f011154c:	75 0f                	jne    f011155d <test_copy_paste_chunk+0xa63>
f011154e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111551:	8a 10                	mov    (%eax),%dl
f0111553:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111559:	38 c2                	cmp    %al,%dl
f011155b:	74 21                	je     f011157e <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011155d:	83 ec 04             	sub    $0x4,%esp
f0111560:	68 dc 83 12 f0       	push   $0xf01283dc
f0111565:	68 8c 02 00 00       	push   $0x28c
f011156a:	68 e6 7b 12 f0       	push   $0xf0127be6
f011156f:	e8 b4 ee fe ff       	call   f0100428 <_warn>
f0111574:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111577:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011157e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111582:	74 04                	je     f0111588 <test_copy_paste_chunk+0xa8e>
f0111584:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111588:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011158f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111592:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111595:	e8 19 bd ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011159a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011159d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01115a0:	89 c2                	mov    %eax,%edx
f01115a2:	01 d2                	add    %edx,%edx
f01115a4:	01 d0                	add    %edx,%eax
f01115a6:	50                   	push   %eax
f01115a7:	68 00 08 20 00       	push   $0x200800
f01115ac:	68 00 08 40 00       	push   $0x400800
f01115b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01115b4:	e8 78 84 ff ff       	call   f0109a31 <copy_paste_chunk>
f01115b9:	83 c4 10             	add    $0x10,%esp
f01115bc:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01115bf:	e8 ef bc ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01115c4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01115c7:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01115cb:	75 08                	jne    f01115d5 <test_copy_paste_chunk+0xadb>
f01115cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01115d0:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01115d3:	74 2b                	je     f0111600 <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01115d5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01115d8:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01115db:	83 ec 0c             	sub    $0xc,%esp
f01115de:	50                   	push   %eax
f01115df:	ff 75 80             	pushl  -0x80(%ebp)
f01115e2:	68 88 84 12 f0       	push   $0xf0128488
f01115e7:	68 9c 02 00 00       	push   $0x29c
f01115ec:	68 e6 7b 12 f0       	push   $0xf0127be6
f01115f1:	e8 32 ee fe ff       	call   f0100428 <_warn>
f01115f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01115f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111600:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111604:	74 04                	je     f011160a <test_copy_paste_chunk+0xb10>
f0111606:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011160a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111611:	83 ec 08             	sub    $0x8,%esp
f0111614:	6a 01                	push   $0x1
f0111616:	6a 07                	push   $0x7
f0111618:	6a 07                	push   $0x7
f011161a:	6a 07                	push   $0x7
f011161c:	6a 07                	push   $0x7
f011161e:	6a 01                	push   $0x1
f0111620:	68 00 20 00 00       	push   $0x2000
f0111625:	68 00 00 20 00       	push   $0x200000
f011162a:	68 00 00 40 00       	push   $0x400000
f011162f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111632:	e8 35 31 00 00       	call   f011476c <CCP>
f0111637:	83 c4 30             	add    $0x30,%esp
f011163a:	83 f8 01             	cmp    $0x1,%eax
f011163d:	74 21                	je     f0111660 <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011163f:	83 ec 04             	sub    $0x4,%esp
f0111642:	68 28 85 12 f0       	push   $0xf0128528
f0111647:	68 a4 02 00 00       	push   $0x2a4
f011164c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111651:	e8 d2 ed fe ff       	call   f0100428 <_warn>
f0111656:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111659:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111660:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111664:	74 04                	je     f011166a <test_copy_paste_chunk+0xb70>
f0111666:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011166a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0111671:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111674:	8a 00                	mov    (%eax),%al
f0111676:	3c 61                	cmp    $0x61,%al
f0111678:	75 69                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f011167a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011167d:	8a 00                	mov    (%eax),%al
f011167f:	3c 61                	cmp    $0x61,%al
f0111681:	75 60                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f0111683:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111686:	8a 00                	mov    (%eax),%al
f0111688:	3c 79                	cmp    $0x79,%al
f011168a:	75 57                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f011168c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011168f:	8a 00                	mov    (%eax),%al
f0111691:	3c 62                	cmp    $0x62,%al
f0111693:	75 4e                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f0111695:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111698:	8a 00                	mov    (%eax),%al
f011169a:	3c 7a                	cmp    $0x7a,%al
f011169c:	75 45                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f011169e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01116a1:	8a 00                	mov    (%eax),%al
f01116a3:	3c 7a                	cmp    $0x7a,%al
f01116a5:	75 3c                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01116a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01116aa:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01116ac:	3c 64                	cmp    $0x64,%al
f01116ae:	75 33                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01116b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01116b3:	8a 00                	mov    (%eax),%al
f01116b5:	3c 64                	cmp    $0x64,%al
f01116b7:	75 2a                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f01116b9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01116bc:	8a 00                	mov    (%eax),%al
f01116be:	3c 65                	cmp    $0x65,%al
f01116c0:	75 21                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f01116c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01116c5:	8a 00                	mov    (%eax),%al
f01116c7:	3c 78                	cmp    $0x78,%al
f01116c9:	75 18                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f01116cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01116ce:	8a 00                	mov    (%eax),%al
f01116d0:	3c 66                	cmp    $0x66,%al
f01116d2:	75 0f                	jne    f01116e3 <test_copy_paste_chunk+0xbe9>
f01116d4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01116d7:	8a 10                	mov    (%eax),%dl
f01116d9:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01116df:	38 c2                	cmp    %al,%dl
f01116e1:	74 21                	je     f0111704 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01116e3:	83 ec 04             	sub    $0x4,%esp
f01116e6:	68 dc 83 12 f0       	push   $0xf01283dc
f01116eb:	68 ad 02 00 00       	push   $0x2ad
f01116f0:	68 e6 7b 12 f0       	push   $0xf0127be6
f01116f5:	e8 2e ed fe ff       	call   f0100428 <_warn>
f01116fa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01116fd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111704:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111708:	74 04                	je     f011170e <test_copy_paste_chunk+0xc14>
f011170a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011170e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0111715:	83 ec 0c             	sub    $0xc,%esp
f0111718:	68 73 85 12 f0       	push   $0xf0128573
f011171d:	e8 79 f7 fe ff       	call   f0100e9b <cprintf>
f0111722:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0111725:	83 ec 0c             	sub    $0xc,%esp
f0111728:	68 84 85 12 f0       	push   $0xf0128584
f011172d:	e8 69 f7 fe ff       	call   f0100e9b <cprintf>
f0111732:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0111735:	83 ec 04             	sub    $0x4,%esp
f0111738:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011173e:	50                   	push   %eax
f011173f:	68 b8 85 12 f0       	push   $0xf01285b8
f0111744:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011174a:	50                   	push   %eax
f011174b:	e8 32 09 01 00       	call   f0122082 <strcconcat>
f0111750:	83 c4 10             	add    $0x10,%esp
f0111753:	83 ec 0c             	sub    $0xc,%esp
f0111756:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011175c:	50                   	push   %eax
f011175d:	e8 cb 04 ff ff       	call   f0101c2d <execute_command>
f0111762:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0111765:	83 ec 04             	sub    $0x4,%esp
f0111768:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011176e:	50                   	push   %eax
f011176f:	68 c2 85 12 f0       	push   $0xf01285c2
f0111774:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011177a:	50                   	push   %eax
f011177b:	e8 02 09 01 00       	call   f0122082 <strcconcat>
f0111780:	83 c4 10             	add    $0x10,%esp
f0111783:	83 ec 0c             	sub    $0xc,%esp
f0111786:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011178c:	50                   	push   %eax
f011178d:	e8 9b 04 ff ff       	call   f0101c2d <execute_command>
f0111792:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0111795:	83 ec 04             	sub    $0x4,%esp
f0111798:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011179e:	50                   	push   %eax
f011179f:	68 cc 85 12 f0       	push   $0xf01285cc
f01117a4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01117aa:	50                   	push   %eax
f01117ab:	e8 d2 08 01 00       	call   f0122082 <strcconcat>
f01117b0:	83 c4 10             	add    $0x10,%esp
f01117b3:	83 ec 0c             	sub    $0xc,%esp
f01117b6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01117bc:	50                   	push   %eax
f01117bd:	e8 6b 04 ff ff       	call   f0101c2d <execute_command>
f01117c2:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01117c5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01117cb:	bb 65 8d 12 f0       	mov    $0xf0128d65,%ebx
f01117d0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01117d5:	89 c7                	mov    %eax,%edi
f01117d7:	89 de                	mov    %ebx,%esi
f01117d9:	89 d1                	mov    %edx,%ecx
f01117db:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117dd:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01117e3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01117e8:	b0 00                	mov    $0x0,%al
f01117ea:	89 d7                	mov    %edx,%edi
f01117ec:	f3 aa                	rep stos %al,%es:(%edi)
f01117ee:	83 ec 0c             	sub    $0xc,%esp
f01117f1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01117f7:	50                   	push   %eax
f01117f8:	e8 30 04 ff ff       	call   f0101c2d <execute_command>
f01117fd:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0111800:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111806:	bb c9 8d 12 f0       	mov    $0xf0128dc9,%ebx
f011180b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111810:	89 c7                	mov    %eax,%edi
f0111812:	89 de                	mov    %ebx,%esi
f0111814:	89 d1                	mov    %edx,%ecx
f0111816:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111818:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011181e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111823:	b0 00                	mov    $0x0,%al
f0111825:	89 d7                	mov    %edx,%edi
f0111827:	f3 aa                	rep stos %al,%es:(%edi)
f0111829:	83 ec 0c             	sub    $0xc,%esp
f011182c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111832:	50                   	push   %eax
f0111833:	e8 f5 03 ff ff       	call   f0101c2d <execute_command>
f0111838:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f011183b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111841:	bb 2d 8e 12 f0       	mov    $0xf0128e2d,%ebx
f0111846:	ba 0f 00 00 00       	mov    $0xf,%edx
f011184b:	89 c7                	mov    %eax,%edi
f011184d:	89 de                	mov    %ebx,%esi
f011184f:	89 d1                	mov    %edx,%ecx
f0111851:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111853:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111859:	b9 55 00 00 00       	mov    $0x55,%ecx
f011185e:	b0 00                	mov    $0x0,%al
f0111860:	89 d7                	mov    %edx,%edi
f0111862:	f3 aa                	rep stos %al,%es:(%edi)
f0111864:	83 ec 0c             	sub    $0xc,%esp
f0111867:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011186d:	50                   	push   %eax
f011186e:	e8 ba 03 ff ff       	call   f0101c2d <execute_command>
f0111873:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111876:	e8 38 ba ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011187b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011187e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111881:	89 d0                	mov    %edx,%eax
f0111883:	01 c0                	add    %eax,%eax
f0111885:	01 d0                	add    %edx,%eax
f0111887:	c1 e0 02             	shl    $0x2,%eax
f011188a:	50                   	push   %eax
f011188b:	68 00 00 90 00       	push   $0x900000
f0111890:	68 00 00 80 00       	push   $0x800000
f0111895:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111898:	e8 94 81 ff ff       	call   f0109a31 <copy_paste_chunk>
f011189d:	83 c4 10             	add    $0x10,%esp
f01118a0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01118a6:	e8 08 ba ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01118ab:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01118ae:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01118b5:	75 0b                	jne    f01118c2 <test_copy_paste_chunk+0xdc8>
f01118b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01118ba:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01118bd:	83 f8 03             	cmp    $0x3,%eax
f01118c0:	74 2e                	je     f01118f0 <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01118c2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01118c5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01118c8:	83 ec 0c             	sub    $0xc,%esp
f01118cb:	50                   	push   %eax
f01118cc:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01118d2:	68 88 84 12 f0       	push   $0xf0128488
f01118d7:	68 cb 02 00 00       	push   $0x2cb
f01118dc:	68 e6 7b 12 f0       	push   $0xf0127be6
f01118e1:	e8 42 eb fe ff       	call   f0100428 <_warn>
f01118e6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01118e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01118f0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01118f4:	74 04                	je     f01118fa <test_copy_paste_chunk+0xe00>
f01118f6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01118fa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0111901:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111908:	83 ec 08             	sub    $0x8,%esp
f011190b:	6a 01                	push   $0x1
f011190d:	6a 07                	push   $0x7
f011190f:	6a 07                	push   $0x7
f0111911:	6a 07                	push   $0x7
f0111913:	6a 07                	push   $0x7
f0111915:	6a 01                	push   $0x1
f0111917:	68 00 30 00 00       	push   $0x3000
f011191c:	68 00 00 90 00       	push   $0x900000
f0111921:	68 00 00 80 00       	push   $0x800000
f0111926:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111929:	e8 3e 2e 00 00       	call   f011476c <CCP>
f011192e:	83 c4 30             	add    $0x30,%esp
f0111931:	83 f8 01             	cmp    $0x1,%eax
f0111934:	74 28                	je     f011195e <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0111936:	83 ec 04             	sub    $0x4,%esp
f0111939:	68 28 85 12 f0       	push   $0xf0128528
f011193e:	68 d4 02 00 00       	push   $0x2d4
f0111943:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111948:	e8 db ea fe ff       	call   f0100428 <_warn>
f011194d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111950:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0111957:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f011195e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111962:	74 04                	je     f0111968 <test_copy_paste_chunk+0xe6e>
f0111964:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111968:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011196f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111973:	0f 84 9e 00 00 00    	je     f0111a17 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0111979:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0111980:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0111987:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011198e:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0111995:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011199c:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01119a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01119a6:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01119a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01119ac:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01119af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01119b2:	8a 00                	mov    (%eax),%al
f01119b4:	3c 61                	cmp    $0x61,%al
f01119b6:	75 2d                	jne    f01119e5 <test_copy_paste_chunk+0xeeb>
f01119b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01119bb:	8a 00                	mov    (%eax),%al
f01119bd:	3c 61                	cmp    $0x61,%al
f01119bf:	75 24                	jne    f01119e5 <test_copy_paste_chunk+0xeeb>
f01119c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01119c4:	8a 00                	mov    (%eax),%al
f01119c6:	3c 79                	cmp    $0x79,%al
f01119c8:	75 1b                	jne    f01119e5 <test_copy_paste_chunk+0xeeb>
f01119ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01119cd:	8a 00                	mov    (%eax),%al
f01119cf:	3c 62                	cmp    $0x62,%al
f01119d1:	75 12                	jne    f01119e5 <test_copy_paste_chunk+0xeeb>
f01119d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01119d6:	8a 00                	mov    (%eax),%al
f01119d8:	3c 63                	cmp    $0x63,%al
f01119da:	75 09                	jne    f01119e5 <test_copy_paste_chunk+0xeeb>
f01119dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01119df:	8a 00                	mov    (%eax),%al
f01119e1:	3c 7a                	cmp    $0x7a,%al
f01119e3:	74 21                	je     f0111a06 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01119e5:	83 ec 04             	sub    $0x4,%esp
f01119e8:	68 dc 83 12 f0       	push   $0xf01283dc
f01119ed:	68 e6 02 00 00       	push   $0x2e6
f01119f2:	68 e6 7b 12 f0       	push   $0xf0127be6
f01119f7:	e8 2c ea fe ff       	call   f0100428 <_warn>
f01119fc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01119ff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0111a06:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111a0a:	74 04                	je     f0111a10 <test_copy_paste_chunk+0xf16>
f0111a0c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0111a10:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111a17:	e8 97 b8 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111a1c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0111a1f:	6a 00                	push   $0x0
f0111a21:	6a 02                	push   $0x2
f0111a23:	68 00 10 90 00       	push   $0x901000
f0111a28:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a2b:	e8 c9 2b 00 00       	call   f01145f9 <SB>
f0111a30:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0111a33:	6a 00                	push   $0x0
f0111a35:	6a 02                	push   $0x2
f0111a37:	68 00 20 90 00       	push   $0x902000
f0111a3c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a3f:	e8 b5 2b 00 00       	call   f01145f9 <SB>
f0111a44:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0111a47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111a4a:	c1 e0 03             	shl    $0x3,%eax
f0111a4d:	50                   	push   %eax
f0111a4e:	68 00 f0 bf 00       	push   $0xbff000
f0111a53:	68 00 10 90 00       	push   $0x901000
f0111a58:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a5b:	e8 d1 7f ff ff       	call   f0109a31 <copy_paste_chunk>
f0111a60:	83 c4 10             	add    $0x10,%esp
f0111a63:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111a69:	e8 45 b8 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111a6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0111a71:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0111a78:	75 0b                	jne    f0111a85 <test_copy_paste_chunk+0xf8b>
f0111a7a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111a7d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111a80:	83 f8 03             	cmp    $0x3,%eax
f0111a83:	74 2e                	je     f0111ab3 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111a85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111a88:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111a8b:	83 ec 0c             	sub    $0xc,%esp
f0111a8e:	50                   	push   %eax
f0111a8f:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0111a95:	68 88 84 12 f0       	push   $0xf0128488
f0111a9a:	68 f6 02 00 00       	push   $0x2f6
f0111a9f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111aa4:	e8 7f e9 fe ff       	call   f0100428 <_warn>
f0111aa9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111aac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111ab3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ab7:	74 04                	je     f0111abd <test_copy_paste_chunk+0xfc3>
f0111ab9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111abd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0111ac4:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0111acb:	83 ec 08             	sub    $0x8,%esp
f0111ace:	6a 01                	push   $0x1
f0111ad0:	6a 07                	push   $0x7
f0111ad2:	6a 03                	push   $0x3
f0111ad4:	6a 07                	push   $0x7
f0111ad6:	6a 03                	push   $0x3
f0111ad8:	6a 01                	push   $0x1
f0111ada:	68 00 20 00 00       	push   $0x2000
f0111adf:	68 00 f0 bf 00       	push   $0xbff000
f0111ae4:	68 00 10 90 00       	push   $0x901000
f0111ae9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111aec:	e8 7b 2c 00 00       	call   f011476c <CCP>
f0111af1:	83 c4 30             	add    $0x30,%esp
f0111af4:	83 f8 01             	cmp    $0x1,%eax
f0111af7:	74 28                	je     f0111b21 <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0111af9:	83 ec 04             	sub    $0x4,%esp
f0111afc:	68 28 85 12 f0       	push   $0xf0128528
f0111b01:	68 ff 02 00 00       	push   $0x2ff
f0111b06:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111b0b:	e8 18 e9 fe ff       	call   f0100428 <_warn>
f0111b10:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111b13:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0111b1a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0111b21:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b25:	74 04                	je     f0111b2b <test_copy_paste_chunk+0x1031>
f0111b27:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111b2b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0111b32:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111b36:	74 72                	je     f0111baa <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0111b38:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0111b3f:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0111b46:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0111b4d:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0111b54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111b57:	8a 00                	mov    (%eax),%al
f0111b59:	3c 62                	cmp    $0x62,%al
f0111b5b:	75 1b                	jne    f0111b78 <test_copy_paste_chunk+0x107e>
f0111b5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b60:	8a 00                	mov    (%eax),%al
f0111b62:	3c 62                	cmp    $0x62,%al
f0111b64:	75 12                	jne    f0111b78 <test_copy_paste_chunk+0x107e>
f0111b66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111b69:	8a 00                	mov    (%eax),%al
f0111b6b:	3c 7a                	cmp    $0x7a,%al
f0111b6d:	75 09                	jne    f0111b78 <test_copy_paste_chunk+0x107e>
f0111b6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111b72:	8a 00                	mov    (%eax),%al
f0111b74:	3c 7a                	cmp    $0x7a,%al
f0111b76:	74 21                	je     f0111b99 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111b78:	83 ec 04             	sub    $0x4,%esp
f0111b7b:	68 dc 83 12 f0       	push   $0xf01283dc
f0111b80:	68 0b 03 00 00       	push   $0x30b
f0111b85:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111b8a:	e8 99 e8 fe ff       	call   f0100428 <_warn>
f0111b8f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111b92:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111b99:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b9d:	74 04                	je     f0111ba3 <test_copy_paste_chunk+0x10a9>
f0111b9f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111ba3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0111baa:	83 ec 0c             	sub    $0xc,%esp
f0111bad:	68 d6 85 12 f0       	push   $0xf01285d6
f0111bb2:	e8 e4 f2 fe ff       	call   f0100e9b <cprintf>
f0111bb7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0111bba:	83 ec 08             	sub    $0x8,%esp
f0111bbd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111bc0:	68 e8 85 12 f0       	push   $0xf01285e8
f0111bc5:	e8 d1 f2 fe ff       	call   f0100e9b <cprintf>
f0111bca:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0111bcd:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0111bd1:	75 10                	jne    f0111be3 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0111bd3:	83 ec 0c             	sub    $0xc,%esp
f0111bd6:	68 1c 86 12 f0       	push   $0xf012861c
f0111bdb:	e8 bb f2 fe ff       	call   f0100e9b <cprintf>
f0111be0:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0111be3:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0111be8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111beb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111bee:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0111bf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111bf6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111bf9:	5b                   	pop    %ebx
f0111bfa:	5e                   	pop    %esi
f0111bfb:	5f                   	pop    %edi
f0111bfc:	5d                   	pop    %ebp
f0111bfd:	c3                   	ret    

f0111bfe <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0111bfe:	55                   	push   %ebp
f0111bff:	89 e5                	mov    %esp,%ebp
f0111c01:	57                   	push   %edi
f0111c02:	56                   	push   %esi
f0111c03:	53                   	push   %ebx
f0111c04:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111c0a:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0111c10:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f0111c15:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c1a:	89 c7                	mov    %eax,%edi
f0111c1c:	89 de                	mov    %ebx,%esi
f0111c1e:	89 d1                	mov    %edx,%ecx
f0111c20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c22:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0111c28:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111c2d:	b0 00                	mov    $0x0,%al
f0111c2f:	89 d7                	mov    %edx,%edi
f0111c31:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111c33:	6a 00                	push   $0x0
f0111c35:	6a 0a                	push   $0xa
f0111c37:	6a 14                	push   $0x14
f0111c39:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0111c3f:	50                   	push   %eax
f0111c40:	e8 9e 7f ff ff       	call   f0109be3 <env_create>
f0111c45:	83 c4 10             	add    $0x10,%esp
f0111c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111c4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111c4e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0111c54:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0111c57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111c5a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0111c60:	89 45 80             	mov    %eax,-0x80(%ebp)
f0111c63:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111c66:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0111c69:	83 ec 0c             	sub    $0xc,%esp
f0111c6c:	ff 75 cc             	pushl  -0x34(%ebp)
f0111c6f:	e8 c4 2a 00 00       	call   f0114738 <ClearUserSpace>
f0111c74:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0111c77:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111c7e:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0111c85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0111c8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0111c90:	83 ec 0c             	sub    $0xc,%esp
f0111c93:	68 94 8e 12 f0       	push   $0xf0128e94
f0111c98:	e8 fe f1 fe ff       	call   f0100e9b <cprintf>
f0111c9d:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0111ca0:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0111ca7:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0111cae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cb1:	8a 00                	mov    (%eax),%al
f0111cb3:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0111cb9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cbc:	8a 00                	mov    (%eax),%al
f0111cbe:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111cc4:	e8 ea b5 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111cc9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0111ccc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111ccf:	89 d0                	mov    %edx,%eax
f0111cd1:	01 c0                	add    %eax,%eax
f0111cd3:	01 d0                	add    %edx,%eax
f0111cd5:	01 c0                	add    %eax,%eax
f0111cd7:	83 ec 0c             	sub    $0xc,%esp
f0111cda:	6a 02                	push   $0x2
f0111cdc:	50                   	push   %eax
f0111cdd:	68 00 40 10 f0       	push   $0xf0104000
f0111ce2:	68 00 00 10 f0       	push   $0xf0100000
f0111ce7:	ff 75 cc             	pushl  -0x34(%ebp)
f0111cea:	e8 5c 7d ff ff       	call   f0109a4b <share_chunk>
f0111cef:	83 c4 20             	add    $0x20,%esp
f0111cf2:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111cf5:	e8 b9 b5 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111cfa:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0111cfd:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0111d01:	75 08                	jne    f0111d0b <test_share_chunk+0x10d>
f0111d03:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111d06:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111d09:	74 28                	je     f0111d33 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0111d0b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111d0e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0111d11:	83 ec 0c             	sub    $0xc,%esp
f0111d14:	50                   	push   %eax
f0111d15:	ff 75 b0             	pushl  -0x50(%ebp)
f0111d18:	68 c0 8e 12 f0       	push   $0xf0128ec0
f0111d1d:	68 47 03 00 00       	push   $0x347
f0111d22:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111d27:	e8 fc e6 fe ff       	call   f0100428 <_warn>
f0111d2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111d2f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0111d33:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111d37:	74 04                	je     f0111d3d <test_share_chunk+0x13f>
f0111d39:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111d3d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0111d41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111d44:	c1 e0 03             	shl    $0x3,%eax
f0111d47:	83 ec 08             	sub    $0x8,%esp
f0111d4a:	68 fd 00 00 00       	push   $0xfd
f0111d4f:	6a 07                	push   $0x7
f0111d51:	6a 03                	push   $0x3
f0111d53:	6a 07                	push   $0x7
f0111d55:	6a 03                	push   $0x3
f0111d57:	6a 01                	push   $0x1
f0111d59:	50                   	push   %eax
f0111d5a:	68 00 40 10 f0       	push   $0xf0104000
f0111d5f:	68 00 00 10 f0       	push   $0xf0100000
f0111d64:	ff 75 cc             	pushl  -0x34(%ebp)
f0111d67:	e8 00 2a 00 00       	call   f011476c <CCP>
f0111d6c:	83 c4 30             	add    $0x30,%esp
f0111d6f:	85 c0                	test   %eax,%eax
f0111d71:	75 1e                	jne    f0111d91 <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0111d73:	83 ec 04             	sub    $0x4,%esp
f0111d76:	68 1c 8f 12 f0       	push   $0xf0128f1c
f0111d7b:	68 4f 03 00 00       	push   $0x34f
f0111d80:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111d85:	e8 9e e6 fe ff       	call   f0100428 <_warn>
f0111d8a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111d8d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0111d91:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111d95:	74 04                	je     f0111d9b <test_share_chunk+0x19d>
f0111d97:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0111d9b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d9e:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0111da1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111da4:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0111da7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111daa:	8a 00                	mov    (%eax),%al
f0111dac:	3c 41                	cmp    $0x41,%al
f0111dae:	75 09                	jne    f0111db9 <test_share_chunk+0x1bb>
f0111db0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111db3:	8a 00                	mov    (%eax),%al
f0111db5:	3c 42                	cmp    $0x42,%al
f0111db7:	74 1e                	je     f0111dd7 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0111db9:	83 ec 04             	sub    $0x4,%esp
f0111dbc:	68 64 8f 12 f0       	push   $0xf0128f64
f0111dc1:	68 59 03 00 00       	push   $0x359
f0111dc6:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111dcb:	e8 58 e6 fe ff       	call   f0100428 <_warn>
f0111dd0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111dd3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0111dd7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111ddb:	74 04                	je     f0111de1 <test_share_chunk+0x1e3>
f0111ddd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111de1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0111de5:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0111deb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111dee:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0111df0:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0111df6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111df9:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0111dfb:	83 ec 0c             	sub    $0xc,%esp
f0111dfe:	68 99 8f 12 f0       	push   $0xf0128f99
f0111e03:	e8 93 f0 fe ff       	call   f0100e9b <cprintf>
f0111e08:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0111e0b:	83 ec 0c             	sub    $0xc,%esp
f0111e0e:	68 a8 8f 12 f0       	push   $0xf0128fa8
f0111e13:	e8 83 f0 fe ff       	call   f0100e9b <cprintf>
f0111e18:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111e1b:	e8 93 b4 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111e20:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0111e23:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e26:	c1 e0 05             	shl    $0x5,%eax
f0111e29:	83 ec 0c             	sub    $0xc,%esp
f0111e2c:	68 02 0e 00 00       	push   $0xe02
f0111e31:	50                   	push   %eax
f0111e32:	68 00 00 00 40       	push   $0x40000000
f0111e37:	68 00 00 00 f0       	push   $0xf0000000
f0111e3c:	ff 75 cc             	pushl  -0x34(%ebp)
f0111e3f:	e8 07 7c ff ff       	call   f0109a4b <share_chunk>
f0111e44:	83 c4 20             	add    $0x20,%esp
f0111e47:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111e4a:	e8 64 b4 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0111e4f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0111e52:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0111e56:	75 1f                	jne    f0111e77 <test_share_chunk+0x279>
f0111e58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111e5b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0111e5e:	89 c1                	mov    %eax,%ecx
f0111e60:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e63:	c1 e0 05             	shl    $0x5,%eax
f0111e66:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0111e69:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0111e70:	99                   	cltd   
f0111e71:	f7 fb                	idiv   %ebx
f0111e73:	39 c1                	cmp    %eax,%ecx
f0111e75:	74 28                	je     f0111e9f <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111e77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111e7a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0111e7d:	83 ec 0c             	sub    $0xc,%esp
f0111e80:	50                   	push   %eax
f0111e81:	ff 75 a8             	pushl  -0x58(%ebp)
f0111e84:	68 e4 8f 12 f0       	push   $0xf0128fe4
f0111e89:	68 71 03 00 00       	push   $0x371
f0111e8e:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111e93:	e8 90 e5 fe ff       	call   f0100428 <_warn>
f0111e98:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111e9b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0111e9f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111ea3:	74 04                	je     f0111ea9 <test_share_chunk+0x2ab>
f0111ea5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111ea9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0111ead:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0111eb4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111eb7:	c1 e0 05             	shl    $0x5,%eax
f0111eba:	83 ec 08             	sub    $0x8,%esp
f0111ebd:	6a 02                	push   $0x2
f0111ebf:	6a 07                	push   $0x7
f0111ec1:	6a 03                	push   $0x3
f0111ec3:	68 07 0e 00 00       	push   $0xe07
f0111ec8:	68 03 0e 00 00       	push   $0xe03
f0111ecd:	6a ff                	push   $0xffffffff
f0111ecf:	50                   	push   %eax
f0111ed0:	68 00 00 00 40       	push   $0x40000000
f0111ed5:	68 00 00 00 f0       	push   $0xf0000000
f0111eda:	ff 75 cc             	pushl  -0x34(%ebp)
f0111edd:	e8 8a 28 00 00       	call   f011476c <CCP>
f0111ee2:	83 c4 30             	add    $0x30,%esp
f0111ee5:	85 c0                	test   %eax,%eax
f0111ee7:	75 25                	jne    f0111f0e <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0111ee9:	83 ec 04             	sub    $0x4,%esp
f0111eec:	68 1c 8f 12 f0       	push   $0xf0128f1c
f0111ef1:	68 7a 03 00 00       	push   $0x37a
f0111ef6:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111efb:	e8 28 e5 fe ff       	call   f0100428 <_warn>
f0111f00:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f03:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0111f07:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0111f0e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111f11:	89 d0                	mov    %edx,%eax
f0111f13:	01 c0                	add    %eax,%eax
f0111f15:	01 d0                	add    %edx,%eax
f0111f17:	c1 e0 02             	shl    $0x2,%eax
f0111f1a:	83 ec 08             	sub    $0x8,%esp
f0111f1d:	6a 02                	push   $0x2
f0111f1f:	6a 07                	push   $0x7
f0111f21:	6a 03                	push   $0x3
f0111f23:	68 07 0e 00 00       	push   $0xe07
f0111f28:	68 03 0e 00 00       	push   $0xe03
f0111f2d:	6a 02                	push   $0x2
f0111f2f:	50                   	push   %eax
f0111f30:	68 00 00 00 40       	push   $0x40000000
f0111f35:	68 00 00 00 f0       	push   $0xf0000000
f0111f3a:	ff 75 cc             	pushl  -0x34(%ebp)
f0111f3d:	e8 2a 28 00 00       	call   f011476c <CCP>
f0111f42:	83 c4 30             	add    $0x30,%esp
f0111f45:	85 c0                	test   %eax,%eax
f0111f47:	75 1e                	jne    f0111f67 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0111f49:	83 ec 04             	sub    $0x4,%esp
f0111f4c:	68 1c 8f 12 f0       	push   $0xf0128f1c
f0111f51:	68 81 03 00 00       	push   $0x381
f0111f56:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111f5b:	e8 c8 e4 fe ff       	call   f0100428 <_warn>
f0111f60:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f63:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0111f67:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111f6b:	74 04                	je     f0111f71 <test_share_chunk+0x373>
f0111f6d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111f71:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0111f75:	b8 ec 67 45 f0       	mov    $0xf04567ec,%eax
f0111f7a:	05 00 00 00 10       	add    $0x10000000,%eax
f0111f7f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0111f82:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111f85:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0111f8a:	83 ec 08             	sub    $0x8,%esp
f0111f8d:	6a 02                	push   $0x2
f0111f8f:	6a 07                	push   $0x7
f0111f91:	6a 03                	push   $0x3
f0111f93:	68 07 0e 00 00       	push   $0xe07
f0111f98:	68 03 0e 00 00       	push   $0xe03
f0111f9d:	6a 02                	push   $0x2
f0111f9f:	50                   	push   %eax
f0111fa0:	68 00 00 0a 40       	push   $0x400a0000
f0111fa5:	68 00 00 0a f0       	push   $0xf00a0000
f0111faa:	ff 75 cc             	pushl  -0x34(%ebp)
f0111fad:	e8 ba 27 00 00       	call   f011476c <CCP>
f0111fb2:	83 c4 30             	add    $0x30,%esp
f0111fb5:	85 c0                	test   %eax,%eax
f0111fb7:	75 1e                	jne    f0111fd7 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0111fb9:	83 ec 04             	sub    $0x4,%esp
f0111fbc:	68 1c 8f 12 f0       	push   $0xf0128f1c
f0111fc1:	68 8b 03 00 00       	push   $0x38b
f0111fc6:	68 e6 7b 12 f0       	push   $0xf0127be6
f0111fcb:	e8 58 e4 fe ff       	call   f0100428 <_warn>
f0111fd0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111fd3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0111fd7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0111fdb:	74 04                	je     f0111fe1 <test_share_chunk+0x3e3>
f0111fdd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111fe1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0111fe5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111fe9:	0f 84 a4 00 00 00    	je     f0112093 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0111fef:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0111ff6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ff9:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0111ffc:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112003:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112006:	8a 00                	mov    (%eax),%al
f0112008:	3c 41                	cmp    $0x41,%al
f011200a:	75 09                	jne    f0112015 <test_share_chunk+0x417>
f011200c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011200f:	8a 00                	mov    (%eax),%al
f0112011:	3c 41                	cmp    $0x41,%al
f0112013:	74 1e                	je     f0112033 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112015:	83 ec 04             	sub    $0x4,%esp
f0112018:	68 64 8f 12 f0       	push   $0xf0128f64
f011201d:	68 98 03 00 00       	push   $0x398
f0112022:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112027:	e8 fc e3 fe ff       	call   f0100428 <_warn>
f011202c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011202f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112033:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112037:	74 04                	je     f011203d <test_share_chunk+0x43f>
f0112039:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011203d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112041:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0112048:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011204b:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011204e:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112055:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112058:	8a 00                	mov    (%eax),%al
f011205a:	3c 43                	cmp    $0x43,%al
f011205c:	75 09                	jne    f0112067 <test_share_chunk+0x469>
f011205e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112061:	8a 00                	mov    (%eax),%al
f0112063:	3c 43                	cmp    $0x43,%al
f0112065:	74 1e                	je     f0112085 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112067:	83 ec 04             	sub    $0x4,%esp
f011206a:	68 64 8f 12 f0       	push   $0xf0128f64
f011206f:	68 a3 03 00 00       	push   $0x3a3
f0112074:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112079:	e8 aa e3 fe ff       	call   f0100428 <_warn>
f011207e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112081:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112085:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112089:	74 04                	je     f011208f <test_share_chunk+0x491>
f011208b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011208f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112093:	83 ec 0c             	sub    $0xc,%esp
f0112096:	68 73 85 12 f0       	push   $0xf0128573
f011209b:	e8 fb ed fe ff       	call   f0100e9b <cprintf>
f01120a0:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01120a3:	83 ec 0c             	sub    $0xc,%esp
f01120a6:	68 34 90 12 f0       	push   $0xf0129034
f01120ab:	e8 eb ed fe ff       	call   f0100e9b <cprintf>
f01120b0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01120b3:	e8 fb b1 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01120b8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01120bb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01120be:	89 d0                	mov    %edx,%eax
f01120c0:	c1 e0 03             	shl    $0x3,%eax
f01120c3:	01 d0                	add    %edx,%eax
f01120c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01120cc:	01 d0                	add    %edx,%eax
f01120ce:	c1 e0 03             	shl    $0x3,%eax
f01120d1:	83 ec 0c             	sub    $0xc,%esp
f01120d4:	6a 06                	push   $0x6
f01120d6:	50                   	push   %eax
f01120d7:	6a 00                	push   $0x0
f01120d9:	68 00 00 00 40       	push   $0x40000000
f01120de:	ff 75 cc             	pushl  -0x34(%ebp)
f01120e1:	e8 65 79 ff ff       	call   f0109a4b <share_chunk>
f01120e6:	83 c4 20             	add    $0x20,%esp
f01120e9:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01120ec:	e8 c2 b1 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01120f1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01120f4:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01120f8:	75 0b                	jne    f0112105 <test_share_chunk+0x507>
f01120fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01120fd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112100:	83 f8 01             	cmp    $0x1,%eax
f0112103:	74 28                	je     f011212d <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112105:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112108:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011210b:	83 ec 0c             	sub    $0xc,%esp
f011210e:	50                   	push   %eax
f011210f:	ff 75 a0             	pushl  -0x60(%ebp)
f0112112:	68 e4 8f 12 f0       	push   $0xf0128fe4
f0112117:	68 b9 03 00 00       	push   $0x3b9
f011211c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112121:	e8 02 e3 fe ff       	call   f0100428 <_warn>
f0112126:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112129:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011212d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112131:	74 04                	je     f0112137 <test_share_chunk+0x539>
f0112133:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112137:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011213b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112142:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112145:	05 00 80 02 00       	add    $0x28000,%eax
f011214a:	c1 e0 02             	shl    $0x2,%eax
f011214d:	83 ec 08             	sub    $0x8,%esp
f0112150:	6a 02                	push   $0x2
f0112152:	6a 07                	push   $0x7
f0112154:	6a 03                	push   $0x3
f0112156:	6a 07                	push   $0x7
f0112158:	6a 07                	push   $0x7
f011215a:	6a ff                	push   $0xffffffff
f011215c:	50                   	push   %eax
f011215d:	6a 00                	push   $0x0
f011215f:	68 00 00 00 40       	push   $0x40000000
f0112164:	ff 75 cc             	pushl  -0x34(%ebp)
f0112167:	e8 00 26 00 00       	call   f011476c <CCP>
f011216c:	83 c4 30             	add    $0x30,%esp
f011216f:	85 c0                	test   %eax,%eax
f0112171:	75 25                	jne    f0112198 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112173:	83 ec 04             	sub    $0x4,%esp
f0112176:	68 1c 8f 12 f0       	push   $0xf0128f1c
f011217b:	68 c2 03 00 00       	push   $0x3c2
f0112180:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112185:	e8 9e e2 fe ff       	call   f0100428 <_warn>
f011218a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011218d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112191:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112198:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011219b:	89 d0                	mov    %edx,%eax
f011219d:	01 c0                	add    %eax,%eax
f011219f:	01 d0                	add    %edx,%eax
f01121a1:	c1 e0 02             	shl    $0x2,%eax
f01121a4:	83 ec 08             	sub    $0x8,%esp
f01121a7:	6a 02                	push   $0x2
f01121a9:	6a 07                	push   $0x7
f01121ab:	6a 03                	push   $0x3
f01121ad:	6a 07                	push   $0x7
f01121af:	6a 07                	push   $0x7
f01121b1:	6a 03                	push   $0x3
f01121b3:	50                   	push   %eax
f01121b4:	6a 00                	push   $0x0
f01121b6:	68 00 00 00 40       	push   $0x40000000
f01121bb:	ff 75 cc             	pushl  -0x34(%ebp)
f01121be:	e8 a9 25 00 00       	call   f011476c <CCP>
f01121c3:	83 c4 30             	add    $0x30,%esp
f01121c6:	85 c0                	test   %eax,%eax
f01121c8:	75 1e                	jne    f01121e8 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01121ca:	83 ec 04             	sub    $0x4,%esp
f01121cd:	68 1c 8f 12 f0       	push   $0xf0128f1c
f01121d2:	68 c9 03 00 00       	push   $0x3c9
f01121d7:	68 e6 7b 12 f0       	push   $0xf0127be6
f01121dc:	e8 47 e2 fe ff       	call   f0100428 <_warn>
f01121e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01121e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01121e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01121ec:	74 04                	je     f01121f2 <test_share_chunk+0x5f4>
f01121ee:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01121f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01121f6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01121f9:	89 d0                	mov    %edx,%eax
f01121fb:	01 c0                	add    %eax,%eax
f01121fd:	01 d0                	add    %edx,%eax
f01121ff:	c1 e0 02             	shl    $0x2,%eax
f0112202:	f7 d8                	neg    %eax
f0112204:	05 00 00 0a 00       	add    $0xa0000,%eax
f0112209:	83 ec 08             	sub    $0x8,%esp
f011220c:	6a 02                	push   $0x2
f011220e:	6a 07                	push   $0x7
f0112210:	6a 03                	push   $0x3
f0112212:	6a 07                	push   $0x7
f0112214:	6a 07                	push   $0x7
f0112216:	6a 02                	push   $0x2
f0112218:	50                   	push   %eax
f0112219:	68 00 30 00 00       	push   $0x3000
f011221e:	68 00 30 00 40       	push   $0x40003000
f0112223:	ff 75 cc             	pushl  -0x34(%ebp)
f0112226:	e8 41 25 00 00       	call   f011476c <CCP>
f011222b:	83 c4 30             	add    $0x30,%esp
f011222e:	85 c0                	test   %eax,%eax
f0112230:	75 1e                	jne    f0112250 <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112232:	83 ec 04             	sub    $0x4,%esp
f0112235:	68 1c 8f 12 f0       	push   $0xf0128f1c
f011223a:	68 d1 03 00 00       	push   $0x3d1
f011223f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112244:	e8 df e1 fe ff       	call   f0100428 <_warn>
f0112249:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011224c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112250:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112254:	74 04                	je     f011225a <test_share_chunk+0x65c>
f0112256:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011225a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011225e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112261:	c1 e0 02             	shl    $0x2,%eax
f0112264:	83 ec 08             	sub    $0x8,%esp
f0112267:	6a 02                	push   $0x2
f0112269:	6a 07                	push   $0x7
f011226b:	6a 03                	push   $0x3
f011226d:	6a 07                	push   $0x7
f011226f:	6a 07                	push   $0x7
f0112271:	6a 03                	push   $0x3
f0112273:	50                   	push   %eax
f0112274:	68 00 00 0a 00       	push   $0xa0000
f0112279:	68 00 00 0a 40       	push   $0x400a0000
f011227e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112281:	e8 e6 24 00 00       	call   f011476c <CCP>
f0112286:	83 c4 30             	add    $0x30,%esp
f0112289:	85 c0                	test   %eax,%eax
f011228b:	75 1e                	jne    f01122ab <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011228d:	83 ec 04             	sub    $0x4,%esp
f0112290:	68 1c 8f 12 f0       	push   $0xf0128f1c
f0112295:	68 d9 03 00 00       	push   $0x3d9
f011229a:	68 e6 7b 12 f0       	push   $0xf0127be6
f011229f:	e8 84 e1 fe ff       	call   f0100428 <_warn>
f01122a4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01122a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01122ab:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01122af:	74 04                	je     f01122b5 <test_share_chunk+0x6b7>
f01122b1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01122b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01122b9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01122bd:	0f 84 92 00 00 00    	je     f0112355 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f01122c3:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01122ca:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01122d1:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01122d8:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01122df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01122e2:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01122e5:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01122ec:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01122f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01122f6:	8a 00                	mov    (%eax),%al
f01122f8:	3c 41                	cmp    $0x41,%al
f01122fa:	75 2d                	jne    f0112329 <test_share_chunk+0x72b>
f01122fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01122ff:	8a 00                	mov    (%eax),%al
f0112301:	3c 41                	cmp    $0x41,%al
f0112303:	75 24                	jne    f0112329 <test_share_chunk+0x72b>
f0112305:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112308:	8a 00                	mov    (%eax),%al
f011230a:	3c 41                	cmp    $0x41,%al
f011230c:	75 1b                	jne    f0112329 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011230e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112311:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112313:	3c 44                	cmp    $0x44,%al
f0112315:	75 12                	jne    f0112329 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112317:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011231a:	8a 00                	mov    (%eax),%al
f011231c:	3c 44                	cmp    $0x44,%al
f011231e:	75 09                	jne    f0112329 <test_share_chunk+0x72b>
f0112320:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112323:	8a 00                	mov    (%eax),%al
f0112325:	3c 44                	cmp    $0x44,%al
f0112327:	74 1e                	je     f0112347 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112329:	83 ec 04             	sub    $0x4,%esp
f011232c:	68 64 8f 12 f0       	push   $0xf0128f64
f0112331:	68 eb 03 00 00       	push   $0x3eb
f0112336:	68 e6 7b 12 f0       	push   $0xf0127be6
f011233b:	e8 e8 e0 fe ff       	call   f0100428 <_warn>
f0112340:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112343:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112347:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011234b:	74 04                	je     f0112351 <test_share_chunk+0x753>
f011234d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112351:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112355:	83 ec 0c             	sub    $0xc,%esp
f0112358:	68 d6 85 12 f0       	push   $0xf01285d6
f011235d:	e8 39 eb fe ff       	call   f0100e9b <cprintf>
f0112362:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0112365:	83 ec 0c             	sub    $0xc,%esp
f0112368:	68 70 90 12 f0       	push   $0xf0129070
f011236d:	e8 29 eb fe ff       	call   f0100e9b <cprintf>
f0112372:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112375:	e8 39 af ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011237a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011237d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112380:	89 d0                	mov    %edx,%eax
f0112382:	01 c0                	add    %eax,%eax
f0112384:	01 d0                	add    %edx,%eax
f0112386:	01 c0                	add    %eax,%eax
f0112388:	01 d0                	add    %edx,%eax
f011238a:	83 ec 0c             	sub    $0xc,%esp
f011238d:	6a 04                	push   $0x4
f011238f:	50                   	push   %eax
f0112390:	68 00 fc 3f 00       	push   $0x3ffc00
f0112395:	68 00 fc 09 00       	push   $0x9fc00
f011239a:	ff 75 cc             	pushl  -0x34(%ebp)
f011239d:	e8 a9 76 ff ff       	call   f0109a4b <share_chunk>
f01123a2:	83 c4 20             	add    $0x20,%esp
f01123a5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01123a8:	e8 06 af ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01123ad:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01123b0:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01123b4:	75 0b                	jne    f01123c1 <test_share_chunk+0x7c3>
f01123b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01123b9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01123bc:	83 f8 01             	cmp    $0x1,%eax
f01123bf:	74 28                	je     f01123e9 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01123c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01123c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01123c7:	83 ec 0c             	sub    $0xc,%esp
f01123ca:	50                   	push   %eax
f01123cb:	ff 75 8c             	pushl  -0x74(%ebp)
f01123ce:	68 e4 8f 12 f0       	push   $0xf0128fe4
f01123d3:	68 01 04 00 00       	push   $0x401
f01123d8:	68 e6 7b 12 f0       	push   $0xf0127be6
f01123dd:	e8 46 e0 fe ff       	call   f0100428 <_warn>
f01123e2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01123e5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01123e9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01123ed:	74 04                	je     f01123f3 <test_share_chunk+0x7f5>
f01123ef:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01123f3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01123f7:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01123fe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112401:	89 d0                	mov    %edx,%eax
f0112403:	01 c0                	add    %eax,%eax
f0112405:	01 d0                	add    %edx,%eax
f0112407:	c1 e0 02             	shl    $0x2,%eax
f011240a:	83 ec 08             	sub    $0x8,%esp
f011240d:	6a 02                	push   $0x2
f011240f:	6a 07                	push   $0x7
f0112411:	6a 07                	push   $0x7
f0112413:	6a 07                	push   $0x7
f0112415:	6a 05                	push   $0x5
f0112417:	6a ff                	push   $0xffffffff
f0112419:	50                   	push   %eax
f011241a:	68 00 f0 3f 00       	push   $0x3ff000
f011241f:	68 00 f0 09 00       	push   $0x9f000
f0112424:	ff 75 cc             	pushl  -0x34(%ebp)
f0112427:	e8 40 23 00 00       	call   f011476c <CCP>
f011242c:	83 c4 30             	add    $0x30,%esp
f011242f:	85 c0                	test   %eax,%eax
f0112431:	75 25                	jne    f0112458 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112433:	83 ec 04             	sub    $0x4,%esp
f0112436:	68 1c 8f 12 f0       	push   $0xf0128f1c
f011243b:	68 0a 04 00 00       	push   $0x40a
f0112440:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112445:	e8 de df fe ff       	call   f0100428 <_warn>
f011244a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011244d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112451:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0112458:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011245c:	74 04                	je     f0112462 <test_share_chunk+0x864>
f011245e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112462:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112466:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112469:	c1 e0 02             	shl    $0x2,%eax
f011246c:	83 ec 08             	sub    $0x8,%esp
f011246f:	6a 02                	push   $0x2
f0112471:	6a 07                	push   $0x7
f0112473:	6a 07                	push   $0x7
f0112475:	6a 07                	push   $0x7
f0112477:	6a 05                	push   $0x5
f0112479:	6a 03                	push   $0x3
f011247b:	50                   	push   %eax
f011247c:	68 00 f0 3f 00       	push   $0x3ff000
f0112481:	68 00 f0 09 00       	push   $0x9f000
f0112486:	ff 75 cc             	pushl  -0x34(%ebp)
f0112489:	e8 de 22 00 00       	call   f011476c <CCP>
f011248e:	83 c4 30             	add    $0x30,%esp
f0112491:	85 c0                	test   %eax,%eax
f0112493:	75 1e                	jne    f01124b3 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112495:	83 ec 04             	sub    $0x4,%esp
f0112498:	68 1c 8f 12 f0       	push   $0xf0128f1c
f011249d:	68 13 04 00 00       	push   $0x413
f01124a2:	68 e6 7b 12 f0       	push   $0xf0127be6
f01124a7:	e8 7c df fe ff       	call   f0100428 <_warn>
f01124ac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01124af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01124b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01124b7:	74 04                	je     f01124bd <test_share_chunk+0x8bf>
f01124b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01124bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01124c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01124c4:	c1 e0 03             	shl    $0x3,%eax
f01124c7:	83 ec 08             	sub    $0x8,%esp
f01124ca:	6a 02                	push   $0x2
f01124cc:	6a 07                	push   $0x7
f01124ce:	6a 07                	push   $0x7
f01124d0:	6a 07                	push   $0x7
f01124d2:	6a 05                	push   $0x5
f01124d4:	6a 04                	push   $0x4
f01124d6:	50                   	push   %eax
f01124d7:	68 00 00 40 00       	push   $0x400000
f01124dc:	68 00 00 0a 00       	push   $0xa0000
f01124e1:	ff 75 cc             	pushl  -0x34(%ebp)
f01124e4:	e8 83 22 00 00       	call   f011476c <CCP>
f01124e9:	83 c4 30             	add    $0x30,%esp
f01124ec:	85 c0                	test   %eax,%eax
f01124ee:	75 1e                	jne    f011250e <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01124f0:	83 ec 04             	sub    $0x4,%esp
f01124f3:	68 1c 8f 12 f0       	push   $0xf0128f1c
f01124f8:	68 1b 04 00 00       	push   $0x41b
f01124fd:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112502:	e8 21 df fe ff       	call   f0100428 <_warn>
f0112507:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011250a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011250e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112512:	74 04                	je     f0112518 <test_share_chunk+0x91a>
f0112514:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112518:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011251c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0112520:	0f 84 b2 00 00 00    	je     f01125d8 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0112526:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011252d:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0112534:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011253b:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0112542:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0112549:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0112550:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0112557:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011255e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112561:	8a 00                	mov    (%eax),%al
f0112563:	3c 44                	cmp    $0x44,%al
f0112565:	75 45                	jne    f01125ac <test_share_chunk+0x9ae>
f0112567:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011256a:	8a 00                	mov    (%eax),%al
f011256c:	3c 44                	cmp    $0x44,%al
f011256e:	75 3c                	jne    f01125ac <test_share_chunk+0x9ae>
f0112570:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112573:	8a 00                	mov    (%eax),%al
f0112575:	3c 44                	cmp    $0x44,%al
f0112577:	75 33                	jne    f01125ac <test_share_chunk+0x9ae>
f0112579:	8b 45 98             	mov    -0x68(%ebp),%eax
f011257c:	8a 00                	mov    (%eax),%al
f011257e:	3c 44                	cmp    $0x44,%al
f0112580:	75 2a                	jne    f01125ac <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112582:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112585:	8a 10                	mov    (%eax),%dl
f0112587:	8b 45 90             	mov    -0x70(%ebp),%eax
f011258a:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011258c:	38 c2                	cmp    %al,%dl
f011258e:	75 1c                	jne    f01125ac <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112590:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112593:	8a 10                	mov    (%eax),%dl
f0112595:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112598:	8a 00                	mov    (%eax),%al
f011259a:	38 c2                	cmp    %al,%dl
f011259c:	75 0e                	jne    f01125ac <test_share_chunk+0x9ae>
f011259e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01125a1:	8a 10                	mov    (%eax),%dl
f01125a3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01125a6:	8a 00                	mov    (%eax),%al
f01125a8:	38 c2                	cmp    %al,%dl
f01125aa:	74 1e                	je     f01125ca <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01125ac:	83 ec 04             	sub    $0x4,%esp
f01125af:	68 64 8f 12 f0       	push   $0xf0128f64
f01125b4:	68 30 04 00 00       	push   $0x430
f01125b9:	68 e6 7b 12 f0       	push   $0xf0127be6
f01125be:	e8 65 de fe ff       	call   f0100428 <_warn>
f01125c3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01125c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01125ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01125ce:	74 04                	je     f01125d4 <test_share_chunk+0x9d6>
f01125d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01125d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01125d8:	83 ec 0c             	sub    $0xc,%esp
f01125db:	68 a8 90 12 f0       	push   $0xf01290a8
f01125e0:	e8 b6 e8 fe ff       	call   f0100e9b <cprintf>
f01125e5:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01125e8:	83 ec 08             	sub    $0x8,%esp
f01125eb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01125ee:	68 b8 90 12 f0       	push   $0xf01290b8
f01125f3:	e8 a3 e8 fe ff       	call   f0100e9b <cprintf>
f01125f8:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01125fb:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01125ff:	75 10                	jne    f0112611 <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0112601:	83 ec 0c             	sub    $0xc,%esp
f0112604:	68 e8 90 12 f0       	push   $0xf01290e8
f0112609:	e8 8d e8 fe ff       	call   f0100e9b <cprintf>
f011260e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112611:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0112616:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0112619:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011261c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011261f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112624:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112627:	5b                   	pop    %ebx
f0112628:	5e                   	pop    %esi
f0112629:	5f                   	pop    %edi
f011262a:	5d                   	pop    %ebp
f011262b:	c3                   	ret    

f011262c <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011262c:	55                   	push   %ebp
f011262d:	89 e5                	mov    %esp,%ebp
f011262f:	57                   	push   %edi
f0112630:	56                   	push   %esi
f0112631:	53                   	push   %ebx
f0112632:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112638:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011263e:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f0112643:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112648:	89 c7                	mov    %eax,%edi
f011264a:	89 de                	mov    %ebx,%esi
f011264c:	89 d1                	mov    %edx,%ecx
f011264e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112650:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112656:	b9 23 00 00 00       	mov    $0x23,%ecx
f011265b:	b0 00                	mov    $0x0,%al
f011265d:	89 d7                	mov    %edx,%edi
f011265f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112661:	6a 00                	push   $0x0
f0112663:	6a 0a                	push   $0xa
f0112665:	6a 14                	push   $0x14
f0112667:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011266d:	50                   	push   %eax
f011266e:	e8 70 75 ff ff       	call   f0109be3 <env_create>
f0112673:	83 c4 10             	add    $0x10,%esp
f0112676:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112679:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011267c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112682:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0112685:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112688:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011268e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0112691:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112694:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112697:	83 ec 0c             	sub    $0xc,%esp
f011269a:	ff 75 cc             	pushl  -0x34(%ebp)
f011269d:	e8 96 20 00 00       	call   f0114738 <ClearUserSpace>
f01126a2:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01126a5:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01126ac:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01126b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f01126ba:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01126be:	83 ec 0c             	sub    $0xc,%esp
f01126c1:	68 24 91 12 f0       	push   $0xf0129124
f01126c6:	e8 d0 e7 fe ff       	call   f0100e9b <cprintf>
f01126cb:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01126ce:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01126d5:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f01126dc:	eb 03                	jmp    f01126e1 <test_allocate_chunk+0xb5>
f01126de:	ff 4d e4             	decl   -0x1c(%ebp)
f01126e1:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01126e8:	76 09                	jbe    f01126f3 <test_allocate_chunk+0xc7>
f01126ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126ed:	8a 00                	mov    (%eax),%al
f01126ef:	84 c0                	test   %al,%al
f01126f1:	74 eb                	je     f01126de <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f01126f3:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01126fa:	75 06                	jne    f0112702 <test_allocate_chunk+0xd6>
f01126fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126ff:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0112702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112705:	8a 00                	mov    (%eax),%al
f0112707:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011270d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112710:	8a 00                	mov    (%eax),%al
f0112712:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0112718:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011271b:	8a 00                	mov    (%eax),%al
f011271d:	0f be c0             	movsbl %al,%eax
f0112720:	83 ec 08             	sub    $0x8,%esp
f0112723:	50                   	push   %eax
f0112724:	68 4e 91 12 f0       	push   $0xf012914e
f0112729:	e8 6d e7 fe ff       	call   f0100e9b <cprintf>
f011272e:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0112731:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112734:	8a 00                	mov    (%eax),%al
f0112736:	0f be c0             	movsbl %al,%eax
f0112739:	83 ec 08             	sub    $0x8,%esp
f011273c:	50                   	push   %eax
f011273d:	68 5a 91 12 f0       	push   $0xf012915a
f0112742:	e8 54 e7 fe ff       	call   f0100e9b <cprintf>
f0112747:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011274a:	83 ec 08             	sub    $0x8,%esp
f011274d:	68 00 f0 bf ef       	push   $0xefbff000
f0112752:	ff 75 cc             	pushl  -0x34(%ebp)
f0112755:	e8 bf 1f 00 00       	call   f0114719 <GP>
f011275a:	83 c4 10             	add    $0x10,%esp
f011275d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112760:	e8 4e ab ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112765:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0112768:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011276b:	c1 e0 02             	shl    $0x2,%eax
f011276e:	6a 02                	push   $0x2
f0112770:	50                   	push   %eax
f0112771:	68 00 f0 bf ef       	push   $0xefbff000
f0112776:	ff 75 cc             	pushl  -0x34(%ebp)
f0112779:	e8 e7 72 ff ff       	call   f0109a65 <allocate_chunk>
f011277e:	83 c4 10             	add    $0x10,%esp
f0112781:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112784:	e8 2a ab ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112789:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011278c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112790:	75 08                	jne    f011279a <test_allocate_chunk+0x16e>
f0112792:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112795:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112798:	74 2a                	je     f01127c4 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011279a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011279d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01127a0:	83 ec 08             	sub    $0x8,%esp
f01127a3:	6a 00                	push   $0x0
f01127a5:	50                   	push   %eax
f01127a6:	ff 75 b0             	pushl  -0x50(%ebp)
f01127a9:	68 68 91 12 f0       	push   $0xf0129168
f01127ae:	68 70 04 00 00       	push   $0x470
f01127b3:	68 e6 7b 12 f0       	push   $0xf0127be6
f01127b8:	e8 6b dc fe ff       	call   f0100428 <_warn>
f01127bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01127c0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01127c4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01127c8:	74 04                	je     f01127ce <test_allocate_chunk+0x1a2>
f01127ca:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01127ce:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01127d2:	e8 dc aa ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01127d7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01127da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01127dd:	01 c0                	add    %eax,%eax
f01127df:	89 c1                	mov    %eax,%ecx
f01127e1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127e4:	89 d0                	mov    %edx,%eax
f01127e6:	c1 e0 02             	shl    $0x2,%eax
f01127e9:	01 d0                	add    %edx,%eax
f01127eb:	f7 d8                	neg    %eax
f01127ed:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01127f2:	6a 02                	push   $0x2
f01127f4:	51                   	push   %ecx
f01127f5:	50                   	push   %eax
f01127f6:	ff 75 cc             	pushl  -0x34(%ebp)
f01127f9:	e8 67 72 ff ff       	call   f0109a65 <allocate_chunk>
f01127fe:	83 c4 10             	add    $0x10,%esp
f0112801:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112804:	e8 aa aa ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112809:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011280c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112810:	75 08                	jne    f011281a <test_allocate_chunk+0x1ee>
f0112812:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112815:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112818:	74 2a                	je     f0112844 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011281a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011281d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112820:	83 ec 08             	sub    $0x8,%esp
f0112823:	6a 00                	push   $0x0
f0112825:	50                   	push   %eax
f0112826:	ff 75 b0             	pushl  -0x50(%ebp)
f0112829:	68 68 91 12 f0       	push   $0xf0129168
f011282e:	68 7e 04 00 00       	push   $0x47e
f0112833:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112838:	e8 eb db fe ff       	call   f0100428 <_warn>
f011283d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112840:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0112844:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112848:	74 04                	je     f011284e <test_allocate_chunk+0x222>
f011284a:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011284e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0112852:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112855:	c1 e0 02             	shl    $0x2,%eax
f0112858:	83 ec 08             	sub    $0x8,%esp
f011285b:	6a 03                	push   $0x3
f011285d:	6a 00                	push   $0x0
f011285f:	6a 00                	push   $0x0
f0112861:	68 ff 0f 00 00       	push   $0xfff
f0112866:	ff 75 b8             	pushl  -0x48(%ebp)
f0112869:	6a 01                	push   $0x1
f011286b:	50                   	push   %eax
f011286c:	68 00 f0 bf ef       	push   $0xefbff000
f0112871:	6a 00                	push   $0x0
f0112873:	ff 75 cc             	pushl  -0x34(%ebp)
f0112876:	e8 f1 1e 00 00       	call   f011476c <CCP>
f011287b:	83 c4 30             	add    $0x30,%esp
f011287e:	85 c0                	test   %eax,%eax
f0112880:	75 1e                	jne    f01128a0 <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112882:	83 ec 04             	sub    $0x4,%esp
f0112885:	68 d0 91 12 f0       	push   $0xf01291d0
f011288a:	68 86 04 00 00       	push   $0x486
f011288f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112894:	e8 8f db fe ff       	call   f0100428 <_warn>
f0112899:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011289c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01128a0:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01128a4:	74 04                	je     f01128aa <test_allocate_chunk+0x27e>
f01128a6:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01128aa:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01128ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01128b1:	8a 10                	mov    (%eax),%dl
f01128b3:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01128b9:	38 c2                	cmp    %al,%dl
f01128bb:	75 0f                	jne    f01128cc <test_allocate_chunk+0x2a0>
f01128bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128c0:	8a 10                	mov    (%eax),%dl
f01128c2:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01128c8:	38 c2                	cmp    %al,%dl
f01128ca:	74 1e                	je     f01128ea <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01128cc:	83 ec 04             	sub    $0x4,%esp
f01128cf:	68 1c 92 12 f0       	push   $0xf012921c
f01128d4:	68 8e 04 00 00       	push   $0x48e
f01128d9:	68 e6 7b 12 f0       	push   $0xf0127be6
f01128de:	e8 45 db fe ff       	call   f0100428 <_warn>
f01128e3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01128e6:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01128ea:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01128ee:	74 04                	je     f01128f4 <test_allocate_chunk+0x2c8>
f01128f0:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01128f4:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01128f8:	83 ec 0c             	sub    $0xc,%esp
f01128fb:	68 99 8f 12 f0       	push   $0xf0128f99
f0112900:	e8 96 e5 fe ff       	call   f0100e9b <cprintf>
f0112905:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0112908:	83 ec 0c             	sub    $0xc,%esp
f011290b:	68 54 92 12 f0       	push   $0xf0129254
f0112910:	e8 86 e5 fe ff       	call   f0100e9b <cprintf>
f0112915:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112918:	e8 96 a9 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011291d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0112920:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112923:	c1 e0 05             	shl    $0x5,%eax
f0112926:	68 02 0e 00 00       	push   $0xe02
f011292b:	50                   	push   %eax
f011292c:	6a 00                	push   $0x0
f011292e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112931:	e8 2f 71 ff ff       	call   f0109a65 <allocate_chunk>
f0112936:	83 c4 10             	add    $0x10,%esp
f0112939:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011293c:	e8 72 a9 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112941:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0112944:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0112948:	75 36                	jne    f0112980 <test_allocate_chunk+0x354>
f011294a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011294d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112950:	89 c1                	mov    %eax,%ecx
f0112952:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112955:	c1 e0 05             	shl    $0x5,%eax
f0112958:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011295b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0112962:	99                   	cltd   
f0112963:	f7 fe                	idiv   %esi
f0112965:	89 c3                	mov    %eax,%ebx
f0112967:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011296a:	c1 e0 05             	shl    $0x5,%eax
f011296d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112970:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0112977:	99                   	cltd   
f0112978:	f7 fe                	idiv   %esi
f011297a:	01 d8                	add    %ebx,%eax
f011297c:	39 c1                	cmp    %eax,%ecx
f011297e:	74 54                	je     f01129d4 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0112980:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112983:	c1 e0 05             	shl    $0x5,%eax
f0112986:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112989:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0112990:	99                   	cltd   
f0112991:	f7 ff                	idiv   %edi
f0112993:	89 c1                	mov    %eax,%ecx
f0112995:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112998:	c1 e0 05             	shl    $0x5,%eax
f011299b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011299e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01129a5:	99                   	cltd   
f01129a6:	f7 fe                	idiv   %esi
f01129a8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01129ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01129ae:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01129b1:	83 ec 08             	sub    $0x8,%esp
f01129b4:	52                   	push   %edx
f01129b5:	50                   	push   %eax
f01129b6:	ff 75 a8             	pushl  -0x58(%ebp)
f01129b9:	68 94 92 12 f0       	push   $0xf0129294
f01129be:	68 a3 04 00 00       	push   $0x4a3
f01129c3:	68 e6 7b 12 f0       	push   $0xf0127be6
f01129c8:	e8 5b da fe ff       	call   f0100428 <_warn>
f01129cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129d0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01129d4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01129d8:	74 04                	je     f01129de <test_allocate_chunk+0x3b2>
f01129da:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01129de:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01129e2:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01129e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01129ec:	c1 e0 05             	shl    $0x5,%eax
f01129ef:	83 ec 08             	sub    $0x8,%esp
f01129f2:	6a 03                	push   $0x3
f01129f4:	6a 00                	push   $0x0
f01129f6:	6a 00                	push   $0x0
f01129f8:	68 07 0e 00 00       	push   $0xe07
f01129fd:	68 03 0e 00 00       	push   $0xe03
f0112a02:	6a 01                	push   $0x1
f0112a04:	50                   	push   %eax
f0112a05:	6a 00                	push   $0x0
f0112a07:	6a 00                	push   $0x0
f0112a09:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a0c:	e8 5b 1d 00 00       	call   f011476c <CCP>
f0112a11:	83 c4 30             	add    $0x30,%esp
f0112a14:	85 c0                	test   %eax,%eax
f0112a16:	75 25                	jne    f0112a3d <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112a18:	83 ec 04             	sub    $0x4,%esp
f0112a1b:	68 d0 91 12 f0       	push   $0xf01291d0
f0112a20:	68 ac 04 00 00       	push   $0x4ac
f0112a25:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112a2a:	e8 f9 d9 fe ff       	call   f0100428 <_warn>
f0112a2f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a32:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0112a36:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0112a3d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112a41:	74 04                	je     f0112a47 <test_allocate_chunk+0x41b>
f0112a43:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0112a47:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0112a4b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0112a4f:	74 5a                	je     f0112aab <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0112a51:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112a54:	01 c0                	add    %eax,%eax
f0112a56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0112a59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112a5c:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0112a5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a62:	01 c0                	add    %eax,%eax
f0112a64:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0112a67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a6a:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0112a6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112a70:	8a 00                	mov    (%eax),%al
f0112a72:	3c 4b                	cmp    $0x4b,%al
f0112a74:	75 09                	jne    f0112a7f <test_allocate_chunk+0x453>
f0112a76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a79:	8a 00                	mov    (%eax),%al
f0112a7b:	3c 4d                	cmp    $0x4d,%al
f0112a7d:	74 1e                	je     f0112a9d <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0112a7f:	83 ec 04             	sub    $0x4,%esp
f0112a82:	68 1c 92 12 f0       	push   $0xf012921c
f0112a87:	68 ba 04 00 00       	push   $0x4ba
f0112a8c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112a91:	e8 92 d9 fe ff       	call   f0100428 <_warn>
f0112a96:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112a99:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0112a9d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112aa1:	74 04                	je     f0112aa7 <test_allocate_chunk+0x47b>
f0112aa3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0112aa7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112aab:	83 ec 0c             	sub    $0xc,%esp
f0112aae:	68 73 85 12 f0       	push   $0xf0128573
f0112ab3:	e8 e3 e3 fe ff       	call   f0100e9b <cprintf>
f0112ab8:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0112abb:	83 ec 0c             	sub    $0xc,%esp
f0112abe:	68 f4 92 12 f0       	push   $0xf01292f4
f0112ac3:	e8 d3 e3 fe ff       	call   f0100e9b <cprintf>
f0112ac8:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112acb:	e8 e3 a7 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112ad0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0112ad3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ad6:	c1 e0 06             	shl    $0x6,%eax
f0112ad9:	89 c2                	mov    %eax,%edx
f0112adb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ade:	c1 e0 05             	shl    $0x5,%eax
f0112ae1:	6a 00                	push   $0x0
f0112ae3:	52                   	push   %edx
f0112ae4:	50                   	push   %eax
f0112ae5:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ae8:	e8 78 6f ff ff       	call   f0109a65 <allocate_chunk>
f0112aed:	83 c4 10             	add    $0x10,%esp
f0112af0:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112af3:	e8 bb a7 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112af8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0112afb:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0112aff:	75 36                	jne    f0112b37 <test_allocate_chunk+0x50b>
f0112b01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b04:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112b07:	89 c1                	mov    %eax,%ecx
f0112b09:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b0c:	c1 e0 06             	shl    $0x6,%eax
f0112b0f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112b12:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0112b19:	99                   	cltd   
f0112b1a:	f7 ff                	idiv   %edi
f0112b1c:	89 c3                	mov    %eax,%ebx
f0112b1e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b21:	c1 e0 06             	shl    $0x6,%eax
f0112b24:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112b27:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0112b2e:	99                   	cltd   
f0112b2f:	f7 fe                	idiv   %esi
f0112b31:	01 d8                	add    %ebx,%eax
f0112b33:	39 c1                	cmp    %eax,%ecx
f0112b35:	74 54                	je     f0112b8b <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0112b37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b3a:	c1 e0 06             	shl    $0x6,%eax
f0112b3d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112b40:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112b47:	99                   	cltd   
f0112b48:	f7 fb                	idiv   %ebx
f0112b4a:	89 c1                	mov    %eax,%ecx
f0112b4c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b4f:	c1 e0 06             	shl    $0x6,%eax
f0112b52:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112b55:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0112b5c:	99                   	cltd   
f0112b5d:	f7 ff                	idiv   %edi
f0112b5f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0112b62:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b65:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112b68:	83 ec 08             	sub    $0x8,%esp
f0112b6b:	52                   	push   %edx
f0112b6c:	50                   	push   %eax
f0112b6d:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112b70:	68 94 92 12 f0       	push   $0xf0129294
f0112b75:	68 d0 04 00 00       	push   $0x4d0
f0112b7a:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112b7f:	e8 a4 d8 fe ff       	call   f0100428 <_warn>
f0112b84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112b87:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0112b8b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112b8f:	74 04                	je     f0112b95 <test_allocate_chunk+0x569>
f0112b91:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0112b95:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0112b99:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0112ba0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ba3:	c1 e0 06             	shl    $0x6,%eax
f0112ba6:	89 c2                	mov    %eax,%edx
f0112ba8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112bab:	c1 e0 05             	shl    $0x5,%eax
f0112bae:	83 ec 08             	sub    $0x8,%esp
f0112bb1:	6a 03                	push   $0x3
f0112bb3:	6a 00                	push   $0x0
f0112bb5:	6a 00                	push   $0x0
f0112bb7:	68 07 0e 00 00       	push   $0xe07
f0112bbc:	6a 01                	push   $0x1
f0112bbe:	6a 01                	push   $0x1
f0112bc0:	52                   	push   %edx
f0112bc1:	50                   	push   %eax
f0112bc2:	6a 00                	push   $0x0
f0112bc4:	ff 75 cc             	pushl  -0x34(%ebp)
f0112bc7:	e8 a0 1b 00 00       	call   f011476c <CCP>
f0112bcc:	83 c4 30             	add    $0x30,%esp
f0112bcf:	85 c0                	test   %eax,%eax
f0112bd1:	75 25                	jne    f0112bf8 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112bd3:	83 ec 04             	sub    $0x4,%esp
f0112bd6:	68 d0 91 12 f0       	push   $0xf01291d0
f0112bdb:	68 d9 04 00 00       	push   $0x4d9
f0112be0:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112be5:	e8 3e d8 fe ff       	call   f0100428 <_warn>
f0112bea:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112bed:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0112bf1:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0112bf8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112bfc:	74 04                	je     f0112c02 <test_allocate_chunk+0x5d6>
f0112bfe:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0112c02:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0112c06:	83 ec 0c             	sub    $0xc,%esp
f0112c09:	68 d6 85 12 f0       	push   $0xf01285d6
f0112c0e:	e8 88 e2 fe ff       	call   f0100e9b <cprintf>
f0112c13:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0112c16:	83 ec 0c             	sub    $0xc,%esp
f0112c19:	68 34 93 12 f0       	push   $0xf0129334
f0112c1e:	e8 78 e2 fe ff       	call   f0100e9b <cprintf>
f0112c23:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112c26:	e8 88 a6 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112c2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0112c2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c31:	c1 e0 06             	shl    $0x6,%eax
f0112c34:	68 06 0e 00 00       	push   $0xe06
f0112c39:	50                   	push   %eax
f0112c3a:	68 00 00 00 80       	push   $0x80000000
f0112c3f:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c42:	e8 1e 6e ff ff       	call   f0109a65 <allocate_chunk>
f0112c47:	83 c4 10             	add    $0x10,%esp
f0112c4a:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c4d:	e8 61 a6 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112c52:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0112c55:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0112c59:	75 36                	jne    f0112c91 <test_allocate_chunk+0x665>
f0112c5b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c5e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c61:	89 c1                	mov    %eax,%ecx
f0112c63:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c66:	c1 e0 06             	shl    $0x6,%eax
f0112c69:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c6c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112c73:	99                   	cltd   
f0112c74:	f7 fb                	idiv   %ebx
f0112c76:	89 c3                	mov    %eax,%ebx
f0112c78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c7b:	c1 e0 06             	shl    $0x6,%eax
f0112c7e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112c81:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0112c88:	99                   	cltd   
f0112c89:	f7 fe                	idiv   %esi
f0112c8b:	01 d8                	add    %ebx,%eax
f0112c8d:	39 c1                	cmp    %eax,%ecx
f0112c8f:	74 54                	je     f0112ce5 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0112c91:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c94:	c1 e0 06             	shl    $0x6,%eax
f0112c97:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c9a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0112ca1:	99                   	cltd   
f0112ca2:	f7 ff                	idiv   %edi
f0112ca4:	89 c1                	mov    %eax,%ecx
f0112ca6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ca9:	c1 e0 06             	shl    $0x6,%eax
f0112cac:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112caf:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112cb6:	99                   	cltd   
f0112cb7:	f7 fb                	idiv   %ebx
f0112cb9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0112cbc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112cbf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112cc2:	83 ec 08             	sub    $0x8,%esp
f0112cc5:	52                   	push   %edx
f0112cc6:	50                   	push   %eax
f0112cc7:	ff 75 9c             	pushl  -0x64(%ebp)
f0112cca:	68 94 92 12 f0       	push   $0xf0129294
f0112ccf:	68 ef 04 00 00       	push   $0x4ef
f0112cd4:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112cd9:	e8 4a d7 fe ff       	call   f0100428 <_warn>
f0112cde:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ce1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0112ce5:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112ce9:	74 04                	je     f0112cef <test_allocate_chunk+0x6c3>
f0112ceb:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0112cef:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0112cf3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0112cfa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cfd:	c1 e0 06             	shl    $0x6,%eax
f0112d00:	83 ec 08             	sub    $0x8,%esp
f0112d03:	6a 03                	push   $0x3
f0112d05:	6a 00                	push   $0x0
f0112d07:	6a 00                	push   $0x0
f0112d09:	68 07 0e 00 00       	push   $0xe07
f0112d0e:	68 07 0e 00 00       	push   $0xe07
f0112d13:	6a 01                	push   $0x1
f0112d15:	50                   	push   %eax
f0112d16:	68 00 00 00 80       	push   $0x80000000
f0112d1b:	6a 00                	push   $0x0
f0112d1d:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d20:	e8 47 1a 00 00       	call   f011476c <CCP>
f0112d25:	83 c4 30             	add    $0x30,%esp
f0112d28:	85 c0                	test   %eax,%eax
f0112d2a:	75 25                	jne    f0112d51 <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112d2c:	83 ec 04             	sub    $0x4,%esp
f0112d2f:	68 d0 91 12 f0       	push   $0xf01291d0
f0112d34:	68 f8 04 00 00       	push   $0x4f8
f0112d39:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112d3e:	e8 e5 d6 fe ff       	call   f0100428 <_warn>
f0112d43:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d46:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0112d4a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0112d51:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112d55:	74 04                	je     f0112d5b <test_allocate_chunk+0x72f>
f0112d57:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0112d5b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0112d5f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0112d63:	74 6f                	je     f0112dd4 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0112d65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112d68:	01 c0                	add    %eax,%eax
f0112d6a:	05 00 00 00 80       	add    $0x80000000,%eax
f0112d6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0112d72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112d75:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0112d78:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112d7b:	89 d0                	mov    %edx,%eax
f0112d7d:	c1 e0 02             	shl    $0x2,%eax
f0112d80:	01 d0                	add    %edx,%eax
f0112d82:	01 c0                	add    %eax,%eax
f0112d84:	01 d0                	add    %edx,%eax
f0112d86:	01 c0                	add    %eax,%eax
f0112d88:	05 00 00 00 80       	add    $0x80000000,%eax
f0112d8d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0112d90:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d93:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0112d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112d99:	8a 00                	mov    (%eax),%al
f0112d9b:	3c 4b                	cmp    $0x4b,%al
f0112d9d:	75 09                	jne    f0112da8 <test_allocate_chunk+0x77c>
f0112d9f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112da2:	8a 00                	mov    (%eax),%al
f0112da4:	3c 4d                	cmp    $0x4d,%al
f0112da6:	74 1e                	je     f0112dc6 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0112da8:	83 ec 04             	sub    $0x4,%esp
f0112dab:	68 1c 92 12 f0       	push   $0xf012921c
f0112db0:	68 06 05 00 00       	push   $0x506
f0112db5:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112dba:	e8 69 d6 fe ff       	call   f0100428 <_warn>
f0112dbf:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112dc2:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0112dc6:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112dca:	74 04                	je     f0112dd0 <test_allocate_chunk+0x7a4>
f0112dcc:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0112dd0:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0112dd4:	83 ec 0c             	sub    $0xc,%esp
f0112dd7:	68 a8 90 12 f0       	push   $0xf01290a8
f0112ddc:	e8 ba e0 fe ff       	call   f0100e9b <cprintf>
f0112de1:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0112de4:	83 ec 0c             	sub    $0xc,%esp
f0112de7:	68 70 93 12 f0       	push   $0xf0129370
f0112dec:	e8 aa e0 fe ff       	call   f0100e9b <cprintf>
f0112df1:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112df4:	e8 ba a4 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112df9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0112dfc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112dff:	89 d0                	mov    %edx,%eax
f0112e01:	01 c0                	add    %eax,%eax
f0112e03:	01 d0                	add    %edx,%eax
f0112e05:	01 c0                	add    %eax,%eax
f0112e07:	01 d0                	add    %edx,%eax
f0112e09:	68 04 0e 00 00       	push   $0xe04
f0112e0e:	50                   	push   %eax
f0112e0f:	68 00 fc 3f 40       	push   $0x403ffc00
f0112e14:	ff 75 cc             	pushl  -0x34(%ebp)
f0112e17:	e8 49 6c ff ff       	call   f0109a65 <allocate_chunk>
f0112e1c:	83 c4 10             	add    $0x10,%esp
f0112e1f:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e22:	e8 8c a4 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0112e27:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0112e2a:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0112e2e:	75 0b                	jne    f0112e3b <test_allocate_chunk+0x80f>
f0112e30:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112e33:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112e36:	83 f8 05             	cmp    $0x5,%eax
f0112e39:	74 2a                	je     f0112e65 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0112e3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112e3e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112e41:	83 ec 08             	sub    $0x8,%esp
f0112e44:	6a 05                	push   $0x5
f0112e46:	50                   	push   %eax
f0112e47:	ff 75 98             	pushl  -0x68(%ebp)
f0112e4a:	68 94 92 12 f0       	push   $0xf0129294
f0112e4f:	68 1d 05 00 00       	push   $0x51d
f0112e54:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112e59:	e8 ca d5 fe ff       	call   f0100428 <_warn>
f0112e5e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e61:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0112e65:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112e69:	74 04                	je     f0112e6f <test_allocate_chunk+0x843>
f0112e6b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0112e6f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0112e73:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0112e7a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e7d:	89 d0                	mov    %edx,%eax
f0112e7f:	01 c0                	add    %eax,%eax
f0112e81:	01 d0                	add    %edx,%eax
f0112e83:	c1 e0 02             	shl    $0x2,%eax
f0112e86:	83 ec 08             	sub    $0x8,%esp
f0112e89:	6a 03                	push   $0x3
f0112e8b:	6a 00                	push   $0x0
f0112e8d:	6a 00                	push   $0x0
f0112e8f:	68 07 0e 00 00       	push   $0xe07
f0112e94:	68 05 0e 00 00       	push   $0xe05
f0112e99:	6a 01                	push   $0x1
f0112e9b:	50                   	push   %eax
f0112e9c:	68 00 f0 3f 40       	push   $0x403ff000
f0112ea1:	6a 00                	push   $0x0
f0112ea3:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ea6:	e8 c1 18 00 00       	call   f011476c <CCP>
f0112eab:	83 c4 30             	add    $0x30,%esp
f0112eae:	85 c0                	test   %eax,%eax
f0112eb0:	75 25                	jne    f0112ed7 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112eb2:	83 ec 04             	sub    $0x4,%esp
f0112eb5:	68 d0 91 12 f0       	push   $0xf01291d0
f0112eba:	68 26 05 00 00       	push   $0x526
f0112ebf:	68 e6 7b 12 f0       	push   $0xf0127be6
f0112ec4:	e8 5f d5 fe ff       	call   f0100428 <_warn>
f0112ec9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ecc:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0112ed0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0112ed7:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0112edb:	74 04                	je     f0112ee1 <test_allocate_chunk+0x8b5>
f0112edd:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0112ee1:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0112ee5:	83 ec 0c             	sub    $0xc,%esp
f0112ee8:	68 a7 93 12 f0       	push   $0xf01293a7
f0112eed:	e8 a9 df fe ff       	call   f0100e9b <cprintf>
f0112ef2:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0112ef5:	83 ec 08             	sub    $0x8,%esp
f0112ef8:	ff 75 e0             	pushl  -0x20(%ebp)
f0112efb:	68 b8 93 12 f0       	push   $0xf01293b8
f0112f00:	e8 96 df fe ff       	call   f0100e9b <cprintf>
f0112f05:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112f08:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0112f0c:	75 10                	jne    f0112f1e <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0112f0e:	83 ec 0c             	sub    $0xc,%esp
f0112f11:	68 ec 93 12 f0       	push   $0xf01293ec
f0112f16:	e8 80 df fe ff       	call   f0100e9b <cprintf>
f0112f1b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112f1e:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0112f23:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0112f26:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f29:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112f2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112f31:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112f34:	5b                   	pop    %ebx
f0112f35:	5e                   	pop    %esi
f0112f36:	5f                   	pop    %edi
f0112f37:	5d                   	pop    %ebp
f0112f38:	c3                   	ret    

f0112f39 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0112f39:	55                   	push   %ebp
f0112f3a:	89 e5                	mov    %esp,%ebp
f0112f3c:	57                   	push   %edi
f0112f3d:	56                   	push   %esi
f0112f3e:	53                   	push   %ebx
f0112f3f:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112f45:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0112f48:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f0112f4d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f52:	89 c7                	mov    %eax,%edi
f0112f54:	89 de                	mov    %ebx,%esi
f0112f56:	89 d1                	mov    %edx,%ecx
f0112f58:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f5a:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0112f5d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112f62:	b0 00                	mov    $0x0,%al
f0112f64:	89 d7                	mov    %edx,%edi
f0112f66:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112f68:	6a 00                	push   $0x0
f0112f6a:	6a 0a                	push   $0xa
f0112f6c:	6a 14                	push   $0x14
f0112f6e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0112f71:	50                   	push   %eax
f0112f72:	e8 6c 6c ff ff       	call   f0109be3 <env_create>
f0112f77:	83 c4 10             	add    $0x10,%esp
f0112f7a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112f7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f80:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112f86:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0112f89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f8c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112f92:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0112f95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112f98:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112f9b:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0112fa2:	75 70 20 
f0112fa5:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0112fac:	00 00 00 
f0112faf:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0112fb2:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112fb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0112fbc:	89 d7                	mov    %edx,%edi
f0112fbe:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112fc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112fc3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112fc6:	83 ec 08             	sub    $0x8,%esp
f0112fc9:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0112fcf:	52                   	push   %edx
f0112fd0:	50                   	push   %eax
f0112fd1:	e8 b4 ef 00 00       	call   f0121f8a <ltostr>
f0112fd6:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112fd9:	83 ec 04             	sub    $0x4,%esp
f0112fdc:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0112fe2:	50                   	push   %eax
f0112fe3:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0112fe9:	50                   	push   %eax
f0112fea:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0112ff0:	50                   	push   %eax
f0112ff1:	e8 8c f0 00 00       	call   f0122082 <strcconcat>
f0112ff6:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112ff9:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113000:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113007:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011300e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113015:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113019:	83 ec 0c             	sub    $0xc,%esp
f011301c:	ff 75 d8             	pushl  -0x28(%ebp)
f011301f:	e8 14 17 00 00       	call   f0114738 <ClearUserSpace>
f0113024:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113027:	83 ec 0c             	sub    $0xc,%esp
f011302a:	68 2c 94 12 f0       	push   $0xf012942c
f011302f:	e8 67 de fe ff       	call   f0100e9b <cprintf>
f0113034:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113037:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011303a:	c1 e0 03             	shl    $0x3,%eax
f011303d:	83 ec 04             	sub    $0x4,%esp
f0113040:	50                   	push   %eax
f0113041:	6a 00                	push   $0x0
f0113043:	ff 75 d8             	pushl  -0x28(%ebp)
f0113046:	e8 4e 6a ff ff       	call   f0109a99 <calculate_required_frames>
f011304b:	83 c4 10             	add    $0x10,%esp
f011304e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113051:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113055:	74 23                	je     f011307a <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113057:	83 ec 0c             	sub    $0xc,%esp
f011305a:	6a 03                	push   $0x3
f011305c:	ff 75 c8             	pushl  -0x38(%ebp)
f011305f:	68 60 94 12 f0       	push   $0xf0129460
f0113064:	68 5f 05 00 00       	push   $0x55f
f0113069:	68 e6 7b 12 f0       	push   $0xf0127be6
f011306e:	e8 b5 d3 fe ff       	call   f0100428 <_warn>
f0113073:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113076:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011307a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011307e:	74 04                	je     f0113084 <test_calculate_required_frames+0x14b>
f0113080:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113084:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113088:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011308b:	c1 e0 02             	shl    $0x2,%eax
f011308e:	83 ec 04             	sub    $0x4,%esp
f0113091:	50                   	push   %eax
f0113092:	6a 00                	push   $0x0
f0113094:	ff 75 d8             	pushl  -0x28(%ebp)
f0113097:	e8 fd 69 ff ff       	call   f0109a99 <calculate_required_frames>
f011309c:	83 c4 10             	add    $0x10,%esp
f011309f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01130a2:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01130a9:	74 26                	je     f01130d1 <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01130ab:	83 ec 0c             	sub    $0xc,%esp
f01130ae:	68 01 04 00 00       	push   $0x401
f01130b3:	ff 75 c8             	pushl  -0x38(%ebp)
f01130b6:	68 60 94 12 f0       	push   $0xf0129460
f01130bb:	68 69 05 00 00       	push   $0x569
f01130c0:	68 e6 7b 12 f0       	push   $0xf0127be6
f01130c5:	e8 5e d3 fe ff       	call   f0100428 <_warn>
f01130ca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01130cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01130d1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01130d5:	74 04                	je     f01130db <test_calculate_required_frames+0x1a2>
f01130d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01130db:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01130df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01130e2:	c1 e0 0a             	shl    $0xa,%eax
f01130e5:	83 ec 04             	sub    $0x4,%esp
f01130e8:	50                   	push   %eax
f01130e9:	6a 00                	push   $0x0
f01130eb:	ff 75 d8             	pushl  -0x28(%ebp)
f01130ee:	e8 a6 69 ff ff       	call   f0109a99 <calculate_required_frames>
f01130f3:	83 c4 10             	add    $0x10,%esp
f01130f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01130f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01130fc:	c1 e0 0a             	shl    $0xa,%eax
f01130ff:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113102:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113109:	99                   	cltd   
f011310a:	f7 fb                	idiv   %ebx
f011310c:	89 c1                	mov    %eax,%ecx
f011310e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113111:	c1 e0 0a             	shl    $0xa,%eax
f0113114:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113117:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011311e:	99                   	cltd   
f011311f:	f7 fe                	idiv   %esi
f0113121:	01 c8                	add    %ecx,%eax
f0113123:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113126:	74 4c                	je     f0113174 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113128:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011312b:	c1 e0 0a             	shl    $0xa,%eax
f011312e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113131:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113138:	99                   	cltd   
f0113139:	f7 fb                	idiv   %ebx
f011313b:	89 c1                	mov    %eax,%ecx
f011313d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113140:	c1 e0 0a             	shl    $0xa,%eax
f0113143:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113146:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011314d:	99                   	cltd   
f011314e:	f7 fe                	idiv   %esi
f0113150:	01 c8                	add    %ecx,%eax
f0113152:	83 ec 0c             	sub    $0xc,%esp
f0113155:	50                   	push   %eax
f0113156:	ff 75 c8             	pushl  -0x38(%ebp)
f0113159:	68 60 94 12 f0       	push   $0xf0129460
f011315e:	68 73 05 00 00       	push   $0x573
f0113163:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113168:	e8 bb d2 fe ff       	call   f0100428 <_warn>
f011316d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113170:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113174:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113178:	74 04                	je     f011317e <test_calculate_required_frames+0x245>
f011317a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011317e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0113182:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113185:	89 d0                	mov    %edx,%eax
f0113187:	01 c0                	add    %eax,%eax
f0113189:	01 d0                	add    %edx,%eax
f011318b:	01 c0                	add    %eax,%eax
f011318d:	83 ec 04             	sub    $0x4,%esp
f0113190:	50                   	push   %eax
f0113191:	68 00 10 00 00       	push   $0x1000
f0113196:	ff 75 d8             	pushl  -0x28(%ebp)
f0113199:	e8 fb 68 ff ff       	call   f0109a99 <calculate_required_frames>
f011319e:	83 c4 10             	add    $0x10,%esp
f01131a1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01131a4:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01131a8:	74 23                	je     f01131cd <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01131aa:	83 ec 0c             	sub    $0xc,%esp
f01131ad:	6a 03                	push   $0x3
f01131af:	ff 75 c8             	pushl  -0x38(%ebp)
f01131b2:	68 60 94 12 f0       	push   $0xf0129460
f01131b7:	68 7f 05 00 00       	push   $0x57f
f01131bc:	68 e6 7b 12 f0       	push   $0xf0127be6
f01131c1:	e8 62 d2 fe ff       	call   f0100428 <_warn>
f01131c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01131cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131d1:	74 04                	je     f01131d7 <test_calculate_required_frames+0x29e>
f01131d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01131db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01131de:	89 c2                	mov    %eax,%edx
f01131e0:	01 d2                	add    %edx,%edx
f01131e2:	01 d0                	add    %edx,%eax
f01131e4:	83 ec 04             	sub    $0x4,%esp
f01131e7:	50                   	push   %eax
f01131e8:	68 00 18 00 00       	push   $0x1800
f01131ed:	ff 75 d8             	pushl  -0x28(%ebp)
f01131f0:	e8 a4 68 ff ff       	call   f0109a99 <calculate_required_frames>
f01131f5:	83 c4 10             	add    $0x10,%esp
f01131f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01131fb:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01131ff:	74 23                	je     f0113224 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113201:	83 ec 0c             	sub    $0xc,%esp
f0113204:	6a 03                	push   $0x3
f0113206:	ff 75 c8             	pushl  -0x38(%ebp)
f0113209:	68 60 94 12 f0       	push   $0xf0129460
f011320e:	68 89 05 00 00       	push   $0x589
f0113213:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113218:	e8 0b d2 fe ff       	call   f0100428 <_warn>
f011321d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113220:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113224:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113228:	74 04                	je     f011322e <test_calculate_required_frames+0x2f5>
f011322a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011322e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113232:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113235:	89 d0                	mov    %edx,%eax
f0113237:	c1 e0 02             	shl    $0x2,%eax
f011323a:	01 d0                	add    %edx,%eax
f011323c:	01 c0                	add    %eax,%eax
f011323e:	83 ec 04             	sub    $0x4,%esp
f0113241:	50                   	push   %eax
f0113242:	68 00 00 40 00       	push   $0x400000
f0113247:	ff 75 d8             	pushl  -0x28(%ebp)
f011324a:	e8 4a 68 ff ff       	call   f0109a99 <calculate_required_frames>
f011324f:	83 c4 10             	add    $0x10,%esp
f0113252:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0113255:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011325c:	74 26                	je     f0113284 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011325e:	83 ec 0c             	sub    $0xc,%esp
f0113261:	68 03 0a 00 00       	push   $0xa03
f0113266:	ff 75 c8             	pushl  -0x38(%ebp)
f0113269:	68 60 94 12 f0       	push   $0xf0129460
f011326e:	68 93 05 00 00       	push   $0x593
f0113273:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113278:	e8 ab d1 fe ff       	call   f0100428 <_warn>
f011327d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113280:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113284:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113288:	74 04                	je     f011328e <test_calculate_required_frames+0x355>
f011328a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011328e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113292:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113295:	01 c0                	add    %eax,%eax
f0113297:	83 ec 04             	sub    $0x4,%esp
f011329a:	50                   	push   %eax
f011329b:	68 00 00 70 00       	push   $0x700000
f01132a0:	ff 75 d8             	pushl  -0x28(%ebp)
f01132a3:	e8 f1 67 ff ff       	call   f0109a99 <calculate_required_frames>
f01132a8:	83 c4 10             	add    $0x10,%esp
f01132ab:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01132ae:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01132b5:	74 26                	je     f01132dd <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01132b7:	83 ec 0c             	sub    $0xc,%esp
f01132ba:	68 02 02 00 00       	push   $0x202
f01132bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01132c2:	68 60 94 12 f0       	push   $0xf0129460
f01132c7:	68 9f 05 00 00       	push   $0x59f
f01132cc:	68 e6 7b 12 f0       	push   $0xf0127be6
f01132d1:	e8 52 d1 fe ff       	call   f0100428 <_warn>
f01132d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01132dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01132e1:	74 04                	je     f01132e7 <test_calculate_required_frames+0x3ae>
f01132e3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01132eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01132ee:	83 ec 04             	sub    $0x4,%esp
f01132f1:	50                   	push   %eax
f01132f2:	68 ff ff 3f 00       	push   $0x3fffff
f01132f7:	ff 75 d8             	pushl  -0x28(%ebp)
f01132fa:	e8 9a 67 ff ff       	call   f0109a99 <calculate_required_frames>
f01132ff:	83 c4 10             	add    $0x10,%esp
f0113302:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0113305:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0113309:	74 23                	je     f011332e <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011330b:	83 ec 0c             	sub    $0xc,%esp
f011330e:	6a 04                	push   $0x4
f0113310:	ff 75 c8             	pushl  -0x38(%ebp)
f0113313:	68 60 94 12 f0       	push   $0xf0129460
f0113318:	68 a9 05 00 00       	push   $0x5a9
f011331d:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113322:	e8 01 d1 fe ff       	call   f0100428 <_warn>
f0113327:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011332a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011332e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113332:	74 04                	je     f0113338 <test_calculate_required_frames+0x3ff>
f0113334:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113338:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011333c:	83 ec 0c             	sub    $0xc,%esp
f011333f:	68 99 8f 12 f0       	push   $0xf0128f99
f0113344:	e8 52 db fe ff       	call   f0100e9b <cprintf>
f0113349:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011334c:	83 ec 0c             	sub    $0xc,%esp
f011334f:	68 b8 94 12 f0       	push   $0xf01294b8
f0113354:	e8 42 db fe ff       	call   f0100e9b <cprintf>
f0113359:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011335c:	83 ec 04             	sub    $0x4,%esp
f011335f:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113365:	50                   	push   %eax
f0113366:	68 52 83 12 f0       	push   $0xf0128352
f011336b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113371:	50                   	push   %eax
f0113372:	e8 0b ed 00 00       	call   f0122082 <strcconcat>
f0113377:	83 c4 10             	add    $0x10,%esp
f011337a:	83 ec 0c             	sub    $0xc,%esp
f011337d:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113383:	50                   	push   %eax
f0113384:	e8 a4 e8 fe ff       	call   f0101c2d <execute_command>
f0113389:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011338c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011338f:	c1 e0 03             	shl    $0x3,%eax
f0113392:	83 ec 04             	sub    $0x4,%esp
f0113395:	50                   	push   %eax
f0113396:	6a 00                	push   $0x0
f0113398:	ff 75 d8             	pushl  -0x28(%ebp)
f011339b:	e8 f9 66 ff ff       	call   f0109a99 <calculate_required_frames>
f01133a0:	83 c4 10             	add    $0x10,%esp
f01133a3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01133a6:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01133ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01133b0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01133b3:	74 24                	je     f01133d9 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01133b5:	83 ec 0c             	sub    $0xc,%esp
f01133b8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01133bb:	ff 75 c8             	pushl  -0x38(%ebp)
f01133be:	68 60 94 12 f0       	push   $0xf0129460
f01133c3:	68 bd 05 00 00       	push   $0x5bd
f01133c8:	68 e6 7b 12 f0       	push   $0xf0127be6
f01133cd:	e8 56 d0 fe ff       	call   f0100428 <_warn>
f01133d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01133d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133dd:	74 04                	je     f01133e3 <test_calculate_required_frames+0x4aa>
f01133df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01133e7:	83 ec 04             	sub    $0x4,%esp
f01133ea:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01133f0:	50                   	push   %eax
f01133f1:	68 5f 83 12 f0       	push   $0xf012835f
f01133f6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01133fc:	50                   	push   %eax
f01133fd:	e8 80 ec 00 00       	call   f0122082 <strcconcat>
f0113402:	83 c4 10             	add    $0x10,%esp
f0113405:	83 ec 0c             	sub    $0xc,%esp
f0113408:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011340e:	50                   	push   %eax
f011340f:	e8 19 e8 fe ff       	call   f0101c2d <execute_command>
f0113414:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113417:	83 ec 04             	sub    $0x4,%esp
f011341a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113420:	50                   	push   %eax
f0113421:	68 ec 94 12 f0       	push   $0xf01294ec
f0113426:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011342c:	50                   	push   %eax
f011342d:	e8 50 ec 00 00       	call   f0122082 <strcconcat>
f0113432:	83 c4 10             	add    $0x10,%esp
f0113435:	83 ec 0c             	sub    $0xc,%esp
f0113438:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011343e:	50                   	push   %eax
f011343f:	e8 e9 e7 fe ff       	call   f0101c2d <execute_command>
f0113444:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0113447:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011344a:	c1 e0 03             	shl    $0x3,%eax
f011344d:	83 ec 04             	sub    $0x4,%esp
f0113450:	50                   	push   %eax
f0113451:	6a 00                	push   $0x0
f0113453:	ff 75 d8             	pushl  -0x28(%ebp)
f0113456:	e8 3e 66 ff ff       	call   f0109a99 <calculate_required_frames>
f011345b:	83 c4 10             	add    $0x10,%esp
f011345e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0113461:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0113468:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011346b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011346e:	74 24                	je     f0113494 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113470:	83 ec 0c             	sub    $0xc,%esp
f0113473:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113476:	ff 75 c8             	pushl  -0x38(%ebp)
f0113479:	68 60 94 12 f0       	push   $0xf0129460
f011347e:	68 cb 05 00 00       	push   $0x5cb
f0113483:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113488:	e8 9b cf fe ff       	call   f0100428 <_warn>
f011348d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113490:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113494:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113498:	74 04                	je     f011349e <test_calculate_required_frames+0x565>
f011349a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011349e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01134a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01134a5:	c1 e0 0a             	shl    $0xa,%eax
f01134a8:	83 ec 04             	sub    $0x4,%esp
f01134ab:	50                   	push   %eax
f01134ac:	6a 00                	push   $0x0
f01134ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01134b1:	e8 e3 65 ff ff       	call   f0109a99 <calculate_required_frames>
f01134b6:	83 c4 10             	add    $0x10,%esp
f01134b9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01134bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01134bf:	c1 e0 0a             	shl    $0xa,%eax
f01134c2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01134c5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01134cc:	99                   	cltd   
f01134cd:	f7 fb                	idiv   %ebx
f01134cf:	89 c1                	mov    %eax,%ecx
f01134d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01134d4:	c1 e0 0a             	shl    $0xa,%eax
f01134d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01134da:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01134e1:	99                   	cltd   
f01134e2:	f7 fe                	idiv   %esi
f01134e4:	01 c8                	add    %ecx,%eax
f01134e6:	83 e8 05             	sub    $0x5,%eax
f01134e9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01134ec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01134ef:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01134f2:	74 24                	je     f0113518 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01134f4:	83 ec 0c             	sub    $0xc,%esp
f01134f7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01134fa:	ff 75 c8             	pushl  -0x38(%ebp)
f01134fd:	68 60 94 12 f0       	push   $0xf0129460
f0113502:	68 d6 05 00 00       	push   $0x5d6
f0113507:	68 e6 7b 12 f0       	push   $0xf0127be6
f011350c:	e8 17 cf fe ff       	call   f0100428 <_warn>
f0113511:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113514:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113518:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011351c:	74 04                	je     f0113522 <test_calculate_required_frames+0x5e9>
f011351e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113522:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0113526:	83 ec 04             	sub    $0x4,%esp
f0113529:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011352f:	50                   	push   %eax
f0113530:	68 f8 94 12 f0       	push   $0xf01294f8
f0113535:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011353b:	50                   	push   %eax
f011353c:	e8 41 eb 00 00       	call   f0122082 <strcconcat>
f0113541:	83 c4 10             	add    $0x10,%esp
f0113544:	83 ec 0c             	sub    $0xc,%esp
f0113547:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011354d:	50                   	push   %eax
f011354e:	e8 da e6 fe ff       	call   f0101c2d <execute_command>
f0113553:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113556:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113559:	89 c2                	mov    %eax,%edx
f011355b:	01 d2                	add    %edx,%edx
f011355d:	01 d0                	add    %edx,%eax
f011355f:	83 ec 04             	sub    $0x4,%esp
f0113562:	50                   	push   %eax
f0113563:	68 00 18 00 00       	push   $0x1800
f0113568:	ff 75 d8             	pushl  -0x28(%ebp)
f011356b:	e8 29 65 ff ff       	call   f0109a99 <calculate_required_frames>
f0113570:	83 c4 10             	add    $0x10,%esp
f0113573:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113576:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011357d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113580:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113583:	74 24                	je     f01135a9 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113585:	83 ec 0c             	sub    $0xc,%esp
f0113588:	ff 75 c4             	pushl  -0x3c(%ebp)
f011358b:	ff 75 c8             	pushl  -0x38(%ebp)
f011358e:	68 60 94 12 f0       	push   $0xf0129460
f0113593:	68 e5 05 00 00       	push   $0x5e5
f0113598:	68 e6 7b 12 f0       	push   $0xf0127be6
f011359d:	e8 86 ce fe ff       	call   f0100428 <_warn>
f01135a2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01135a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01135a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135ad:	74 04                	je     f01135b3 <test_calculate_required_frames+0x67a>
f01135af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01135b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01135b7:	83 ec 04             	sub    $0x4,%esp
f01135ba:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01135c0:	50                   	push   %eax
f01135c1:	68 b8 85 12 f0       	push   $0xf01285b8
f01135c6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01135cc:	50                   	push   %eax
f01135cd:	e8 b0 ea 00 00       	call   f0122082 <strcconcat>
f01135d2:	83 c4 10             	add    $0x10,%esp
f01135d5:	83 ec 0c             	sub    $0xc,%esp
f01135d8:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01135de:	50                   	push   %eax
f01135df:	e8 49 e6 fe ff       	call   f0101c2d <execute_command>
f01135e4:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01135e7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01135ea:	89 d0                	mov    %edx,%eax
f01135ec:	c1 e0 02             	shl    $0x2,%eax
f01135ef:	01 d0                	add    %edx,%eax
f01135f1:	01 c0                	add    %eax,%eax
f01135f3:	83 ec 04             	sub    $0x4,%esp
f01135f6:	50                   	push   %eax
f01135f7:	68 00 00 40 00       	push   $0x400000
f01135fc:	ff 75 d8             	pushl  -0x28(%ebp)
f01135ff:	e8 95 64 ff ff       	call   f0109a99 <calculate_required_frames>
f0113604:	83 c4 10             	add    $0x10,%esp
f0113607:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011360a:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0113611:	74 26                	je     f0113639 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113613:	83 ec 0c             	sub    $0xc,%esp
f0113616:	68 03 0a 00 00       	push   $0xa03
f011361b:	ff 75 c8             	pushl  -0x38(%ebp)
f011361e:	68 60 94 12 f0       	push   $0xf0129460
f0113623:	68 f1 05 00 00       	push   $0x5f1
f0113628:	68 e6 7b 12 f0       	push   $0xf0127be6
f011362d:	e8 f6 cd fe ff       	call   f0100428 <_warn>
f0113632:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113635:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113639:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011363d:	74 04                	je     f0113643 <test_calculate_required_frames+0x70a>
f011363f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113643:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0113647:	83 ec 04             	sub    $0x4,%esp
f011364a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113650:	50                   	push   %eax
f0113651:	68 c2 85 12 f0       	push   $0xf01285c2
f0113656:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011365c:	50                   	push   %eax
f011365d:	e8 20 ea 00 00       	call   f0122082 <strcconcat>
f0113662:	83 c4 10             	add    $0x10,%esp
f0113665:	83 ec 0c             	sub    $0xc,%esp
f0113668:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011366e:	50                   	push   %eax
f011366f:	e8 b9 e5 fe ff       	call   f0101c2d <execute_command>
f0113674:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0113677:	83 ec 04             	sub    $0x4,%esp
f011367a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113680:	50                   	push   %eax
f0113681:	68 00 95 12 f0       	push   $0xf0129500
f0113686:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011368c:	50                   	push   %eax
f011368d:	e8 f0 e9 00 00       	call   f0122082 <strcconcat>
f0113692:	83 c4 10             	add    $0x10,%esp
f0113695:	83 ec 0c             	sub    $0xc,%esp
f0113698:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011369e:	50                   	push   %eax
f011369f:	e8 89 e5 fe ff       	call   f0101c2d <execute_command>
f01136a4:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01136a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01136aa:	01 c0                	add    %eax,%eax
f01136ac:	83 ec 04             	sub    $0x4,%esp
f01136af:	50                   	push   %eax
f01136b0:	68 00 00 70 00       	push   $0x700000
f01136b5:	ff 75 d8             	pushl  -0x28(%ebp)
f01136b8:	e8 dc 63 ff ff       	call   f0109a99 <calculate_required_frames>
f01136bd:	83 c4 10             	add    $0x10,%esp
f01136c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01136c3:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01136ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01136cd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01136d0:	74 24                	je     f01136f6 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01136d2:	83 ec 0c             	sub    $0xc,%esp
f01136d5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01136d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01136db:	68 60 94 12 f0       	push   $0xf0129460
f01136e0:	68 01 06 00 00       	push   $0x601
f01136e5:	68 e6 7b 12 f0       	push   $0xf0127be6
f01136ea:	e8 39 cd fe ff       	call   f0100428 <_warn>
f01136ef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01136f6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01136fa:	74 04                	je     f0113700 <test_calculate_required_frames+0x7c7>
f01136fc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113700:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113704:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113707:	83 ec 04             	sub    $0x4,%esp
f011370a:	50                   	push   %eax
f011370b:	68 ff ff 3f 00       	push   $0x3fffff
f0113710:	ff 75 d8             	pushl  -0x28(%ebp)
f0113713:	e8 81 63 ff ff       	call   f0109a99 <calculate_required_frames>
f0113718:	83 c4 10             	add    $0x10,%esp
f011371b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f011371e:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0113725:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113728:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011372b:	74 24                	je     f0113751 <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011372d:	83 ec 0c             	sub    $0xc,%esp
f0113730:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113733:	ff 75 c8             	pushl  -0x38(%ebp)
f0113736:	68 60 94 12 f0       	push   $0xf0129460
f011373b:	68 0c 06 00 00       	push   $0x60c
f0113740:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113745:	e8 de cc fe ff       	call   f0100428 <_warn>
f011374a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011374d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113751:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113755:	74 04                	je     f011375b <test_calculate_required_frames+0x822>
f0113757:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011375b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011375f:	83 ec 0c             	sub    $0xc,%esp
f0113762:	68 73 85 12 f0       	push   $0xf0128573
f0113767:	e8 2f d7 fe ff       	call   f0100e9b <cprintf>
f011376c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011376f:	83 ec 08             	sub    $0x8,%esp
f0113772:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113775:	68 0c 95 12 f0       	push   $0xf012950c
f011377a:	e8 1c d7 fe ff       	call   f0100e9b <cprintf>
f011377f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113782:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113786:	75 10                	jne    f0113798 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0113788:	83 ec 0c             	sub    $0xc,%esp
f011378b:	68 4c 95 12 f0       	push   $0xf012954c
f0113790:	e8 06 d7 fe ff       	call   f0100e9b <cprintf>
f0113795:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113798:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f011379d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01137a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01137a3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01137a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01137ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01137ae:	5b                   	pop    %ebx
f01137af:	5e                   	pop    %esi
f01137b0:	5f                   	pop    %edi
f01137b1:	5d                   	pop    %ebp
f01137b2:	c3                   	ret    

f01137b3 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01137b3:	55                   	push   %ebp
f01137b4:	89 e5                	mov    %esp,%ebp
f01137b6:	57                   	push   %edi
f01137b7:	56                   	push   %esi
f01137b8:	53                   	push   %ebx
f01137b9:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01137bf:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01137c2:	bb e8 82 12 f0       	mov    $0xf01282e8,%ebx
f01137c7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01137cc:	89 c7                	mov    %eax,%edi
f01137ce:	89 de                	mov    %ebx,%esi
f01137d0:	89 d1                	mov    %edx,%ecx
f01137d2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01137d4:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01137d7:	b9 23 00 00 00       	mov    $0x23,%ecx
f01137dc:	b0 00                	mov    $0x0,%al
f01137de:	89 d7                	mov    %edx,%edi
f01137e0:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01137e2:	6a 00                	push   $0x0
f01137e4:	6a 0a                	push   $0xa
f01137e6:	6a 14                	push   $0x14
f01137e8:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01137eb:	50                   	push   %eax
f01137ec:	e8 f2 63 ff ff       	call   f0109be3 <env_create>
f01137f1:	83 c4 10             	add    $0x10,%esp
f01137f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01137f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01137fa:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113800:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113803:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113806:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011380c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011380f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113812:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113815:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011381c:	75 70 20 
f011381f:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113826:	00 00 00 
f0113829:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011382c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113831:	b8 00 00 00 00       	mov    $0x0,%eax
f0113836:	89 d7                	mov    %edx,%edi
f0113838:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011383a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011383d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113840:	83 ec 08             	sub    $0x8,%esp
f0113843:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113849:	52                   	push   %edx
f011384a:	50                   	push   %eax
f011384b:	e8 3a e7 00 00       	call   f0121f8a <ltostr>
f0113850:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113853:	83 ec 04             	sub    $0x4,%esp
f0113856:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011385c:	50                   	push   %eax
f011385d:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113863:	50                   	push   %eax
f0113864:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011386a:	50                   	push   %eax
f011386b:	e8 12 e8 00 00       	call   f0122082 <strcconcat>
f0113870:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113873:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011387a:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113881:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0113888:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f011388c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113893:	00 00 00 
	uint32 num_tables = 0;
f0113896:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011389d:	00 00 00 
	ClearUserSpace(proc_directory);
f01138a0:	83 ec 0c             	sub    $0xc,%esp
f01138a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01138a6:	e8 8d 0e 00 00       	call   f0114738 <ClearUserSpace>
f01138ab:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01138ae:	83 ec 0c             	sub    $0xc,%esp
f01138b1:	68 2c 94 12 f0       	push   $0xf012942c
f01138b6:	e8 e0 d5 fe ff       	call   f0100e9b <cprintf>
f01138bb:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01138be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01138c1:	c1 e0 03             	shl    $0x3,%eax
f01138c4:	89 c2                	mov    %eax,%edx
f01138c6:	83 ec 0c             	sub    $0xc,%esp
f01138c9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01138cf:	50                   	push   %eax
f01138d0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01138d6:	50                   	push   %eax
f01138d7:	52                   	push   %edx
f01138d8:	6a 00                	push   $0x0
f01138da:	ff 75 d8             	pushl  -0x28(%ebp)
f01138dd:	e8 9d 61 ff ff       	call   f0109a7f <calculate_allocated_space>
f01138e2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01138e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01138eb:	85 c0                	test   %eax,%eax
f01138ed:	74 27                	je     f0113916 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01138ef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01138f5:	83 ec 0c             	sub    $0xc,%esp
f01138f8:	6a 00                	push   $0x0
f01138fa:	50                   	push   %eax
f01138fb:	68 98 95 12 f0       	push   $0xf0129598
f0113900:	68 41 06 00 00       	push   $0x641
f0113905:	68 e6 7b 12 f0       	push   $0xf0127be6
f011390a:	e8 19 cb fe ff       	call   f0100428 <_warn>
f011390f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113912:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113916:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011391c:	85 c0                	test   %eax,%eax
f011391e:	74 27                	je     f0113947 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113920:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113926:	83 ec 0c             	sub    $0xc,%esp
f0113929:	6a 00                	push   $0x0
f011392b:	50                   	push   %eax
f011392c:	68 f8 95 12 f0       	push   $0xf01295f8
f0113931:	68 46 06 00 00       	push   $0x646
f0113936:	68 e6 7b 12 f0       	push   $0xf0127be6
f011393b:	e8 e8 ca fe ff       	call   f0100428 <_warn>
f0113940:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113943:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113947:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011394b:	74 04                	je     f0113951 <test_calculate_allocated_space+0x19e>
f011394d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113951:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0113955:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011395c:	00 00 00 
		num_pages = 0;
f011395f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113966:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0113969:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011396c:	c1 e0 02             	shl    $0x2,%eax
f011396f:	89 c2                	mov    %eax,%edx
f0113971:	83 ec 0c             	sub    $0xc,%esp
f0113974:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011397a:	50                   	push   %eax
f011397b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113981:	50                   	push   %eax
f0113982:	52                   	push   %edx
f0113983:	6a 00                	push   $0x0
f0113985:	ff 75 d8             	pushl  -0x28(%ebp)
f0113988:	e8 f2 60 ff ff       	call   f0109a7f <calculate_allocated_space>
f011398d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113990:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113996:	85 c0                	test   %eax,%eax
f0113998:	74 27                	je     f01139c1 <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011399a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01139a0:	83 ec 0c             	sub    $0xc,%esp
f01139a3:	6a 00                	push   $0x0
f01139a5:	50                   	push   %eax
f01139a6:	68 98 95 12 f0       	push   $0xf0129598
f01139ab:	68 52 06 00 00       	push   $0x652
f01139b0:	68 e6 7b 12 f0       	push   $0xf0127be6
f01139b5:	e8 6e ca fe ff       	call   f0100428 <_warn>
f01139ba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01139c1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01139c7:	85 c0                	test   %eax,%eax
f01139c9:	74 27                	je     f01139f2 <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01139cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01139d1:	83 ec 0c             	sub    $0xc,%esp
f01139d4:	6a 00                	push   $0x0
f01139d6:	50                   	push   %eax
f01139d7:	68 f8 95 12 f0       	push   $0xf01295f8
f01139dc:	68 57 06 00 00       	push   $0x657
f01139e1:	68 e6 7b 12 f0       	push   $0xf0127be6
f01139e6:	e8 3d ca fe ff       	call   f0100428 <_warn>
f01139eb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139f6:	74 04                	je     f01139fc <test_calculate_allocated_space+0x249>
f01139f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0113a00:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113a07:	00 00 00 
		num_pages = 0;
f0113a0a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113a11:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0113a14:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113a17:	c1 e0 0a             	shl    $0xa,%eax
f0113a1a:	89 c2                	mov    %eax,%edx
f0113a1c:	83 ec 0c             	sub    $0xc,%esp
f0113a1f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113a25:	50                   	push   %eax
f0113a26:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113a2c:	50                   	push   %eax
f0113a2d:	52                   	push   %edx
f0113a2e:	6a 00                	push   $0x0
f0113a30:	ff 75 d8             	pushl  -0x28(%ebp)
f0113a33:	e8 47 60 ff ff       	call   f0109a7f <calculate_allocated_space>
f0113a38:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113a3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113a41:	85 c0                	test   %eax,%eax
f0113a43:	74 27                	je     f0113a6c <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113a45:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113a4b:	83 ec 0c             	sub    $0xc,%esp
f0113a4e:	6a 00                	push   $0x0
f0113a50:	50                   	push   %eax
f0113a51:	68 98 95 12 f0       	push   $0xf0129598
f0113a56:	68 63 06 00 00       	push   $0x663
f0113a5b:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113a60:	e8 c3 c9 fe ff       	call   f0100428 <_warn>
f0113a65:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a68:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113a6c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113a72:	85 c0                	test   %eax,%eax
f0113a74:	74 27                	je     f0113a9d <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113a76:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113a7c:	83 ec 0c             	sub    $0xc,%esp
f0113a7f:	6a 00                	push   $0x0
f0113a81:	50                   	push   %eax
f0113a82:	68 f8 95 12 f0       	push   $0xf01295f8
f0113a87:	68 68 06 00 00       	push   $0x668
f0113a8c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113a91:	e8 92 c9 fe ff       	call   f0100428 <_warn>
f0113a96:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a99:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a9d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113aa1:	74 04                	je     f0113aa7 <test_calculate_allocated_space+0x2f4>
f0113aa3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113aa7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0113aab:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113ab2:	00 00 00 
		num_pages = 0;
f0113ab5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113abc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0113abf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113ac2:	89 d0                	mov    %edx,%eax
f0113ac4:	01 c0                	add    %eax,%eax
f0113ac6:	01 d0                	add    %edx,%eax
f0113ac8:	01 c0                	add    %eax,%eax
f0113aca:	05 00 10 00 00       	add    $0x1000,%eax
f0113acf:	89 c2                	mov    %eax,%edx
f0113ad1:	83 ec 0c             	sub    $0xc,%esp
f0113ad4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113ada:	50                   	push   %eax
f0113adb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113ae1:	50                   	push   %eax
f0113ae2:	52                   	push   %edx
f0113ae3:	68 00 10 00 00       	push   $0x1000
f0113ae8:	ff 75 d8             	pushl  -0x28(%ebp)
f0113aeb:	e8 8f 5f ff ff       	call   f0109a7f <calculate_allocated_space>
f0113af0:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113af3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113af9:	85 c0                	test   %eax,%eax
f0113afb:	74 27                	je     f0113b24 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113afd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113b03:	83 ec 0c             	sub    $0xc,%esp
f0113b06:	6a 00                	push   $0x0
f0113b08:	50                   	push   %eax
f0113b09:	68 98 95 12 f0       	push   $0xf0129598
f0113b0e:	68 75 06 00 00       	push   $0x675
f0113b13:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113b18:	e8 0b c9 fe ff       	call   f0100428 <_warn>
f0113b1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b20:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113b24:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113b2a:	85 c0                	test   %eax,%eax
f0113b2c:	74 27                	je     f0113b55 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113b2e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113b34:	83 ec 0c             	sub    $0xc,%esp
f0113b37:	6a 00                	push   $0x0
f0113b39:	50                   	push   %eax
f0113b3a:	68 f8 95 12 f0       	push   $0xf01295f8
f0113b3f:	68 7a 06 00 00       	push   $0x67a
f0113b44:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113b49:	e8 da c8 fe ff       	call   f0100428 <_warn>
f0113b4e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b51:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b55:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b59:	74 04                	je     f0113b5f <test_calculate_allocated_space+0x3ac>
f0113b5b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b5f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0113b63:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113b6a:	00 00 00 
		num_pages = 0;
f0113b6d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113b74:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0113b77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b7a:	89 c2                	mov    %eax,%edx
f0113b7c:	01 d2                	add    %edx,%edx
f0113b7e:	01 d0                	add    %edx,%eax
f0113b80:	05 00 18 00 00       	add    $0x1800,%eax
f0113b85:	89 c2                	mov    %eax,%edx
f0113b87:	83 ec 0c             	sub    $0xc,%esp
f0113b8a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113b90:	50                   	push   %eax
f0113b91:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113b97:	50                   	push   %eax
f0113b98:	52                   	push   %edx
f0113b99:	68 00 18 00 00       	push   $0x1800
f0113b9e:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ba1:	e8 d9 5e ff ff       	call   f0109a7f <calculate_allocated_space>
f0113ba6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113ba9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113baf:	85 c0                	test   %eax,%eax
f0113bb1:	74 27                	je     f0113bda <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113bb3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113bb9:	83 ec 0c             	sub    $0xc,%esp
f0113bbc:	6a 00                	push   $0x0
f0113bbe:	50                   	push   %eax
f0113bbf:	68 98 95 12 f0       	push   $0xf0129598
f0113bc4:	68 86 06 00 00       	push   $0x686
f0113bc9:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113bce:	e8 55 c8 fe ff       	call   f0100428 <_warn>
f0113bd3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bd6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113bda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113be0:	85 c0                	test   %eax,%eax
f0113be2:	74 27                	je     f0113c0b <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113be4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113bea:	83 ec 0c             	sub    $0xc,%esp
f0113bed:	6a 00                	push   $0x0
f0113bef:	50                   	push   %eax
f0113bf0:	68 f8 95 12 f0       	push   $0xf01295f8
f0113bf5:	68 8b 06 00 00       	push   $0x68b
f0113bfa:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113bff:	e8 24 c8 fe ff       	call   f0100428 <_warn>
f0113c04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c0f:	74 04                	je     f0113c15 <test_calculate_allocated_space+0x462>
f0113c11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0113c19:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113c20:	00 00 00 
		num_pages = 0;
f0113c23:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113c2a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0113c2d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113c30:	89 d0                	mov    %edx,%eax
f0113c32:	c1 e0 02             	shl    $0x2,%eax
f0113c35:	01 d0                	add    %edx,%eax
f0113c37:	01 c0                	add    %eax,%eax
f0113c39:	05 00 00 40 00       	add    $0x400000,%eax
f0113c3e:	89 c2                	mov    %eax,%edx
f0113c40:	83 ec 0c             	sub    $0xc,%esp
f0113c43:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113c49:	50                   	push   %eax
f0113c4a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113c50:	50                   	push   %eax
f0113c51:	52                   	push   %edx
f0113c52:	68 00 00 40 00       	push   $0x400000
f0113c57:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c5a:	e8 20 5e ff ff       	call   f0109a7f <calculate_allocated_space>
f0113c5f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113c62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113c68:	85 c0                	test   %eax,%eax
f0113c6a:	74 27                	je     f0113c93 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113c6c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113c72:	83 ec 0c             	sub    $0xc,%esp
f0113c75:	6a 00                	push   $0x0
f0113c77:	50                   	push   %eax
f0113c78:	68 98 95 12 f0       	push   $0xf0129598
f0113c7d:	68 97 06 00 00       	push   $0x697
f0113c82:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113c87:	e8 9c c7 fe ff       	call   f0100428 <_warn>
f0113c8c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113c93:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113c99:	85 c0                	test   %eax,%eax
f0113c9b:	74 27                	je     f0113cc4 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113c9d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113ca3:	83 ec 0c             	sub    $0xc,%esp
f0113ca6:	6a 00                	push   $0x0
f0113ca8:	50                   	push   %eax
f0113ca9:	68 f8 95 12 f0       	push   $0xf01295f8
f0113cae:	68 9c 06 00 00       	push   $0x69c
f0113cb3:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113cb8:	e8 6b c7 fe ff       	call   f0100428 <_warn>
f0113cbd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cc0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113cc4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cc8:	74 04                	je     f0113cce <test_calculate_allocated_space+0x51b>
f0113cca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0113cd2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113cd9:	00 00 00 
		num_pages = 0;
f0113cdc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113ce3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0113ce6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ce9:	05 00 00 38 00       	add    $0x380000,%eax
f0113cee:	01 c0                	add    %eax,%eax
f0113cf0:	89 c2                	mov    %eax,%edx
f0113cf2:	83 ec 0c             	sub    $0xc,%esp
f0113cf5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113cfb:	50                   	push   %eax
f0113cfc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113d02:	50                   	push   %eax
f0113d03:	52                   	push   %edx
f0113d04:	68 00 00 70 00       	push   $0x700000
f0113d09:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d0c:	e8 6e 5d ff ff       	call   f0109a7f <calculate_allocated_space>
f0113d11:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113d14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113d1a:	85 c0                	test   %eax,%eax
f0113d1c:	74 27                	je     f0113d45 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113d1e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113d24:	83 ec 0c             	sub    $0xc,%esp
f0113d27:	6a 00                	push   $0x0
f0113d29:	50                   	push   %eax
f0113d2a:	68 98 95 12 f0       	push   $0xf0129598
f0113d2f:	68 a9 06 00 00       	push   $0x6a9
f0113d34:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113d39:	e8 ea c6 fe ff       	call   f0100428 <_warn>
f0113d3e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d41:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113d45:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113d4b:	85 c0                	test   %eax,%eax
f0113d4d:	74 27                	je     f0113d76 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113d4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113d55:	83 ec 0c             	sub    $0xc,%esp
f0113d58:	6a 00                	push   $0x0
f0113d5a:	50                   	push   %eax
f0113d5b:	68 f8 95 12 f0       	push   $0xf01295f8
f0113d60:	68 ae 06 00 00       	push   $0x6ae
f0113d65:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113d6a:	e8 b9 c6 fe ff       	call   f0100428 <_warn>
f0113d6f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d72:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113d76:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d7a:	74 04                	je     f0113d80 <test_calculate_allocated_space+0x5cd>
f0113d7c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d80:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0113d84:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113d8b:	00 00 00 
		num_pages = 0;
f0113d8e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113d95:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0113d98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113d9b:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0113da0:	89 c2                	mov    %eax,%edx
f0113da2:	83 ec 0c             	sub    $0xc,%esp
f0113da5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113dab:	50                   	push   %eax
f0113dac:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113db2:	50                   	push   %eax
f0113db3:	52                   	push   %edx
f0113db4:	68 ff ff 3f 00       	push   $0x3fffff
f0113db9:	ff 75 d8             	pushl  -0x28(%ebp)
f0113dbc:	e8 be 5c ff ff       	call   f0109a7f <calculate_allocated_space>
f0113dc1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0113dc4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113dca:	85 c0                	test   %eax,%eax
f0113dcc:	74 27                	je     f0113df5 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0113dce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113dd4:	83 ec 0c             	sub    $0xc,%esp
f0113dd7:	6a 00                	push   $0x0
f0113dd9:	50                   	push   %eax
f0113dda:	68 98 95 12 f0       	push   $0xf0129598
f0113ddf:	68 ba 06 00 00       	push   $0x6ba
f0113de4:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113de9:	e8 3a c6 fe ff       	call   f0100428 <_warn>
f0113dee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113df1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0113df5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113dfb:	85 c0                	test   %eax,%eax
f0113dfd:	74 27                	je     f0113e26 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0113dff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113e05:	83 ec 0c             	sub    $0xc,%esp
f0113e08:	6a 00                	push   $0x0
f0113e0a:	50                   	push   %eax
f0113e0b:	68 f8 95 12 f0       	push   $0xf01295f8
f0113e10:	68 bf 06 00 00       	push   $0x6bf
f0113e15:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113e1a:	e8 09 c6 fe ff       	call   f0100428 <_warn>
f0113e1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e2a:	74 04                	je     f0113e30 <test_calculate_allocated_space+0x67d>
f0113e2c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113e34:	83 ec 0c             	sub    $0xc,%esp
f0113e37:	68 99 8f 12 f0       	push   $0xf0128f99
f0113e3c:	e8 5a d0 fe ff       	call   f0100e9b <cprintf>
f0113e41:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0113e44:	83 ec 0c             	sub    $0xc,%esp
f0113e47:	68 b8 94 12 f0       	push   $0xf01294b8
f0113e4c:	e8 4a d0 fe ff       	call   f0100e9b <cprintf>
f0113e51:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113e54:	83 ec 04             	sub    $0x4,%esp
f0113e57:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0113e5d:	50                   	push   %eax
f0113e5e:	68 52 83 12 f0       	push   $0xf0128352
f0113e63:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e69:	50                   	push   %eax
f0113e6a:	e8 13 e2 00 00       	call   f0122082 <strcconcat>
f0113e6f:	83 c4 10             	add    $0x10,%esp
f0113e72:	83 ec 0c             	sub    $0xc,%esp
f0113e75:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0113e7b:	50                   	push   %eax
f0113e7c:	e8 ac dd fe ff       	call   f0101c2d <execute_command>
f0113e81:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0113e84:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113e8b:	00 00 00 
		num_pages = 0;
f0113e8e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113e95:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0113e98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e9b:	c1 e0 03             	shl    $0x3,%eax
f0113e9e:	89 c2                	mov    %eax,%edx
f0113ea0:	83 ec 0c             	sub    $0xc,%esp
f0113ea3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113ea9:	50                   	push   %eax
f0113eaa:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113eb0:	50                   	push   %eax
f0113eb1:	52                   	push   %edx
f0113eb2:	6a 00                	push   $0x0
f0113eb4:	ff 75 d8             	pushl  -0x28(%ebp)
f0113eb7:	e8 c3 5b ff ff       	call   f0109a7f <calculate_allocated_space>
f0113ebc:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0113ebf:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0113ec6:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0113ecd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113ed3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113ed6:	74 28                	je     f0113f00 <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0113ed8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113ede:	83 ec 0c             	sub    $0xc,%esp
f0113ee1:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ee4:	50                   	push   %eax
f0113ee5:	68 98 95 12 f0       	push   $0xf0129598
f0113eea:	68 d6 06 00 00       	push   $0x6d6
f0113eef:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113ef4:	e8 2f c5 fe ff       	call   f0100428 <_warn>
f0113ef9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113efc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0113f00:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113f06:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113f09:	74 28                	je     f0113f33 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0113f0b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113f11:	83 ec 0c             	sub    $0xc,%esp
f0113f14:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113f17:	50                   	push   %eax
f0113f18:	68 f8 95 12 f0       	push   $0xf01295f8
f0113f1d:	68 db 06 00 00       	push   $0x6db
f0113f22:	68 e6 7b 12 f0       	push   $0xf0127be6
f0113f27:	e8 fc c4 fe ff       	call   f0100428 <_warn>
f0113f2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f2f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f33:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f37:	74 04                	je     f0113f3d <test_calculate_allocated_space+0x78a>
f0113f39:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f3d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0113f41:	83 ec 04             	sub    $0x4,%esp
f0113f44:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0113f4a:	50                   	push   %eax
f0113f4b:	68 5f 83 12 f0       	push   $0xf012835f
f0113f50:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113f56:	50                   	push   %eax
f0113f57:	e8 26 e1 00 00       	call   f0122082 <strcconcat>
f0113f5c:	83 c4 10             	add    $0x10,%esp
f0113f5f:	83 ec 0c             	sub    $0xc,%esp
f0113f62:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0113f68:	50                   	push   %eax
f0113f69:	e8 bf dc fe ff       	call   f0101c2d <execute_command>
f0113f6e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113f71:	83 ec 04             	sub    $0x4,%esp
f0113f74:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0113f7a:	50                   	push   %eax
f0113f7b:	68 ec 94 12 f0       	push   $0xf01294ec
f0113f80:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113f86:	50                   	push   %eax
f0113f87:	e8 f6 e0 00 00       	call   f0122082 <strcconcat>
f0113f8c:	83 c4 10             	add    $0x10,%esp
f0113f8f:	83 ec 0c             	sub    $0xc,%esp
f0113f92:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0113f98:	50                   	push   %eax
f0113f99:	e8 8f dc fe ff       	call   f0101c2d <execute_command>
f0113f9e:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0113fa1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0113fa8:	00 00 00 
		num_pages = 0;
f0113fab:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113fb2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0113fb5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113fb8:	c1 e0 03             	shl    $0x3,%eax
f0113fbb:	89 c2                	mov    %eax,%edx
f0113fbd:	83 ec 0c             	sub    $0xc,%esp
f0113fc0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0113fc6:	50                   	push   %eax
f0113fc7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0113fcd:	50                   	push   %eax
f0113fce:	52                   	push   %edx
f0113fcf:	6a 00                	push   $0x0
f0113fd1:	ff 75 d8             	pushl  -0x28(%ebp)
f0113fd4:	e8 a6 5a ff ff       	call   f0109a7f <calculate_allocated_space>
f0113fd9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0113fdc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0113fe3:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0113fea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113ff0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113ff3:	74 28                	je     f011401d <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0113ff5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113ffb:	83 ec 0c             	sub    $0xc,%esp
f0113ffe:	ff 75 c8             	pushl  -0x38(%ebp)
f0114001:	50                   	push   %eax
f0114002:	68 98 95 12 f0       	push   $0xf0129598
f0114007:	68 ec 06 00 00       	push   $0x6ec
f011400c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114011:	e8 12 c4 fe ff       	call   f0100428 <_warn>
f0114016:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114019:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011401d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114023:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114026:	74 28                	je     f0114050 <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114028:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011402e:	83 ec 0c             	sub    $0xc,%esp
f0114031:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114034:	50                   	push   %eax
f0114035:	68 f8 95 12 f0       	push   $0xf01295f8
f011403a:	68 f1 06 00 00       	push   $0x6f1
f011403f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114044:	e8 df c3 fe ff       	call   f0100428 <_warn>
f0114049:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011404c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114050:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114054:	74 04                	je     f011405a <test_calculate_allocated_space+0x8a7>
f0114056:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011405a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011405e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114065:	00 00 00 
		num_pages = 0;
f0114068:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011406f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114072:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114075:	c1 e0 0a             	shl    $0xa,%eax
f0114078:	89 c2                	mov    %eax,%edx
f011407a:	83 ec 0c             	sub    $0xc,%esp
f011407d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114083:	50                   	push   %eax
f0114084:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011408a:	50                   	push   %eax
f011408b:	52                   	push   %edx
f011408c:	6a 00                	push   $0x0
f011408e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114091:	e8 e9 59 ff ff       	call   f0109a7f <calculate_allocated_space>
f0114096:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114099:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01140a0:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01140a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01140ad:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01140b0:	74 28                	je     f01140da <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01140b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01140b8:	83 ec 0c             	sub    $0xc,%esp
f01140bb:	ff 75 c8             	pushl  -0x38(%ebp)
f01140be:	50                   	push   %eax
f01140bf:	68 98 95 12 f0       	push   $0xf0129598
f01140c4:	68 ff 06 00 00       	push   $0x6ff
f01140c9:	68 e6 7b 12 f0       	push   $0xf0127be6
f01140ce:	e8 55 c3 fe ff       	call   f0100428 <_warn>
f01140d3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140d6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01140da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01140e0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01140e3:	74 28                	je     f011410d <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01140e5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01140eb:	83 ec 0c             	sub    $0xc,%esp
f01140ee:	ff 75 c4             	pushl  -0x3c(%ebp)
f01140f1:	50                   	push   %eax
f01140f2:	68 f8 95 12 f0       	push   $0xf01295f8
f01140f7:	68 04 07 00 00       	push   $0x704
f01140fc:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114101:	e8 22 c3 fe ff       	call   f0100428 <_warn>
f0114106:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114109:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011410d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114111:	74 04                	je     f0114117 <test_calculate_allocated_space+0x964>
f0114113:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114117:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011411b:	83 ec 04             	sub    $0x4,%esp
f011411e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114124:	50                   	push   %eax
f0114125:	68 f8 94 12 f0       	push   $0xf01294f8
f011412a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114130:	50                   	push   %eax
f0114131:	e8 4c df 00 00       	call   f0122082 <strcconcat>
f0114136:	83 c4 10             	add    $0x10,%esp
f0114139:	83 ec 0c             	sub    $0xc,%esp
f011413c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114142:	50                   	push   %eax
f0114143:	e8 e5 da fe ff       	call   f0101c2d <execute_command>
f0114148:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011414b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114152:	00 00 00 
		num_pages = 0;
f0114155:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011415c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011415f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114162:	89 c2                	mov    %eax,%edx
f0114164:	01 d2                	add    %edx,%edx
f0114166:	01 d0                	add    %edx,%eax
f0114168:	05 00 18 00 00       	add    $0x1800,%eax
f011416d:	89 c2                	mov    %eax,%edx
f011416f:	83 ec 0c             	sub    $0xc,%esp
f0114172:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114178:	50                   	push   %eax
f0114179:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011417f:	50                   	push   %eax
f0114180:	52                   	push   %edx
f0114181:	68 00 18 00 00       	push   $0x1800
f0114186:	ff 75 d8             	pushl  -0x28(%ebp)
f0114189:	e8 f1 58 ff ff       	call   f0109a7f <calculate_allocated_space>
f011418e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114191:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114198:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011419f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141a5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01141a8:	74 28                	je     f01141d2 <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01141aa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141b0:	83 ec 0c             	sub    $0xc,%esp
f01141b3:	ff 75 c8             	pushl  -0x38(%ebp)
f01141b6:	50                   	push   %eax
f01141b7:	68 98 95 12 f0       	push   $0xf0129598
f01141bc:	68 15 07 00 00       	push   $0x715
f01141c1:	68 e6 7b 12 f0       	push   $0xf0127be6
f01141c6:	e8 5d c2 fe ff       	call   f0100428 <_warn>
f01141cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01141d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01141d8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01141db:	74 28                	je     f0114205 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01141dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01141e3:	83 ec 0c             	sub    $0xc,%esp
f01141e6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01141e9:	50                   	push   %eax
f01141ea:	68 f8 95 12 f0       	push   $0xf01295f8
f01141ef:	68 1a 07 00 00       	push   $0x71a
f01141f4:	68 e6 7b 12 f0       	push   $0xf0127be6
f01141f9:	e8 2a c2 fe ff       	call   f0100428 <_warn>
f01141fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114201:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114205:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114209:	74 04                	je     f011420f <test_calculate_allocated_space+0xa5c>
f011420b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011420f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114213:	83 ec 04             	sub    $0x4,%esp
f0114216:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011421c:	50                   	push   %eax
f011421d:	68 b8 85 12 f0       	push   $0xf01285b8
f0114222:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114228:	50                   	push   %eax
f0114229:	e8 54 de 00 00       	call   f0122082 <strcconcat>
f011422e:	83 c4 10             	add    $0x10,%esp
f0114231:	83 ec 0c             	sub    $0xc,%esp
f0114234:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011423a:	50                   	push   %eax
f011423b:	e8 ed d9 fe ff       	call   f0101c2d <execute_command>
f0114240:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0114243:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011424a:	00 00 00 
		num_pages = 0;
f011424d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114254:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114257:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011425a:	89 d0                	mov    %edx,%eax
f011425c:	c1 e0 02             	shl    $0x2,%eax
f011425f:	01 d0                	add    %edx,%eax
f0114261:	01 c0                	add    %eax,%eax
f0114263:	05 00 00 40 00       	add    $0x400000,%eax
f0114268:	89 c2                	mov    %eax,%edx
f011426a:	83 ec 0c             	sub    $0xc,%esp
f011426d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114273:	50                   	push   %eax
f0114274:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011427a:	50                   	push   %eax
f011427b:	52                   	push   %edx
f011427c:	68 00 00 40 00       	push   $0x400000
f0114281:	ff 75 d8             	pushl  -0x28(%ebp)
f0114284:	e8 f6 57 ff ff       	call   f0109a7f <calculate_allocated_space>
f0114289:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011428c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114293:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011429a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01142a0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01142a3:	74 28                	je     f01142cd <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01142a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01142ab:	83 ec 0c             	sub    $0xc,%esp
f01142ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01142b1:	50                   	push   %eax
f01142b2:	68 98 95 12 f0       	push   $0xf0129598
f01142b7:	68 2a 07 00 00       	push   $0x72a
f01142bc:	68 e6 7b 12 f0       	push   $0xf0127be6
f01142c1:	e8 62 c1 fe ff       	call   f0100428 <_warn>
f01142c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01142cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01142d3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01142d6:	74 28                	je     f0114300 <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01142d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01142de:	83 ec 0c             	sub    $0xc,%esp
f01142e1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01142e4:	50                   	push   %eax
f01142e5:	68 f8 95 12 f0       	push   $0xf01295f8
f01142ea:	68 2f 07 00 00       	push   $0x72f
f01142ef:	68 e6 7b 12 f0       	push   $0xf0127be6
f01142f4:	e8 2f c1 fe ff       	call   f0100428 <_warn>
f01142f9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142fc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114300:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114304:	74 04                	je     f011430a <test_calculate_allocated_space+0xb57>
f0114306:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011430a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011430e:	83 ec 04             	sub    $0x4,%esp
f0114311:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114317:	50                   	push   %eax
f0114318:	68 c2 85 12 f0       	push   $0xf01285c2
f011431d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114323:	50                   	push   %eax
f0114324:	e8 59 dd 00 00       	call   f0122082 <strcconcat>
f0114329:	83 c4 10             	add    $0x10,%esp
f011432c:	83 ec 0c             	sub    $0xc,%esp
f011432f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114335:	50                   	push   %eax
f0114336:	e8 f2 d8 fe ff       	call   f0101c2d <execute_command>
f011433b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011433e:	83 ec 04             	sub    $0x4,%esp
f0114341:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114347:	50                   	push   %eax
f0114348:	68 00 95 12 f0       	push   $0xf0129500
f011434d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114353:	50                   	push   %eax
f0114354:	e8 29 dd 00 00       	call   f0122082 <strcconcat>
f0114359:	83 c4 10             	add    $0x10,%esp
f011435c:	83 ec 0c             	sub    $0xc,%esp
f011435f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114365:	50                   	push   %eax
f0114366:	e8 c2 d8 fe ff       	call   f0101c2d <execute_command>
f011436b:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011436e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114375:	00 00 00 
		num_pages = 0;
f0114378:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011437f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114382:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114385:	05 00 00 38 00       	add    $0x380000,%eax
f011438a:	01 c0                	add    %eax,%eax
f011438c:	89 c2                	mov    %eax,%edx
f011438e:	83 ec 0c             	sub    $0xc,%esp
f0114391:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114397:	50                   	push   %eax
f0114398:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011439e:	50                   	push   %eax
f011439f:	52                   	push   %edx
f01143a0:	68 00 00 70 00       	push   $0x700000
f01143a5:	ff 75 d8             	pushl  -0x28(%ebp)
f01143a8:	e8 d2 56 ff ff       	call   f0109a7f <calculate_allocated_space>
f01143ad:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01143b0:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01143b7:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01143be:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01143c4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01143c7:	74 28                	je     f01143f1 <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01143c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01143cf:	83 ec 0c             	sub    $0xc,%esp
f01143d2:	ff 75 c8             	pushl  -0x38(%ebp)
f01143d5:	50                   	push   %eax
f01143d6:	68 98 95 12 f0       	push   $0xf0129598
f01143db:	68 41 07 00 00       	push   $0x741
f01143e0:	68 e6 7b 12 f0       	push   $0xf0127be6
f01143e5:	e8 3e c0 fe ff       	call   f0100428 <_warn>
f01143ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01143f1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01143f7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01143fa:	74 28                	je     f0114424 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01143fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114402:	83 ec 0c             	sub    $0xc,%esp
f0114405:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114408:	50                   	push   %eax
f0114409:	68 f8 95 12 f0       	push   $0xf01295f8
f011440e:	68 46 07 00 00       	push   $0x746
f0114413:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114418:	e8 0b c0 fe ff       	call   f0100428 <_warn>
f011441d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114420:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114424:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114428:	74 04                	je     f011442e <test_calculate_allocated_space+0xc7b>
f011442a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011442e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0114432:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114439:	00 00 00 
		num_pages = 0;
f011443c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114443:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114446:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114449:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011444e:	89 c2                	mov    %eax,%edx
f0114450:	83 ec 0c             	sub    $0xc,%esp
f0114453:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114459:	50                   	push   %eax
f011445a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114460:	50                   	push   %eax
f0114461:	52                   	push   %edx
f0114462:	68 ff ff 3f 00       	push   $0x3fffff
f0114467:	ff 75 d8             	pushl  -0x28(%ebp)
f011446a:	e8 10 56 ff ff       	call   f0109a7f <calculate_allocated_space>
f011446f:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114472:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0114479:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114480:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114486:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114489:	74 28                	je     f01144b3 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011448b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114491:	83 ec 0c             	sub    $0xc,%esp
f0114494:	ff 75 c8             	pushl  -0x38(%ebp)
f0114497:	50                   	push   %eax
f0114498:	68 98 95 12 f0       	push   $0xf0129598
f011449d:	68 54 07 00 00       	push   $0x754
f01144a2:	68 e6 7b 12 f0       	push   $0xf0127be6
f01144a7:	e8 7c bf fe ff       	call   f0100428 <_warn>
f01144ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01144b3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144b9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01144bc:	74 28                	je     f01144e6 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01144be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144c4:	83 ec 0c             	sub    $0xc,%esp
f01144c7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01144ca:	50                   	push   %eax
f01144cb:	68 f8 95 12 f0       	push   $0xf01295f8
f01144d0:	68 59 07 00 00       	push   $0x759
f01144d5:	68 e6 7b 12 f0       	push   $0xf0127be6
f01144da:	e8 49 bf fe ff       	call   f0100428 <_warn>
f01144df:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144e2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144e6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144ea:	74 04                	je     f01144f0 <test_calculate_allocated_space+0xd3d>
f01144ec:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144f0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01144f4:	83 ec 0c             	sub    $0xc,%esp
f01144f7:	68 73 85 12 f0       	push   $0xf0128573
f01144fc:	e8 9a c9 fe ff       	call   f0100e9b <cprintf>
f0114501:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0114504:	83 ec 08             	sub    $0x8,%esp
f0114507:	ff 75 e4             	pushl  -0x1c(%ebp)
f011450a:	68 54 96 12 f0       	push   $0xf0129654
f011450f:	e8 87 c9 fe ff       	call   f0100e9b <cprintf>
f0114514:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114517:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011451b:	75 10                	jne    f011452d <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011451d:	83 ec 0c             	sub    $0xc,%esp
f0114520:	68 94 96 12 f0       	push   $0xf0129694
f0114525:	e8 71 c9 fe ff       	call   f0100e9b <cprintf>
f011452a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011452d:	a1 f8 40 3f f0       	mov    0xf03f40f8,%eax
f0114532:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114535:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114538:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011453b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114540:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114543:	5b                   	pop    %ebx
f0114544:	5e                   	pop    %esi
f0114545:	5f                   	pop    %edi
f0114546:	5d                   	pop    %ebp
f0114547:	c3                   	ret    

f0114548 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0114548:	55                   	push   %ebp
f0114549:	89 e5                	mov    %esp,%ebp
f011454b:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011454e:	8b 45 10             	mov    0x10(%ebp),%eax
f0114551:	ba 01 00 00 00       	mov    $0x1,%edx
f0114556:	88 c1                	mov    %al,%cl
f0114558:	d3 e2                	shl    %cl,%edx
f011455a:	89 d0                	mov    %edx,%eax
f011455c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011455f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114562:	c1 e8 16             	shr    $0x16,%eax
f0114565:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011456c:	8b 45 08             	mov    0x8(%ebp),%eax
f011456f:	01 d0                	add    %edx,%eax
f0114571:	8b 00                	mov    (%eax),%eax
f0114573:	83 e0 01             	and    $0x1,%eax
f0114576:	85 c0                	test   %eax,%eax
f0114578:	75 07                	jne    f0114581 <CB+0x39>
f011457a:	b8 00 00 00 00       	mov    $0x0,%eax
f011457f:	eb 76                	jmp    f01145f7 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114581:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114584:	c1 e8 16             	shr    $0x16,%eax
f0114587:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011458e:	8b 45 08             	mov    0x8(%ebp),%eax
f0114591:	01 d0                	add    %edx,%eax
f0114593:	8b 00                	mov    (%eax),%eax
f0114595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011459a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011459d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01145a0:	c1 e8 0c             	shr    $0xc,%eax
f01145a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01145a6:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01145ab:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01145ae:	72 17                	jb     f01145c7 <CB+0x7f>
f01145b0:	ff 75 f0             	pushl  -0x10(%ebp)
f01145b3:	68 e0 96 12 f0       	push   $0xf01296e0
f01145b8:	68 74 07 00 00       	push   $0x774
f01145bd:	68 e6 7b 12 f0       	push   $0xf0127be6
f01145c2:	e8 53 bc fe ff       	call   f010021a <_panic>
f01145c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01145ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01145cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01145d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01145d5:	c1 e8 0c             	shr    $0xc,%eax
f01145d8:	25 ff 03 00 00       	and    $0x3ff,%eax
f01145dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01145e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01145e7:	01 d0                	add    %edx,%eax
f01145e9:	8b 00                	mov    (%eax),%eax
f01145eb:	23 45 f4             	and    -0xc(%ebp),%eax
f01145ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01145f1:	0f 94 c0             	sete   %al
f01145f4:	0f b6 c0             	movzbl %al,%eax
}
f01145f7:	c9                   	leave  
f01145f8:	c3                   	ret    

f01145f9 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01145f9:	55                   	push   %ebp
f01145fa:	89 e5                	mov    %esp,%ebp
f01145fc:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01145ff:	68 0f 97 12 f0       	push   $0xf012970f
f0114604:	68 1e 97 12 f0       	push   $0xf012971e
f0114609:	68 79 07 00 00       	push   $0x779
f011460e:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114613:	e8 02 bc fe ff       	call   f010021a <_panic>

f0114618 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0114618:	55                   	push   %ebp
f0114619:	89 e5                	mov    %esp,%ebp
f011461b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011461e:	68 0f 97 12 f0       	push   $0xf012970f
f0114623:	68 1e 97 12 f0       	push   $0xf012971e
f0114628:	68 83 07 00 00       	push   $0x783
f011462d:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114632:	e8 e3 bb fe ff       	call   f010021a <_panic>

f0114637 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0114637:	55                   	push   %ebp
f0114638:	89 e5                	mov    %esp,%ebp
f011463a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011463d:	68 0f 97 12 f0       	push   $0xf012970f
f0114642:	68 1e 97 12 f0       	push   $0xf012971e
f0114647:	68 92 07 00 00       	push   $0x792
f011464c:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114651:	e8 c4 bb fe ff       	call   f010021a <_panic>

f0114656 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0114656:	55                   	push   %ebp
f0114657:	89 e5                	mov    %esp,%ebp
f0114659:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011465c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011465f:	c1 e8 16             	shr    $0x16,%eax
f0114662:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114669:	8b 45 08             	mov    0x8(%ebp),%eax
f011466c:	01 d0                	add    %edx,%eax
f011466e:	8b 00                	mov    (%eax),%eax
f0114670:	83 e0 01             	and    $0x1,%eax
f0114673:	85 c0                	test   %eax,%eax
f0114675:	75 07                	jne    f011467e <CE+0x28>
f0114677:	b8 00 00 00 00       	mov    $0x0,%eax
f011467c:	eb 7a                	jmp    f01146f8 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011467e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114681:	c1 e8 16             	shr    $0x16,%eax
f0114684:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011468b:	8b 45 08             	mov    0x8(%ebp),%eax
f011468e:	01 d0                	add    %edx,%eax
f0114690:	8b 00                	mov    (%eax),%eax
f0114692:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114697:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011469a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011469d:	c1 e8 0c             	shr    $0xc,%eax
f01146a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01146a3:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f01146a8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01146ab:	72 17                	jb     f01146c4 <CE+0x6e>
f01146ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01146b0:	68 e0 96 12 f0       	push   $0xf01296e0
f01146b5:	68 9b 07 00 00       	push   $0x79b
f01146ba:	68 e6 7b 12 f0       	push   $0xf0127be6
f01146bf:	e8 56 bb fe ff       	call   f010021a <_panic>
f01146c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01146c7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01146cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01146cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01146d2:	c1 e8 0c             	shr    $0xc,%eax
f01146d5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01146da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01146e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01146e4:	01 d0                	add    %edx,%eax
f01146e6:	8b 00                	mov    (%eax),%eax
f01146e8:	85 c0                	test   %eax,%eax
f01146ea:	74 07                	je     f01146f3 <CE+0x9d>
f01146ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01146f1:	eb 05                	jmp    f01146f8 <CE+0xa2>
	return 1;
f01146f3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01146f8:	c9                   	leave  
f01146f9:	c3                   	ret    

f01146fa <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01146fa:	55                   	push   %ebp
f01146fb:	89 e5                	mov    %esp,%ebp
f01146fd:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0114700:	68 0f 97 12 f0       	push   $0xf012970f
f0114705:	68 1e 97 12 f0       	push   $0xf012971e
f011470a:	68 a2 07 00 00       	push   $0x7a2
f011470f:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114714:	e8 01 bb fe ff       	call   f010021a <_panic>

f0114719 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0114719:	55                   	push   %ebp
f011471a:	89 e5                	mov    %esp,%ebp
f011471c:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011471f:	68 0f 97 12 f0       	push   $0xf012970f
f0114724:	68 1e 97 12 f0       	push   $0xf012971e
f0114729:	68 b2 07 00 00       	push   $0x7b2
f011472e:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114733:	e8 e2 ba fe ff       	call   f010021a <_panic>

f0114738 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0114738:	55                   	push   %ebp
f0114739:	89 e5                	mov    %esp,%ebp
f011473b:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011473e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0114745:	eb 18                	jmp    f011475f <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0114747:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011474a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114751:	8b 45 08             	mov    0x8(%ebp),%eax
f0114754:	01 d0                	add    %edx,%eax
f0114756:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011475c:	ff 45 fc             	incl   -0x4(%ebp)
f011475f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0114762:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0114767:	76 de                	jbe    f0114747 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0114769:	90                   	nop
f011476a:	c9                   	leave  
f011476b:	c3                   	ret    

f011476c <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f011476c:	55                   	push   %ebp
f011476d:	89 e5                	mov    %esp,%ebp
f011476f:	83 ec 38             	sub    $0x38,%esp
f0114772:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0114775:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0114778:	8b 45 0c             	mov    0xc(%ebp),%eax
f011477b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114780:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0114783:	8b 45 10             	mov    0x10(%ebp),%eax
f0114786:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011478b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011478e:	e9 ea 01 00 00       	jmp    f011497d <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0114793:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0114797:	74 44                	je     f01147dd <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0114799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011479c:	83 ec 04             	sub    $0x4,%esp
f011479f:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01147a2:	52                   	push   %edx
f01147a3:	50                   	push   %eax
f01147a4:	ff 75 08             	pushl  0x8(%ebp)
f01147a7:	e8 79 31 ff ff       	call   f0107925 <get_frame_info>
f01147ac:	83 c4 10             	add    $0x10,%esp
f01147af:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01147b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01147b5:	85 c0                	test   %eax,%eax
f01147b7:	75 24                	jne    f01147dd <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01147b9:	83 ec 04             	sub    $0x4,%esp
f01147bc:	68 34 97 12 f0       	push   $0xf0129734
f01147c1:	68 cf 07 00 00       	push   $0x7cf
f01147c6:	68 e6 7b 12 f0       	push   $0xf0127be6
f01147cb:	e8 58 bc fe ff       	call   f0100428 <_warn>
f01147d0:	83 c4 10             	add    $0x10,%esp
				return 0;
f01147d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01147d8:	e9 b6 01 00 00       	jmp    f0114993 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01147dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01147e0:	83 ec 04             	sub    $0x4,%esp
f01147e3:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01147e6:	52                   	push   %edx
f01147e7:	50                   	push   %eax
f01147e8:	ff 75 08             	pushl  0x8(%ebp)
f01147eb:	e8 35 31 ff ff       	call   f0107925 <get_frame_info>
f01147f0:	83 c4 10             	add    $0x10,%esp
f01147f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01147f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01147f9:	85 c0                	test   %eax,%eax
f01147fb:	75 24                	jne    f0114821 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01147fd:	83 ec 04             	sub    $0x4,%esp
f0114800:	68 60 97 12 f0       	push   $0xf0129760
f0114805:	68 d6 07 00 00       	push   $0x7d6
f011480a:	68 e6 7b 12 f0       	push   $0xf0127be6
f011480f:	e8 14 bc fe ff       	call   f0100428 <_warn>
f0114814:	83 c4 10             	add    $0x10,%esp
			return 0;
f0114817:	b8 00 00 00 00       	mov    $0x0,%eax
f011481c:	e9 72 01 00 00       	jmp    f0114993 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0114821:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0114825:	75 70                	jne    f0114897 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0114827:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011482a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011482d:	c1 ea 0c             	shr    $0xc,%edx
f0114830:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0114836:	c1 e2 02             	shl    $0x2,%edx
f0114839:	01 d0                	add    %edx,%eax
f011483b:	8b 00                	mov    (%eax),%eax
f011483d:	c1 e8 0c             	shr    $0xc,%eax
f0114840:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0114843:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114846:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0114849:	c1 ea 0c             	shr    $0xc,%edx
f011484c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0114852:	c1 e2 02             	shl    $0x2,%edx
f0114855:	01 d0                	add    %edx,%eax
f0114857:	8b 00                	mov    (%eax),%eax
f0114859:	c1 e8 0c             	shr    $0xc,%eax
f011485c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011485f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114862:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0114865:	74 30                	je     f0114897 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0114867:	83 ec 04             	sub    $0x4,%esp
f011486a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011486d:	ff 75 e8             	pushl  -0x18(%ebp)
f0114870:	ff 75 f0             	pushl  -0x10(%ebp)
f0114873:	ff 75 f4             	pushl  -0xc(%ebp)
f0114876:	68 8c 97 12 f0       	push   $0xf012978c
f011487b:	68 e0 07 00 00       	push   $0x7e0
f0114880:	68 e6 7b 12 f0       	push   $0xf0127be6
f0114885:	e8 9e bb fe ff       	call   f0100428 <_warn>
f011488a:	83 c4 20             	add    $0x20,%esp
				return 0;
f011488d:	b8 00 00 00 00       	mov    $0x0,%eax
f0114892:	e9 fc 00 00 00       	jmp    f0114993 <CCP+0x227>
			}
		}
		if (ref != -1)
f0114897:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f011489b:	74 52                	je     f01148ef <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f011489d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01148a1:	74 0e                	je     f01148b1 <CCP+0x145>
f01148a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01148a6:	8b 40 08             	mov    0x8(%eax),%eax
f01148a9:	0f b7 c0             	movzwl %ax,%eax
f01148ac:	3b 45 18             	cmp    0x18(%ebp),%eax
f01148af:	74 3e                	je     f01148ef <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01148b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01148b5:	74 0b                	je     f01148c2 <CCP+0x156>
f01148b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01148ba:	8b 40 08             	mov    0x8(%eax),%eax
f01148bd:	0f b7 c0             	movzwl %ax,%eax
f01148c0:	eb 05                	jmp    f01148c7 <CCP+0x15b>
f01148c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01148c7:	83 ec 0c             	sub    $0xc,%esp
f01148ca:	50                   	push   %eax
f01148cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01148ce:	68 e8 97 12 f0       	push   $0xf01297e8
f01148d3:	68 e8 07 00 00       	push   $0x7e8
f01148d8:	68 e6 7b 12 f0       	push   $0xf0127be6
f01148dd:	e8 46 bb fe ff       	call   f0100428 <_warn>
f01148e2:	83 c4 20             	add    $0x20,%esp
				return 0;
f01148e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01148ea:	e9 a4 00 00 00       	jmp    f0114993 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01148ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01148f2:	ff 75 20             	pushl  0x20(%ebp)
f01148f5:	ff 75 1c             	pushl  0x1c(%ebp)
f01148f8:	50                   	push   %eax
f01148f9:	ff 75 08             	pushl  0x8(%ebp)
f01148fc:	e8 17 fd ff ff       	call   f0114618 <CPs>
f0114901:	83 c4 10             	add    $0x10,%esp
f0114904:	85 c0                	test   %eax,%eax
f0114906:	7f 21                	jg     f0114929 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0114908:	83 ec 04             	sub    $0x4,%esp
f011490b:	68 58 98 12 f0       	push   $0xf0129858
f0114910:	68 ee 07 00 00       	push   $0x7ee
f0114915:	68 e6 7b 12 f0       	push   $0xf0127be6
f011491a:	e8 09 bb fe ff       	call   f0100428 <_warn>
f011491f:	83 c4 10             	add    $0x10,%esp
			return 0;
f0114922:	b8 00 00 00 00       	mov    $0x0,%eax
f0114927:	eb 6a                	jmp    f0114993 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0114929:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011492d:	74 3a                	je     f0114969 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011492f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114932:	ff 75 28             	pushl  0x28(%ebp)
f0114935:	ff 75 24             	pushl  0x24(%ebp)
f0114938:	50                   	push   %eax
f0114939:	ff 75 08             	pushl  0x8(%ebp)
f011493c:	e8 d7 fc ff ff       	call   f0114618 <CPs>
f0114941:	83 c4 10             	add    $0x10,%esp
f0114944:	85 c0                	test   %eax,%eax
f0114946:	7f 21                	jg     f0114969 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0114948:	83 ec 04             	sub    $0x4,%esp
f011494b:	68 a0 98 12 f0       	push   $0xf01298a0
f0114950:	68 f5 07 00 00       	push   $0x7f5
f0114955:	68 e6 7b 12 f0       	push   $0xf0127be6
f011495a:	e8 c9 ba fe ff       	call   f0100428 <_warn>
f011495f:	83 c4 10             	add    $0x10,%esp
				return 0;
f0114962:	b8 00 00 00 00       	mov    $0x0,%eax
f0114967:	eb 2a                	jmp    f0114993 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0114969:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011496d:	74 07                	je     f0114976 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f011496f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0114976:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f011497d:	8b 55 10             	mov    0x10(%ebp),%edx
f0114980:	8b 45 14             	mov    0x14(%ebp),%eax
f0114983:	01 d0                	add    %edx,%eax
f0114985:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0114988:	0f 87 05 fe ff ff    	ja     f0114793 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f011498e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0114993:	c9                   	leave  
f0114994:	c3                   	ret    

f0114995 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0114995:	55                   	push   %ebp
f0114996:	89 e5                	mov    %esp,%ebp
f0114998:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("not handled yet");
f011499b:	83 ec 04             	sub    $0x4,%esp
f011499e:	68 e0 98 12 f0       	push   $0xf01298e0
f01149a3:	6a 0e                	push   $0xe
f01149a5:	68 f0 98 12 f0       	push   $0xf01298f0
f01149aa:	e8 6b b8 fe ff       	call   f010021a <_panic>

f01149af <test_priority_normal_and_lower>:
	}
#endif
}

void test_priority_normal_and_lower()
{
f01149af:	55                   	push   %ebp
f01149b0:	89 e5                	mov    %esp,%ebp
f01149b2:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("not handled yet");
f01149b5:	83 ec 04             	sub    $0x4,%esp
f01149b8:	68 e0 98 12 f0       	push   $0xf01298e0
f01149bd:	68 d7 00 00 00       	push   $0xd7
f01149c2:	68 f0 98 12 f0       	push   $0xf01298f0
f01149c7:	e8 4e b8 fe ff       	call   f010021a <_panic>

f01149cc <test_kmalloc>:
	int c;
};

uint32 da_limit = KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE ;
int test_kmalloc()
{
f01149cc:	55                   	push   %ebp
f01149cd:	89 e5                	mov    %esp,%ebp
f01149cf:	57                   	push   %edi
f01149d0:	53                   	push   %ebx
f01149d1:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f01149d7:	83 ec 0c             	sub    $0xc,%esp
f01149da:	68 0c 99 12 f0       	push   $0xf012990c
f01149df:	e8 b7 c4 fe ff       	call   f0100e9b <cprintf>
f01149e4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01149e7:	83 ec 0c             	sub    $0xc,%esp
f01149ea:	68 3c 99 12 f0       	push   $0xf012993c
f01149ef:	e8 a7 c4 fe ff       	call   f0100e9b <cprintf>
f01149f4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01149f7:	83 ec 0c             	sub    $0xc,%esp
f01149fa:	68 0c 99 12 f0       	push   $0xf012990c
f01149ff:	e8 97 c4 fe ff       	call   f0100e9b <cprintf>
f0114a04:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0114a07:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0114a0b:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0114a0f:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0114a15:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0114a1b:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0114a22:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2, *byteArr3 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfByte3, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0114a29:	e8 85 88 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int eval = 0;
f0114a31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f0114a38:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int freeFrames, freeDiskFrames;
	uint32 sizeOfKHeap;
	void* ptr_allocations[20] = {0};
f0114a3f:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f0114a45:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114a4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0114a4f:	89 d7                	mov    %edx,%edi
f0114a51:	f3 ab                	rep stos %eax,%es:(%edi)
	correct = 1 ;
f0114a53:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//Insufficient space
		freeFrames = sys_calculate_free_frames() ;
f0114a5a:	e8 54 88 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114a5f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114a62:	e8 e2 fc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114a67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0114a6a:	c7 45 cc 01 a0 ff 07 	movl   $0x7ffa001,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0114a71:	83 ec 0c             	sub    $0xc,%esp
f0114a74:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a77:	e8 25 3b ff ff       	call   f01085a1 <kmalloc>
f0114a7c:	83 c4 10             	add    $0x10,%esp
f0114a7f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f0114a85:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114a8b:	85 c0                	test   %eax,%eax
f0114a8d:	74 17                	je     f0114aa6 <test_kmalloc+0xda>
f0114a8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114a96:	83 ec 0c             	sub    $0xc,%esp
f0114a99:	68 98 99 12 f0       	push   $0xf0129998
f0114a9e:	e8 f8 c3 fe ff       	call   f0100e9b <cprintf>
f0114aa3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114aa6:	e8 9e fc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114aab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114aae:	74 17                	je     f0114ac7 <test_kmalloc+0xfb>
f0114ab0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114ab7:	83 ec 0c             	sub    $0xc,%esp
f0114aba:	68 cc 99 12 f0       	push   $0xf01299cc
f0114abf:	e8 d7 c3 fe ff       	call   f0100e9b <cprintf>
f0114ac4:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114ac7:	e8 e7 87 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114acc:	89 c2                	mov    %eax,%edx
f0114ace:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114ad1:	39 c2                	cmp    %eax,%edx
f0114ad3:	74 17                	je     f0114aec <test_kmalloc+0x120>
f0114ad5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114adc:	83 ec 0c             	sub    $0xc,%esp
f0114adf:	68 38 9a 12 f0       	push   $0xf0129a38
f0114ae4:	e8 b2 c3 fe ff       	call   f0100e9b <cprintf>
f0114ae9:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0114aec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0114af0:	74 04                	je     f0114af6 <test_kmalloc+0x12a>
f0114af2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0114af6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114afd:	e8 b1 87 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114b02:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114b05:	e8 3f fc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114b0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0114b0d:	83 ec 0c             	sub    $0xc,%esp
f0114b10:	68 00 fc 1f 00       	push   $0x1ffc00
f0114b15:	e8 87 3a ff ff       	call   f01085a1 <kmalloc>
f0114b1a:	83 c4 10             	add    $0x10,%esp
f0114b1d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114b23:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114b29:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0114b2e:	74 17                	je     f0114b47 <test_kmalloc+0x17b>
f0114b30:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114b37:	83 ec 0c             	sub    $0xc,%esp
f0114b3a:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114b3f:	e8 57 c3 fe ff       	call   f0100e9b <cprintf>
f0114b44:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114b47:	e8 fd fb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114b4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114b4f:	74 17                	je     f0114b68 <test_kmalloc+0x19c>
f0114b51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114b58:	83 ec 0c             	sub    $0xc,%esp
f0114b5b:	68 cc 99 12 f0       	push   $0xf01299cc
f0114b60:	e8 36 c3 fe ff       	call   f0100e9b <cprintf>
f0114b65:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114b68:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114b6b:	e8 43 87 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114b70:	29 c3                	sub    %eax,%ebx
f0114b72:	89 d8                	mov    %ebx,%eax
f0114b74:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0114b79:	77 17                	ja     f0114b92 <test_kmalloc+0x1c6>
f0114b7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114b82:	83 ec 0c             	sub    $0xc,%esp
f0114b85:	68 38 9a 12 f0       	push   $0xf0129a38
f0114b8a:	e8 0c c3 fe ff       	call   f0100e9b <cprintf>
f0114b8f:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114b92:	e8 1c 87 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114b97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114b9a:	e8 aa fb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114b9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0114ba2:	83 ec 0c             	sub    $0xc,%esp
f0114ba5:	68 00 fc 1f 00       	push   $0x1ffc00
f0114baa:	e8 f2 39 ff ff       	call   f01085a1 <kmalloc>
f0114baf:	83 c4 10             	add    $0x10,%esp
f0114bb2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114bb8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0114bbe:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f0114bc3:	74 17                	je     f0114bdc <test_kmalloc+0x210>
f0114bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114bcc:	83 ec 0c             	sub    $0xc,%esp
f0114bcf:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114bd4:	e8 c2 c2 fe ff       	call   f0100e9b <cprintf>
f0114bd9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114bdc:	e8 68 fb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114be1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114be4:	74 17                	je     f0114bfd <test_kmalloc+0x231>
f0114be6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114bed:	83 ec 0c             	sub    $0xc,%esp
f0114bf0:	68 cc 99 12 f0       	push   $0xf01299cc
f0114bf5:	e8 a1 c2 fe ff       	call   f0100e9b <cprintf>
f0114bfa:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114bfd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114c00:	e8 ae 86 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114c05:	29 c3                	sub    %eax,%ebx
f0114c07:	89 d8                	mov    %ebx,%eax
f0114c09:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0114c0e:	77 17                	ja     f0114c27 <test_kmalloc+0x25b>
f0114c10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114c17:	83 ec 0c             	sub    $0xc,%esp
f0114c1a:	68 38 9a 12 f0       	push   $0xf0129a38
f0114c1f:	e8 77 c2 fe ff       	call   f0100e9b <cprintf>
f0114c24:	83 c4 10             	add    $0x10,%esp

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = sys_calculate_free_frames() ;
f0114c27:	e8 87 86 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114c2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114c2f:	e8 15 fb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114c34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo-1);
f0114c37:	83 ec 0c             	sub    $0xc,%esp
f0114c3a:	68 ff 07 00 00       	push   $0x7ff
f0114c3f:	e8 5d 39 ff ff       	call   f01085a1 <kmalloc>
f0114c44:	83 c4 10             	add    $0x10,%esp
f0114c47:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0114c4d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114c53:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0114c58:	76 28                	jbe    f0114c82 <test_kmalloc+0x2b6>
f0114c5a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0114c60:	83 ec 0c             	sub    $0xc,%esp
f0114c63:	6a 00                	push   $0x0
f0114c65:	e8 d3 37 ff ff       	call   f010843d <sbrk>
f0114c6a:	83 c4 10             	add    $0x10,%esp
f0114c6d:	39 c3                	cmp    %eax,%ebx
f0114c6f:	73 11                	jae    f0114c82 <test_kmalloc+0x2b6>
f0114c71:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114c77:	89 c2                	mov    %eax,%edx
f0114c79:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0114c7e:	39 c2                	cmp    %eax,%edx
f0114c80:	72 17                	jb     f0114c99 <test_kmalloc+0x2cd>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0114c82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114c89:	83 ec 0c             	sub    $0xc,%esp
f0114c8c:	68 cc 9a 12 f0       	push   $0xf0129acc
f0114c91:	e8 05 c2 fe ff       	call   f0100e9b <cprintf>
f0114c96:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114c99:	e8 ab fa fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114c9e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114ca1:	74 17                	je     f0114cba <test_kmalloc+0x2ee>
f0114ca3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114caa:	83 ec 0c             	sub    $0xc,%esp
f0114cad:	68 cc 99 12 f0       	push   $0xf01299cc
f0114cb2:	e8 e4 c1 fe ff       	call   f0100e9b <cprintf>
f0114cb7:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = sys_calculate_free_frames() ;
f0114cba:	e8 f4 85 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114cbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114cc2:	e8 82 fa fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114cc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo-1);
f0114cca:	83 ec 0c             	sub    $0xc,%esp
f0114ccd:	68 ff 07 00 00       	push   $0x7ff
f0114cd2:	e8 ca 38 ff ff       	call   f01085a1 <kmalloc>
f0114cd7:	83 c4 10             	add    $0x10,%esp
f0114cda:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f0114ce0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114ce6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0114ceb:	76 28                	jbe    f0114d15 <test_kmalloc+0x349>
f0114ced:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0114cf3:	83 ec 0c             	sub    $0xc,%esp
f0114cf6:	6a 00                	push   $0x0
f0114cf8:	e8 40 37 ff ff       	call   f010843d <sbrk>
f0114cfd:	83 c4 10             	add    $0x10,%esp
f0114d00:	39 c3                	cmp    %eax,%ebx
f0114d02:	73 11                	jae    f0114d15 <test_kmalloc+0x349>
f0114d04:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114d0a:	89 c2                	mov    %eax,%edx
f0114d0c:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0114d11:	39 c2                	cmp    %eax,%edx
f0114d13:	72 17                	jb     f0114d2c <test_kmalloc+0x360>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0114d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114d1c:	83 ec 0c             	sub    $0xc,%esp
f0114d1f:	68 cc 9a 12 f0       	push   $0xf0129acc
f0114d24:	e8 72 c1 fe ff       	call   f0100e9b <cprintf>
f0114d29:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114d2c:	e8 18 fa fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114d31:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114d34:	74 17                	je     f0114d4d <test_kmalloc+0x381>
f0114d36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114d3d:	83 ec 0c             	sub    $0xc,%esp
f0114d40:	68 cc 99 12 f0       	push   $0xf01299cc
f0114d45:	e8 51 c1 fe ff       	call   f0100e9b <cprintf>
f0114d4a:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0114d4d:	e8 61 85 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114d52:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114d55:	e8 ef f9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114d5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0114d5d:	83 ec 0c             	sub    $0xc,%esp
f0114d60:	68 00 1c 00 00       	push   $0x1c00
f0114d65:	e8 37 38 ff ff       	call   f01085a1 <kmalloc>
f0114d6a:	83 c4 10             	add    $0x10,%esp
f0114d6d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114d73:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114d79:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f0114d7e:	74 17                	je     f0114d97 <test_kmalloc+0x3cb>
f0114d80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114d87:	83 ec 0c             	sub    $0xc,%esp
f0114d8a:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114d8f:	e8 07 c1 fe ff       	call   f0100e9b <cprintf>
f0114d94:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114d97:	e8 ad f9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114d9c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114d9f:	74 17                	je     f0114db8 <test_kmalloc+0x3ec>
f0114da1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114da8:	83 ec 0c             	sub    $0xc,%esp
f0114dab:	68 cc 99 12 f0       	push   $0xf01299cc
f0114db0:	e8 e6 c0 fe ff       	call   f0100e9b <cprintf>
f0114db5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114db8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114dbb:	e8 f3 84 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114dc0:	29 c3                	sub    %eax,%ebx
f0114dc2:	89 d8                	mov    %ebx,%eax
f0114dc4:	83 f8 01             	cmp    $0x1,%eax
f0114dc7:	77 17                	ja     f0114de0 <test_kmalloc+0x414>
f0114dc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114dd0:	83 ec 0c             	sub    $0xc,%esp
f0114dd3:	68 38 9a 12 f0       	push   $0xf0129a38
f0114dd8:	e8 be c0 fe ff       	call   f0100e9b <cprintf>
f0114ddd:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114de0:	e8 ce 84 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114de5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114de8:	e8 5c f9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114ded:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114df0:	83 ec 0c             	sub    $0xc,%esp
f0114df3:	68 00 fc 2f 00       	push   $0x2ffc00
f0114df8:	e8 a4 37 ff ff       	call   f01085a1 <kmalloc>
f0114dfd:	83 c4 10             	add    $0x10,%esp
f0114e00:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114e06:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114e0c:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f0114e11:	74 17                	je     f0114e2a <test_kmalloc+0x45e>
f0114e13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114e1a:	83 ec 0c             	sub    $0xc,%esp
f0114e1d:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114e22:	e8 74 c0 fe ff       	call   f0100e9b <cprintf>
f0114e27:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114e2a:	e8 1a f9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114e2f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114e32:	74 17                	je     f0114e4b <test_kmalloc+0x47f>
f0114e34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114e3b:	83 ec 0c             	sub    $0xc,%esp
f0114e3e:	68 cc 99 12 f0       	push   $0xf01299cc
f0114e43:	e8 53 c0 fe ff       	call   f0100e9b <cprintf>
f0114e48:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114e4b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114e4e:	e8 60 84 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114e53:	29 c3                	sub    %eax,%ebx
f0114e55:	89 d8                	mov    %ebx,%eax
f0114e57:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f0114e5c:	77 17                	ja     f0114e75 <test_kmalloc+0x4a9>
f0114e5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114e65:	83 ec 0c             	sub    $0xc,%esp
f0114e68:	68 38 9a 12 f0       	push   $0xf0129a38
f0114e6d:	e8 29 c0 fe ff       	call   f0100e9b <cprintf>
f0114e72:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114e75:	e8 39 84 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114e7a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114e7d:	e8 c7 f8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0114e85:	83 ec 0c             	sub    $0xc,%esp
f0114e88:	68 00 fc 5f 00       	push   $0x5ffc00
f0114e8d:	e8 0f 37 ff ff       	call   f01085a1 <kmalloc>
f0114e92:	83 c4 10             	add    $0x10,%esp
f0114e95:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114e9b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114ea1:	3d 00 70 70 f8       	cmp    $0xf8707000,%eax
f0114ea6:	74 17                	je     f0114ebf <test_kmalloc+0x4f3>
f0114ea8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114eaf:	83 ec 0c             	sub    $0xc,%esp
f0114eb2:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114eb7:	e8 df bf fe ff       	call   f0100e9b <cprintf>
f0114ebc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114ebf:	e8 85 f8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114ec4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114ec7:	74 17                	je     f0114ee0 <test_kmalloc+0x514>
f0114ec9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114ed0:	83 ec 0c             	sub    $0xc,%esp
f0114ed3:	68 cc 99 12 f0       	push   $0xf01299cc
f0114ed8:	e8 be bf fe ff       	call   f0100e9b <cprintf>
f0114edd:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114ee0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114ee3:	e8 cb 83 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114ee8:	29 c3                	sub    %eax,%ebx
f0114eea:	89 d8                	mov    %ebx,%eax
f0114eec:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f0114ef1:	77 17                	ja     f0114f0a <test_kmalloc+0x53e>
f0114ef3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114efa:	83 ec 0c             	sub    $0xc,%esp
f0114efd:	68 38 9a 12 f0       	push   $0xf0129a38
f0114f02:	e8 94 bf fe ff       	call   f0100e9b <cprintf>
f0114f07:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0114f0a:	e8 a4 83 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114f0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114f12:	e8 32 f8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114f17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0114f1a:	83 ec 0c             	sub    $0xc,%esp
f0114f1d:	68 00 38 00 00       	push   $0x3800
f0114f22:	e8 7a 36 ff ff       	call   f01085a1 <kmalloc>
f0114f27:	83 c4 10             	add    $0x10,%esp
f0114f2a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0114f30:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0114f36:	3d 00 70 d0 f8       	cmp    $0xf8d07000,%eax
f0114f3b:	74 17                	je     f0114f54 <test_kmalloc+0x588>
f0114f3d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114f44:	83 ec 0c             	sub    $0xc,%esp
f0114f47:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0114f4c:	e8 4a bf fe ff       	call   f0100e9b <cprintf>
f0114f51:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0114f54:	e8 f0 f7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114f59:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0114f5c:	74 17                	je     f0114f75 <test_kmalloc+0x5a9>
f0114f5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114f65:	83 ec 0c             	sub    $0xc,%esp
f0114f68:	68 cc 99 12 f0       	push   $0xf01299cc
f0114f6d:	e8 29 bf fe ff       	call   f0100e9b <cprintf>
f0114f72:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0114f75:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0114f78:	e8 36 83 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114f7d:	29 c3                	sub    %eax,%ebx
f0114f7f:	89 d8                	mov    %ebx,%eax
f0114f81:	83 f8 03             	cmp    $0x3,%eax
f0114f84:	77 17                	ja     f0114f9d <test_kmalloc+0x5d1>
f0114f86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0114f8d:	83 ec 0c             	sub    $0xc,%esp
f0114f90:	68 38 9a 12 f0       	push   $0xf0129a38
f0114f95:	e8 01 bf fe ff       	call   f0100e9b <cprintf>
f0114f9a:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f0114f9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0114fa1:	74 04                	je     f0114fa7 <test_kmalloc+0x5db>
f0114fa3:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f0114fa7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Checking read/write on the allocated spaces
	{

			freeFrames = sys_calculate_free_frames() ;
f0114fae:	e8 00 83 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0114fb3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0114fb6:	e8 8e f7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0114fbb:	89 45 d0             	mov    %eax,-0x30(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0114fbe:	c7 45 c8 ff fb 1f 00 	movl   $0x1ffbff,-0x38(%ebp)
			byteArr = (char *) ptr_allocations[0];
f0114fc5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114fcb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			byteArr[0] = minByte ;
f0114fce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114fd1:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0114fd4:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0114fd6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114fd9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114fdc:	01 c2                	add    %eax,%edx
f0114fde:	8a 45 ea             	mov    -0x16(%ebp),%al
f0114fe1:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0114fe3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0114fe9:	89 45 c0             	mov    %eax,-0x40(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0114fec:	c7 45 bc ff fd 0f 00 	movl   $0xffdff,-0x44(%ebp)
			shortArr[0] = minShort;
f0114ff3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114ff6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114ff9:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0114ffc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114fff:	01 c0                	add    %eax,%eax
f0115001:	89 c2                	mov    %eax,%edx
f0115003:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115006:	01 c2                	add    %eax,%edx
f0115008:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011500c:	66 89 02             	mov    %ax,(%edx)

			//In Dynamic Allocator Area
			{
				//In 2 KB - 1
				intArr = (int *) ptr_allocations[2];
f011500f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0115015:	89 45 b8             	mov    %eax,-0x48(%ebp)
				lastIndexOfInt = (2*kilo-1)/sizeof(int) - 1;
f0115018:	c7 45 b4 fe 01 00 00 	movl   $0x1fe,-0x4c(%ebp)
				intArr[0] = minInt;
f011501f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115022:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115025:	89 10                	mov    %edx,(%eax)
				intArr[lastIndexOfInt] = maxInt;
f0115027:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011502a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115031:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115034:	01 c2                	add    %eax,%edx
f0115036:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115039:	89 02                	mov    %eax,(%edx)

				//In 2 KB - 1
				byteArr2 = (char *) ptr_allocations[3];
f011503b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0115041:	89 45 b0             	mov    %eax,-0x50(%ebp)
				lastIndexOfByte2 = (2*kilo-1)/sizeof(char) - 1;
f0115044:	c7 45 ac fe 07 00 00 	movl   $0x7fe,-0x54(%ebp)
				byteArr2[0] = minByte;
f011504b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011504e:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0115051:	88 10                	mov    %dl,(%eax)
				byteArr2[lastIndexOfByte2] = maxByte;
f0115053:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0115056:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115059:	01 c2                	add    %eax,%edx
f011505b:	8a 45 ea             	mov    -0x16(%ebp),%al
f011505e:	88 02                	mov    %al,(%edx)
			}

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0115060:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0115066:	89 45 a8             	mov    %eax,-0x58(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0115069:	c7 45 a4 7f 03 00 00 	movl   $0x37f,-0x5c(%ebp)
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0115070:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115073:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0115076:	88 10                	mov    %dl,(%eax)
f0115078:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011507b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011507e:	66 89 42 02          	mov    %ax,0x2(%edx)
f0115082:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115085:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115088:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011508b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011508e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0115095:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115098:	01 c2                	add    %eax,%edx
f011509a:	8a 45 ea             	mov    -0x16(%ebp),%al
f011509d:	88 02                	mov    %al,(%edx)
f011509f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01150a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01150a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01150ac:	01 c2                	add    %eax,%edx
f01150ae:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f01150b2:	66 89 42 02          	mov    %ax,0x2(%edx)
f01150b6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01150b9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01150c0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01150c3:	01 c2                	add    %eax,%edx
f01150c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150c8:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte3 = (6*Mega-kilo)/sizeof(char) - 1;
f01150cb:	c7 45 a0 ff fb 5f 00 	movl   $0x5ffbff,-0x60(%ebp)
			byteArr3 = (char *) ptr_allocations[6];
f01150d2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01150d8:	89 45 9c             	mov    %eax,-0x64(%ebp)
			byteArr3[0] = minByte ;
f01150db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01150de:	8a 55 eb             	mov    -0x15(%ebp),%dl
f01150e1:	88 10                	mov    %dl,(%eax)
			byteArr3[lastIndexOfByte3 / 2] = maxByte / 2;
f01150e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01150e6:	89 c2                	mov    %eax,%edx
f01150e8:	c1 ea 1f             	shr    $0x1f,%edx
f01150eb:	01 d0                	add    %edx,%eax
f01150ed:	d1 f8                	sar    %eax
f01150ef:	89 c2                	mov    %eax,%edx
f01150f1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01150f4:	01 c2                	add    %eax,%edx
f01150f6:	8a 45 ea             	mov    -0x16(%ebp),%al
f01150f9:	88 c1                	mov    %al,%cl
f01150fb:	c0 e9 07             	shr    $0x7,%cl
f01150fe:	01 c8                	add    %ecx,%eax
f0115100:	d0 f8                	sar    %al
f0115102:	88 02                	mov    %al,(%edx)
			byteArr3[lastIndexOfByte3] = maxByte ;
f0115104:	8b 55 a0             	mov    -0x60(%ebp),%edx
f0115107:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011510a:	01 c2                	add    %eax,%edx
f011510c:	8a 45 ea             	mov    -0x16(%ebp),%al
f011510f:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0115111:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0115117:	89 45 98             	mov    %eax,-0x68(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011511a:	c7 45 94 ff 1b 00 00 	movl   $0x1bff,-0x6c(%ebp)
			shortArr2[0] = minShort;
f0115121:	8b 55 98             	mov    -0x68(%ebp),%edx
f0115124:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115127:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011512a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011512d:	01 c0                	add    %eax,%eax
f011512f:	89 c2                	mov    %eax,%edx
f0115131:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115134:	01 c2                	add    %eax,%edx
f0115136:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011513a:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011513d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115140:	8a 00                	mov    (%eax),%al
f0115142:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0115145:	75 0f                	jne    f0115156 <test_kmalloc+0x78a>
f0115147:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011514a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011514d:	01 d0                	add    %edx,%eax
f011514f:	8a 00                	mov    (%eax),%al
f0115151:	3a 45 ea             	cmp    -0x16(%ebp),%al
f0115154:	74 17                	je     f011516d <test_kmalloc+0x7a1>
f0115156:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011515d:	83 ec 0c             	sub    $0xc,%esp
f0115160:	68 54 9b 12 f0       	push   $0xf0129b54
f0115165:	e8 31 bd fe ff       	call   f0100e9b <cprintf>
f011516a:	83 c4 10             	add    $0x10,%esp
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011516d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115170:	66 8b 00             	mov    (%eax),%ax
f0115173:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f0115177:	75 15                	jne    f011518e <test_kmalloc+0x7c2>
f0115179:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011517c:	01 c0                	add    %eax,%eax
f011517e:	89 c2                	mov    %eax,%edx
f0115180:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115183:	01 d0                	add    %edx,%eax
f0115185:	66 8b 00             	mov    (%eax),%ax
f0115188:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011518c:	74 17                	je     f01151a5 <test_kmalloc+0x7d9>
f011518e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115195:	83 ec 0c             	sub    $0xc,%esp
f0115198:	68 54 9b 12 f0       	push   $0xf0129b54
f011519d:	e8 f9 bc fe ff       	call   f0100e9b <cprintf>
f01151a2:	83 c4 10             	add    $0x10,%esp
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f01151a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01151a8:	8b 00                	mov    (%eax),%eax
f01151aa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01151ad:	75 16                	jne    f01151c5 <test_kmalloc+0x7f9>
f01151af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01151b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01151b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01151bc:	01 d0                	add    %edx,%eax
f01151be:	8b 00                	mov    (%eax),%eax
f01151c0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01151c3:	74 17                	je     f01151dc <test_kmalloc+0x810>
f01151c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01151cc:	83 ec 0c             	sub    $0xc,%esp
f01151cf:	68 54 9b 12 f0       	push   $0xf0129b54
f01151d4:	e8 c2 bc fe ff       	call   f0100e9b <cprintf>
f01151d9:	83 c4 10             	add    $0x10,%esp
			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f01151dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01151df:	8a 00                	mov    (%eax),%al
f01151e1:	3a 45 eb             	cmp    -0x15(%ebp),%al
f01151e4:	75 0f                	jne    f01151f5 <test_kmalloc+0x829>
f01151e6:	8b 55 ac             	mov    -0x54(%ebp),%edx
f01151e9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01151ec:	01 d0                	add    %edx,%eax
f01151ee:	8a 00                	mov    (%eax),%al
f01151f0:	3a 45 ea             	cmp    -0x16(%ebp),%al
f01151f3:	74 17                	je     f011520c <test_kmalloc+0x840>
f01151f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01151fc:	83 ec 0c             	sub    $0xc,%esp
f01151ff:	68 54 9b 12 f0       	push   $0xf0129b54
f0115204:	e8 92 bc fe ff       	call   f0100e9b <cprintf>
f0115209:	83 c4 10             	add    $0x10,%esp

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011520c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011520f:	8a 00                	mov    (%eax),%al
f0115211:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0115214:	75 16                	jne    f011522c <test_kmalloc+0x860>
f0115216:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115219:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0115220:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115223:	01 d0                	add    %edx,%eax
f0115225:	8a 00                	mov    (%eax),%al
f0115227:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011522a:	74 17                	je     f0115243 <test_kmalloc+0x877>
f011522c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115233:	83 ec 0c             	sub    $0xc,%esp
f0115236:	68 54 9b 12 f0       	push   $0xf0129b54
f011523b:	e8 5b bc fe ff       	call   f0100e9b <cprintf>
f0115240:	83 c4 10             	add    $0x10,%esp
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0115243:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115246:	66 8b 40 02          	mov    0x2(%eax),%ax
f011524a:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011524e:	75 19                	jne    f0115269 <test_kmalloc+0x89d>
f0115250:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115253:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011525a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011525d:	01 d0                	add    %edx,%eax
f011525f:	66 8b 40 02          	mov    0x2(%eax),%ax
f0115263:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f0115267:	74 17                	je     f0115280 <test_kmalloc+0x8b4>
f0115269:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115270:	83 ec 0c             	sub    $0xc,%esp
f0115273:	68 54 9b 12 f0       	push   $0xf0129b54
f0115278:	e8 1e bc fe ff       	call   f0100e9b <cprintf>
f011527d:	83 c4 10             	add    $0x10,%esp
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0115280:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115283:	8b 40 04             	mov    0x4(%eax),%eax
f0115286:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0115289:	75 17                	jne    f01152a2 <test_kmalloc+0x8d6>
f011528b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011528e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0115295:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115298:	01 d0                	add    %edx,%eax
f011529a:	8b 40 04             	mov    0x4(%eax),%eax
f011529d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01152a0:	74 17                	je     f01152b9 <test_kmalloc+0x8ed>
f01152a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01152a9:	83 ec 0c             	sub    $0xc,%esp
f01152ac:	68 54 9b 12 f0       	push   $0xf0129b54
f01152b1:	e8 e5 bb fe ff       	call   f0100e9b <cprintf>
f01152b6:	83 c4 10             	add    $0x10,%esp

			if (byteArr3[0] != minByte || byteArr3[lastIndexOfByte3/2] != maxByte/2 || byteArr3[lastIndexOfByte3] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f01152b9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01152bc:	8a 00                	mov    (%eax),%al
f01152be:	3a 45 eb             	cmp    -0x15(%ebp),%al
f01152c1:	75 34                	jne    f01152f7 <test_kmalloc+0x92b>
f01152c3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01152c6:	89 c2                	mov    %eax,%edx
f01152c8:	c1 ea 1f             	shr    $0x1f,%edx
f01152cb:	01 d0                	add    %edx,%eax
f01152cd:	d1 f8                	sar    %eax
f01152cf:	89 c2                	mov    %eax,%edx
f01152d1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01152d4:	01 d0                	add    %edx,%eax
f01152d6:	8a 10                	mov    (%eax),%dl
f01152d8:	8a 45 ea             	mov    -0x16(%ebp),%al
f01152db:	88 c1                	mov    %al,%cl
f01152dd:	c0 e9 07             	shr    $0x7,%cl
f01152e0:	01 c8                	add    %ecx,%eax
f01152e2:	d0 f8                	sar    %al
f01152e4:	38 c2                	cmp    %al,%dl
f01152e6:	75 0f                	jne    f01152f7 <test_kmalloc+0x92b>
f01152e8:	8b 55 a0             	mov    -0x60(%ebp),%edx
f01152eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01152ee:	01 d0                	add    %edx,%eax
f01152f0:	8a 00                	mov    (%eax),%al
f01152f2:	3a 45 ea             	cmp    -0x16(%ebp),%al
f01152f5:	74 17                	je     f011530e <test_kmalloc+0x942>
f01152f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01152fe:	83 ec 0c             	sub    $0xc,%esp
f0115301:	68 54 9b 12 f0       	push   $0xf0129b54
f0115306:	e8 90 bb fe ff       	call   f0100e9b <cprintf>
f011530b:	83 c4 10             	add    $0x10,%esp
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011530e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115311:	66 8b 00             	mov    (%eax),%ax
f0115314:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f0115318:	75 15                	jne    f011532f <test_kmalloc+0x963>
f011531a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011531d:	01 c0                	add    %eax,%eax
f011531f:	89 c2                	mov    %eax,%edx
f0115321:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115324:	01 d0                	add    %edx,%eax
f0115326:	66 8b 00             	mov    (%eax),%ax
f0115329:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011532d:	74 17                	je     f0115346 <test_kmalloc+0x97a>
f011532f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115336:	83 ec 0c             	sub    $0xc,%esp
f0115339:	68 54 9b 12 f0       	push   $0xf0129b54
f011533e:	e8 58 bb fe ff       	call   f0100e9b <cprintf>
f0115343:	83 c4 10             	add    $0x10,%esp

			if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0115346:	e8 68 7f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011534b:	89 c2                	mov    %eax,%edx
f011534d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115350:	39 c2                	cmp    %eax,%edx
f0115352:	74 17                	je     f011536b <test_kmalloc+0x99f>
f0115354:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011535b:	83 ec 0c             	sub    $0xc,%esp
f011535e:	68 38 9a 12 f0       	push   $0xf0129a38
f0115363:	e8 33 bb fe ff       	call   f0100e9b <cprintf>
f0115368:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011536b:	e8 d9 f3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115370:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0115373:	74 17                	je     f011538c <test_kmalloc+0x9c0>
f0115375:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011537c:	83 ec 0c             	sub    $0xc,%esp
f011537f:	68 cc 99 12 f0       	push   $0xf01299cc
f0115384:	e8 12 bb fe ff       	call   f0100e9b <cprintf>
f0115389:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=30 ;
f011538c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115390:	74 04                	je     f0115396 <test_kmalloc+0x9ca>
f0115392:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	correct = 1 ;
f0115396:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Insufficient space again
	{
		freeFrames = sys_calculate_free_frames() ;
f011539d:	e8 11 7f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01153a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01153a5:	e8 9f f3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01153aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+/*4*kilo+4*kilo+*/8*kilo+3*Mega+6*Mega+16*kilo) ;
f01153ad:	c7 45 90 00 60 2f 07 	movl   $0x72f6000,-0x70(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01153b4:	83 ec 0c             	sub    $0xc,%esp
f01153b7:	ff 75 90             	pushl  -0x70(%ebp)
f01153ba:	e8 e2 31 ff ff       	call   f01085a1 <kmalloc>
f01153bf:	83 c4 10             	add    $0x10,%esp
f01153c2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if (ptr_allocations[8] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f01153c8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01153ce:	85 c0                	test   %eax,%eax
f01153d0:	74 17                	je     f01153e9 <test_kmalloc+0xa1d>
f01153d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01153d9:	83 ec 0c             	sub    $0xc,%esp
f01153dc:	68 98 99 12 f0       	push   $0xf0129998
f01153e1:	e8 b5 ba fe ff       	call   f0100e9b <cprintf>
f01153e6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01153e9:	e8 5b f3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01153ee:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01153f1:	74 17                	je     f011540a <test_kmalloc+0xa3e>
f01153f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01153fa:	83 ec 0c             	sub    $0xc,%esp
f01153fd:	68 cc 99 12 f0       	push   $0xf01299cc
f0115402:	e8 94 ba fe ff       	call   f0100e9b <cprintf>
f0115407:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011540a:	e8 a4 7e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011540f:	89 c2                	mov    %eax,%edx
f0115411:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115414:	39 c2                	cmp    %eax,%edx
f0115416:	74 17                	je     f011542f <test_kmalloc+0xa63>
f0115418:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011541f:	83 ec 0c             	sub    $0xc,%esp
f0115422:	68 38 9a 12 f0       	push   $0xf0129a38
f0115427:	e8 6f ba fe ff       	call   f0100e9b <cprintf>
f011542c:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011542f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115433:	74 04                	je     f0115439 <test_kmalloc+0xa6d>
f0115435:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0115439:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0115440:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0115446:	05 00 40 00 00       	add    $0x4000,%eax
f011544b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011544e:	c7 45 ec 00 50 00 f8 	movl   $0xf8005000,-0x14(%ebp)
f0115455:	eb 6a                	jmp    f01154c1 <test_kmalloc+0xaf5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0115457:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011545c:	83 ec 04             	sub    $0x4,%esp
f011545f:	8d 95 34 ff ff ff    	lea    -0xcc(%ebp),%edx
f0115465:	52                   	push   %edx
f0115466:	ff 75 ec             	pushl  -0x14(%ebp)
f0115469:	50                   	push   %eax
f011546a:	e8 3c 21 ff ff       	call   f01075ab <get_page_table>
f011546f:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0115472:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0115478:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011547b:	c1 ea 0c             	shr    $0xc,%edx
f011547e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115484:	c1 e2 02             	shl    $0x2,%edx
f0115487:	01 d0                	add    %edx,%eax
f0115489:	8b 00                	mov    (%eax),%eax
f011548b:	25 ff 0f 00 00       	and    $0xfff,%eax
f0115490:	89 45 88             	mov    %eax,-0x78(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0115493:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115496:	83 e0 04             	and    $0x4,%eax
f0115499:	85 c0                	test   %eax,%eax
f011549b:	74 1d                	je     f01154ba <test_kmalloc+0xaee>
			{
				if (correct)
f011549d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01154a1:	74 17                	je     f01154ba <test_kmalloc+0xaee>
				{
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
f01154a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01154aa:	83 ec 0c             	sub    $0xc,%esp
f01154ad:	68 8c 9b 12 f0       	push   $0xf0129b8c
f01154b2:	e8 e4 b9 fe ff       	call   f0100e9b <cprintf>
f01154b7:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01154ba:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01154c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01154c4:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01154c7:	72 8e                	jb     f0115457 <test_kmalloc+0xa8b>
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f01154c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01154cd:	74 04                	je     f01154d3 <test_kmalloc+0xb07>
f01154cf:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("\ntest kmalloc completed. Evaluation = %d%\n", eval);
f01154d3:	83 ec 08             	sub    $0x8,%esp
f01154d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01154d9:	68 d8 9b 12 f0       	push   $0xf0129bd8
f01154de:	e8 b8 b9 fe ff       	call   f0100e9b <cprintf>
f01154e3:	83 c4 10             	add    $0x10,%esp

	return 1;
f01154e6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01154eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01154ee:	5b                   	pop    %ebx
f01154ef:	5f                   	pop    %edi
f01154f0:	5d                   	pop    %ebp
f01154f1:	c3                   	ret    

f01154f2 <test_kmalloc_firstfit1>:


int test_kmalloc_firstfit1()
{
f01154f2:	55                   	push   %ebp
f01154f3:	89 e5                	mov    %esp,%ebp
f01154f5:	57                   	push   %edi
f01154f6:	83 ec 64             	sub    $0x64,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f01154f9:	83 ec 0c             	sub    $0xc,%esp
f01154fc:	68 0c 99 12 f0       	push   $0xf012990c
f0115501:	e8 95 b9 fe ff       	call   f0100e9b <cprintf>
f0115506:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0115509:	83 ec 0c             	sub    $0xc,%esp
f011550c:	68 3c 99 12 f0       	push   $0xf012993c
f0115511:	e8 85 b9 fe ff       	call   f0100e9b <cprintf>
f0115516:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0115519:	83 ec 0c             	sub    $0xc,%esp
f011551c:	68 0c 99 12 f0       	push   $0xf012990c
f0115521:	e8 75 b9 fe ff       	call   f0100e9b <cprintf>
f0115526:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0115529:	8d 55 98             	lea    -0x68(%ebp),%edx
f011552c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115531:	b8 00 00 00 00       	mov    $0x0,%eax
f0115536:	89 d7                	mov    %edx,%edi
f0115538:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011553a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f0115541:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f0115548:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011554f:	e8 5f 7d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115554:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115557:	e8 ed f1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011555c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011555f:	83 ec 0c             	sub    $0xc,%esp
f0115562:	68 00 fc 0f 00       	push   $0xffc00
f0115567:	e8 35 30 ff ff       	call   f01085a1 <kmalloc>
f011556c:	83 c4 10             	add    $0x10,%esp
f011556f:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115572:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115575:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011557a:	74 17                	je     f0115593 <test_kmalloc_firstfit1+0xa1>
f011557c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115583:	83 ec 0c             	sub    $0xc,%esp
f0115586:	68 04 9c 12 f0       	push   $0xf0129c04
f011558b:	e8 0b b9 fe ff       	call   f0100e9b <cprintf>
f0115590:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115593:	e8 b1 f1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115598:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011559b:	74 17                	je     f01155b4 <test_kmalloc_firstfit1+0xc2>
f011559d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01155a4:	83 ec 0c             	sub    $0xc,%esp
f01155a7:	68 cc 99 12 f0       	push   $0xf01299cc
f01155ac:	e8 ea b8 fe ff       	call   f0100e9b <cprintf>
f01155b1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f01155b4:	e8 fa 7c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01155b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01155bc:	29 c2                	sub    %eax,%edx
f01155be:	89 d0                	mov    %edx,%eax
f01155c0:	3d ff 00 00 00       	cmp    $0xff,%eax
f01155c5:	77 17                	ja     f01155de <test_kmalloc_firstfit1+0xec>
f01155c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01155ce:	83 ec 0c             	sub    $0xc,%esp
f01155d1:	68 35 9c 12 f0       	push   $0xf0129c35
f01155d6:	e8 c0 b8 fe ff       	call   f0100e9b <cprintf>
f01155db:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01155de:	e8 d0 7c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01155e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01155e6:	e8 5e f1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01155eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f01155ee:	83 ec 0c             	sub    $0xc,%esp
f01155f1:	68 00 fc 0f 00       	push   $0xffc00
f01155f6:	e8 a6 2f ff ff       	call   f01085a1 <kmalloc>
f01155fb:	83 c4 10             	add    $0x10,%esp
f01155fe:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115601:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115604:	3d 00 50 10 f8       	cmp    $0xf8105000,%eax
f0115609:	74 17                	je     f0115622 <test_kmalloc_firstfit1+0x130>
f011560b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115612:	83 ec 0c             	sub    $0xc,%esp
f0115615:	68 04 9c 12 f0       	push   $0xf0129c04
f011561a:	e8 7c b8 fe ff       	call   f0100e9b <cprintf>
f011561f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115622:	e8 22 f1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115627:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011562a:	74 17                	je     f0115643 <test_kmalloc_firstfit1+0x151>
f011562c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115633:	83 ec 0c             	sub    $0xc,%esp
f0115636:	68 cc 99 12 f0       	push   $0xf01299cc
f011563b:	e8 5b b8 fe ff       	call   f0100e9b <cprintf>
f0115640:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115643:	e8 6b 7c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115648:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011564b:	29 c2                	sub    %eax,%edx
f011564d:	89 d0                	mov    %edx,%eax
f011564f:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115654:	77 17                	ja     f011566d <test_kmalloc_firstfit1+0x17b>
f0115656:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011565d:	83 ec 0c             	sub    $0xc,%esp
f0115660:	68 35 9c 12 f0       	push   $0xf0129c35
f0115665:	e8 31 b8 fe ff       	call   f0100e9b <cprintf>
f011566a:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011566d:	e8 41 7c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115672:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115675:	e8 cf f0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011567a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011567d:	83 ec 0c             	sub    $0xc,%esp
f0115680:	68 00 fc 0f 00       	push   $0xffc00
f0115685:	e8 17 2f ff ff       	call   f01085a1 <kmalloc>
f011568a:	83 c4 10             	add    $0x10,%esp
f011568d:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115690:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115693:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f0115698:	74 17                	je     f01156b1 <test_kmalloc_firstfit1+0x1bf>
f011569a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01156a1:	83 ec 0c             	sub    $0xc,%esp
f01156a4:	68 04 9c 12 f0       	push   $0xf0129c04
f01156a9:	e8 ed b7 fe ff       	call   f0100e9b <cprintf>
f01156ae:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01156b1:	e8 93 f0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01156b6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01156b9:	74 17                	je     f01156d2 <test_kmalloc_firstfit1+0x1e0>
f01156bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01156c2:	83 ec 0c             	sub    $0xc,%esp
f01156c5:	68 cc 99 12 f0       	push   $0xf01299cc
f01156ca:	e8 cc b7 fe ff       	call   f0100e9b <cprintf>
f01156cf:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f01156d2:	e8 dc 7b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01156d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01156da:	29 c2                	sub    %eax,%edx
f01156dc:	89 d0                	mov    %edx,%eax
f01156de:	3d ff 00 00 00       	cmp    $0xff,%eax
f01156e3:	77 17                	ja     f01156fc <test_kmalloc_firstfit1+0x20a>
f01156e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01156ec:	83 ec 0c             	sub    $0xc,%esp
f01156ef:	68 35 9c 12 f0       	push   $0xf0129c35
f01156f4:	e8 a2 b7 fe ff       	call   f0100e9b <cprintf>
f01156f9:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01156fc:	e8 b2 7b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115701:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115704:	e8 40 f0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115709:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011570c:	83 ec 0c             	sub    $0xc,%esp
f011570f:	68 00 fc 0f 00       	push   $0xffc00
f0115714:	e8 88 2e ff ff       	call   f01085a1 <kmalloc>
f0115719:	83 c4 10             	add    $0x10,%esp
f011571c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011571f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115722:	3d 00 50 30 f8       	cmp    $0xf8305000,%eax
f0115727:	74 17                	je     f0115740 <test_kmalloc_firstfit1+0x24e>
f0115729:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115730:	83 ec 0c             	sub    $0xc,%esp
f0115733:	68 04 9c 12 f0       	push   $0xf0129c04
f0115738:	e8 5e b7 fe ff       	call   f0100e9b <cprintf>
f011573d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115740:	e8 04 f0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115745:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115748:	74 17                	je     f0115761 <test_kmalloc_firstfit1+0x26f>
f011574a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115751:	83 ec 0c             	sub    $0xc,%esp
f0115754:	68 cc 99 12 f0       	push   $0xf01299cc
f0115759:	e8 3d b7 fe ff       	call   f0100e9b <cprintf>
f011575e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115761:	e8 4d 7b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115766:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115769:	29 c2                	sub    %eax,%edx
f011576b:	89 d0                	mov    %edx,%eax
f011576d:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115772:	77 17                	ja     f011578b <test_kmalloc_firstfit1+0x299>
f0115774:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011577b:	83 ec 0c             	sub    $0xc,%esp
f011577e:	68 35 9c 12 f0       	push   $0xf0129c35
f0115783:	e8 13 b7 fe ff       	call   f0100e9b <cprintf>
f0115788:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011578b:	e8 23 7b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115790:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115793:	e8 b1 ef fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115798:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011579b:	83 ec 0c             	sub    $0xc,%esp
f011579e:	68 00 fc 1f 00       	push   $0x1ffc00
f01157a3:	e8 f9 2d ff ff       	call   f01085a1 <kmalloc>
f01157a8:	83 c4 10             	add    $0x10,%esp
f01157ab:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01157ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01157b1:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f01157b6:	74 17                	je     f01157cf <test_kmalloc_firstfit1+0x2dd>
f01157b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01157bf:	83 ec 0c             	sub    $0xc,%esp
f01157c2:	68 04 9c 12 f0       	push   $0xf0129c04
f01157c7:	e8 cf b6 fe ff       	call   f0100e9b <cprintf>
f01157cc:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01157cf:	e8 75 ef fe ff       	call   f0104749 <pf_calculate_free_frames>
f01157d4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01157d7:	74 17                	je     f01157f0 <test_kmalloc_firstfit1+0x2fe>
f01157d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01157e0:	83 ec 0c             	sub    $0xc,%esp
f01157e3:	68 cc 99 12 f0       	push   $0xf01299cc
f01157e8:	e8 ae b6 fe ff       	call   f0100e9b <cprintf>
f01157ed:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f01157f0:	e8 be 7a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01157f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01157f8:	29 c2                	sub    %eax,%edx
f01157fa:	89 d0                	mov    %edx,%eax
f01157fc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0115801:	77 17                	ja     f011581a <test_kmalloc_firstfit1+0x328>
f0115803:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011580a:	83 ec 0c             	sub    $0xc,%esp
f011580d:	68 35 9c 12 f0       	push   $0xf0129c35
f0115812:	e8 84 b6 fe ff       	call   f0100e9b <cprintf>
f0115817:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011581a:	e8 94 7a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011581f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115822:	e8 22 ef fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115827:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011582a:	83 ec 0c             	sub    $0xc,%esp
f011582d:	68 00 fc 1f 00       	push   $0x1ffc00
f0115832:	e8 6a 2d ff ff       	call   f01085a1 <kmalloc>
f0115837:	83 c4 10             	add    $0x10,%esp
f011583a:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011583d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115840:	3d 00 50 60 f8       	cmp    $0xf8605000,%eax
f0115845:	74 17                	je     f011585e <test_kmalloc_firstfit1+0x36c>
f0115847:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011584e:	83 ec 0c             	sub    $0xc,%esp
f0115851:	68 04 9c 12 f0       	push   $0xf0129c04
f0115856:	e8 40 b6 fe ff       	call   f0100e9b <cprintf>
f011585b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011585e:	e8 e6 ee fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115863:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115866:	74 17                	je     f011587f <test_kmalloc_firstfit1+0x38d>
f0115868:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011586f:	83 ec 0c             	sub    $0xc,%esp
f0115872:	68 cc 99 12 f0       	push   $0xf01299cc
f0115877:	e8 1f b6 fe ff       	call   f0100e9b <cprintf>
f011587c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011587f:	e8 2f 7a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115884:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115887:	29 c2                	sub    %eax,%edx
f0115889:	89 d0                	mov    %edx,%eax
f011588b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0115890:	77 17                	ja     f01158a9 <test_kmalloc_firstfit1+0x3b7>
f0115892:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115899:	83 ec 0c             	sub    $0xc,%esp
f011589c:	68 35 9c 12 f0       	push   $0xf0129c35
f01158a1:	e8 f5 b5 fe ff       	call   f0100e9b <cprintf>
f01158a6:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01158a9:	e8 05 7a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01158ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01158b1:	e8 93 ee fe ff       	call   f0104749 <pf_calculate_free_frames>
f01158b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f01158b9:	83 ec 0c             	sub    $0xc,%esp
f01158bc:	68 00 fc 2f 00       	push   $0x2ffc00
f01158c1:	e8 db 2c ff ff       	call   f01085a1 <kmalloc>
f01158c6:	83 c4 10             	add    $0x10,%esp
f01158c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01158cc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01158cf:	3d 00 50 80 f8       	cmp    $0xf8805000,%eax
f01158d4:	74 17                	je     f01158ed <test_kmalloc_firstfit1+0x3fb>
f01158d6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01158dd:	83 ec 0c             	sub    $0xc,%esp
f01158e0:	68 04 9c 12 f0       	push   $0xf0129c04
f01158e5:	e8 b1 b5 fe ff       	call   f0100e9b <cprintf>
f01158ea:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01158ed:	e8 57 ee fe ff       	call   f0104749 <pf_calculate_free_frames>
f01158f2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01158f5:	74 17                	je     f011590e <test_kmalloc_firstfit1+0x41c>
f01158f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01158fe:	83 ec 0c             	sub    $0xc,%esp
f0115901:	68 cc 99 12 f0       	push   $0xf01299cc
f0115906:	e8 90 b5 fe ff       	call   f0100e9b <cprintf>
f011590b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011590e:	e8 a0 79 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115913:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115916:	29 c2                	sub    %eax,%edx
f0115918:	89 d0                	mov    %edx,%eax
f011591a:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011591f:	77 17                	ja     f0115938 <test_kmalloc_firstfit1+0x446>
f0115921:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115928:	83 ec 0c             	sub    $0xc,%esp
f011592b:	68 35 9c 12 f0       	push   $0xf0129c35
f0115930:	e8 66 b5 fe ff       	call   f0100e9b <cprintf>
f0115935:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0115938:	e8 76 79 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011593d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115940:	e8 04 ee fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115945:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f0115948:	83 ec 0c             	sub    $0xc,%esp
f011594b:	68 00 fc 2f 00       	push   $0x2ffc00
f0115950:	e8 4c 2c ff ff       	call   f01085a1 <kmalloc>
f0115955:	83 c4 10             	add    $0x10,%esp
f0115958:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011595b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011595e:	3d 00 50 b0 f8       	cmp    $0xf8b05000,%eax
f0115963:	74 17                	je     f011597c <test_kmalloc_firstfit1+0x48a>
f0115965:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011596c:	83 ec 0c             	sub    $0xc,%esp
f011596f:	68 04 9c 12 f0       	push   $0xf0129c04
f0115974:	e8 22 b5 fe ff       	call   f0100e9b <cprintf>
f0115979:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011597c:	e8 c8 ed fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115981:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115984:	74 17                	je     f011599d <test_kmalloc_firstfit1+0x4ab>
f0115986:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011598d:	83 ec 0c             	sub    $0xc,%esp
f0115990:	68 cc 99 12 f0       	push   $0xf01299cc
f0115995:	e8 01 b5 fe ff       	call   f0100e9b <cprintf>
f011599a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011599d:	e8 11 79 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01159a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01159a5:	29 c2                	sub    %eax,%edx
f01159a7:	89 d0                	mov    %edx,%eax
f01159a9:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01159ae:	77 17                	ja     f01159c7 <test_kmalloc_firstfit1+0x4d5>
f01159b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01159b7:	83 ec 0c             	sub    $0xc,%esp
f01159ba:	68 35 9c 12 f0       	push   $0xf0129c35
f01159bf:	e8 d7 b4 fe ff       	call   f0100e9b <cprintf>
f01159c4:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f01159c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01159cb:	74 04                	je     f01159d1 <test_kmalloc_firstfit1+0x4df>
f01159cd:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f01159d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01159d8:	e8 d6 78 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01159dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01159e0:	e8 64 ed fe ff       	call   f0104749 <pf_calculate_free_frames>
f01159e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f01159e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01159eb:	83 ec 0c             	sub    $0xc,%esp
f01159ee:	50                   	push   %eax
f01159ef:	e8 45 2d ff ff       	call   f0108739 <kfree>
f01159f4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01159f7:	e8 4d ed fe ff       	call   f0104749 <pf_calculate_free_frames>
f01159fc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01159ff:	74 17                	je     f0115a18 <test_kmalloc_firstfit1+0x526>
f0115a01:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115a08:	83 ec 0c             	sub    $0xc,%esp
f0115a0b:	68 cc 99 12 f0       	push   $0xf01299cc
f0115a10:	e8 86 b4 fe ff       	call   f0100e9b <cprintf>
f0115a15:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f0115a18:	e8 96 78 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115a1d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0115a20:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115a25:	77 17                	ja     f0115a3e <test_kmalloc_firstfit1+0x54c>
f0115a27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115a2e:	83 ec 0c             	sub    $0xc,%esp
f0115a31:	68 49 9c 12 f0       	push   $0xf0129c49
f0115a36:	e8 60 b4 fe ff       	call   f0100e9b <cprintf>
f0115a3b:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0115a3e:	e8 70 78 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115a43:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115a46:	e8 fe ec fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115a4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[4]);
f0115a4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a51:	83 ec 0c             	sub    $0xc,%esp
f0115a54:	50                   	push   %eax
f0115a55:	e8 df 2c ff ff       	call   f0108739 <kfree>
f0115a5a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115a5d:	e8 e7 ec fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115a62:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115a65:	74 17                	je     f0115a7e <test_kmalloc_firstfit1+0x58c>
f0115a67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115a6e:	83 ec 0c             	sub    $0xc,%esp
f0115a71:	68 cc 99 12 f0       	push   $0xf01299cc
f0115a76:	e8 20 b4 fe ff       	call   f0100e9b <cprintf>
f0115a7b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f0115a7e:	e8 30 78 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115a83:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0115a86:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0115a8b:	77 17                	ja     f0115aa4 <test_kmalloc_firstfit1+0x5b2>
f0115a8d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115a94:	83 ec 0c             	sub    $0xc,%esp
f0115a97:	68 49 9c 12 f0       	push   $0xf0129c49
f0115a9c:	e8 fa b3 fe ff       	call   f0100e9b <cprintf>
f0115aa1:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0115aa4:	e8 0a 78 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115aac:	e8 98 ec fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115ab1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f0115ab4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115ab7:	83 ec 0c             	sub    $0xc,%esp
f0115aba:	50                   	push   %eax
f0115abb:	e8 79 2c ff ff       	call   f0108739 <kfree>
f0115ac0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115ac3:	e8 81 ec fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115ac8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115acb:	74 17                	je     f0115ae4 <test_kmalloc_firstfit1+0x5f2>
f0115acd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115ad4:	83 ec 0c             	sub    $0xc,%esp
f0115ad7:	68 cc 99 12 f0       	push   $0xf01299cc
f0115adc:	e8 ba b3 fe ff       	call   f0100e9b <cprintf>
f0115ae1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f0115ae4:	e8 ca 77 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115ae9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0115aec:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f0115af1:	77 17                	ja     f0115b0a <test_kmalloc_firstfit1+0x618>
f0115af3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115afa:	83 ec 0c             	sub    $0xc,%esp
f0115afd:	68 49 9c 12 f0       	push   $0xf0129c49
f0115b02:	e8 94 b3 fe ff       	call   f0100e9b <cprintf>
f0115b07:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0115b0a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115b0e:	74 04                	je     f0115b14 <test_kmalloc_firstfit1+0x622>
f0115b10:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0115b14:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0115b1b:	e8 93 77 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115b20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115b23:	e8 21 ec fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115b28:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f0115b2b:	83 ec 0c             	sub    $0xc,%esp
f0115b2e:	68 00 fc 07 00       	push   $0x7fc00
f0115b33:	e8 69 2a ff ff       	call   f01085a1 <kmalloc>
f0115b38:	83 c4 10             	add    $0x10,%esp
f0115b3b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115b3e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115b41:	3d 00 50 10 f8       	cmp    $0xf8105000,%eax
f0115b46:	74 17                	je     f0115b5f <test_kmalloc_firstfit1+0x66d>
f0115b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115b4f:	83 ec 0c             	sub    $0xc,%esp
f0115b52:	68 04 9c 12 f0       	push   $0xf0129c04
f0115b57:	e8 3f b3 fe ff       	call   f0100e9b <cprintf>
f0115b5c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115b5f:	e8 e5 eb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115b64:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115b67:	74 17                	je     f0115b80 <test_kmalloc_firstfit1+0x68e>
f0115b69:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115b70:	83 ec 0c             	sub    $0xc,%esp
f0115b73:	68 cc 99 12 f0       	push   $0xf01299cc
f0115b78:	e8 1e b3 fe ff       	call   f0100e9b <cprintf>
f0115b7d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 128) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115b80:	e8 2e 77 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115b85:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115b88:	29 c2                	sub    %eax,%edx
f0115b8a:	89 d0                	mov    %edx,%eax
f0115b8c:	83 f8 7f             	cmp    $0x7f,%eax
f0115b8f:	77 17                	ja     f0115ba8 <test_kmalloc_firstfit1+0x6b6>
f0115b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115b98:	83 ec 0c             	sub    $0xc,%esp
f0115b9b:	68 35 9c 12 f0       	push   $0xf0129c35
f0115ba0:	e8 f6 b2 fe ff       	call   f0100e9b <cprintf>
f0115ba5:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0115ba8:	e8 06 77 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115bad:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115bb0:	e8 94 eb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115bb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0115bb8:	83 ec 0c             	sub    $0xc,%esp
f0115bbb:	68 00 fc 0f 00       	push   $0xffc00
f0115bc0:	e8 dc 29 ff ff       	call   f01085a1 <kmalloc>
f0115bc5:	83 c4 10             	add    $0x10,%esp
f0115bc8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115bcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115bce:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f0115bd3:	74 17                	je     f0115bec <test_kmalloc_firstfit1+0x6fa>
f0115bd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115bdc:	83 ec 0c             	sub    $0xc,%esp
f0115bdf:	68 04 9c 12 f0       	push   $0xf0129c04
f0115be4:	e8 b2 b2 fe ff       	call   f0100e9b <cprintf>
f0115be9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115bec:	e8 58 eb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115bf1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115bf4:	74 17                	je     f0115c0d <test_kmalloc_firstfit1+0x71b>
f0115bf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115bfd:	83 ec 0c             	sub    $0xc,%esp
f0115c00:	68 cc 99 12 f0       	push   $0xf01299cc
f0115c05:	e8 91 b2 fe ff       	call   f0100e9b <cprintf>
f0115c0a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115c0d:	e8 a1 76 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115c12:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115c15:	29 c2                	sub    %eax,%edx
f0115c17:	89 d0                	mov    %edx,%eax
f0115c19:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115c1e:	77 17                	ja     f0115c37 <test_kmalloc_firstfit1+0x745>
f0115c20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115c27:	83 ec 0c             	sub    $0xc,%esp
f0115c2a:	68 35 9c 12 f0       	push   $0xf0129c35
f0115c2f:	e8 67 b2 fe ff       	call   f0100e9b <cprintf>
f0115c34:	83 c4 10             	add    $0x10,%esp


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0115c37:	e8 77 76 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115c3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115c3f:	e8 05 eb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115c44:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0115c47:	83 ec 0c             	sub    $0xc,%esp
f0115c4a:	68 00 fc 03 00       	push   $0x3fc00
f0115c4f:	e8 4d 29 ff ff       	call   f01085a1 <kmalloc>
f0115c54:	83 c4 10             	add    $0x10,%esp
f0115c57:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115c5a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c5d:	3d 00 50 18 f8       	cmp    $0xf8185000,%eax
f0115c62:	74 17                	je     f0115c7b <test_kmalloc_firstfit1+0x789>
f0115c64:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115c6b:	83 ec 0c             	sub    $0xc,%esp
f0115c6e:	68 04 9c 12 f0       	push   $0xf0129c04
f0115c73:	e8 23 b2 fe ff       	call   f0100e9b <cprintf>
f0115c78:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115c7b:	e8 c9 ea fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115c80:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115c83:	74 17                	je     f0115c9c <test_kmalloc_firstfit1+0x7aa>
f0115c85:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115c8c:	83 ec 0c             	sub    $0xc,%esp
f0115c8f:	68 cc 99 12 f0       	push   $0xf01299cc
f0115c94:	e8 02 b2 fe ff       	call   f0100e9b <cprintf>
f0115c99:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 64) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115c9c:	e8 12 76 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115ca1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115ca4:	29 c2                	sub    %eax,%edx
f0115ca6:	89 d0                	mov    %edx,%eax
f0115ca8:	83 f8 3f             	cmp    $0x3f,%eax
f0115cab:	77 17                	ja     f0115cc4 <test_kmalloc_firstfit1+0x7d2>
f0115cad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115cb4:	83 ec 0c             	sub    $0xc,%esp
f0115cb7:	68 35 9c 12 f0       	push   $0xf0129c35
f0115cbc:	e8 da b1 fe ff       	call   f0100e9b <cprintf>
f0115cc1:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0115cc4:	e8 ea 75 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ccc:	e8 78 ea fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115cd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f0115cd4:	83 ec 0c             	sub    $0xc,%esp
f0115cd7:	68 00 00 20 00       	push   $0x200000
f0115cdc:	e8 c0 28 ff ff       	call   f01085a1 <kmalloc>
f0115ce1:	83 c4 10             	add    $0x10,%esp
f0115ce4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115ce7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115cea:	3d 00 50 80 f8       	cmp    $0xf8805000,%eax
f0115cef:	74 17                	je     f0115d08 <test_kmalloc_firstfit1+0x816>
f0115cf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115cf8:	83 ec 0c             	sub    $0xc,%esp
f0115cfb:	68 04 9c 12 f0       	push   $0xf0129c04
f0115d00:	e8 96 b1 fe ff       	call   f0100e9b <cprintf>
f0115d05:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115d08:	e8 a6 75 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115d0d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115d10:	29 c2                	sub    %eax,%edx
f0115d12:	89 d0                	mov    %edx,%eax
f0115d14:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0115d19:	77 17                	ja     f0115d32 <test_kmalloc_firstfit1+0x840>
f0115d1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115d22:	83 ec 0c             	sub    $0xc,%esp
f0115d25:	68 35 9c 12 f0       	push   $0xf0129c35
f0115d2a:	e8 6c b1 fe ff       	call   f0100e9b <cprintf>
f0115d2f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115d32:	e8 12 ea fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115d37:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115d3a:	74 17                	je     f0115d53 <test_kmalloc_firstfit1+0x861>
f0115d3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115d43:	83 ec 0c             	sub    $0xc,%esp
f0115d46:	68 cc 99 12 f0       	push   $0xf01299cc
f0115d4b:	e8 4b b1 fe ff       	call   f0100e9b <cprintf>
f0115d50:	83 c4 10             	add    $0x10,%esp


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0115d53:	e8 5b 75 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115d58:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d5b:	e8 e9 e9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115d60:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f0115d63:	83 ec 0c             	sub    $0xc,%esp
f0115d66:	68 00 fc 3f 00       	push   $0x3ffc00
f0115d6b:	e8 31 28 ff ff       	call   f01085a1 <kmalloc>
f0115d70:	83 c4 10             	add    $0x10,%esp
f0115d73:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115d76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115d79:	3d 00 50 e0 f8       	cmp    $0xf8e05000,%eax
f0115d7e:	74 17                	je     f0115d97 <test_kmalloc_firstfit1+0x8a5>
f0115d80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115d87:	83 ec 0c             	sub    $0xc,%esp
f0115d8a:	68 04 9c 12 f0       	push   $0xf0129c04
f0115d8f:	e8 07 b1 fe ff       	call   f0100e9b <cprintf>
f0115d94:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115d97:	e8 ad e9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115d9c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115d9f:	74 17                	je     f0115db8 <test_kmalloc_firstfit1+0x8c6>
f0115da1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115da8:	83 ec 0c             	sub    $0xc,%esp
f0115dab:	68 cc 99 12 f0       	push   $0xf01299cc
f0115db0:	e8 e6 b0 fe ff       	call   f0100e9b <cprintf>
f0115db5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1024) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115db8:	e8 f6 74 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115dbd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115dc0:	29 c2                	sub    %eax,%edx
f0115dc2:	89 d0                	mov    %edx,%eax
f0115dc4:	3d ff 03 00 00       	cmp    $0x3ff,%eax
f0115dc9:	77 17                	ja     f0115de2 <test_kmalloc_firstfit1+0x8f0>
f0115dcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115dd2:	83 ec 0c             	sub    $0xc,%esp
f0115dd5:	68 35 9c 12 f0       	push   $0xf0129c35
f0115dda:	e8 bc b0 fe ff       	call   f0100e9b <cprintf>
f0115ddf:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f0115de2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115de6:	74 04                	je     f0115dec <test_kmalloc_firstfit1+0x8fa>
f0115de8:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f0115dec:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f0115df3:	e8 bb 74 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115df8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115dfb:	e8 49 e9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115e00:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f0115e03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115e06:	83 ec 0c             	sub    $0xc,%esp
f0115e09:	50                   	push   %eax
f0115e0a:	e8 2a 29 ff ff       	call   f0108739 <kfree>
f0115e0f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115e12:	e8 32 e9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115e17:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115e1a:	74 17                	je     f0115e33 <test_kmalloc_firstfit1+0x941>
f0115e1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115e23:	83 ec 0c             	sub    $0xc,%esp
f0115e26:	68 cc 99 12 f0       	push   $0xf01299cc
f0115e2b:	e8 6b b0 fe ff       	call   f0100e9b <cprintf>
f0115e30:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f0115e33:	e8 7b 74 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115e38:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0115e3b:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115e40:	77 17                	ja     f0115e59 <test_kmalloc_firstfit1+0x967>
f0115e42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115e49:	83 ec 0c             	sub    $0xc,%esp
f0115e4c:	68 49 9c 12 f0       	push   $0xf0129c49
f0115e51:	e8 45 b0 fe ff       	call   f0100e9b <cprintf>
f0115e56:	83 c4 10             	add    $0x10,%esp

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f0115e59:	e8 55 74 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115e5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e61:	e8 e3 e8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115e66:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f0115e69:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e6c:	83 ec 0c             	sub    $0xc,%esp
f0115e6f:	50                   	push   %eax
f0115e70:	e8 c4 28 ff ff       	call   f0108739 <kfree>
f0115e75:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115e78:	e8 cc e8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115e7d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115e80:	74 17                	je     f0115e99 <test_kmalloc_firstfit1+0x9a7>
f0115e82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115e89:	83 ec 0c             	sub    $0xc,%esp
f0115e8c:	68 cc 99 12 f0       	push   $0xf01299cc
f0115e91:	e8 05 b0 fe ff       	call   f0100e9b <cprintf>
f0115e96:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f0115e99:	e8 15 74 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115e9e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0115ea1:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115ea6:	77 17                	ja     f0115ebf <test_kmalloc_firstfit1+0x9cd>
f0115ea8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115eaf:	83 ec 0c             	sub    $0xc,%esp
f0115eb2:	68 49 9c 12 f0       	push   $0xf0129c49
f0115eb7:	e8 df af fe ff       	call   f0100e9b <cprintf>
f0115ebc:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0115ebf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115ec3:	74 04                	je     f0115ec9 <test_kmalloc_firstfit1+0x9d7>
f0115ec5:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0115ec9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f0115ed0:	e8 de 73 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115ed5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ed8:	e8 6c e8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115edd:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f0115ee0:	83 ec 0c             	sub    $0xc,%esp
f0115ee3:	68 00 00 10 00       	push   $0x100000
f0115ee8:	e8 b4 26 ff ff       	call   f01085a1 <kmalloc>
f0115eed:	83 c4 10             	add    $0x10,%esp
f0115ef0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0115ef3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ef6:	3d 00 50 1c f8       	cmp    $0xf81c5000,%eax
f0115efb:	74 17                	je     f0115f14 <test_kmalloc_firstfit1+0xa22>
f0115efd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115f04:	83 ec 0c             	sub    $0xc,%esp
f0115f07:	68 04 9c 12 f0       	push   $0xf0129c04
f0115f0c:	e8 8a af fe ff       	call   f0100e9b <cprintf>
f0115f11:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0115f14:	e8 30 e8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0115f19:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0115f1c:	74 17                	je     f0115f35 <test_kmalloc_firstfit1+0xa43>
f0115f1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115f25:	83 ec 0c             	sub    $0xc,%esp
f0115f28:	68 cc 99 12 f0       	push   $0xf01299cc
f0115f2d:	e8 69 af fe ff       	call   f0100e9b <cprintf>
f0115f32:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0115f35:	e8 79 73 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0115f3a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0115f3d:	29 c2                	sub    %eax,%edx
f0115f3f:	89 d0                	mov    %edx,%eax
f0115f41:	3d ff 00 00 00       	cmp    $0xff,%eax
f0115f46:	77 17                	ja     f0115f5f <test_kmalloc_firstfit1+0xa6d>
f0115f48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115f4f:	83 ec 0c             	sub    $0xc,%esp
f0115f52:	68 35 9c 12 f0       	push   $0xf0129c35
f0115f57:	e8 3f af fe ff       	call   f0100e9b <cprintf>
f0115f5c:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f0115f5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0115f63:	74 04                	je     f0115f69 <test_kmalloc_firstfit1+0xa77>
f0115f65:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (1) completed. Eval = %d%\n", eval);
f0115f69:	83 ec 08             	sub    $0x8,%esp
f0115f6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0115f6f:	68 58 9c 12 f0       	push   $0xf0129c58
f0115f74:	e8 22 af fe ff       	call   f0100e9b <cprintf>
f0115f79:	83 c4 10             	add    $0x10,%esp

	return 1;
f0115f7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115f81:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0115f84:	c9                   	leave  
f0115f85:	c3                   	ret    

f0115f86 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f0115f86:	55                   	push   %ebp
f0115f87:	89 e5                	mov    %esp,%ebp
f0115f89:	57                   	push   %edi
f0115f8a:	53                   	push   %ebx
f0115f8b:	83 ec 60             	sub    $0x60,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0115f8e:	83 ec 0c             	sub    $0xc,%esp
f0115f91:	68 0c 99 12 f0       	push   $0xf012990c
f0115f96:	e8 00 af fe ff       	call   f0100e9b <cprintf>
f0115f9b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0115f9e:	83 ec 0c             	sub    $0xc,%esp
f0115fa1:	68 3c 99 12 f0       	push   $0xf012993c
f0115fa6:	e8 f0 ae fe ff       	call   f0100e9b <cprintf>
f0115fab:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0115fae:	83 ec 0c             	sub    $0xc,%esp
f0115fb1:	68 0c 99 12 f0       	push   $0xf012990c
f0115fb6:	e8 e0 ae fe ff       	call   f0100e9b <cprintf>
f0115fbb:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0115fbe:	8d 55 98             	lea    -0x68(%ebp),%edx
f0115fc1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115fc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0115fcb:	89 d7                	mov    %edx,%edi
f0115fcd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f0115fcf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f0115fd6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f0115fdd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0115fe4:	83 ec 0c             	sub    $0xc,%esp
f0115fe7:	68 01 a0 ff 07       	push   $0x7ffa001
f0115fec:	e8 b0 25 ff ff       	call   f01085a1 <kmalloc>
f0115ff1:	83 c4 10             	add    $0x10,%esp
f0115ff4:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("kmalloc: Attempt to allocate more than heap size, should return NULL\n"); }
f0115ff7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115ffa:	85 c0                	test   %eax,%eax
f0115ffc:	74 17                	je     f0116015 <test_kmalloc_firstfit2+0x8f>
f0115ffe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116005:	83 ec 0c             	sub    $0xc,%esp
f0116008:	68 90 9c 12 f0       	push   $0xf0129c90
f011600d:	e8 89 ae fe ff       	call   f0100e9b <cprintf>
f0116012:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0116015:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116019:	74 04                	je     f011601f <test_kmalloc_firstfit2+0x99>
f011601b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011601f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116026:	e8 88 72 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011602b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011602e:	e8 16 e7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116033:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116036:	83 ec 0c             	sub    $0xc,%esp
f0116039:	68 00 fc 1f 00       	push   $0x1ffc00
f011603e:	e8 5e 25 ff ff       	call   f01085a1 <kmalloc>
f0116043:	83 c4 10             	add    $0x10,%esp
f0116046:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0116049:	8b 45 98             	mov    -0x68(%ebp),%eax
f011604c:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0116051:	74 17                	je     f011606a <test_kmalloc_firstfit2+0xe4>
f0116053:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011605a:	83 ec 0c             	sub    $0xc,%esp
f011605d:	68 04 9c 12 f0       	push   $0xf0129c04
f0116062:	e8 34 ae fe ff       	call   f0100e9b <cprintf>
f0116067:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011606a:	e8 da e6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011606f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116072:	74 17                	je     f011608b <test_kmalloc_firstfit2+0x105>
f0116074:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011607b:	83 ec 0c             	sub    $0xc,%esp
f011607e:	68 cc 99 12 f0       	push   $0xf01299cc
f0116083:	e8 13 ae fe ff       	call   f0100e9b <cprintf>
f0116088:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011608b:	e8 23 72 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116090:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0116093:	29 c2                	sub    %eax,%edx
f0116095:	89 d0                	mov    %edx,%eax
f0116097:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011609c:	77 17                	ja     f01160b5 <test_kmalloc_firstfit2+0x12f>
f011609e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01160a5:	83 ec 0c             	sub    $0xc,%esp
f01160a8:	68 35 9c 12 f0       	push   $0xf0129c35
f01160ad:	e8 e9 ad fe ff       	call   f0100e9b <cprintf>
f01160b2:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01160b5:	e8 f9 71 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01160ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160bd:	e8 87 e6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01160c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01160c5:	83 ec 0c             	sub    $0xc,%esp
f01160c8:	68 00 fc 1f 00       	push   $0x1ffc00
f01160cd:	e8 cf 24 ff ff       	call   f01085a1 <kmalloc>
f01160d2:	83 c4 10             	add    $0x10,%esp
f01160d5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01160d8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01160db:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f01160e0:	74 17                	je     f01160f9 <test_kmalloc_firstfit2+0x173>
f01160e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01160e9:	83 ec 0c             	sub    $0xc,%esp
f01160ec:	68 04 9c 12 f0       	push   $0xf0129c04
f01160f1:	e8 a5 ad fe ff       	call   f0100e9b <cprintf>
f01160f6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01160f9:	e8 4b e6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01160fe:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116101:	74 17                	je     f011611a <test_kmalloc_firstfit2+0x194>
f0116103:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011610a:	83 ec 0c             	sub    $0xc,%esp
f011610d:	68 cc 99 12 f0       	push   $0xf01299cc
f0116112:	e8 84 ad fe ff       	call   f0100e9b <cprintf>
f0116117:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011611a:	e8 94 71 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011611f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0116122:	29 c2                	sub    %eax,%edx
f0116124:	89 d0                	mov    %edx,%eax
f0116126:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011612b:	77 17                	ja     f0116144 <test_kmalloc_firstfit2+0x1be>
f011612d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116134:	83 ec 0c             	sub    $0xc,%esp
f0116137:	68 35 9c 12 f0       	push   $0xf0129c35
f011613c:	e8 5a ad fe ff       	call   f0100e9b <cprintf>
f0116141:	83 c4 10             	add    $0x10,%esp

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = sys_calculate_free_frames() ;
f0116144:	e8 6a 71 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116149:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011614c:	e8 f8 e5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116151:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*kilo);
f0116154:	83 ec 0c             	sub    $0xc,%esp
f0116157:	68 00 04 00 00       	push   $0x400
f011615c:	e8 40 24 ff ff       	call   f01085a1 <kmalloc>
f0116161:	83 c4 10             	add    $0x10,%esp
f0116164:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0116167:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011616a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011616f:	76 22                	jbe    f0116193 <test_kmalloc_firstfit2+0x20d>
f0116171:	8b 5d a0             	mov    -0x60(%ebp),%ebx
f0116174:	83 ec 0c             	sub    $0xc,%esp
f0116177:	6a 00                	push   $0x0
f0116179:	e8 bf 22 ff ff       	call   f010843d <sbrk>
f011617e:	83 c4 10             	add    $0x10,%esp
f0116181:	39 c3                	cmp    %eax,%ebx
f0116183:	73 0e                	jae    f0116193 <test_kmalloc_firstfit2+0x20d>
f0116185:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116188:	89 c2                	mov    %eax,%edx
f011618a:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011618f:	39 c2                	cmp    %eax,%edx
f0116191:	72 17                	jb     f01161aa <test_kmalloc_firstfit2+0x224>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0116193:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011619a:	83 ec 0c             	sub    $0xc,%esp
f011619d:	68 cc 9a 12 f0       	push   $0xf0129acc
f01161a2:	e8 f4 ac fe ff       	call   f0100e9b <cprintf>
f01161a7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01161aa:	e8 9a e5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01161af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01161b2:	74 17                	je     f01161cb <test_kmalloc_firstfit2+0x245>
f01161b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01161bb:	83 ec 0c             	sub    $0xc,%esp
f01161be:	68 cc 99 12 f0       	push   $0xf01299cc
f01161c3:	e8 d3 ac fe ff       	call   f0100e9b <cprintf>
f01161c8:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = sys_calculate_free_frames() ;
f01161cb:	e8 e3 70 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01161d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01161d3:	e8 71 e5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01161d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01161db:	83 ec 0c             	sub    $0xc,%esp
f01161de:	68 00 08 00 00       	push   $0x800
f01161e3:	e8 b9 23 ff ff       	call   f01085a1 <kmalloc>
f01161e8:	83 c4 10             	add    $0x10,%esp
f01161eb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f01161ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161f1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01161f6:	76 22                	jbe    f011621a <test_kmalloc_firstfit2+0x294>
f01161f8:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01161fb:	83 ec 0c             	sub    $0xc,%esp
f01161fe:	6a 00                	push   $0x0
f0116200:	e8 38 22 ff ff       	call   f010843d <sbrk>
f0116205:	83 c4 10             	add    $0x10,%esp
f0116208:	39 c3                	cmp    %eax,%ebx
f011620a:	73 0e                	jae    f011621a <test_kmalloc_firstfit2+0x294>
f011620c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011620f:	89 c2                	mov    %eax,%edx
f0116211:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0116216:	39 c2                	cmp    %eax,%edx
f0116218:	72 17                	jb     f0116231 <test_kmalloc_firstfit2+0x2ab>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011621a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116221:	83 ec 0c             	sub    $0xc,%esp
f0116224:	68 cc 9a 12 f0       	push   $0xf0129acc
f0116229:	e8 6d ac fe ff       	call   f0100e9b <cprintf>
f011622e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116231:	e8 13 e5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116236:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116239:	74 17                	je     f0116252 <test_kmalloc_firstfit2+0x2cc>
f011623b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116242:	83 ec 0c             	sub    $0xc,%esp
f0116245:	68 cc 99 12 f0       	push   $0xf01299cc
f011624a:	e8 4c ac fe ff       	call   f0100e9b <cprintf>
f011624f:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = sys_calculate_free_frames() ;
f0116252:	e8 5c 70 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116257:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011625a:	e8 ea e4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011625f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(1*kilo);
f0116262:	83 ec 0c             	sub    $0xc,%esp
f0116265:	68 00 04 00 00       	push   $0x400
f011626a:	e8 32 23 ff ff       	call   f01085a1 <kmalloc>
f011626f:	83 c4 10             	add    $0x10,%esp
f0116272:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f0116275:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116278:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011627d:	76 22                	jbe    f01162a1 <test_kmalloc_firstfit2+0x31b>
f011627f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0116282:	83 ec 0c             	sub    $0xc,%esp
f0116285:	6a 00                	push   $0x0
f0116287:	e8 b1 21 ff ff       	call   f010843d <sbrk>
f011628c:	83 c4 10             	add    $0x10,%esp
f011628f:	39 c3                	cmp    %eax,%ebx
f0116291:	73 0e                	jae    f01162a1 <test_kmalloc_firstfit2+0x31b>
f0116293:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116296:	89 c2                	mov    %eax,%edx
f0116298:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011629d:	39 c2                	cmp    %eax,%edx
f011629f:	72 17                	jb     f01162b8 <test_kmalloc_firstfit2+0x332>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f01162a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01162a8:	83 ec 0c             	sub    $0xc,%esp
f01162ab:	68 cc 9a 12 f0       	push   $0xf0129acc
f01162b0:	e8 e6 ab fe ff       	call   f0100e9b <cprintf>
f01162b5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01162b8:	e8 8c e4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01162bd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01162c0:	74 17                	je     f01162d9 <test_kmalloc_firstfit2+0x353>
f01162c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01162c9:	83 ec 0c             	sub    $0xc,%esp
f01162cc:	68 cc 99 12 f0       	push   $0xf01299cc
f01162d1:	e8 c5 ab fe ff       	call   f0100e9b <cprintf>
f01162d6:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB Hole in Dynamic Allocator Area
		freeFrames = sys_calculate_free_frames() ;
f01162d9:	e8 d5 6f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01162de:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162e1:	e8 63 e4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01162e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f01162e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01162ec:	83 ec 0c             	sub    $0xc,%esp
f01162ef:	50                   	push   %eax
f01162f0:	e8 44 24 ff ff       	call   f0108739 <kfree>
f01162f5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01162f8:	e8 4c e4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01162fd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116300:	74 17                	je     f0116319 <test_kmalloc_firstfit2+0x393>
f0116302:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116309:	83 ec 0c             	sub    $0xc,%esp
f011630c:	68 cc 99 12 f0       	push   $0xf01299cc
f0116311:	e8 85 ab fe ff       	call   f0100e9b <cprintf>
f0116316:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f0116319:	e8 95 6f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011631e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0116321:	74 17                	je     f011633a <test_kmalloc_firstfit2+0x3b4>
f0116323:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011632a:	83 ec 0c             	sub    $0xc,%esp
f011632d:	68 d8 9c 12 f0       	push   $0xf0129cd8
f0116332:	e8 64 ab fe ff       	call   f0100e9b <cprintf>
f0116337:	83 c4 10             	add    $0x10,%esp

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011633a:	e8 74 6f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011633f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116342:	e8 02 e4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116347:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011634a:	83 ec 0c             	sub    $0xc,%esp
f011634d:	68 00 1c 00 00       	push   $0x1c00
f0116352:	e8 4a 22 ff ff       	call   f01085a1 <kmalloc>
f0116357:	83 c4 10             	add    $0x10,%esp
f011635a:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011635d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116360:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f0116365:	74 17                	je     f011637e <test_kmalloc_firstfit2+0x3f8>
f0116367:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011636e:	83 ec 0c             	sub    $0xc,%esp
f0116371:	68 04 9c 12 f0       	push   $0xf0129c04
f0116376:	e8 20 ab fe ff       	call   f0100e9b <cprintf>
f011637b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011637e:	e8 c6 e3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116383:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116386:	74 17                	je     f011639f <test_kmalloc_firstfit2+0x419>
f0116388:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011638f:	83 ec 0c             	sub    $0xc,%esp
f0116392:	68 cc 99 12 f0       	push   $0xf01299cc
f0116397:	e8 ff aa fe ff       	call   f0100e9b <cprintf>
f011639c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: \n"); }
f011639f:	e8 0f 6f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01163a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01163a7:	29 c2                	sub    %eax,%edx
f01163a9:	89 d0                	mov    %edx,%eax
f01163ab:	83 f8 01             	cmp    $0x1,%eax
f01163ae:	77 17                	ja     f01163c7 <test_kmalloc_firstfit2+0x441>
f01163b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01163b7:	83 ec 0c             	sub    $0xc,%esp
f01163ba:	68 35 9c 12 f0       	push   $0xf0129c35
f01163bf:	e8 d7 aa fe ff       	call   f0100e9b <cprintf>
f01163c4:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01163c7:	e8 e7 6e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01163cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163cf:	e8 75 e3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01163d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[0]);
f01163d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01163da:	83 ec 0c             	sub    $0xc,%esp
f01163dd:	50                   	push   %eax
f01163de:	e8 56 23 ff ff       	call   f0108739 <kfree>
f01163e3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01163e6:	e8 5e e3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01163eb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01163ee:	74 17                	je     f0116407 <test_kmalloc_firstfit2+0x481>
f01163f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01163f7:	83 ec 0c             	sub    $0xc,%esp
f01163fa:	68 cc 99 12 f0       	push   $0xf01299cc
f01163ff:	e8 97 aa fe ff       	call   f0100e9b <cprintf>
f0116404:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f0116407:	e8 a7 6e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011640c:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011640f:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0116414:	77 17                	ja     f011642d <test_kmalloc_firstfit2+0x4a7>
f0116416:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011641d:	83 ec 0c             	sub    $0xc,%esp
f0116420:	68 49 9c 12 f0       	push   $0xf0129c49
f0116425:	e8 71 aa fe ff       	call   f0100e9b <cprintf>
f011642a:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011642d:	e8 81 6e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116432:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116435:	e8 0f e3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011643a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011643d:	83 ec 0c             	sub    $0xc,%esp
f0116440:	68 00 fc 2f 00       	push   $0x2ffc00
f0116445:	e8 57 21 ff ff       	call   f01085a1 <kmalloc>
f011644a:	83 c4 10             	add    $0x10,%esp
f011644d:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0116450:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116453:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f0116458:	74 17                	je     f0116471 <test_kmalloc_firstfit2+0x4eb>
f011645a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116461:	83 ec 0c             	sub    $0xc,%esp
f0116464:	68 04 9c 12 f0       	push   $0xf0129c04
f0116469:	e8 2d aa fe ff       	call   f0100e9b <cprintf>
f011646e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116471:	e8 d3 e2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116476:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116479:	74 17                	je     f0116492 <test_kmalloc_firstfit2+0x50c>
f011647b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116482:	83 ec 0c             	sub    $0xc,%esp
f0116485:	68 cc 99 12 f0       	push   $0xf01299cc
f011648a:	e8 0c aa fe ff       	call   f0100e9b <cprintf>
f011648f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) <  3*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f0116492:	e8 1c 6e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116497:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011649a:	29 c2                	sub    %eax,%edx
f011649c:	89 d0                	mov    %edx,%eax
f011649e:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01164a3:	77 17                	ja     f01164bc <test_kmalloc_firstfit2+0x536>
f01164a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01164ac:	83 ec 0c             	sub    $0xc,%esp
f01164af:	68 35 9c 12 f0       	push   $0xf0129c35
f01164b4:	e8 e2 a9 fe ff       	call   f0100e9b <cprintf>
f01164b9:	83 c4 10             	add    $0x10,%esp

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f01164bc:	e8 f2 6d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01164c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01164c4:	e8 80 e2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01164c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(2*Mega + 6*kilo);
f01164cc:	83 ec 0c             	sub    $0xc,%esp
f01164cf:	68 00 18 20 00       	push   $0x201800
f01164d4:	e8 c8 20 ff ff       	call   f01085a1 <kmalloc>
f01164d9:	83 c4 10             	add    $0x10,%esp
f01164dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01164df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01164e2:	3d 00 70 70 f8       	cmp    $0xf8707000,%eax
f01164e7:	74 17                	je     f0116500 <test_kmalloc_firstfit2+0x57a>
f01164e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01164f0:	83 ec 0c             	sub    $0xc,%esp
f01164f3:	68 04 9c 12 f0       	push   $0xf0129c04
f01164f8:	e8 9e a9 fe ff       	call   f0100e9b <cprintf>
f01164fd:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116500:	e8 44 e2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116505:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116508:	74 17                	je     f0116521 <test_kmalloc_firstfit2+0x59b>
f011650a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116511:	83 ec 0c             	sub    $0xc,%esp
f0116514:	68 cc 99 12 f0       	push   $0xf01299cc
f0116519:	e8 7d a9 fe ff       	call   f0100e9b <cprintf>
f011651e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) <  514) { correct = 0; cprintf("Wrong allocation: \n"); }
f0116521:	e8 8d 6d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116526:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0116529:	29 c2                	sub    %eax,%edx
f011652b:	89 d0                	mov    %edx,%eax
f011652d:	3d 01 02 00 00       	cmp    $0x201,%eax
f0116532:	77 17                	ja     f011654b <test_kmalloc_firstfit2+0x5c5>
f0116534:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011653b:	83 ec 0c             	sub    $0xc,%esp
f011653e:	68 35 9c 12 f0       	push   $0xf0129c35
f0116543:	e8 53 a9 fe ff       	call   f0100e9b <cprintf>
f0116548:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011654b:	e8 63 6d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116550:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116553:	e8 f1 e1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116558:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011655b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011655e:	83 ec 0c             	sub    $0xc,%esp
f0116561:	50                   	push   %eax
f0116562:	e8 d2 21 ff ff       	call   f0108739 <kfree>
f0116567:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011656a:	e8 da e1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011656f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116572:	74 17                	je     f011658b <test_kmalloc_firstfit2+0x605>
f0116574:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011657b:	83 ec 0c             	sub    $0xc,%esp
f011657e:	68 cc 99 12 f0       	push   $0xf01299cc
f0116583:	e8 13 a9 fe ff       	call   f0100e9b <cprintf>
f0116588:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011658b:	e8 23 6d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116590:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0116593:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f0116598:	77 17                	ja     f01165b1 <test_kmalloc_firstfit2+0x62b>
f011659a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01165a1:	83 ec 0c             	sub    $0xc,%esp
f01165a4:	68 49 9c 12 f0       	push   $0xf0129c49
f01165a9:	e8 ed a8 fe ff       	call   f0100e9b <cprintf>
f01165ae:	83 c4 10             	add    $0x10,%esp

		//2 KB Hole in Dynamic Allocator Area [Resulting Hole = 1 KB + 2 KB = 3 KB]
		freeFrames = sys_calculate_free_frames() ;
f01165b1:	e8 fd 6c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01165b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01165b9:	e8 8b e1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01165be:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f01165c1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165c4:	83 ec 0c             	sub    $0xc,%esp
f01165c7:	50                   	push   %eax
f01165c8:	e8 6c 21 ff ff       	call   f0108739 <kfree>
f01165cd:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01165d0:	e8 74 e1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01165d5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01165d8:	74 17                	je     f01165f1 <test_kmalloc_firstfit2+0x66b>
f01165da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01165e1:	83 ec 0c             	sub    $0xc,%esp
f01165e4:	68 cc 99 12 f0       	push   $0xf01299cc
f01165e9:	e8 ad a8 fe ff       	call   f0100e9b <cprintf>
f01165ee:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f01165f1:	e8 bd 6c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01165f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01165f9:	74 17                	je     f0116612 <test_kmalloc_firstfit2+0x68c>
f01165fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116602:	83 ec 0c             	sub    $0xc,%esp
f0116605:	68 d8 9c 12 f0       	push   $0xf0129cd8
f011660a:	e8 8c a8 fe ff       	call   f0100e9b <cprintf>
f011660f:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB = 4 MB]
		freeFrames = sys_calculate_free_frames() ;
f0116612:	e8 9c 6c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116617:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011661a:	e8 2a e1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011661f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f0116622:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116625:	83 ec 0c             	sub    $0xc,%esp
f0116628:	50                   	push   %eax
f0116629:	e8 0b 21 ff ff       	call   f0108739 <kfree>
f011662e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f0116631:	e8 7d 6c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116636:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0116639:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011663e:	77 17                	ja     f0116657 <test_kmalloc_firstfit2+0x6d1>
f0116640:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116647:	83 ec 0c             	sub    $0xc,%esp
f011664a:	68 49 9c 12 f0       	push   $0xf0129c49
f011664f:	e8 47 a8 fe ff       	call   f0100e9b <cprintf>
f0116654:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116657:	e8 ed e0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011665c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011665f:	74 17                	je     f0116678 <test_kmalloc_firstfit2+0x6f2>
f0116661:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116668:	83 ec 0c             	sub    $0xc,%esp
f011666b:	68 cc 99 12 f0       	push   $0xf01299cc
f0116670:	e8 26 a8 fe ff       	call   f0100e9b <cprintf>
f0116675:	83 c4 10             	add    $0x10,%esp

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0116678:	e8 36 6c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011667d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116680:	e8 c4 e0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116685:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(5*Mega-kilo);
f0116688:	83 ec 0c             	sub    $0xc,%esp
f011668b:	68 00 fc 4f 00       	push   $0x4ffc00
f0116690:	e8 0c 1f ff ff       	call   f01085a1 <kmalloc>
f0116695:	83 c4 10             	add    $0x10,%esp
f0116698:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 9*Mega + 16*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011669b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011669e:	3d 00 90 90 f8       	cmp    $0xf8909000,%eax
f01166a3:	74 17                	je     f01166bc <test_kmalloc_firstfit2+0x736>
f01166a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01166ac:	83 ec 0c             	sub    $0xc,%esp
f01166af:	68 04 9c 12 f0       	push   $0xf0129c04
f01166b4:	e8 e2 a7 fe ff       	call   f0100e9b <cprintf>
f01166b9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01166bc:	e8 88 e0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01166c1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01166c4:	74 17                	je     f01166dd <test_kmalloc_firstfit2+0x757>
f01166c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01166cd:	83 ec 0c             	sub    $0xc,%esp
f01166d0:	68 cc 99 12 f0       	push   $0xf01299cc
f01166d5:	e8 c1 a7 fe ff       	call   f0100e9b <cprintf>
f01166da:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) <   5*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f01166dd:	e8 d1 6b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01166e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01166e5:	29 c2                	sub    %eax,%edx
f01166e7:	89 d0                	mov    %edx,%eax
f01166e9:	3d ff 04 00 00       	cmp    $0x4ff,%eax
f01166ee:	77 17                	ja     f0116707 <test_kmalloc_firstfit2+0x781>
f01166f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01166f7:	83 ec 0c             	sub    $0xc,%esp
f01166fa:	68 35 9c 12 f0       	push   $0xf0129c35
f01166ff:	e8 97 a7 fe ff       	call   f0100e9b <cprintf>
f0116704:	83 c4 10             	add    $0x10,%esp

		//8 KB Hole [Resulting Hole = 2 MB + 2 MB + 8 KB + 3 MB = 7 MB + 8 KB]
		freeFrames = sys_calculate_free_frames() ;
f0116707:	e8 a7 6b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011670c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011670f:	e8 35 e0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116714:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[5]);
f0116717:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011671a:	83 ec 0c             	sub    $0xc,%esp
f011671d:	50                   	push   %eax
f011671e:	e8 16 20 ff ff       	call   f0108739 <kfree>
f0116723:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116726:	e8 1e e0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011672b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011672e:	74 17                	je     f0116747 <test_kmalloc_firstfit2+0x7c1>
f0116730:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116737:	83 ec 0c             	sub    $0xc,%esp
f011673a:	68 cc 99 12 f0       	push   $0xf01299cc
f011673f:	e8 57 a7 fe ff       	call   f0100e9b <cprintf>
f0116744:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong free: \n"); }
f0116747:	e8 67 6b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011674c:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011674f:	83 f8 01             	cmp    $0x1,%eax
f0116752:	77 17                	ja     f011676b <test_kmalloc_firstfit2+0x7e5>
f0116754:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011675b:	83 ec 0c             	sub    $0xc,%esp
f011675e:	68 49 9c 12 f0       	push   $0xf0129c49
f0116763:	e8 33 a7 fe ff       	call   f0100e9b <cprintf>
f0116768:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011676b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011676f:	74 04                	je     f0116775 <test_kmalloc_firstfit2+0x7ef>
f0116771:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0116775:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#1] Should be allocated in the resulting hole inside Page Allocator Area
		//7 MB + 1 KB
		freeFrames = sys_calculate_free_frames() ;
f011677c:	e8 32 6b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116781:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116784:	e8 c0 df fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116789:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(7*Mega+kilo);
f011678c:	83 ec 0c             	sub    $0xc,%esp
f011678f:	68 00 04 70 00       	push   $0x700400
f0116794:	e8 08 1e ff ff       	call   f01085a1 <kmalloc>
f0116799:	83 c4 10             	add    $0x10,%esp
f011679c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011679f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01167a2:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f01167a7:	74 17                	je     f01167c0 <test_kmalloc_firstfit2+0x83a>
f01167a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01167b0:	83 ec 0c             	sub    $0xc,%esp
f01167b3:	68 04 9c 12 f0       	push   $0xf0129c04
f01167b8:	e8 de a6 fe ff       	call   f0100e9b <cprintf>
f01167bd:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01167c0:	e8 84 df fe ff       	call   f0104749 <pf_calculate_free_frames>
f01167c5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01167c8:	74 17                	je     f01167e1 <test_kmalloc_firstfit2+0x85b>
f01167ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01167d1:	83 ec 0c             	sub    $0xc,%esp
f01167d4:	68 cc 99 12 f0       	push   $0xf01299cc
f01167d9:	e8 bd a6 fe ff       	call   f0100e9b <cprintf>
f01167de:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) <  (7*Mega+4*kilo)/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f01167e1:	e8 cd 6a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01167e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01167e9:	29 c2                	sub    %eax,%edx
f01167eb:	89 d0                	mov    %edx,%eax
f01167ed:	3d 00 07 00 00       	cmp    $0x700,%eax
f01167f2:	77 17                	ja     f011680b <test_kmalloc_firstfit2+0x885>
f01167f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01167fb:	83 ec 0c             	sub    $0xc,%esp
f01167fe:	68 35 9c 12 f0       	push   $0xf0129c35
f0116803:	e8 93 a6 fe ff       	call   f0100e9b <cprintf>
f0116808:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#2] Should be allocated in the remaining area of resulting hole inside Page Allocator Area
		//3 KB
		freeFrames = sys_calculate_free_frames() ;
f011680b:	e8 a3 6a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116810:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116813:	e8 31 df fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116818:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(3*kilo);
f011681b:	83 ec 0c             	sub    $0xc,%esp
f011681e:	68 00 0c 00 00       	push   $0xc00
f0116823:	e8 79 1d ff ff       	call   f01085a1 <kmalloc>
f0116828:	83 c4 10             	add    $0x10,%esp
f011682b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32)ptr_allocations[10] != (ACTUAL_START + 7*Mega + 4*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011682e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116831:	3d 00 60 70 f8       	cmp    $0xf8706000,%eax
f0116836:	74 17                	je     f011684f <test_kmalloc_firstfit2+0x8c9>
f0116838:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011683f:	83 ec 0c             	sub    $0xc,%esp
f0116842:	68 04 9c 12 f0       	push   $0xf0129c04
f0116847:	e8 4f a6 fe ff       	call   f0100e9b <cprintf>
f011684c:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011684f:	e8 f5 de fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116854:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0116857:	74 17                	je     f0116870 <test_kmalloc_firstfit2+0x8ea>
f0116859:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116860:	83 ec 0c             	sub    $0xc,%esp
f0116863:	68 cc 99 12 f0       	push   $0xf01299cc
f0116868:	e8 2e a6 fe ff       	call   f0100e9b <cprintf>
f011686d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1) { correct = 0; cprintf("Wrong allocation: \n"); }
f0116870:	e8 3e 6a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116875:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0116878:	75 17                	jne    f0116891 <test_kmalloc_firstfit2+0x90b>
f011687a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116881:	83 ec 0c             	sub    $0xc,%esp
f0116884:	68 35 9c 12 f0       	push   $0xf0129c35
f0116889:	e8 0d a6 fe ff       	call   f0100e9b <cprintf>
f011688e:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=35 ;
f0116891:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116895:	74 04                	je     f011689b <test_kmalloc_firstfit2+0x915>
f0116897:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011689b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#3] Should be allocated in the resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f01168a2:	e8 0c 6a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01168a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168aa:	e8 9a de fe ff       	call   f0104749 <pf_calculate_free_frames>
f01168af:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f01168b2:	83 ec 0c             	sub    $0xc,%esp
f01168b5:	68 00 04 00 00       	push   $0x400
f01168ba:	e8 e2 1c ff ff       	call   f01085a1 <kmalloc>
f01168bf:	83 c4 10             	add    $0x10,%esp
f01168c2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f01168c5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01168c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01168cb:	39 c2                	cmp    %eax,%edx
f01168cd:	72 10                	jb     f01168df <test_kmalloc_firstfit2+0x959>
f01168cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01168d2:	8b 55 a0             	mov    -0x60(%ebp),%edx
f01168d5:	81 c2 00 04 00 00    	add    $0x400,%edx
f01168db:	39 d0                	cmp    %edx,%eax
f01168dd:	76 17                	jbe    f01168f6 <test_kmalloc_firstfit2+0x970>
			{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01168df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01168e6:	83 ec 0c             	sub    $0xc,%esp
f01168e9:	68 04 9c 12 f0       	push   $0xf0129c04
f01168ee:	e8 a8 a5 fe ff       	call   f0100e9b <cprintf>
f01168f3:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01168f6:	e8 4e de fe ff       	call   f0104749 <pf_calculate_free_frames>
f01168fb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01168fe:	74 17                	je     f0116917 <test_kmalloc_firstfit2+0x991>
f0116900:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116907:	83 ec 0c             	sub    $0xc,%esp
f011690a:	68 cc 99 12 f0       	push   $0xf01299cc
f011690f:	e8 87 a5 fe ff       	call   f0100e9b <cprintf>
f0116914:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f0116917:	e8 97 69 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011691c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011691f:	74 17                	je     f0116938 <test_kmalloc_firstfit2+0x9b2>
f0116921:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116928:	83 ec 0c             	sub    $0xc,%esp
f011692b:	68 35 9c 12 f0       	push   $0xf0129c35
f0116930:	e8 66 a5 fe ff       	call   f0100e9b <cprintf>
f0116935:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#4] Should be allocated in the remaining of resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f0116938:	e8 76 69 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011693d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116940:	e8 04 de fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116945:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(1*kilo);
f0116948:	83 ec 0c             	sub    $0xc,%esp
f011694b:	68 00 04 00 00       	push   $0x400
f0116950:	e8 4c 1c ff ff       	call   f01085a1 <kmalloc>
f0116955:	83 c4 10             	add    $0x10,%esp
f0116958:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011695b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011695e:	8b 55 a0             	mov    -0x60(%ebp),%edx
f0116961:	81 c2 00 04 00 00    	add    $0x400,%edx
f0116967:	39 d0                	cmp    %edx,%eax
f0116969:	72 10                	jb     f011697b <test_kmalloc_firstfit2+0x9f5>
f011696b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011696e:	8b 55 a0             	mov    -0x60(%ebp),%edx
f0116971:	81 c2 00 08 00 00    	add    $0x800,%edx
f0116977:	39 d0                	cmp    %edx,%eax
f0116979:	76 17                	jbe    f0116992 <test_kmalloc_firstfit2+0xa0c>
			{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011697b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116982:	83 ec 0c             	sub    $0xc,%esp
f0116985:	68 04 9c 12 f0       	push   $0xf0129c04
f011698a:	e8 0c a5 fe ff       	call   f0100e9b <cprintf>
f011698f:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116992:	e8 b2 dd fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116997:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011699a:	74 17                	je     f01169b3 <test_kmalloc_firstfit2+0xa2d>
f011699c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01169a3:	83 ec 0c             	sub    $0xc,%esp
f01169a6:	68 cc 99 12 f0       	push   $0xf01299cc
f01169ab:	e8 eb a4 fe ff       	call   f0100e9b <cprintf>
f01169b0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f01169b3:	e8 fb 68 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01169b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01169bb:	74 17                	je     f01169d4 <test_kmalloc_firstfit2+0xa4e>
f01169bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01169c4:	83 ec 0c             	sub    $0xc,%esp
f01169c7:	68 35 9c 12 f0       	push   $0xf0129c35
f01169cc:	e8 ca a4 fe ff       	call   f0100e9b <cprintf>
f01169d1:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=35 ;
f01169d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01169d8:	74 04                	je     f01169de <test_kmalloc_firstfit2+0xa58>
f01169da:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f01169de:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[13] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f01169e5:	83 ec 0c             	sub    $0xc,%esp
f01169e8:	68 00 a0 1f 07       	push   $0x71fa000
f01169ed:	e8 af 1b ff ff       	call   f01085a1 <kmalloc>
f01169f2:	83 c4 10             	add    $0x10,%esp
f01169f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (ptr_allocations[13] != NULL) { correct = 0; cprintf("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL\n"); }
f01169f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01169fb:	85 c0                	test   %eax,%eax
f01169fd:	74 17                	je     f0116a16 <test_kmalloc_firstfit2+0xa90>
f01169ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0116a06:	83 ec 0c             	sub    $0xc,%esp
f0116a09:	68 34 9d 12 f0       	push   $0xf0129d34
f0116a0e:	e8 88 a4 fe ff       	call   f0100e9b <cprintf>
f0116a13:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=10 ;
f0116a16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116a1a:	74 04                	je     f0116a20 <test_kmalloc_firstfit2+0xa9a>
f0116a1c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (2) completed. Eval = %d%\n", eval);
f0116a20:	83 ec 08             	sub    $0x8,%esp
f0116a23:	ff 75 f4             	pushl  -0xc(%ebp)
f0116a26:	68 98 9d 12 f0       	push   $0xf0129d98
f0116a2b:	e8 6b a4 fe ff       	call   f0100e9b <cprintf>
f0116a30:	83 c4 10             	add    $0x10,%esp

	return 1;
f0116a33:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116a38:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0116a3b:	5b                   	pop    %ebx
f0116a3c:	5f                   	pop    %edi
f0116a3d:	5d                   	pop    %ebp
f0116a3e:	c3                   	ret    

f0116a3f <test_kfree_bestfirstfit>:


int test_kfree_bestfirstfit()
{
f0116a3f:	55                   	push   %ebp
f0116a40:	89 e5                	mov    %esp,%ebp
f0116a42:	57                   	push   %edi
f0116a43:	53                   	push   %ebx
f0116a44:	81 ec 40 01 00 00    	sub    $0x140,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0116a4a:	83 ec 0c             	sub    $0xc,%esp
f0116a4d:	68 0c 99 12 f0       	push   $0xf012990c
f0116a52:	e8 44 a4 fe ff       	call   f0100e9b <cprintf>
f0116a57:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116a5a:	83 ec 0c             	sub    $0xc,%esp
f0116a5d:	68 3c 99 12 f0       	push   $0xf012993c
f0116a62:	e8 34 a4 fe ff       	call   f0100e9b <cprintf>
f0116a67:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116a6a:	83 ec 0c             	sub    $0xc,%esp
f0116a6d:	68 0c 99 12 f0       	push   $0xf012990c
f0116a72:	e8 24 a4 fe ff       	call   f0100e9b <cprintf>
f0116a77:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116a7a:	c6 45 df 80          	movb   $0x80,-0x21(%ebp)
	char maxByte = 0x7F;
f0116a7e:	c6 45 de 7f          	movb   $0x7f,-0x22(%ebp)
	short minShort = 1<<15 ;
f0116a82:	66 c7 45 dc 00 80    	movw   $0x8000,-0x24(%ebp)
	short maxShort = 0x7FFF;
f0116a88:	66 c7 45 da ff 7f    	movw   $0x7fff,-0x26(%ebp)
	int minInt = 1<<31 ;
f0116a8e:	c7 45 d4 00 00 00 80 	movl   $0x80000000,-0x2c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116a95:	c7 45 d0 ff ff ff 7f 	movl   $0x7fffffff,-0x30(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116a9c:	e8 12 68 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116aa1:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0116aa4:	8d 95 68 ff ff ff    	lea    -0x98(%ebp),%edx
f0116aaa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116aaf:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ab4:	89 d7                	mov    %edx,%edi
f0116ab6:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0116ab8:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f0116abe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116ac3:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ac8:	89 d7                	mov    %edx,%edi
f0116aca:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f0116acc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f0116ad3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	correct = 1;
f0116ada:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f0116ae1:	8d 95 c8 fe ff ff    	lea    -0x138(%ebp),%edx
f0116ae7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116aec:	b8 00 00 00 00       	mov    $0x0,%eax
f0116af1:	89 d7                	mov    %edx,%edi
f0116af3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//[BLOCK ALLOCATOR]
		{
			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0116af5:	e8 b9 67 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116afa:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116afd:	e8 47 dc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116b02:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[2] = kmalloc(2*kilo);
f0116b05:	83 ec 0c             	sub    $0xc,%esp
f0116b08:	68 00 08 00 00       	push   $0x800
f0116b0d:	e8 8f 1a ff ff       	call   f01085a1 <kmalloc>
f0116b12:	83 c4 10             	add    $0x10,%esp
f0116b15:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0116b1b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0116b21:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0116b26:	76 28                	jbe    f0116b50 <test_kfree_bestfirstfit+0x111>
f0116b28:	8b 9d d0 fe ff ff    	mov    -0x130(%ebp),%ebx
f0116b2e:	83 ec 0c             	sub    $0xc,%esp
f0116b31:	6a 00                	push   $0x0
f0116b33:	e8 05 19 ff ff       	call   f010843d <sbrk>
f0116b38:	83 c4 10             	add    $0x10,%esp
f0116b3b:	39 c3                	cmp    %eax,%ebx
f0116b3d:	73 11                	jae    f0116b50 <test_kfree_bestfirstfit+0x111>
f0116b3f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0116b45:	89 c2                	mov    %eax,%edx
f0116b47:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0116b4c:	39 c2                	cmp    %eax,%edx
f0116b4e:	72 17                	jb     f0116b67 <test_kfree_bestfirstfit+0x128>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0116b50:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116b57:	83 ec 0c             	sub    $0xc,%esp
f0116b5a:	68 cc 9a 12 f0       	push   $0xf0129acc
f0116b5f:	e8 37 a3 fe ff       	call   f0100e9b <cprintf>
f0116b64:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116b67:	e8 dd db fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116b6c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116b6f:	74 17                	je     f0116b88 <test_kfree_bestfirstfit+0x149>
f0116b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116b78:	83 ec 0c             	sub    $0xc,%esp
f0116b7b:	68 cc 99 12 f0       	push   $0xf01299cc
f0116b80:	e8 16 a3 fe ff       	call   f0100e9b <cprintf>
f0116b85:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0116b88:	c7 85 70 ff ff ff ff 	movl   $0x7ff,-0x90(%ebp)
f0116b8f:	07 00 00 
			ptr = (char*)ptr_allocations[2];
f0116b92:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0116b98:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[2]; ++i)
f0116b9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116ba2:	eb 0e                	jmp    f0116bb2 <test_kfree_bestfirstfit+0x173>
			{
				ptr[i] = 2 ;
f0116ba4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116ba7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116baa:	01 d0                	add    %edx,%eax
f0116bac:	c6 00 02             	movb   $0x2,(%eax)
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[2];
			for (i = 0; i < lastIndices[2]; ++i)
f0116baf:	ff 45 f4             	incl   -0xc(%ebp)
f0116bb2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0116bb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116bbb:	7f e7                	jg     f0116ba4 <test_kfree_bestfirstfit+0x165>
			{
				ptr[i] = 2 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0116bbd:	e8 f1 66 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116bc2:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116bc5:	e8 7f db fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116bca:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f0116bcd:	83 ec 0c             	sub    $0xc,%esp
f0116bd0:	68 00 08 00 00       	push   $0x800
f0116bd5:	e8 c7 19 ff ff       	call   f01085a1 <kmalloc>
f0116bda:	83 c4 10             	add    $0x10,%esp
f0116bdd:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f0116be3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0116be9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0116bee:	76 28                	jbe    f0116c18 <test_kfree_bestfirstfit+0x1d9>
f0116bf0:	8b 9d d4 fe ff ff    	mov    -0x12c(%ebp),%ebx
f0116bf6:	83 ec 0c             	sub    $0xc,%esp
f0116bf9:	6a 00                	push   $0x0
f0116bfb:	e8 3d 18 ff ff       	call   f010843d <sbrk>
f0116c00:	83 c4 10             	add    $0x10,%esp
f0116c03:	39 c3                	cmp    %eax,%ebx
f0116c05:	73 11                	jae    f0116c18 <test_kfree_bestfirstfit+0x1d9>
f0116c07:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0116c0d:	89 c2                	mov    %eax,%edx
f0116c0f:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0116c14:	39 c2                	cmp    %eax,%edx
f0116c16:	72 17                	jb     f0116c2f <test_kfree_bestfirstfit+0x1f0>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0116c18:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116c1f:	83 ec 0c             	sub    $0xc,%esp
f0116c22:	68 cc 9a 12 f0       	push   $0xf0129acc
f0116c27:	e8 6f a2 fe ff       	call   f0100e9b <cprintf>
f0116c2c:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116c2f:	e8 15 db fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116c34:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116c37:	74 17                	je     f0116c50 <test_kfree_bestfirstfit+0x211>
f0116c39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116c40:	83 ec 0c             	sub    $0xc,%esp
f0116c43:	68 cc 99 12 f0       	push   $0xf01299cc
f0116c48:	e8 4e a2 fe ff       	call   f0100e9b <cprintf>
f0116c4d:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0116c50:	c7 85 74 ff ff ff ff 	movl   $0x7ff,-0x8c(%ebp)
f0116c57:	07 00 00 
			ptr = (char*)ptr_allocations[3];
f0116c5a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0116c60:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[3]; ++i)
f0116c63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116c6a:	eb 0e                	jmp    f0116c7a <test_kfree_bestfirstfit+0x23b>
			{
				ptr[i] = 3 ;
f0116c6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116c6f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c72:	01 d0                	add    %edx,%eax
f0116c74:	c6 00 03             	movb   $0x3,(%eax)
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[3];
			for (i = 0; i < lastIndices[3]; ++i)
f0116c77:	ff 45 f4             	incl   -0xc(%ebp)
f0116c7a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116c80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116c83:	7f e7                	jg     f0116c6c <test_kfree_bestfirstfit+0x22d>
		}

		//[PAGE ALLOCATOR]
		{
			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f0116c85:	e8 29 66 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116c8a:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116c8d:	e8 b7 da fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116c92:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116c95:	83 ec 0c             	sub    $0xc,%esp
f0116c98:	68 00 fc 1f 00       	push   $0x1ffc00
f0116c9d:	e8 ff 18 ff ff       	call   f01085a1 <kmalloc>
f0116ca2:	83 c4 10             	add    $0x10,%esp
f0116ca5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
			if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0116cab:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0116cb1:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0116cb6:	74 17                	je     f0116ccf <test_kfree_bestfirstfit+0x290>
f0116cb8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116cbf:	83 ec 0c             	sub    $0xc,%esp
f0116cc2:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0116cc7:	e8 cf a1 fe ff       	call   f0100e9b <cprintf>
f0116ccc:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116ccf:	e8 75 da fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116cd4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116cd7:	74 17                	je     f0116cf0 <test_kfree_bestfirstfit+0x2b1>
f0116cd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116ce0:	83 ec 0c             	sub    $0xc,%esp
f0116ce3:	68 cc 99 12 f0       	push   $0xf01299cc
f0116ce8:	e8 ae a1 fe ff       	call   f0100e9b <cprintf>
f0116ced:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0116cf0:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0116cf3:	e8 bb 65 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116cf8:	29 c3                	sub    %eax,%ebx
f0116cfa:	89 d8                	mov    %ebx,%eax
f0116cfc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0116d01:	77 17                	ja     f0116d1a <test_kfree_bestfirstfit+0x2db>
f0116d03:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116d0a:	83 ec 0c             	sub    $0xc,%esp
f0116d0d:	68 38 9a 12 f0       	push   $0xf0129a38
f0116d12:	e8 84 a1 fe ff       	call   f0100e9b <cprintf>
f0116d17:	83 c4 10             	add    $0x10,%esp
			lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0116d1a:	c7 85 68 ff ff ff ff 	movl   $0x1ffbff,-0x98(%ebp)
f0116d21:	fb 1f 00 

			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f0116d24:	e8 8a 65 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116d29:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116d2c:	e8 18 da fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116d31:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116d34:	83 ec 0c             	sub    $0xc,%esp
f0116d37:	68 00 fc 1f 00       	push   $0x1ffc00
f0116d3c:	e8 60 18 ff ff       	call   f01085a1 <kmalloc>
f0116d41:	83 c4 10             	add    $0x10,%esp
f0116d44:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
			if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0116d4a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0116d50:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f0116d55:	74 17                	je     f0116d6e <test_kfree_bestfirstfit+0x32f>
f0116d57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116d5e:	83 ec 0c             	sub    $0xc,%esp
f0116d61:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0116d66:	e8 30 a1 fe ff       	call   f0100e9b <cprintf>
f0116d6b:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116d6e:	e8 d6 d9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116d73:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116d76:	74 17                	je     f0116d8f <test_kfree_bestfirstfit+0x350>
f0116d78:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116d7f:	83 ec 0c             	sub    $0xc,%esp
f0116d82:	68 cc 99 12 f0       	push   $0xf01299cc
f0116d87:	e8 0f a1 fe ff       	call   f0100e9b <cprintf>
f0116d8c:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0116d8f:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0116d92:	e8 1c 65 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116d97:	29 c3                	sub    %eax,%ebx
f0116d99:	89 d8                	mov    %ebx,%eax
f0116d9b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0116da0:	77 17                	ja     f0116db9 <test_kfree_bestfirstfit+0x37a>
f0116da2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116da9:	83 ec 0c             	sub    $0xc,%esp
f0116dac:	68 38 9a 12 f0       	push   $0xf0129a38
f0116db1:	e8 e5 a0 fe ff       	call   f0100e9b <cprintf>
f0116db6:	83 c4 10             	add    $0x10,%esp
			lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0116db9:	c7 85 6c ff ff ff ff 	movl   $0x1ffbff,-0x94(%ebp)
f0116dc0:	fb 1f 00 


			//7 KB
			freeFrames = sys_calculate_free_frames() ;
f0116dc3:	e8 eb 64 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116dc8:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116dcb:	e8 79 d9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116dd0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[4] = kmalloc(7*kilo);
f0116dd3:	83 ec 0c             	sub    $0xc,%esp
f0116dd6:	68 00 1c 00 00       	push   $0x1c00
f0116ddb:	e8 c1 17 ff ff       	call   f01085a1 <kmalloc>
f0116de0:	83 c4 10             	add    $0x10,%esp
f0116de3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0116de9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116def:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f0116df4:	74 17                	je     f0116e0d <test_kfree_bestfirstfit+0x3ce>
f0116df6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116dfd:	83 ec 0c             	sub    $0xc,%esp
f0116e00:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0116e05:	e8 91 a0 fe ff       	call   f0100e9b <cprintf>
f0116e0a:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116e0d:	e8 37 d9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116e12:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116e15:	74 17                	je     f0116e2e <test_kfree_bestfirstfit+0x3ef>
f0116e17:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116e1e:	83 ec 0c             	sub    $0xc,%esp
f0116e21:	68 cc 99 12 f0       	push   $0xf01299cc
f0116e26:	e8 70 a0 fe ff       	call   f0100e9b <cprintf>
f0116e2b:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0116e2e:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0116e31:	e8 7d 64 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116e36:	29 c3                	sub    %eax,%ebx
f0116e38:	89 d8                	mov    %ebx,%eax
f0116e3a:	83 f8 01             	cmp    $0x1,%eax
f0116e3d:	77 17                	ja     f0116e56 <test_kfree_bestfirstfit+0x417>
f0116e3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116e46:	83 ec 0c             	sub    $0xc,%esp
f0116e49:	68 38 9a 12 f0       	push   $0xf0129a38
f0116e4e:	e8 48 a0 fe ff       	call   f0100e9b <cprintf>
f0116e53:	83 c4 10             	add    $0x10,%esp
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0116e56:	c7 85 78 ff ff ff ff 	movl   $0x1bff,-0x88(%ebp)
f0116e5d:	1b 00 00 
			ptr = (char*)ptr_allocations[4];
f0116e60:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116e66:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[4]; ++i)
f0116e69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116e70:	eb 0e                	jmp    f0116e80 <test_kfree_bestfirstfit+0x441>
			{
				ptr[i] = 4 ;
f0116e72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116e75:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116e78:	01 d0                	add    %edx,%eax
f0116e7a:	c6 00 04             	movb   $0x4,(%eax)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[4];
			for (i = 0; i < lastIndices[4]; ++i)
f0116e7d:	ff 45 f4             	incl   -0xc(%ebp)
f0116e80:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0116e86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116e89:	7f e7                	jg     f0116e72 <test_kfree_bestfirstfit+0x433>
			{
				ptr[i] = 4 ;
			}

			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0116e8b:	e8 23 64 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116e90:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116e93:	e8 b1 d8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116e98:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0116e9b:	83 ec 0c             	sub    $0xc,%esp
f0116e9e:	68 00 fc 2f 00       	push   $0x2ffc00
f0116ea3:	e8 f9 16 ff ff       	call   f01085a1 <kmalloc>
f0116ea8:	83 c4 10             	add    $0x10,%esp
f0116eab:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0116eb1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116eb7:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f0116ebc:	74 17                	je     f0116ed5 <test_kfree_bestfirstfit+0x496>
f0116ebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116ec5:	83 ec 0c             	sub    $0xc,%esp
f0116ec8:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0116ecd:	e8 c9 9f fe ff       	call   f0100e9b <cprintf>
f0116ed2:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116ed5:	e8 6f d8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116eda:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116edd:	74 17                	je     f0116ef6 <test_kfree_bestfirstfit+0x4b7>
f0116edf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116ee6:	83 ec 0c             	sub    $0xc,%esp
f0116ee9:	68 cc 99 12 f0       	push   $0xf01299cc
f0116eee:	e8 a8 9f fe ff       	call   f0100e9b <cprintf>
f0116ef3:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0116ef6:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0116ef9:	e8 b5 63 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116efe:	29 c3                	sub    %eax,%ebx
f0116f00:	89 d8                	mov    %ebx,%eax
f0116f02:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f0116f07:	77 17                	ja     f0116f20 <test_kfree_bestfirstfit+0x4e1>
f0116f09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116f10:	83 ec 0c             	sub    $0xc,%esp
f0116f13:	68 38 9a 12 f0       	push   $0xf0129a38
f0116f18:	e8 7e 9f fe ff       	call   f0100e9b <cprintf>
f0116f1d:	83 c4 10             	add    $0x10,%esp
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0116f20:	c7 85 7c ff ff ff ff 	movl   $0x2ffbff,-0x84(%ebp)
f0116f27:	fb 2f 00 
			ptr = (char*)ptr_allocations[5];
f0116f2a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116f30:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[5]; ++i)
f0116f33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116f3a:	eb 0e                	jmp    f0116f4a <test_kfree_bestfirstfit+0x50b>
			{
				ptr[i] = 5 ;
f0116f3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116f3f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116f42:	01 d0                	add    %edx,%eax
f0116f44:	c6 00 05             	movb   $0x5,(%eax)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[5];
			for (i = 0; i < lastIndices[5]; ++i)
f0116f47:	ff 45 f4             	incl   -0xc(%ebp)
f0116f4a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116f50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116f53:	7f e7                	jg     f0116f3c <test_kfree_bestfirstfit+0x4fd>
			{
				ptr[i] = 5 ;
			}

			//6 MB
			freeFrames = sys_calculate_free_frames() ;
f0116f55:	e8 59 63 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116f5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116f5d:	e8 e7 d7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116f62:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0116f65:	83 ec 0c             	sub    $0xc,%esp
f0116f68:	68 00 fc 5f 00       	push   $0x5ffc00
f0116f6d:	e8 2f 16 ff ff       	call   f01085a1 <kmalloc>
f0116f72:	83 c4 10             	add    $0x10,%esp
f0116f75:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0116f7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0116f81:	3d 00 70 70 f8       	cmp    $0xf8707000,%eax
f0116f86:	74 17                	je     f0116f9f <test_kfree_bestfirstfit+0x560>
f0116f88:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116f8f:	83 ec 0c             	sub    $0xc,%esp
f0116f92:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0116f97:	e8 ff 9e fe ff       	call   f0100e9b <cprintf>
f0116f9c:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0116f9f:	e8 a5 d7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116fa4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116fa7:	74 17                	je     f0116fc0 <test_kfree_bestfirstfit+0x581>
f0116fa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116fb0:	83 ec 0c             	sub    $0xc,%esp
f0116fb3:	68 cc 99 12 f0       	push   $0xf01299cc
f0116fb8:	e8 de 9e fe ff       	call   f0100e9b <cprintf>
f0116fbd:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0116fc0:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0116fc3:	e8 eb 62 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116fc8:	29 c3                	sub    %eax,%ebx
f0116fca:	89 d8                	mov    %ebx,%eax
f0116fcc:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f0116fd1:	77 17                	ja     f0116fea <test_kfree_bestfirstfit+0x5ab>
f0116fd3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116fda:	83 ec 0c             	sub    $0xc,%esp
f0116fdd:	68 38 9a 12 f0       	push   $0xf0129a38
f0116fe2:	e8 b4 9e fe ff       	call   f0100e9b <cprintf>
f0116fe7:	83 c4 10             	add    $0x10,%esp
			lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0116fea:	c7 45 80 ff fb 5f 00 	movl   $0x5ffbff,-0x80(%ebp)

			//14 KB
			freeFrames = sys_calculate_free_frames() ;
f0116ff1:	e8 bd 62 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0116ff6:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0116ff9:	e8 4b d7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0116ffe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[7] = kmalloc(14*kilo);
f0117001:	83 ec 0c             	sub    $0xc,%esp
f0117004:	68 00 38 00 00       	push   $0x3800
f0117009:	e8 93 15 ff ff       	call   f01085a1 <kmalloc>
f011700e:	83 c4 10             	add    $0x10,%esp
f0117011:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0117017:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011701d:	3d 00 70 d0 f8       	cmp    $0xf8d07000,%eax
f0117022:	74 17                	je     f011703b <test_kfree_bestfirstfit+0x5fc>
f0117024:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011702b:	83 ec 0c             	sub    $0xc,%esp
f011702e:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117033:	e8 63 9e fe ff       	call   f0100e9b <cprintf>
f0117038:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011703b:	e8 09 d7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117040:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117043:	74 17                	je     f011705c <test_kfree_bestfirstfit+0x61d>
f0117045:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011704c:	83 ec 0c             	sub    $0xc,%esp
f011704f:	68 cc 99 12 f0       	push   $0xf01299cc
f0117054:	e8 42 9e fe ff       	call   f0100e9b <cprintf>
f0117059:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011705c:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011705f:	e8 4f 62 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117064:	29 c3                	sub    %eax,%ebx
f0117066:	89 d8                	mov    %ebx,%eax
f0117068:	83 f8 03             	cmp    $0x3,%eax
f011706b:	77 17                	ja     f0117084 <test_kfree_bestfirstfit+0x645>
f011706d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117074:	83 ec 0c             	sub    $0xc,%esp
f0117077:	68 38 9a 12 f0       	push   $0xf0129a38
f011707c:	e8 1a 9e fe ff       	call   f0100e9b <cprintf>
f0117081:	83 c4 10             	add    $0x10,%esp
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0117084:	c7 45 84 ff 37 00 00 	movl   $0x37ff,-0x7c(%ebp)
			ptr = (char*)ptr_allocations[7];
f011708b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117091:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[7]; ++i)
f0117094:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011709b:	eb 0e                	jmp    f01170ab <test_kfree_bestfirstfit+0x66c>
			{
				ptr[i] = 7 ;
f011709d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01170a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01170a3:	01 d0                	add    %edx,%eax
f01170a5:	c6 00 07             	movb   $0x7,(%eax)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[7];
			for (i = 0; i < lastIndices[7]; ++i)
f01170a8:	ff 45 f4             	incl   -0xc(%ebp)
f01170ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01170ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01170b1:	7f ea                	jg     f011709d <test_kfree_bestfirstfit+0x65e>
	}

	//kfree some of the allocated spaces [10%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01170b3:	e8 fb 61 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01170b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01170bb:	e8 89 d6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01170c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[0]);
f01170c3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01170c9:	83 ec 0c             	sub    $0xc,%esp
f01170cc:	50                   	push   %eax
f01170cd:	e8 67 16 ff ff       	call   f0108739 <kfree>
f01170d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01170d5:	e8 6f d6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01170da:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01170dd:	74 17                	je     f01170f6 <test_kfree_bestfirstfit+0x6b7>
f01170df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01170e6:	83 ec 0c             	sub    $0xc,%esp
f01170e9:	68 cc 99 12 f0       	push   $0xf01299cc
f01170ee:	e8 a8 9d fe ff       	call   f0100e9b <cprintf>
f01170f3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01170f6:	e8 b8 61 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01170fb:	89 c2                	mov    %eax,%edx
f01170fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117100:	29 c2                	sub    %eax,%edx
f0117102:	89 d0                	mov    %edx,%eax
f0117104:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0117109:	77 17                	ja     f0117122 <test_kfree_bestfirstfit+0x6e3>
f011710b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117112:	83 ec 0c             	sub    $0xc,%esp
f0117115:	68 d0 9d 12 f0       	push   $0xf0129dd0
f011711a:	e8 7c 9d fe ff       	call   f0100e9b <cprintf>
f011711f:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117122:	e8 8c 61 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117127:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011712a:	e8 1a d6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011712f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[2]);
f0117132:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117138:	83 ec 0c             	sub    $0xc,%esp
f011713b:	50                   	push   %eax
f011713c:	e8 f8 15 ff ff       	call   f0108739 <kfree>
f0117141:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117144:	e8 00 d6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117149:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011714c:	74 17                	je     f0117165 <test_kfree_bestfirstfit+0x726>
f011714e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117155:	83 ec 0c             	sub    $0xc,%esp
f0117158:	68 cc 99 12 f0       	push   $0xf01299cc
f011715d:	e8 39 9d fe ff       	call   f0100e9b <cprintf>
f0117162:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0 ) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f0117165:	e8 49 61 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011716a:	89 c2                	mov    %eax,%edx
f011716c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011716f:	39 c2                	cmp    %eax,%edx
f0117171:	74 17                	je     f011718a <test_kfree_bestfirstfit+0x74b>
f0117173:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011717a:	83 ec 0c             	sub    $0xc,%esp
f011717d:	68 d8 9c 12 f0       	push   $0xf0129cd8
f0117182:	e8 14 9d fe ff       	call   f0100e9b <cprintf>
f0117187:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011718a:	e8 24 61 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011718f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117192:	e8 b2 d5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117197:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[1]);
f011719a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01171a0:	83 ec 0c             	sub    $0xc,%esp
f01171a3:	50                   	push   %eax
f01171a4:	e8 90 15 ff ff       	call   f0108739 <kfree>
f01171a9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01171ac:	e8 98 d5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01171b1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01171b4:	74 17                	je     f01171cd <test_kfree_bestfirstfit+0x78e>
f01171b6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01171bd:	83 ec 0c             	sub    $0xc,%esp
f01171c0:	68 cc 99 12 f0       	push   $0xf01299cc
f01171c5:	e8 d1 9c fe ff       	call   f0100e9b <cprintf>
f01171ca:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01171cd:	e8 e1 60 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01171d2:	89 c2                	mov    %eax,%edx
f01171d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01171d7:	29 c2                	sub    %eax,%edx
f01171d9:	89 d0                	mov    %edx,%eax
f01171db:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01171e0:	77 17                	ja     f01171f9 <test_kfree_bestfirstfit+0x7ba>
f01171e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01171e9:	83 ec 0c             	sub    $0xc,%esp
f01171ec:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01171f1:	e8 a5 9c fe ff       	call   f0100e9b <cprintf>
f01171f6:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01171f9:	e8 b5 60 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01171fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117201:	e8 43 d5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117206:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[6]);
f0117209:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011720f:	83 ec 0c             	sub    $0xc,%esp
f0117212:	50                   	push   %eax
f0117213:	e8 21 15 ff ff       	call   f0108739 <kfree>
f0117218:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011721b:	e8 29 d5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117220:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0117223:	74 17                	je     f011723c <test_kfree_bestfirstfit+0x7fd>
f0117225:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011722c:	83 ec 0c             	sub    $0xc,%esp
f011722f:	68 cc 99 12 f0       	push   $0xf01299cc
f0117234:	e8 62 9c fe ff       	call   f0100e9b <cprintf>
f0117239:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011723c:	e8 72 60 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117241:	89 c2                	mov    %eax,%edx
f0117243:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117246:	29 c2                	sub    %eax,%edx
f0117248:	89 d0                	mov    %edx,%eax
f011724a:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011724f:	77 17                	ja     f0117268 <test_kfree_bestfirstfit+0x829>
f0117251:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117258:	83 ec 0c             	sub    $0xc,%esp
f011725b:	68 d0 9d 12 f0       	push   $0xf0129dd0
f0117260:	e8 36 9c fe ff       	call   f0100e9b <cprintf>
f0117265:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0117268:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011726c:	74 04                	je     f0117272 <test_kfree_bestfirstfit+0x833>
f011726e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f0117272:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0117279:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011727f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0117282:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117289:	eb 1e                	jmp    f01172a9 <test_kfree_bestfirstfit+0x86a>
		{
			sums[3] += ptr[i] ;
f011728b:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f0117291:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117294:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117297:	01 c8                	add    %ecx,%eax
f0117299:	8a 00                	mov    (%eax),%al
f011729b:	0f be c0             	movsbl %al,%eax
f011729e:	01 d0                	add    %edx,%eax
f01172a0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	correct = 1 ;
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01172a6:	ff 45 f4             	incl   -0xc(%ebp)
f01172a9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01172af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01172b2:	7f d7                	jg     f011728b <test_kfree_bestfirstfit+0x84c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f01172b4:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f01172ba:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01172c0:	89 c1                	mov    %eax,%ecx
f01172c2:	01 c9                	add    %ecx,%ecx
f01172c4:	01 c8                	add    %ecx,%eax
f01172c6:	39 c2                	cmp    %eax,%edx
f01172c8:	74 17                	je     f01172e1 <test_kfree_bestfirstfit+0x8a2>
f01172ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01172d1:	83 ec 0c             	sub    $0xc,%esp
f01172d4:	68 08 9e 12 f0       	push   $0xf0129e08
f01172d9:	e8 bd 9b fe ff       	call   f0100e9b <cprintf>
f01172de:	83 c4 10             	add    $0x10,%esp

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01172e1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01172e7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01172ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01172f1:	eb 1e                	jmp    f0117311 <test_kfree_bestfirstfit+0x8d2>
		{
			sums[4] += ptr[i] ;
f01172f3:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01172f9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01172fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01172ff:	01 c8                	add    %ecx,%eax
f0117301:	8a 00                	mov    (%eax),%al
f0117303:	0f be c0             	movsbl %al,%eax
f0117306:	01 d0                	add    %edx,%eax
f0117308:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011730e:	ff 45 f4             	incl   -0xc(%ebp)
f0117311:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117317:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011731a:	7f d7                	jg     f01172f3 <test_kfree_bestfirstfit+0x8b4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011731c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117322:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0117328:	c1 e2 02             	shl    $0x2,%edx
f011732b:	39 d0                	cmp    %edx,%eax
f011732d:	74 17                	je     f0117346 <test_kfree_bestfirstfit+0x907>
f011732f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117336:	83 ec 0c             	sub    $0xc,%esp
f0117339:	68 08 9e 12 f0       	push   $0xf0129e08
f011733e:	e8 58 9b fe ff       	call   f0100e9b <cprintf>
f0117343:	83 c4 10             	add    $0x10,%esp

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0117346:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011734c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011734f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117356:	eb 1e                	jmp    f0117376 <test_kfree_bestfirstfit+0x937>
		{
			sums[5] += ptr[i] ;
f0117358:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011735e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117361:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117364:	01 c8                	add    %ecx,%eax
f0117366:	8a 00                	mov    (%eax),%al
f0117368:	0f be c0             	movsbl %al,%eax
f011736b:	01 d0                	add    %edx,%eax
f011736d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0117373:	ff 45 f4             	incl   -0xc(%ebp)
f0117376:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011737c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011737f:	7f d7                	jg     f0117358 <test_kfree_bestfirstfit+0x919>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f0117381:	8b 8d 2c ff ff ff    	mov    -0xd4(%ebp),%ecx
f0117387:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
f011738d:	89 d0                	mov    %edx,%eax
f011738f:	c1 e0 02             	shl    $0x2,%eax
f0117392:	01 d0                	add    %edx,%eax
f0117394:	39 c1                	cmp    %eax,%ecx
f0117396:	74 17                	je     f01173af <test_kfree_bestfirstfit+0x970>
f0117398:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011739f:	83 ec 0c             	sub    $0xc,%esp
f01173a2:	68 08 9e 12 f0       	push   $0xf0129e08
f01173a7:	e8 ef 9a fe ff       	call   f0100e9b <cprintf>
f01173ac:	83 c4 10             	add    $0x10,%esp

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01173af:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01173b5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01173b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01173bf:	eb 1e                	jmp    f01173df <test_kfree_bestfirstfit+0x9a0>
		{
			sums[7] += ptr[i] ;
f01173c1:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f01173c7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01173ca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01173cd:	01 c8                	add    %ecx,%eax
f01173cf:	8a 00                	mov    (%eax),%al
f01173d1:	0f be c0             	movsbl %al,%eax
f01173d4:	01 d0                	add    %edx,%eax
f01173d6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01173dc:	ff 45 f4             	incl   -0xc(%ebp)
f01173df:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01173e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01173e5:	7f da                	jg     f01173c1 <test_kfree_bestfirstfit+0x982>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f01173e7:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f01173ed:	8b 55 84             	mov    -0x7c(%ebp),%edx
f01173f0:	89 d0                	mov    %edx,%eax
f01173f2:	01 c0                	add    %eax,%eax
f01173f4:	01 d0                	add    %edx,%eax
f01173f6:	01 c0                	add    %eax,%eax
f01173f8:	01 d0                	add    %edx,%eax
f01173fa:	39 c1                	cmp    %eax,%ecx
f01173fc:	74 17                	je     f0117415 <test_kfree_bestfirstfit+0x9d6>
f01173fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117405:	83 ec 0c             	sub    $0xc,%esp
f0117408:	68 08 9e 12 f0       	push   $0xf0129e08
f011740d:	e8 89 9a fe ff       	call   f0100e9b <cprintf>
f0117412:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0117415:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117419:	74 04                	je     f011741f <test_kfree_bestfirstfit+0x9e0>
f011741b:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011741f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117426:	e8 88 5e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011742b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011742e:	e8 16 d3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117433:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0117436:	83 ec 0c             	sub    $0xc,%esp
f0117439:	68 00 00 30 00       	push   $0x300000
f011743e:	e8 5e 11 ff ff       	call   f01085a1 <kmalloc>
f0117443:	83 c4 10             	add    $0x10,%esp
f0117446:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011744c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117452:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0117457:	74 17                	je     f0117470 <test_kfree_bestfirstfit+0xa31>
f0117459:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117460:	83 ec 0c             	sub    $0xc,%esp
f0117463:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117468:	e8 2e 9a fe ff       	call   f0100e9b <cprintf>
f011746d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117470:	e8 d4 d2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117475:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117478:	74 17                	je     f0117491 <test_kfree_bestfirstfit+0xa52>
f011747a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117481:	83 ec 0c             	sub    $0xc,%esp
f0117484:	68 cc 99 12 f0       	push   $0xf01299cc
f0117489:	e8 0d 9a fe ff       	call   f0100e9b <cprintf>
f011748e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0117491:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0117494:	e8 1a 5e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117499:	29 c3                	sub    %eax,%ebx
f011749b:	89 d8                	mov    %ebx,%eax
f011749d:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01174a2:	77 17                	ja     f01174bb <test_kfree_bestfirstfit+0xa7c>
f01174a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01174ab:	83 ec 0c             	sub    $0xc,%esp
f01174ae:	68 38 9a 12 f0       	push   $0xf0129a38
f01174b3:	e8 e3 99 fe ff       	call   f0100e9b <cprintf>
f01174b8:	83 c4 10             	add    $0x10,%esp
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01174bb:	c7 45 88 ff ff 2f 00 	movl   $0x2fffff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[8];
f01174c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01174c8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01174cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01174d2:	eb 0e                	jmp    f01174e2 <test_kfree_bestfirstfit+0xaa3>
		{
			ptr[i] = 8 ;
f01174d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01174d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01174da:	01 d0                	add    %edx,%eax
f01174dc:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01174df:	ff 45 f4             	incl   -0xc(%ebp)
f01174e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01174e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01174e8:	7f ea                	jg     f01174d4 <test_kfree_bestfirstfit+0xa95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01174ea:	e8 c4 5d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01174ef:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174f2:	e8 52 d2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01174f7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01174fa:	83 ec 0c             	sub    $0xc,%esp
f01174fd:	68 00 00 10 00       	push   $0x100000
f0117502:	e8 9a 10 ff ff       	call   f01085a1 <kmalloc>
f0117507:	83 c4 10             	add    $0x10,%esp
f011750a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0117510:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117516:	3d 00 50 30 f8       	cmp    $0xf8305000,%eax
f011751b:	74 17                	je     f0117534 <test_kfree_bestfirstfit+0xaf5>
f011751d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117524:	83 ec 0c             	sub    $0xc,%esp
f0117527:	68 7c 9a 12 f0       	push   $0xf0129a7c
f011752c:	e8 6a 99 fe ff       	call   f0100e9b <cprintf>
f0117531:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117534:	e8 10 d2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117539:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011753c:	74 17                	je     f0117555 <test_kfree_bestfirstfit+0xb16>
f011753e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117545:	83 ec 0c             	sub    $0xc,%esp
f0117548:	68 cc 99 12 f0       	push   $0xf01299cc
f011754d:	e8 49 99 fe ff       	call   f0100e9b <cprintf>
f0117552:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0117555:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0117558:	e8 56 5d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011755d:	29 c3                	sub    %eax,%ebx
f011755f:	89 d8                	mov    %ebx,%eax
f0117561:	3d ff 00 00 00       	cmp    $0xff,%eax
f0117566:	77 17                	ja     f011757f <test_kfree_bestfirstfit+0xb40>
f0117568:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011756f:	83 ec 0c             	sub    $0xc,%esp
f0117572:	68 38 9a 12 f0       	push   $0xf0129a38
f0117577:	e8 1f 99 fe ff       	call   f0100e9b <cprintf>
f011757c:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f011757f:	c7 45 90 ff ff 0f 00 	movl   $0xfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f0117586:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011758c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011758f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117596:	eb 0e                	jmp    f01175a6 <test_kfree_bestfirstfit+0xb67>
		{
			ptr[i] = 10 ;
f0117598:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011759b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011759e:	01 d0                	add    %edx,%eax
f01175a0:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01175a3:	ff 45 f4             	incl   -0xc(%ebp)
f01175a6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01175a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01175ac:	7f ea                	jg     f0117598 <test_kfree_bestfirstfit+0xb59>
		{
			ptr[i] = 10 ;
		}

		//1 KB [Should be allocated in 1st hole in the Dynamic Allocator]
		freeFrames = sys_calculate_free_frames() ;
f01175ae:	e8 00 5d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01175b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175b6:	e8 8e d1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01175bb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[9] = kmalloc(1*kilo);
f01175be:	83 ec 0c             	sub    $0xc,%esp
f01175c1:	68 00 04 00 00       	push   $0x400
f01175c6:	e8 d6 0f ff ff       	call   f01085a1 <kmalloc>
f01175cb:	83 c4 10             	add    $0x10,%esp
f01175ce:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((ptr_allocations[9] < ptr_allocations[2]) || (ptr_allocations[9] > (ptr_allocations[2] + 1*kilo)))
f01175d4:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f01175da:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01175e0:	39 c2                	cmp    %eax,%edx
f01175e2:	72 16                	jb     f01175fa <test_kfree_bestfirstfit+0xbbb>
f01175e4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01175ea:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01175f0:	81 c2 00 04 00 00    	add    $0x400,%edx
f01175f6:	39 d0                	cmp    %edx,%eax
f01175f8:	76 17                	jbe    f0117611 <test_kfree_bestfirstfit+0xbd2>
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f01175fa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117601:	83 ec 0c             	sub    $0xc,%esp
f0117604:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117609:	e8 8d 98 fe ff       	call   f0100e9b <cprintf>
f011760e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117611:	e8 33 d1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117616:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117619:	74 17                	je     f0117632 <test_kfree_bestfirstfit+0xbf3>
f011761b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117622:	83 ec 0c             	sub    $0xc,%esp
f0117625:	68 cc 99 12 f0       	push   $0xf01299cc
f011762a:	e8 6c 98 fe ff       	call   f0100e9b <cprintf>
f011762f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f0117632:	e8 7c 5c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117637:	89 c2                	mov    %eax,%edx
f0117639:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011763c:	39 c2                	cmp    %eax,%edx
f011763e:	74 17                	je     f0117657 <test_kfree_bestfirstfit+0xc18>
f0117640:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117647:	83 ec 0c             	sub    $0xc,%esp
f011764a:	68 3c 9e 12 f0       	push   $0xf0129e3c
f011764f:	e8 47 98 fe ff       	call   f0100e9b <cprintf>
f0117654:	83 c4 10             	add    $0x10,%esp
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
f0117657:	c7 45 8c ff 03 00 00 	movl   $0x3ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[9];
f011765e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117664:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0117667:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011766e:	eb 0e                	jmp    f011767e <test_kfree_bestfirstfit+0xc3f>
		{
			ptr[i] = 9 ;
f0117670:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117673:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117676:	01 d0                	add    %edx,%eax
f0117678:	c6 00 09             	movb   $0x9,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011767b:	ff 45 f4             	incl   -0xc(%ebp)
f011767e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117681:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117684:	7f ea                	jg     f0117670 <test_kfree_bestfirstfit+0xc31>
		{
			ptr[i] = 9 ;
		}

	}
	if (correct)	eval+=15 ;
f0117686:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011768a:	74 04                	je     f0117690 <test_kfree_bestfirstfit+0xc51>
f011768c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f0117690:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree remaining allocated spaces [15%]
	{
		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with NEXT 6 MB hole - total = 9MB]
		freeFrames = sys_calculate_free_frames() ;
f0117697:	e8 17 5c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011769c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011769f:	e8 a5 d0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01176a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[5]);
f01176a7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01176ad:	83 ec 0c             	sub    $0xc,%esp
f01176b0:	50                   	push   %eax
f01176b1:	e8 83 10 ff ff       	call   f0108739 <kfree>
f01176b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01176b9:	e8 8b d0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01176be:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01176c1:	74 17                	je     f01176da <test_kfree_bestfirstfit+0xc9b>
f01176c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01176ca:	83 ec 0c             	sub    $0xc,%esp
f01176cd:	68 cc 99 12 f0       	push   $0xf01299cc
f01176d2:	e8 c4 97 fe ff       	call   f0100e9b <cprintf>
f01176d7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01176da:	e8 d4 5b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01176df:	89 c2                	mov    %eax,%edx
f01176e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01176e4:	29 c2                	sub    %eax,%edx
f01176e6:	89 d0                	mov    %edx,%eax
f01176e8:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01176ed:	77 17                	ja     f0117706 <test_kfree_bestfirstfit+0xcc7>
f01176ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01176f6:	83 ec 0c             	sub    $0xc,%esp
f01176f9:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01176fe:	e8 98 97 fe ff       	call   f0100e9b <cprintf>
f0117703:	83 c4 10             	add    $0x10,%esp

		//kfree 7 KB [PAGE ALLOCATOR: Should be Merged with NEXT 9 MB hole - total = 9MB + 8KB]
		freeFrames = sys_calculate_free_frames() ;
f0117706:	e8 a8 5b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011770b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011770e:	e8 36 d0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117713:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[4]);
f0117716:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011771c:	83 ec 0c             	sub    $0xc,%esp
f011771f:	50                   	push   %eax
f0117720:	e8 14 10 ff ff       	call   f0108739 <kfree>
f0117725:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117728:	e8 1c d0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011772d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117730:	74 17                	je     f0117749 <test_kfree_bestfirstfit+0xd0a>
f0117732:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117739:	83 ec 0c             	sub    $0xc,%esp
f011773c:	68 cc 99 12 f0       	push   $0xf01299cc
f0117741:	e8 55 97 fe ff       	call   f0100e9b <cprintf>
f0117746:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0117749:	e8 65 5b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011774e:	89 c2                	mov    %eax,%edx
f0117750:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117753:	29 c2                	sub    %eax,%edx
f0117755:	89 d0                	mov    %edx,%eax
f0117757:	83 f8 01             	cmp    $0x1,%eax
f011775a:	77 17                	ja     f0117773 <test_kfree_bestfirstfit+0xd34>
f011775c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117763:	83 ec 0c             	sub    $0xc,%esp
f0117766:	68 d0 9d 12 f0       	push   $0xf0129dd0
f011776b:	e8 2b 97 fe ff       	call   f0100e9b <cprintf>
f0117770:	83 c4 10             	add    $0x10,%esp

		//kfree 1 KB [DYNAMIC ALLOCATOR]
		freeFrames = sys_calculate_free_frames() ;
f0117773:	e8 3b 5b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117778:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011777b:	e8 c9 cf fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117780:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[9]);
f0117783:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117789:	83 ec 0c             	sub    $0xc,%esp
f011778c:	50                   	push   %eax
f011778d:	e8 a7 0f ff ff       	call   f0108739 <kfree>
f0117792:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117795:	e8 af cf fe ff       	call   f0104749 <pf_calculate_free_frames>
f011779a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011779d:	74 17                	je     f01177b6 <test_kfree_bestfirstfit+0xd77>
f011779f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01177a6:	83 ec 0c             	sub    $0xc,%esp
f01177a9:	68 cc 99 12 f0       	push   $0xf01299cc
f01177ae:	e8 e8 96 fe ff       	call   f0100e9b <cprintf>
f01177b3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01177b6:	e8 f8 5a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01177bb:	89 c2                	mov    %eax,%edx
f01177bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01177c0:	39 c2                	cmp    %eax,%edx
f01177c2:	74 17                	je     f01177db <test_kfree_bestfirstfit+0xd9c>
f01177c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01177cb:	83 ec 0c             	sub    $0xc,%esp
f01177ce:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01177d3:	e8 c3 96 fe ff       	call   f0100e9b <cprintf>
f01177d8:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB [DYNAMIC ALLOCATOR: Should be Merged with PREV remaining area of 2KB & NEXT free space]
		freeFrames = sys_calculate_free_frames() ;
f01177db:	e8 d3 5a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01177e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177e3:	e8 61 cf fe ff       	call   f0104749 <pf_calculate_free_frames>
f01177e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[3]);
f01177eb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177f1:	83 ec 0c             	sub    $0xc,%esp
f01177f4:	50                   	push   %eax
f01177f5:	e8 3f 0f ff ff       	call   f0108739 <kfree>
f01177fa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01177fd:	e8 47 cf fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117802:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117805:	74 17                	je     f011781e <test_kfree_bestfirstfit+0xddf>
f0117807:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011780e:	83 ec 0c             	sub    $0xc,%esp
f0117811:	68 cc 99 12 f0       	push   $0xf01299cc
f0117816:	e8 80 96 fe ff       	call   f0100e9b <cprintf>
f011781b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011781e:	e8 90 5a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117823:	89 c2                	mov    %eax,%edx
f0117825:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117828:	39 c2                	cmp    %eax,%edx
f011782a:	74 17                	je     f0117843 <test_kfree_bestfirstfit+0xe04>
f011782c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117833:	83 ec 0c             	sub    $0xc,%esp
f0117836:	68 d8 9c 12 f0       	push   $0xf0129cd8
f011783b:	e8 5b 96 fe ff       	call   f0100e9b <cprintf>
f0117840:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 8KB hole - total = 9MB + 24KB]
		freeFrames = sys_calculate_free_frames() ;
f0117843:	e8 6b 5a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117848:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011784b:	e8 f9 ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117850:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[7]);
f0117853:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117859:	83 ec 0c             	sub    $0xc,%esp
f011785c:	50                   	push   %eax
f011785d:	e8 d7 0e ff ff       	call   f0108739 <kfree>
f0117862:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117865:	e8 df ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f011786a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011786d:	74 17                	je     f0117886 <test_kfree_bestfirstfit+0xe47>
f011786f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117876:	83 ec 0c             	sub    $0xc,%esp
f0117879:	68 cc 99 12 f0       	push   $0xf01299cc
f011787e:	e8 18 96 fe ff       	call   f0100e9b <cprintf>
f0117883:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 4) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0117886:	e8 28 5a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011788b:	89 c2                	mov    %eax,%edx
f011788d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117890:	29 c2                	sub    %eax,%edx
f0117892:	89 d0                	mov    %edx,%eax
f0117894:	83 f8 03             	cmp    $0x3,%eax
f0117897:	77 17                	ja     f01178b0 <test_kfree_bestfirstfit+0xe71>
f0117899:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01178a0:	83 ec 0c             	sub    $0xc,%esp
f01178a3:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01178a8:	e8 ee 95 fe ff       	call   f0100e9b <cprintf>
f01178ad:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB [PAGE ALLOCATOR: Should be Merged with NEXT remaining hole ]
		freeFrames = sys_calculate_free_frames() ;
f01178b0:	e8 fe 59 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01178b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178b8:	e8 8c ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f01178bd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[10]);
f01178c0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01178c6:	83 ec 0c             	sub    $0xc,%esp
f01178c9:	50                   	push   %eax
f01178ca:	e8 6a 0e ff ff       	call   f0108739 <kfree>
f01178cf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01178d2:	e8 72 ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f01178d7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01178da:	74 17                	je     f01178f3 <test_kfree_bestfirstfit+0xeb4>
f01178dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01178e3:	83 ec 0c             	sub    $0xc,%esp
f01178e6:	68 cc 99 12 f0       	push   $0xf01299cc
f01178eb:	e8 ab 95 fe ff       	call   f0100e9b <cprintf>
f01178f0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 1*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01178f3:	e8 bb 59 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01178f8:	89 c2                	mov    %eax,%edx
f01178fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01178fd:	29 c2                	sub    %eax,%edx
f01178ff:	89 d0                	mov    %edx,%eax
f0117901:	3d ff 00 00 00       	cmp    $0xff,%eax
f0117906:	77 17                	ja     f011791f <test_kfree_bestfirstfit+0xee0>
f0117908:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011790f:	83 ec 0c             	sub    $0xc,%esp
f0117912:	68 d0 9d 12 f0       	push   $0xf0129dd0
f0117917:	e8 7f 95 fe ff       	call   f0100e9b <cprintf>
f011791c:	83 c4 10             	add    $0x10,%esp

		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 24KB hole & NEXT remaining hole - total = ALL PAGE ALLOCATOR Space]
		freeFrames = sys_calculate_free_frames() ;
f011791f:	e8 8f 59 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117924:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117927:	e8 1d ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f011792c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[8]);
f011792f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117935:	83 ec 0c             	sub    $0xc,%esp
f0117938:	50                   	push   %eax
f0117939:	e8 fb 0d ff ff       	call   f0108739 <kfree>
f011793e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117941:	e8 03 ce fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117946:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117949:	74 17                	je     f0117962 <test_kfree_bestfirstfit+0xf23>
f011794b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117952:	83 ec 0c             	sub    $0xc,%esp
f0117955:	68 cc 99 12 f0       	push   $0xf01299cc
f011795a:	e8 3c 95 fe ff       	call   f0100e9b <cprintf>
f011795f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0117962:	e8 4c 59 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117967:	89 c2                	mov    %eax,%edx
f0117969:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011796c:	29 c2                	sub    %eax,%edx
f011796e:	89 d0                	mov    %edx,%eax
f0117970:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f0117975:	77 17                	ja     f011798e <test_kfree_bestfirstfit+0xf4f>
f0117977:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011797e:	83 ec 0c             	sub    $0xc,%esp
f0117981:	68 d0 9d 12 f0       	push   $0xf0129dd0
f0117986:	e8 10 95 fe ff       	call   f0100e9b <cprintf>
f011798b:	83 c4 10             	add    $0x10,%esp

		//				if(start_freeFrames != (sys_calculate_free_frames())) {{ correct = 0; cprintf("Wrong kfree: not all pages removed correctly at end\n"); }}
	}
	if (correct)	eval+=15 ;
f011798e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117992:	74 04                	je     f0117998 <test_kfree_bestfirstfit+0xf59>
f0117994:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f0117998:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011799f:	83 ec 0c             	sub    $0xc,%esp
f01179a2:	6a 03                	push   $0x3
f01179a4:	e8 ad 5d ff ff       	call   f010d756 <sys_bypassPageFault>
f01179a9:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i <= 10; ++i)
f01179ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01179b3:	e9 af 00 00 00       	jmp    f0117a67 <test_kfree_bestfirstfit+0x1028>
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
f01179b8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01179bc:	0f 84 a1 00 00 00    	je     f0117a63 <test_kfree_bestfirstfit+0x1024>
f01179c2:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01179c6:	0f 84 97 00 00 00    	je     f0117a63 <test_kfree_bestfirstfit+0x1024>
f01179cc:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01179d0:	0f 84 8d 00 00 00    	je     f0117a63 <test_kfree_bestfirstfit+0x1024>
			{
				continue;
			}
			ptr = (char *) ptr_allocations[i];
f01179d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01179d9:	8b 84 85 c8 fe ff ff 	mov    -0x138(%ebp,%eax,4),%eax
f01179e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
			ptr[0] = 10;
f01179e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01179e6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0]))
f01179e9:	e8 56 5d ff ff       	call   f010d744 <sys_rcr2>
f01179ee:	89 c2                	mov    %eax,%edx
f01179f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01179f3:	39 c2                	cmp    %eax,%edx
f01179f5:	74 1d                	je     f0117a14 <test_kfree_bestfirstfit+0xfd5>
				if (correct)
f01179f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01179fb:	74 17                	je     f0117a14 <test_kfree_bestfirstfit+0xfd5>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f01179fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117a04:	83 ec 0c             	sub    $0xc,%esp
f0117a07:	68 b4 9e 12 f0       	push   $0xf0129eb4
f0117a0c:	e8 8a 94 fe ff       	call   f0100e9b <cprintf>
f0117a11:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0117a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117a17:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f0117a1e:	89 c2                	mov    %eax,%edx
f0117a20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a23:	01 d0                	add    %edx,%eax
f0117a25:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]]))
f0117a28:	e8 17 5d ff ff       	call   f010d744 <sys_rcr2>
f0117a2d:	89 c2                	mov    %eax,%edx
f0117a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117a32:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f0117a39:	89 c1                	mov    %eax,%ecx
f0117a3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a3e:	01 c8                	add    %ecx,%eax
f0117a40:	39 c2                	cmp    %eax,%edx
f0117a42:	74 20                	je     f0117a64 <test_kfree_bestfirstfit+0x1025>
				if (correct)
f0117a44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117a48:	74 1a                	je     f0117a64 <test_kfree_bestfirstfit+0x1025>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f0117a4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117a51:	83 ec 0c             	sub    $0xc,%esp
f0117a54:	68 b4 9e 12 f0       	push   $0xf0129eb4
f0117a59:	e8 3d 94 fe ff       	call   f0100e9b <cprintf>
f0117a5e:	83 c4 10             	add    $0x10,%esp
f0117a61:	eb 01                	jmp    f0117a64 <test_kfree_bestfirstfit+0x1025>
		for (i = 0; i <= 10; ++i)
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
			{
				continue;
f0117a63:	90                   	nop
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i <= 10; ++i)
f0117a64:	ff 45 f4             	incl   -0xc(%ebp)
f0117a67:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
f0117a6b:	0f 8e 47 ff ff ff    	jle    f01179b8 <test_kfree_bestfirstfit+0xf79>
				if (correct)
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0117a71:	83 ec 0c             	sub    $0xc,%esp
f0117a74:	6a 00                	push   $0x0
f0117a76:	e8 db 5c ff ff       	call   f010d756 <sys_bypassPageFault>
f0117a7b:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=15 ;
f0117a7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117a82:	74 04                	je     f0117a88 <test_kfree_bestfirstfit+0x1049>
f0117a84:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f0117a88:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	//Allocate after kfree ALL [30%]
	{
		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f0117a8f:	e8 1f 58 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117a94:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a97:	e8 ad cc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117a9c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f0117a9f:	83 ec 0c             	sub    $0xc,%esp
f0117aa2:	68 00 04 00 00       	push   $0x400
f0117aa7:	e8 f5 0a ff ff       	call   f01085a1 <kmalloc>
f0117aac:	83 c4 10             	add    $0x10,%esp
f0117aaf:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f0117ab5:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f0117abb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117ac1:	39 c2                	cmp    %eax,%edx
f0117ac3:	72 16                	jb     f0117adb <test_kfree_bestfirstfit+0x109c>
f0117ac5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117acb:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117ad1:	81 c2 00 04 00 00    	add    $0x400,%edx
f0117ad7:	39 d0                	cmp    %edx,%eax
f0117ad9:	76 17                	jbe    f0117af2 <test_kfree_bestfirstfit+0x10b3>
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0117adb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117ae2:	83 ec 0c             	sub    $0xc,%esp
f0117ae5:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117aea:	e8 ac 93 fe ff       	call   f0100e9b <cprintf>
f0117aef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117af2:	e8 52 cc fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117af7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117afa:	74 17                	je     f0117b13 <test_kfree_bestfirstfit+0x10d4>
f0117afc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117b03:	83 ec 0c             	sub    $0xc,%esp
f0117b06:	68 cc 99 12 f0       	push   $0xf01299cc
f0117b0b:	e8 8b 93 fe ff       	call   f0100e9b <cprintf>
f0117b10:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f0117b13:	e8 9b 57 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117b18:	89 c2                	mov    %eax,%edx
f0117b1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b1d:	39 c2                	cmp    %eax,%edx
f0117b1f:	74 17                	je     f0117b38 <test_kfree_bestfirstfit+0x10f9>
f0117b21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117b28:	83 ec 0c             	sub    $0xc,%esp
f0117b2b:	68 3c 9e 12 f0       	push   $0xf0129e3c
f0117b30:	e8 66 93 fe ff       	call   f0100e9b <cprintf>
f0117b35:	83 c4 10             	add    $0x10,%esp
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
f0117b38:	c7 45 94 ff 03 00 00 	movl   $0x3ff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[11];
f0117b3f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117b45:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0117b48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117b4f:	eb 0e                	jmp    f0117b5f <test_kfree_bestfirstfit+0x1120>
		{
			ptr[i] = 11 ;
f0117b51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117b54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117b57:	01 d0                	add    %edx,%eax
f0117b59:	c6 00 0b             	movb   $0xb,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0117b5c:	ff 45 f4             	incl   -0xc(%ebp)
f0117b5f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117b62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117b65:	7f ea                	jg     f0117b51 <test_kfree_bestfirstfit+0x1112>
			ptr[i] = 11 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117b67:	e8 47 57 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117b6c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b6f:	e8 d5 cb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117b74:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[12] = kmalloc(2*kilo);
f0117b77:	83 ec 0c             	sub    $0xc,%esp
f0117b7a:	68 00 08 00 00       	push   $0x800
f0117b7f:	e8 1d 0a ff ff       	call   f01085a1 <kmalloc>
f0117b84:	83 c4 10             	add    $0x10,%esp
f0117b87:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		//expected = ptr_allocations[2] + 1*kilo + sizeOfMetaData();
		//if (ptr_allocations[12] != expected)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f0117b8d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117b93:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117b99:	81 c2 00 04 00 00    	add    $0x400,%edx
f0117b9f:	39 d0                	cmp    %edx,%eax
f0117ba1:	72 16                	jb     f0117bb9 <test_kfree_bestfirstfit+0x117a>
f0117ba3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117ba9:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117baf:	81 c2 00 08 00 00    	add    $0x800,%edx
f0117bb5:	39 d0                	cmp    %edx,%eax
f0117bb7:	76 35                	jbe    f0117bee <test_kfree_bestfirstfit+0x11af>
		{
			correct = 0;
f0117bb9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			cprintf("Wrong start address for the allocated space... check return address of kmalloc. Expected [%x, %x], Actual %x\n", (ptr_allocations[2] + 1*kilo), (ptr_allocations[2] + 2*kilo), ptr_allocations[12]);
f0117bc0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117bc6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117bcc:	8d 8a 00 08 00 00    	lea    0x800(%edx),%ecx
f0117bd2:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117bd8:	81 c2 00 04 00 00    	add    $0x400,%edx
f0117bde:	50                   	push   %eax
f0117bdf:	51                   	push   %ecx
f0117be0:	52                   	push   %edx
f0117be1:	68 fc 9e 12 f0       	push   $0xf0129efc
f0117be6:	e8 b0 92 fe ff       	call   f0100e9b <cprintf>
f0117beb:	83 c4 10             	add    $0x10,%esp
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117bee:	e8 56 cb fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117bf3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117bf6:	74 17                	je     f0117c0f <test_kfree_bestfirstfit+0x11d0>
f0117bf8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117bff:	83 ec 0c             	sub    $0xc,%esp
f0117c02:	68 cc 99 12 f0       	push   $0xf01299cc
f0117c07:	e8 8f 92 fe ff       	call   f0100e9b <cprintf>
f0117c0c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f0117c0f:	e8 9f 56 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117c14:	89 c2                	mov    %eax,%edx
f0117c16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c19:	39 c2                	cmp    %eax,%edx
f0117c1b:	74 17                	je     f0117c34 <test_kfree_bestfirstfit+0x11f5>
f0117c1d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117c24:	83 ec 0c             	sub    $0xc,%esp
f0117c27:	68 3c 9e 12 f0       	push   $0xf0129e3c
f0117c2c:	e8 6a 92 fe ff       	call   f0100e9b <cprintf>
f0117c31:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0117c34:	c7 45 98 ff 07 00 00 	movl   $0x7ff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[12];
f0117c3b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117c41:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0117c44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117c4b:	eb 0e                	jmp    f0117c5b <test_kfree_bestfirstfit+0x121c>
		{
			ptr[i] = 12 ;
f0117c4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117c50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117c53:	01 d0                	add    %edx,%eax
f0117c55:	c6 00 0c             	movb   $0xc,(%eax)
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0117c58:	ff 45 f4             	incl   -0xc(%ebp)
f0117c5b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117c61:	7f ea                	jg     f0117c4d <test_kfree_bestfirstfit+0x120e>
			ptr[i] = 12 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1.5 KB
		freeFrames = sys_calculate_free_frames() ;
f0117c63:	e8 4b 56 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117c68:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c6b:	e8 d9 ca fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117c70:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[13] = kmalloc(3*kilo/2);
f0117c73:	83 ec 0c             	sub    $0xc,%esp
f0117c76:	68 00 06 00 00       	push   $0x600
f0117c7b:	e8 21 09 ff ff       	call   f01085a1 <kmalloc>
f0117c80:	83 c4 10             	add    $0x10,%esp
f0117c83:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		//if (ptr_allocations[13] != ptr_allocations[12] + 2*kilo + sizeOfMetaData())
		if ((ptr_allocations[13] < ptr_allocations[2] + 3*kilo) || (ptr_allocations[13] > (ptr_allocations[2] + 4*kilo)))
f0117c89:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117c8f:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117c95:	81 c2 00 0c 00 00    	add    $0xc00,%edx
f0117c9b:	39 d0                	cmp    %edx,%eax
f0117c9d:	72 16                	jb     f0117cb5 <test_kfree_bestfirstfit+0x1276>
f0117c9f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117ca5:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117cab:	81 c2 00 10 00 00    	add    $0x1000,%edx
f0117cb1:	39 d0                	cmp    %edx,%eax
f0117cb3:	76 17                	jbe    f0117ccc <test_kfree_bestfirstfit+0x128d>
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0117cb5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117cbc:	83 ec 0c             	sub    $0xc,%esp
f0117cbf:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117cc4:	e8 d2 91 fe ff       	call   f0100e9b <cprintf>
f0117cc9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117ccc:	e8 78 ca fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117cd1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117cd4:	74 17                	je     f0117ced <test_kfree_bestfirstfit+0x12ae>
f0117cd6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117cdd:	83 ec 0c             	sub    $0xc,%esp
f0117ce0:	68 cc 99 12 f0       	push   $0xf01299cc
f0117ce5:	e8 b1 91 fe ff       	call   f0100e9b <cprintf>
f0117cea:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f0117ced:	e8 c1 55 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117cf2:	89 c2                	mov    %eax,%edx
f0117cf4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117cf7:	39 c2                	cmp    %eax,%edx
f0117cf9:	74 17                	je     f0117d12 <test_kfree_bestfirstfit+0x12d3>
f0117cfb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117d02:	83 ec 0c             	sub    $0xc,%esp
f0117d05:	68 3c 9e 12 f0       	push   $0xf0129e3c
f0117d0a:	e8 8c 91 fe ff       	call   f0100e9b <cprintf>
f0117d0f:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
f0117d12:	c7 45 9c ff 05 00 00 	movl   $0x5ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[13];
f0117d19:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117d1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0117d22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117d29:	eb 0e                	jmp    f0117d39 <test_kfree_bestfirstfit+0x12fa>
		{
			ptr[i] = 13 ;
f0117d2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117d2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117d31:	01 d0                	add    %edx,%eax
f0117d33:	c6 00 0d             	movb   $0xd,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f0117d36:	ff 45 f4             	incl   -0xc(%ebp)
f0117d39:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117d3f:	7f ea                	jg     f0117d2b <test_kfree_bestfirstfit+0x12ec>
			ptr[i] = 13 ;
		}

		//[PAGE ALLOCATOR] Allocate in merged freed space
		//30 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d41:	e8 6d 55 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117d46:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d49:	e8 fb c9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117d4e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(30*Mega);
f0117d51:	83 ec 0c             	sub    $0xc,%esp
f0117d54:	68 00 00 e0 01       	push   $0x1e00000
f0117d59:	e8 43 08 ff ff       	call   f01085a1 <kmalloc>
f0117d5e:	83 c4 10             	add    $0x10,%esp
f0117d61:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0117d67:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117d6d:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0117d72:	74 17                	je     f0117d8b <test_kfree_bestfirstfit+0x134c>
f0117d74:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117d7b:	83 ec 0c             	sub    $0xc,%esp
f0117d7e:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0117d83:	e8 13 91 fe ff       	call   f0100e9b <cprintf>
f0117d88:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0117d8b:	e8 b9 c9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0117d90:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117d93:	74 17                	je     f0117dac <test_kfree_bestfirstfit+0x136d>
f0117d95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117d9c:	83 ec 0c             	sub    $0xc,%esp
f0117d9f:	68 cc 99 12 f0       	push   $0xf01299cc
f0117da4:	e8 f2 90 fe ff       	call   f0100e9b <cprintf>
f0117da9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0117dac:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f0117daf:	e8 ff 54 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0117db4:	29 c3                	sub    %eax,%ebx
f0117db6:	89 d8                	mov    %ebx,%eax
f0117db8:	3d ff 1d 00 00       	cmp    $0x1dff,%eax
f0117dbd:	77 17                	ja     f0117dd6 <test_kfree_bestfirstfit+0x1397>
f0117dbf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117dc6:	83 ec 0c             	sub    $0xc,%esp
f0117dc9:	68 38 9a 12 f0       	push   $0xf0129a38
f0117dce:	e8 c8 90 fe ff       	call   f0100e9b <cprintf>
f0117dd3:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
f0117dd6:	c7 45 90 ff ff df 01 	movl   $0x1dfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f0117ddd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117de3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0117de6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117ded:	eb 0e                	jmp    f0117dfd <test_kfree_bestfirstfit+0x13be>
		{
			ptr[i] = 10 ;
f0117def:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117df2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117df5:	01 d0                	add    %edx,%eax
f0117df7:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0117dfa:	ff 45 f4             	incl   -0xc(%ebp)
f0117dfd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117e03:	7f ea                	jg     f0117def <test_kfree_bestfirstfit+0x13b0>
			ptr[i] = 10 ;
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
f0117e05:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e0b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0117e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117e15:	eb 1e                	jmp    f0117e35 <test_kfree_bestfirstfit+0x13f6>
		{
			sums[10] += ptr[i] ;
f0117e17:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0117e1d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117e20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117e23:	01 c8                	add    %ecx,%eax
f0117e25:	8a 00                	mov    (%eax),%al
f0117e27:	0f be c0             	movsbl %al,%eax
f0117e2a:	01 d0                	add    %edx,%eax
f0117e2c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0117e32:	ff 45 f4             	incl   -0xc(%ebp)
f0117e35:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117e38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117e3b:	7f da                	jg     f0117e17 <test_kfree_bestfirstfit+0x13d8>
		{
			sums[10] += ptr[i] ;
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f0117e3d:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0117e43:	8b 55 90             	mov    -0x70(%ebp),%edx
f0117e46:	89 d0                	mov    %edx,%eax
f0117e48:	c1 e0 02             	shl    $0x2,%eax
f0117e4b:	01 d0                	add    %edx,%eax
f0117e4d:	01 c0                	add    %eax,%eax
f0117e4f:	39 c1                	cmp    %eax,%ecx
f0117e51:	74 17                	je     f0117e6a <test_kfree_bestfirstfit+0x142b>
f0117e53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117e5a:	83 ec 0c             	sub    $0xc,%esp
f0117e5d:	68 6c 9f 12 f0       	push   $0xf0129f6c
f0117e62:	e8 34 90 fe ff       	call   f0100e9b <cprintf>
f0117e67:	83 c4 10             	add    $0x10,%esp

		//1 KB
		ptr = (char*)ptr_allocations[11];
f0117e6a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117e70:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0117e73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117e7a:	eb 1e                	jmp    f0117e9a <test_kfree_bestfirstfit+0x145b>
		{
			sums[11] += ptr[i] ;
f0117e7c:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0117e82:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117e85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117e88:	01 c8                	add    %ecx,%eax
f0117e8a:	8a 00                	mov    (%eax),%al
f0117e8c:	0f be c0             	movsbl %al,%eax
f0117e8f:	01 d0                	add    %edx,%eax
f0117e91:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1 KB
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0117e97:	ff 45 f4             	incl   -0xc(%ebp)
f0117e9a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117e9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117ea0:	7f da                	jg     f0117e7c <test_kfree_bestfirstfit+0x143d>
		{
			sums[11] += ptr[i] ;
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f0117ea2:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0117ea8:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0117eab:	89 d0                	mov    %edx,%eax
f0117ead:	c1 e0 02             	shl    $0x2,%eax
f0117eb0:	01 d0                	add    %edx,%eax
f0117eb2:	01 c0                	add    %eax,%eax
f0117eb4:	01 d0                	add    %edx,%eax
f0117eb6:	39 c1                	cmp    %eax,%ecx
f0117eb8:	74 17                	je     f0117ed1 <test_kfree_bestfirstfit+0x1492>
f0117eba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117ec1:	83 ec 0c             	sub    $0xc,%esp
f0117ec4:	68 6c 9f 12 f0       	push   $0xf0129f6c
f0117ec9:	e8 cd 8f fe ff       	call   f0100e9b <cprintf>
f0117ece:	83 c4 10             	add    $0x10,%esp

		//2 KB
		ptr = (char*)ptr_allocations[12];
f0117ed1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117ed7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0117eda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117ee1:	eb 1e                	jmp    f0117f01 <test_kfree_bestfirstfit+0x14c2>
		{
			sums[12] += ptr[i] ;
f0117ee3:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f0117ee9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117eec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117eef:	01 c8                	add    %ecx,%eax
f0117ef1:	8a 00                	mov    (%eax),%al
f0117ef3:	0f be c0             	movsbl %al,%eax
f0117ef6:	01 d0                	add    %edx,%eax
f0117ef8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//2 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0117efe:	ff 45 f4             	incl   -0xc(%ebp)
f0117f01:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117f04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117f07:	7f da                	jg     f0117ee3 <test_kfree_bestfirstfit+0x14a4>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f0117f09:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
f0117f0f:	8b 55 98             	mov    -0x68(%ebp),%edx
f0117f12:	89 d0                	mov    %edx,%eax
f0117f14:	01 c0                	add    %eax,%eax
f0117f16:	01 d0                	add    %edx,%eax
f0117f18:	c1 e0 02             	shl    $0x2,%eax
f0117f1b:	39 c1                	cmp    %eax,%ecx
f0117f1d:	74 17                	je     f0117f36 <test_kfree_bestfirstfit+0x14f7>
f0117f1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117f26:	83 ec 0c             	sub    $0xc,%esp
f0117f29:	68 6c 9f 12 f0       	push   $0xf0129f6c
f0117f2e:	e8 68 8f fe ff       	call   f0100e9b <cprintf>
f0117f33:	83 c4 10             	add    $0x10,%esp

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
f0117f36:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117f3c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0117f3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117f46:	eb 1e                	jmp    f0117f66 <test_kfree_bestfirstfit+0x1527>
		{
			sums[13] += ptr[i] ;
f0117f48:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0117f4e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117f51:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117f54:	01 c8                	add    %ecx,%eax
f0117f56:	8a 00                	mov    (%eax),%al
f0117f58:	0f be c0             	movsbl %al,%eax
f0117f5b:	01 d0                	add    %edx,%eax
f0117f5d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f0117f63:	ff 45 f4             	incl   -0xc(%ebp)
f0117f66:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117f69:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117f6c:	7f da                	jg     f0117f48 <test_kfree_bestfirstfit+0x1509>
		{
			sums[13] += ptr[i] ;
		}
		if (sums[13] != 13*lastIndices[13])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f0117f6e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0117f74:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0117f77:	89 d0                	mov    %edx,%eax
f0117f79:	01 c0                	add    %eax,%eax
f0117f7b:	01 d0                	add    %edx,%eax
f0117f7d:	c1 e0 02             	shl    $0x2,%eax
f0117f80:	01 d0                	add    %edx,%eax
f0117f82:	39 c1                	cmp    %eax,%ecx
f0117f84:	74 17                	je     f0117f9d <test_kfree_bestfirstfit+0x155e>
f0117f86:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117f8d:	83 ec 0c             	sub    $0xc,%esp
f0117f90:	68 6c 9f 12 f0       	push   $0xf0129f6c
f0117f95:	e8 01 8f fe ff       	call   f0100e9b <cprintf>
f0117f9a:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f0117f9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117fa1:	74 04                	je     f0117fa7 <test_kfree_bestfirstfit+0x1568>
f0117fa3:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f0117fa7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0117fae:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0117fb5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117fbc:	eb 4e                	jmp    f011800c <test_kfree_bestfirstfit+0x15cd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0117fbe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117fc1:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0117fc6:	83 ec 04             	sub    $0x4,%esp
f0117fc9:	8d 8d c4 fe ff ff    	lea    -0x13c(%ebp),%ecx
f0117fcf:	51                   	push   %ecx
f0117fd0:	52                   	push   %edx
f0117fd1:	50                   	push   %eax
f0117fd2:	e8 d4 f5 fe ff       	call   f01075ab <get_page_table>
f0117fd7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0117fda:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117fe0:	85 c0                	test   %eax,%eax
f0117fe2:	75 1d                	jne    f0118001 <test_kfree_bestfirstfit+0x15c2>
			{
				if (correct)
f0117fe4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117fe8:	74 17                	je     f0118001 <test_kfree_bestfirstfit+0x15c2>
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
f0117fea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117ff1:	83 ec 0c             	sub    $0xc,%esp
f0117ff4:	68 98 9f 12 f0       	push   $0xf0129f98
f0117ff9:	e8 9d 8e fe ff       	call   f0100e9b <cprintf>
f0117ffe:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0118001:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f0118008:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011800c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0118010:	78 ac                	js     f0117fbe <test_kfree_bestfirstfit+0x157f>
f0118012:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0118016:	7f 09                	jg     f0118021 <test_kfree_bestfirstfit+0x15e2>
f0118018:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011801f:	76 9d                	jbe    f0117fbe <test_kfree_bestfirstfit+0x157f>
				if (correct)
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
			}
		}
	}
	if (correct)	eval+=5 ;
f0118021:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118025:	74 04                	je     f011802b <test_kfree_bestfirstfit+0x15ec>
f0118027:	83 45 f0 05          	addl   $0x5,-0x10(%ebp)

	cprintf("\ntest kfree completed. Eval = %d%\n", eval);
f011802b:	83 ec 08             	sub    $0x8,%esp
f011802e:	ff 75 f0             	pushl  -0x10(%ebp)
f0118031:	68 00 a0 12 f0       	push   $0xf012a000
f0118036:	e8 60 8e fe ff       	call   f0100e9b <cprintf>
f011803b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011803e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118043:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118046:	5b                   	pop    %ebx
f0118047:	5f                   	pop    %edi
f0118048:	5d                   	pop    %ebp
f0118049:	c3                   	ret    

f011804a <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011804a:	55                   	push   %ebp
f011804b:	89 e5                	mov    %esp,%ebp
f011804d:	57                   	push   %edi
f011804e:	53                   	push   %ebx
f011804f:	81 ec c0 35 00 00    	sub    $0x35c0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0118055:	83 ec 0c             	sub    $0xc,%esp
f0118058:	68 0c 99 12 f0       	push   $0xf012990c
f011805d:	e8 39 8e fe ff       	call   f0100e9b <cprintf>
f0118062:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118065:	83 ec 0c             	sub    $0xc,%esp
f0118068:	68 3c 99 12 f0       	push   $0xf012993c
f011806d:	e8 29 8e fe ff       	call   f0100e9b <cprintf>
f0118072:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118075:	83 ec 0c             	sub    $0xc,%esp
f0118078:	68 0c 99 12 f0       	push   $0xf012990c
f011807d:	e8 19 8e fe ff       	call   f0100e9b <cprintf>
f0118082:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118085:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0118089:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011808d:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0118093:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0118099:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01180a0:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01180a7:	e8 07 52 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01180ac:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01180af:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01180b5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01180ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01180bf:	89 d7                	mov    %edx,%edi
f01180c1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01180c3:	8d 95 c4 fe ff ff    	lea    -0x13c(%ebp),%edx
f01180c9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01180ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01180d3:	89 d7                	mov    %edx,%edi
f01180d5:	f3 ab                	rep stos %eax,%es:(%edi)
	int eval = 0;
f01180d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f01180de:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f01180e5:	8d 95 74 fe ff ff    	lea    -0x18c(%ebp),%edx
f01180eb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01180f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01180f5:	89 d7                	mov    %edx,%edi
f01180f7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01180f9:	e8 b5 51 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01180fe:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118101:	e8 43 c6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118106:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118109:	83 ec 0c             	sub    $0xc,%esp
f011810c:	68 00 fc 1f 00       	push   $0x1ffc00
f0118111:	e8 8b 04 ff ff       	call   f01085a1 <kmalloc>
f0118116:	83 c4 10             	add    $0x10,%esp
f0118119:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011811f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118125:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011812a:	74 17                	je     f0118143 <test_kheap_phys_addr+0xf9>
f011812c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118133:	83 ec 0c             	sub    $0xc,%esp
f0118136:	68 7c 9a 12 f0       	push   $0xf0129a7c
f011813b:	e8 5b 8d fe ff       	call   f0100e9b <cprintf>
f0118140:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118143:	e8 01 c6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118148:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011814b:	74 17                	je     f0118164 <test_kheap_phys_addr+0x11a>
f011814d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118154:	83 ec 0c             	sub    $0xc,%esp
f0118157:	68 cc 99 12 f0       	push   $0xf01299cc
f011815c:	e8 3a 8d fe ff       	call   f0100e9b <cprintf>
f0118161:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118164:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118167:	e8 47 51 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011816c:	29 c3                	sub    %eax,%ebx
f011816e:	89 d8                	mov    %ebx,%eax
f0118170:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0118175:	77 17                	ja     f011818e <test_kheap_phys_addr+0x144>
f0118177:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011817e:	83 ec 0c             	sub    $0xc,%esp
f0118181:	68 38 9a 12 f0       	push   $0xf0129a38
f0118186:	e8 10 8d fe ff       	call   f0100e9b <cprintf>
f011818b:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011818e:	e8 20 51 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118193:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118196:	e8 ae c5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011819b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011819e:	83 ec 0c             	sub    $0xc,%esp
f01181a1:	68 00 fc 1f 00       	push   $0x1ffc00
f01181a6:	e8 f6 03 ff ff       	call   f01085a1 <kmalloc>
f01181ab:	83 c4 10             	add    $0x10,%esp
f01181ae:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f01181b4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01181ba:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f01181bf:	74 17                	je     f01181d8 <test_kheap_phys_addr+0x18e>
f01181c1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01181c8:	83 ec 0c             	sub    $0xc,%esp
f01181cb:	68 7c 9a 12 f0       	push   $0xf0129a7c
f01181d0:	e8 c6 8c fe ff       	call   f0100e9b <cprintf>
f01181d5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01181d8:	e8 6c c5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01181dd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01181e0:	74 17                	je     f01181f9 <test_kheap_phys_addr+0x1af>
f01181e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01181e9:	83 ec 0c             	sub    $0xc,%esp
f01181ec:	68 cc 99 12 f0       	push   $0xf01299cc
f01181f1:	e8 a5 8c fe ff       	call   f0100e9b <cprintf>
f01181f6:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01181f9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01181fc:	e8 b2 50 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118201:	29 c3                	sub    %eax,%ebx
f0118203:	89 d8                	mov    %ebx,%eax
f0118205:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011820a:	77 17                	ja     f0118223 <test_kheap_phys_addr+0x1d9>
f011820c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118213:	83 ec 0c             	sub    $0xc,%esp
f0118216:	68 38 9a 12 f0       	push   $0xf0129a38
f011821b:	e8 7b 8c fe ff       	call   f0100e9b <cprintf>
f0118220:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f0118223:	e8 8b 50 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118228:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011822b:	e8 19 c5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118230:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f0118233:	83 ec 0c             	sub    $0xc,%esp
f0118236:	68 00 04 00 00       	push   $0x400
f011823b:	e8 61 03 ff ff       	call   f01085a1 <kmalloc>
f0118240:	83 c4 10             	add    $0x10,%esp
f0118243:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0118249:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011824f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0118254:	76 28                	jbe    f011827e <test_kheap_phys_addr+0x234>
f0118256:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011825c:	83 ec 0c             	sub    $0xc,%esp
f011825f:	6a 00                	push   $0x0
f0118261:	e8 d7 01 ff ff       	call   f010843d <sbrk>
f0118266:	83 c4 10             	add    $0x10,%esp
f0118269:	39 c3                	cmp    %eax,%ebx
f011826b:	73 11                	jae    f011827e <test_kheap_phys_addr+0x234>
f011826d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0118273:	89 c2                	mov    %eax,%edx
f0118275:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011827a:	39 c2                	cmp    %eax,%edx
f011827c:	72 17                	jb     f0118295 <test_kheap_phys_addr+0x24b>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011827e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118285:	83 ec 0c             	sub    $0xc,%esp
f0118288:	68 cc 9a 12 f0       	push   $0xf0129acc
f011828d:	e8 09 8c fe ff       	call   f0100e9b <cprintf>
f0118292:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118295:	e8 af c4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011829a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011829d:	74 17                	je     f01182b6 <test_kheap_phys_addr+0x26c>
f011829f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01182a6:	83 ec 0c             	sub    $0xc,%esp
f01182a9:	68 cc 99 12 f0       	push   $0xf01299cc
f01182ae:	e8 e8 8b fe ff       	call   f0100e9b <cprintf>
f01182b3:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01182b6:	e8 f8 4f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01182bb:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01182be:	e8 86 c4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01182c3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f01182c6:	83 ec 0c             	sub    $0xc,%esp
f01182c9:	68 00 08 00 00       	push   $0x800
f01182ce:	e8 ce 02 ff ff       	call   f01085a1 <kmalloc>
f01182d3:	83 c4 10             	add    $0x10,%esp
f01182d6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f01182dc:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01182e2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01182e7:	76 28                	jbe    f0118311 <test_kheap_phys_addr+0x2c7>
f01182e9:	8b 9d 80 fe ff ff    	mov    -0x180(%ebp),%ebx
f01182ef:	83 ec 0c             	sub    $0xc,%esp
f01182f2:	6a 00                	push   $0x0
f01182f4:	e8 44 01 ff ff       	call   f010843d <sbrk>
f01182f9:	83 c4 10             	add    $0x10,%esp
f01182fc:	39 c3                	cmp    %eax,%ebx
f01182fe:	73 11                	jae    f0118311 <test_kheap_phys_addr+0x2c7>
f0118300:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118306:	89 c2                	mov    %eax,%edx
f0118308:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011830d:	39 c2                	cmp    %eax,%edx
f011830f:	72 17                	jb     f0118328 <test_kheap_phys_addr+0x2de>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0118311:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118318:	83 ec 0c             	sub    $0xc,%esp
f011831b:	68 cc 9a 12 f0       	push   $0xf0129acc
f0118320:	e8 76 8b fe ff       	call   f0100e9b <cprintf>
f0118325:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118328:	e8 1c c4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011832d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118330:	74 17                	je     f0118349 <test_kheap_phys_addr+0x2ff>
f0118332:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118339:	83 ec 0c             	sub    $0xc,%esp
f011833c:	68 cc 99 12 f0       	push   $0xf01299cc
f0118341:	e8 55 8b fe ff       	call   f0100e9b <cprintf>
f0118346:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f0118349:	e8 65 4f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011834e:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118351:	e8 f3 c3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118356:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f0118359:	83 ec 0c             	sub    $0xc,%esp
f011835c:	68 00 06 00 00       	push   $0x600
f0118361:	e8 3b 02 ff ff       	call   f01085a1 <kmalloc>
f0118366:	83 c4 10             	add    $0x10,%esp
f0118369:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011836f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118375:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011837a:	76 28                	jbe    f01183a4 <test_kheap_phys_addr+0x35a>
f011837c:	8b 9d 84 fe ff ff    	mov    -0x17c(%ebp),%ebx
f0118382:	83 ec 0c             	sub    $0xc,%esp
f0118385:	6a 00                	push   $0x0
f0118387:	e8 b1 00 ff ff       	call   f010843d <sbrk>
f011838c:	83 c4 10             	add    $0x10,%esp
f011838f:	39 c3                	cmp    %eax,%ebx
f0118391:	73 11                	jae    f01183a4 <test_kheap_phys_addr+0x35a>
f0118393:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118399:	89 c2                	mov    %eax,%edx
f011839b:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f01183a0:	39 c2                	cmp    %eax,%edx
f01183a2:	72 17                	jb     f01183bb <test_kheap_phys_addr+0x371>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f01183a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01183ab:	83 ec 0c             	sub    $0xc,%esp
f01183ae:	68 cc 9a 12 f0       	push   $0xf0129acc
f01183b3:	e8 e3 8a fe ff       	call   f0100e9b <cprintf>
f01183b8:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01183bb:	e8 89 c3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01183c0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01183c3:	74 17                	je     f01183dc <test_kheap_phys_addr+0x392>
f01183c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01183cc:	83 ec 0c             	sub    $0xc,%esp
f01183cf:	68 cc 99 12 f0       	push   $0xf01299cc
f01183d4:	e8 c2 8a fe ff       	call   f0100e9b <cprintf>
f01183d9:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01183dc:	e8 d2 4e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01183e1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183e4:	e8 60 c3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01183e9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f01183ec:	83 ec 0c             	sub    $0xc,%esp
f01183ef:	68 00 1c 00 00       	push   $0x1c00
f01183f4:	e8 a8 01 ff ff       	call   f01085a1 <kmalloc>
f01183f9:	83 c4 10             	add    $0x10,%esp
f01183fc:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118402:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118408:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011840d:	74 17                	je     f0118426 <test_kheap_phys_addr+0x3dc>
f011840f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118416:	83 ec 0c             	sub    $0xc,%esp
f0118419:	68 7c 9a 12 f0       	push   $0xf0129a7c
f011841e:	e8 78 8a fe ff       	call   f0100e9b <cprintf>
f0118423:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118426:	e8 1e c3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011842b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011842e:	74 17                	je     f0118447 <test_kheap_phys_addr+0x3fd>
f0118430:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118437:	83 ec 0c             	sub    $0xc,%esp
f011843a:	68 cc 99 12 f0       	push   $0xf01299cc
f011843f:	e8 57 8a fe ff       	call   f0100e9b <cprintf>
f0118444:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118447:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011844a:	e8 64 4e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011844f:	29 c3                	sub    %eax,%ebx
f0118451:	89 d8                	mov    %ebx,%eax
f0118453:	83 f8 01             	cmp    $0x1,%eax
f0118456:	77 17                	ja     f011846f <test_kheap_phys_addr+0x425>
f0118458:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011845f:	83 ec 0c             	sub    $0xc,%esp
f0118462:	68 38 9a 12 f0       	push   $0xf0129a38
f0118467:	e8 2f 8a fe ff       	call   f0100e9b <cprintf>
f011846c:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011846f:	e8 3f 4e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118474:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118477:	e8 cd c2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011847c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011847f:	83 ec 0c             	sub    $0xc,%esp
f0118482:	68 00 fc 2f 00       	push   $0x2ffc00
f0118487:	e8 15 01 ff ff       	call   f01085a1 <kmalloc>
f011848c:	83 c4 10             	add    $0x10,%esp
f011848f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118495:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011849b:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f01184a0:	74 17                	je     f01184b9 <test_kheap_phys_addr+0x46f>
f01184a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01184a9:	83 ec 0c             	sub    $0xc,%esp
f01184ac:	68 7c 9a 12 f0       	push   $0xf0129a7c
f01184b1:	e8 e5 89 fe ff       	call   f0100e9b <cprintf>
f01184b6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01184b9:	e8 8b c2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01184be:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01184c1:	74 17                	je     f01184da <test_kheap_phys_addr+0x490>
f01184c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01184ca:	83 ec 0c             	sub    $0xc,%esp
f01184cd:	68 cc 99 12 f0       	push   $0xf01299cc
f01184d2:	e8 c4 89 fe ff       	call   f0100e9b <cprintf>
f01184d7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01184da:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01184dd:	e8 d1 4d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01184e2:	29 c3                	sub    %eax,%ebx
f01184e4:	89 d8                	mov    %ebx,%eax
f01184e6:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01184eb:	77 17                	ja     f0118504 <test_kheap_phys_addr+0x4ba>
f01184ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01184f4:	83 ec 0c             	sub    $0xc,%esp
f01184f7:	68 38 9a 12 f0       	push   $0xf0129a38
f01184fc:	e8 9a 89 fe ff       	call   f0100e9b <cprintf>
f0118501:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118504:	e8 aa 4d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118509:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011850c:	e8 38 c2 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118511:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f0118514:	83 ec 0c             	sub    $0xc,%esp
f0118517:	68 00 fc 5f 00       	push   $0x5ffc00
f011851c:	e8 80 00 ff ff       	call   f01085a1 <kmalloc>
f0118521:	83 c4 10             	add    $0x10,%esp
f0118524:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011852a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118530:	3d 00 70 70 f8       	cmp    $0xf8707000,%eax
f0118535:	74 17                	je     f011854e <test_kheap_phys_addr+0x504>
f0118537:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011853e:	83 ec 0c             	sub    $0xc,%esp
f0118541:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0118546:	e8 50 89 fe ff       	call   f0100e9b <cprintf>
f011854b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011854e:	e8 f6 c1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118553:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118556:	74 17                	je     f011856f <test_kheap_phys_addr+0x525>
f0118558:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011855f:	83 ec 0c             	sub    $0xc,%esp
f0118562:	68 cc 99 12 f0       	push   $0xf01299cc
f0118567:	e8 2f 89 fe ff       	call   f0100e9b <cprintf>
f011856c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011856f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118572:	e8 3c 4d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118577:	29 c3                	sub    %eax,%ebx
f0118579:	89 d8                	mov    %ebx,%eax
f011857b:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f0118580:	77 17                	ja     f0118599 <test_kheap_phys_addr+0x54f>
f0118582:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118589:	83 ec 0c             	sub    $0xc,%esp
f011858c:	68 38 9a 12 f0       	push   $0xf0129a38
f0118591:	e8 05 89 fe ff       	call   f0100e9b <cprintf>
f0118596:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118599:	e8 15 4d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011859e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01185a1:	e8 a3 c1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01185a6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f01185a9:	83 ec 0c             	sub    $0xc,%esp
f01185ac:	68 00 38 00 00       	push   $0x3800
f01185b1:	e8 eb ff fe ff       	call   f01085a1 <kmalloc>
f01185b6:	83 c4 10             	add    $0x10,%esp
f01185b9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f01185bf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01185c5:	3d 00 70 d0 f8       	cmp    $0xf8d07000,%eax
f01185ca:	74 17                	je     f01185e3 <test_kheap_phys_addr+0x599>
f01185cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01185d3:	83 ec 0c             	sub    $0xc,%esp
f01185d6:	68 7c 9a 12 f0       	push   $0xf0129a7c
f01185db:	e8 bb 88 fe ff       	call   f0100e9b <cprintf>
f01185e0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01185e3:	e8 61 c1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01185e8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01185eb:	74 17                	je     f0118604 <test_kheap_phys_addr+0x5ba>
f01185ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01185f4:	83 ec 0c             	sub    $0xc,%esp
f01185f7:	68 cc 99 12 f0       	push   $0xf01299cc
f01185fc:	e8 9a 88 fe ff       	call   f0100e9b <cprintf>
f0118601:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118604:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118607:	e8 a7 4c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011860c:	29 c3                	sub    %eax,%ebx
f011860e:	89 d8                	mov    %ebx,%eax
f0118610:	83 f8 03             	cmp    $0x3,%eax
f0118613:	77 17                	ja     f011862c <test_kheap_phys_addr+0x5e2>
f0118615:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011861c:	83 ec 0c             	sub    $0xc,%esp
f011861f:	68 38 9a 12 f0       	push   $0xf0129a38
f0118624:	e8 72 88 fe ff       	call   f0100e9b <cprintf>
f0118629:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc only [30%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011862c:	c7 45 a0 00 b0 d0 f8 	movl   $0xf8d0b000,-0x60(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f0118633:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 offset = 1;
f011863a:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f0118641:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0118646:	05 00 10 00 00       	add    $0x1000,%eax
f011864b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011864e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118651:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0118654:	eb 2e                	jmp    f0118684 <test_kheap_phys_addr+0x63a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0118656:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f0118659:	8d 43 01             	lea    0x1(%ebx),%eax
f011865c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011865f:	83 ec 0c             	sub    $0xc,%esp
f0118662:	ff 75 e8             	pushl  -0x18(%ebp)
f0118665:	e8 32 02 ff ff       	call   f010889c <kheap_physical_address>
f011866a:	83 c4 10             	add    $0x10,%esp
f011866d:	89 84 9d 38 ca ff ff 	mov    %eax,-0x35c8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 offset = 1;
		uint32 startVA = da_limit + PAGE_SIZE;
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f0118674:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0118677:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011867a:	01 d0                	add    %edx,%eax
f011867c:	05 00 10 00 00       	add    $0x1000,%eax
f0118681:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0118684:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118687:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011868a:	72 ca                	jb     f0118656 <test_kheap_phys_addr+0x60c>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011868c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011868f:	89 45 94             	mov    %eax,-0x6c(%ebp)
		i = 0;
f0118692:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f0118699:	8b 45 98             	mov    -0x68(%ebp),%eax
f011869c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011869f:	e9 ce 00 00 00       	jmp    f0118772 <test_kheap_phys_addr+0x728>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01186a4:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01186a9:	83 ec 04             	sub    $0x4,%esp
f01186ac:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f01186b2:	52                   	push   %edx
f01186b3:	ff 75 e8             	pushl  -0x18(%ebp)
f01186b6:	50                   	push   %eax
f01186b7:	e8 ef ee fe ff       	call   f01075ab <get_page_table>
f01186bc:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01186bf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01186c5:	85 c0                	test   %eax,%eax
f01186c7:	75 1e                	jne    f01186e7 <test_kheap_phys_addr+0x69d>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f01186c9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01186d0:	83 ec 04             	sub    $0x4,%esp
f01186d3:	68 24 a0 12 f0       	push   $0xf012a024
f01186d8:	68 30 05 00 00       	push   $0x530
f01186dd:	68 7e a0 12 f0       	push   $0xf012a07e
f01186e2:	e8 33 7b fe ff       	call   f010021a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f01186e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01186ea:	c1 e8 0c             	shr    $0xc,%eax
f01186ed:	25 ff 03 00 00       	and    $0x3ff,%eax
f01186f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01186f5:	eb 62                	jmp    f0118759 <test_kheap_phys_addr+0x70f>
			{
				if (((ptr_table[j] & 0xFFFFF000)+(va & 0x00000FFF))!= allPAs[i])
f01186f7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01186fd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118700:	c1 e2 02             	shl    $0x2,%edx
f0118703:	01 d0                	add    %edx,%eax
f0118705:	8b 00                	mov    (%eax),%eax
f0118707:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011870c:	89 c2                	mov    %eax,%edx
f011870e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118711:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118716:	01 c2                	add    %eax,%edx
f0118718:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011871b:	8b 84 85 38 ca ff ff 	mov    -0x35c8(%ebp,%eax,4),%eax
f0118722:	39 c2                	cmp    %eax,%edx
f0118724:	74 1d                	je     f0118743 <test_kheap_phys_addr+0x6f9>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f0118726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011872a:	74 17                	je     f0118743 <test_kheap_phys_addr+0x6f9>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011872c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118733:	83 ec 0c             	sub    $0xc,%esp
f0118736:	68 96 a0 12 f0       	push   $0xf012a096
f011873b:	e8 5b 87 fe ff       	call   f0100e9b <cprintf>
f0118740:	83 c4 10             	add    $0x10,%esp
				}
				va+=PAGE_SIZE+offset;
f0118743:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0118746:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118749:	01 d0                	add    %edx,%eax
f011874b:	05 00 10 00 00       	add    $0x1000,%eax
f0118750:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f0118753:	ff 45 e4             	incl   -0x1c(%ebp)
f0118756:	ff 45 f4             	incl   -0xc(%ebp)
f0118759:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011875c:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f011875f:	7d 11                	jge    f0118772 <test_kheap_phys_addr+0x728>
f0118761:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f0118768:	7f 08                	jg     f0118772 <test_kheap_phys_addr+0x728>
f011876a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011876d:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f0118770:	72 85                	jb     f01186f7 <test_kheap_phys_addr+0x6ad>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f0118772:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118775:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f0118778:	0f 82 26 ff ff ff    	jb     f01186a4 <test_kheap_phys_addr+0x65a>
				}
				va+=PAGE_SIZE+offset;
			}
		}
	}
	if (correct)	eval+=30 ;
f011877e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118782:	74 04                	je     f0118788 <test_kheap_phys_addr+0x73e>
f0118784:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f0118788:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011878f:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
f0118796:	e9 b0 00 00 00       	jmp    f011884b <test_kheap_phys_addr+0x801>
		{
			va = (uint32)ptr_allocations[i];
f011879b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011879e:	8b 84 85 74 fe ff ff 	mov    -0x18c(%ebp,%eax,4),%eax
f01187a5:	89 45 90             	mov    %eax,-0x70(%ebp)
			pa = kheap_physical_address(va);
f01187a8:	83 ec 0c             	sub    $0xc,%esp
f01187ab:	ff 75 90             	pushl  -0x70(%ebp)
f01187ae:	e8 e9 00 ff ff       	call   f010889c <kheap_physical_address>
f01187b3:	83 c4 10             	add    $0x10,%esp
f01187b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01187b9:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01187be:	83 ec 04             	sub    $0x4,%esp
f01187c1:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01187c7:	52                   	push   %edx
f01187c8:	ff 75 90             	pushl  -0x70(%ebp)
f01187cb:	50                   	push   %eax
f01187cc:	e8 da ed fe ff       	call   f01075ab <get_page_table>
f01187d1:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01187d4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01187da:	85 c0                	test   %eax,%eax
f01187dc:	75 1e                	jne    f01187fc <test_kheap_phys_addr+0x7b2>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f01187de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01187e5:	83 ec 04             	sub    $0x4,%esp
f01187e8:	68 24 a0 12 f0       	push   $0xf012a024
f01187ed:	68 4c 05 00 00       	push   $0x54c
f01187f2:	68 7e a0 12 f0       	push   $0xf012a07e
f01187f7:	e8 1e 7a fe ff       	call   f010021a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f01187fc:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118802:	8b 55 90             	mov    -0x70(%ebp),%edx
f0118805:	c1 ea 0c             	shr    $0xc,%edx
f0118808:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011880e:	c1 e2 02             	shl    $0x2,%edx
f0118811:	01 d0                	add    %edx,%eax
f0118813:	8b 00                	mov    (%eax),%eax
f0118815:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011881a:	89 c2                	mov    %eax,%edx
f011881c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011881f:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118824:	01 d0                	add    %edx,%eax
f0118826:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0118829:	74 1d                	je     f0118848 <test_kheap_phys_addr+0x7fe>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011882b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011882f:	74 17                	je     f0118848 <test_kheap_phys_addr+0x7fe>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f0118831:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118838:	83 ec 0c             	sub    $0xc,%esp
f011883b:	68 96 a0 12 f0       	push   $0xf012a096
f0118840:	e8 56 86 fe ff       	call   f0100e9b <cprintf>
f0118845:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f0118848:	ff 45 e0             	incl   -0x20(%ebp)
f011884b:	83 7d e0 04          	cmpl   $0x4,-0x20(%ebp)
f011884f:	0f 8e 46 ff ff ff    	jle    f011879b <test_kheap_phys_addr+0x751>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=10 ;
f0118855:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118859:	74 04                	je     f011885f <test_kheap_phys_addr+0x815>
f011885b:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011885f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0118866:	e8 48 4a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011886b:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011886e:	e8 d6 be fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118873:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f0118876:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011887c:	83 ec 0c             	sub    $0xc,%esp
f011887f:	50                   	push   %eax
f0118880:	e8 b4 fe fe ff       	call   f0108739 <kfree>
f0118885:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118888:	e8 bc be fe ff       	call   f0104749 <pf_calculate_free_frames>
f011888d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0118890:	74 17                	je     f01188a9 <test_kheap_phys_addr+0x85f>
f0118892:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118899:	83 ec 0c             	sub    $0xc,%esp
f011889c:	68 cc 99 12 f0       	push   $0xf01299cc
f01188a1:	e8 f5 85 fe ff       	call   f0100e9b <cprintf>
f01188a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01188a9:	e8 05 4a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01188ae:	89 c2                	mov    %eax,%edx
f01188b0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01188b3:	29 c2                	sub    %eax,%edx
f01188b5:	89 d0                	mov    %edx,%eax
f01188b7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01188bc:	77 17                	ja     f01188d5 <test_kheap_phys_addr+0x88b>
f01188be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01188c5:	83 ec 0c             	sub    $0xc,%esp
f01188c8:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01188cd:	e8 c9 85 fe ff       	call   f0100e9b <cprintf>
f01188d2:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01188d5:	e8 d9 49 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01188da:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188dd:	e8 67 be fe ff       	call   f0104749 <pf_calculate_free_frames>
f01188e2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f01188e5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01188eb:	83 ec 0c             	sub    $0xc,%esp
f01188ee:	50                   	push   %eax
f01188ef:	e8 45 fe fe ff       	call   f0108739 <kfree>
f01188f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01188f7:	e8 4d be fe ff       	call   f0104749 <pf_calculate_free_frames>
f01188fc:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01188ff:	74 17                	je     f0118918 <test_kheap_phys_addr+0x8ce>
f0118901:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118908:	83 ec 0c             	sub    $0xc,%esp
f011890b:	68 cc 99 12 f0       	push   $0xf01299cc
f0118910:	e8 86 85 fe ff       	call   f0100e9b <cprintf>
f0118915:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0118918:	e8 96 49 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011891d:	89 c2                	mov    %eax,%edx
f011891f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118922:	29 c2                	sub    %eax,%edx
f0118924:	89 d0                	mov    %edx,%eax
f0118926:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011892b:	77 17                	ja     f0118944 <test_kheap_phys_addr+0x8fa>
f011892d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118934:	83 ec 0c             	sub    $0xc,%esp
f0118937:	68 d0 9d 12 f0       	push   $0xf0129dd0
f011893c:	e8 5a 85 fe ff       	call   f0100e9b <cprintf>
f0118941:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118944:	e8 6a 49 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118949:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011894c:	e8 f8 bd fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118951:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f0118954:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011895a:	83 ec 0c             	sub    $0xc,%esp
f011895d:	50                   	push   %eax
f011895e:	e8 d6 fd fe ff       	call   f0108739 <kfree>
f0118963:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118966:	e8 de bd fe ff       	call   f0104749 <pf_calculate_free_frames>
f011896b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011896e:	74 17                	je     f0118987 <test_kheap_phys_addr+0x93d>
f0118970:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118977:	83 ec 0c             	sub    $0xc,%esp
f011897a:	68 cc 99 12 f0       	push   $0xf01299cc
f011897f:	e8 17 85 fe ff       	call   f0100e9b <cprintf>
f0118984:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0118987:	e8 27 49 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011898c:	89 c2                	mov    %eax,%edx
f011898e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118991:	29 c2                	sub    %eax,%edx
f0118993:	89 d0                	mov    %edx,%eax
f0118995:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011899a:	77 17                	ja     f01189b3 <test_kheap_phys_addr+0x969>
f011899c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01189a3:	83 ec 0c             	sub    $0xc,%esp
f01189a6:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01189ab:	e8 eb 84 fe ff       	call   f0100e9b <cprintf>
f01189b0:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f01189b3:	c7 45 80 00 b0 d0 f8 	movl   $0xf8d0b000,-0x80(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f01189ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f01189c1:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f01189c6:	05 00 10 00 00       	add    $0x1000,%eax
f01189cb:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f01189d1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01189d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01189da:	eb 25                	jmp    f0118a01 <test_kheap_phys_addr+0x9b7>
		{
			allPAs[i++] = kheap_physical_address(va);
f01189dc:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f01189df:	8d 43 01             	lea    0x1(%ebx),%eax
f01189e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01189e5:	83 ec 0c             	sub    $0xc,%esp
f01189e8:	ff 75 dc             	pushl  -0x24(%ebp)
f01189eb:	e8 ac fe fe ff       	call   f010889c <kheap_physical_address>
f01189f0:	83 c4 10             	add    $0x10,%esp
f01189f3:	89 84 9d 38 ca ff ff 	mov    %eax,-0x35c8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 startVA = da_limit + PAGE_SIZE;

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f01189fa:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f0118a01:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a04:	3b 45 80             	cmp    -0x80(%ebp),%eax
f0118a07:	72 d3                	jb     f01189dc <test_kheap_phys_addr+0x992>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0118a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118a0c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		i = 0;
f0118a12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f0118a19:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118a1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118a22:	e9 f1 00 00 00       	jmp    f0118b18 <test_kheap_phys_addr+0xace>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0118a27:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0118a2c:	83 ec 04             	sub    $0x4,%esp
f0118a2f:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0118a35:	52                   	push   %edx
f0118a36:	ff 75 dc             	pushl  -0x24(%ebp)
f0118a39:	50                   	push   %eax
f0118a3a:	e8 6c eb fe ff       	call   f01075ab <get_page_table>
f0118a3f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0118a42:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118a48:	85 c0                	test   %eax,%eax
f0118a4a:	75 24                	jne    f0118a70 <test_kheap_phys_addr+0xa26>
				if (correct)
f0118a4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118a50:	74 1e                	je     f0118a70 <test_kheap_phys_addr+0xa26>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f0118a52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118a59:	83 ec 04             	sub    $0x4,%esp
f0118a5c:	68 24 a0 12 f0       	push   $0xf012a024
f0118a61:	68 86 05 00 00       	push   $0x586
f0118a66:	68 7e a0 12 f0       	push   $0xf012a07e
f0118a6b:	e8 aa 77 fe ff       	call   f010021a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f0118a70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a73:	c1 e8 0c             	shr    $0xc,%eax
f0118a76:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118a7b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0118a7e:	eb 78                	jmp    f0118af8 <test_kheap_phys_addr+0xaae>
			{
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : va & 0x00000FFF)) != allPAs[i])
f0118a80:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118a86:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118a89:	c1 e2 02             	shl    $0x2,%edx
f0118a8c:	01 d0                	add    %edx,%eax
f0118a8e:	8b 00                	mov    (%eax),%eax
f0118a90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118a95:	89 c1                	mov    %eax,%ecx
f0118a97:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118a9d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118aa0:	c1 e2 02             	shl    $0x2,%edx
f0118aa3:	01 d0                	add    %edx,%eax
f0118aa5:	8b 00                	mov    (%eax),%eax
f0118aa7:	83 e0 01             	and    $0x1,%eax
f0118aaa:	85 c0                	test   %eax,%eax
f0118aac:	74 0a                	je     f0118ab8 <test_kheap_phys_addr+0xa6e>
f0118aae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ab1:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118ab6:	eb 05                	jmp    f0118abd <test_kheap_phys_addr+0xa73>
f0118ab8:	b8 00 00 00 00       	mov    $0x0,%eax
f0118abd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0118ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118ac3:	8b 84 85 38 ca ff ff 	mov    -0x35c8(%ebp,%eax,4),%eax
f0118aca:	39 c2                	cmp    %eax,%edx
f0118acc:	74 1d                	je     f0118aeb <test_kheap_phys_addr+0xaa1>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f0118ace:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118ad2:	74 17                	je     f0118aeb <test_kheap_phys_addr+0xaa1>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f0118ad4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118adb:	83 ec 0c             	sub    $0xc,%esp
f0118ade:	68 96 a0 12 f0       	push   $0xf012a096
f0118ae3:	e8 b3 83 fe ff       	call   f0100e9b <cprintf>
f0118ae8:	83 c4 10             	add    $0x10,%esp
				}
				va += PAGE_SIZE;
f0118aeb:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f0118af2:	ff 45 d8             	incl   -0x28(%ebp)
f0118af5:	ff 45 f4             	incl   -0xc(%ebp)
f0118af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118afb:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0118b01:	7d 15                	jge    f0118b18 <test_kheap_phys_addr+0xace>
f0118b03:	81 7d d8 ff 03 00 00 	cmpl   $0x3ff,-0x28(%ebp)
f0118b0a:	7f 0c                	jg     f0118b18 <test_kheap_phys_addr+0xace>
f0118b0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118b0f:	3b 45 80             	cmp    -0x80(%ebp),%eax
f0118b12:	0f 82 68 ff ff ff    	jb     f0118a80 <test_kheap_phys_addr+0xa36>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f0118b18:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118b1b:	3b 45 80             	cmp    -0x80(%ebp),%eax
f0118b1e:	0f 82 03 ff ff ff    	jb     f0118a27 <test_kheap_phys_addr+0x9dd>
				}
				va += PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f0118b24:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118b28:	74 04                	je     f0118b2e <test_kheap_phys_addr+0xae4>
f0118b2a:	83 45 f0 14          	addl   $0x14,-0x10(%ebp)

	correct = 1 ;
f0118b2e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f0118b35:	c7 45 d4 00 00 00 f6 	movl   $0xf6000000,-0x2c(%ebp)
f0118b3c:	e9 af 00 00 00       	jmp    f0118bf0 <test_kheap_phys_addr+0xba6>
		{
			pa = kheap_physical_address(va);
f0118b41:	83 ec 0c             	sub    $0xc,%esp
f0118b44:	ff 75 d4             	pushl  -0x2c(%ebp)
f0118b47:	e8 50 fd fe ff       	call   f010889c <kheap_physical_address>
f0118b4c:	83 c4 10             	add    $0x10,%esp
f0118b4f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0118b55:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0118b5a:	83 ec 04             	sub    $0x4,%esp
f0118b5d:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f0118b63:	52                   	push   %edx
f0118b64:	ff 75 d4             	pushl  -0x2c(%ebp)
f0118b67:	50                   	push   %eax
f0118b68:	e8 3e ea fe ff       	call   f01075ab <get_page_table>
f0118b6d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0118b70:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118b76:	85 c0                	test   %eax,%eax
f0118b78:	75 24                	jne    f0118b9e <test_kheap_phys_addr+0xb54>
				if (correct)
f0118b7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118b7e:	74 1e                	je     f0118b9e <test_kheap_phys_addr+0xb54>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f0118b80:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118b87:	83 ec 04             	sub    $0x4,%esp
f0118b8a:	68 24 a0 12 f0       	push   $0xf012a024
f0118b8f:	68 a1 05 00 00       	push   $0x5a1
f0118b94:	68 7e a0 12 f0       	push   $0xf012a07e
f0118b99:	e8 7c 76 fe ff       	call   f010021a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f0118b9e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118ba4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0118ba7:	c1 ea 0c             	shr    $0xc,%edx
f0118baa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118bb0:	c1 e2 02             	shl    $0x2,%edx
f0118bb3:	01 d0                	add    %edx,%eax
f0118bb5:	8b 00                	mov    (%eax),%eax
f0118bb7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118bbc:	89 c2                	mov    %eax,%edx
f0118bbe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118bc1:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118bc6:	01 d0                	add    %edx,%eax
f0118bc8:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0118bce:	74 1d                	je     f0118bed <test_kheap_phys_addr+0xba3>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f0118bd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118bd4:	74 17                	je     f0118bed <test_kheap_phys_addr+0xba3>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f0118bd6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118bdd:	83 ec 0c             	sub    $0xc,%esp
f0118be0:	68 96 a0 12 f0       	push   $0xf012a096
f0118be5:	e8 b1 82 fe ff       	call   f0100e9b <cprintf>
f0118bea:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f0118bed:	ff 45 d4             	incl   -0x2c(%ebp)
f0118bf0:	83 ec 0c             	sub    $0xc,%esp
f0118bf3:	6a 00                	push   $0x0
f0118bf5:	e8 43 f8 fe ff       	call   f010843d <sbrk>
f0118bfa:	83 c4 10             	add    $0x10,%esp
f0118bfd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0118c00:	0f 87 3b ff ff ff    	ja     f0118b41 <test_kheap_phys_addr+0xaf7>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=30 ;
f0118c06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118c0a:	74 04                	je     f0118c10 <test_kheap_phys_addr+0xbc6>
f0118c0c:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f0118c10:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0118c17:	c7 85 70 ff ff ff 00 	movl   $0xf9005000,-0x90(%ebp)
f0118c1e:	50 00 f9 
		i = 0;
f0118c21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0118c28:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118c2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0118c31:	eb 0a                	jmp    f0118c3d <test_kheap_phys_addr+0xbf3>
		{
			i++;
f0118c33:	ff 45 f4             	incl   -0xc(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0118c36:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0118c3d:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0118c44:	76 ed                	jbe    f0118c33 <test_kheap_phys_addr+0xbe9>
		{
			i++;
		}
		int ii = i ;
f0118c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118c49:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		i = 0;
f0118c4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0118c56:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118c5c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0118c5f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0118c66:	e9 13 01 00 00       	jmp    f0118d7e <test_kheap_phys_addr+0xd34>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0118c6b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0118c6e:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0118c73:	83 ec 04             	sub    $0x4,%esp
f0118c76:	8d 8d 60 fe ff ff    	lea    -0x1a0(%ebp),%ecx
f0118c7c:	51                   	push   %ecx
f0118c7d:	52                   	push   %edx
f0118c7e:	50                   	push   %eax
f0118c7f:	e8 27 e9 fe ff       	call   f01075ab <get_page_table>
f0118c84:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0118c87:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118c8d:	85 c0                	test   %eax,%eax
f0118c8f:	75 24                	jne    f0118cb5 <test_kheap_phys_addr+0xc6b>
			{
				if (correct)
f0118c91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118c95:	74 1e                	je     f0118cb5 <test_kheap_phys_addr+0xc6b>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f0118c97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118c9e:	83 ec 04             	sub    $0x4,%esp
f0118ca1:	68 24 a0 12 f0       	push   $0xf012a024
f0118ca6:	68 c2 05 00 00       	push   $0x5c2
f0118cab:	68 7e a0 12 f0       	push   $0xf012a07e
f0118cb0:	e8 65 75 fe ff       	call   f010021a <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0118cb5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118cbc:	e9 9a 00 00 00       	jmp    f0118d5b <test_kheap_phys_addr+0xd11>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0118cc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118cc4:	c1 e0 0c             	shl    $0xc,%eax
f0118cc7:	89 c2                	mov    %eax,%edx
f0118cc9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118ccf:	01 d0                	add    %edx,%eax
f0118cd1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0118cd7:	83 ec 0c             	sub    $0xc,%esp
f0118cda:	ff b5 68 ff ff ff    	pushl  -0x98(%ebp)
f0118ce0:	e8 b7 fb fe ff       	call   f010889c <kheap_physical_address>
f0118ce5:	83 c4 10             	add    $0x10,%esp
f0118ce8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : page_va & 0x00000FFF)) != supposed_kheap_phys_add)
f0118cee:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118cf4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118cf7:	c1 e2 02             	shl    $0x2,%edx
f0118cfa:	01 d0                	add    %edx,%eax
f0118cfc:	8b 00                	mov    (%eax),%eax
f0118cfe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118d03:	89 c1                	mov    %eax,%ecx
f0118d05:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118d0b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118d0e:	c1 e2 02             	shl    $0x2,%edx
f0118d11:	01 d0                	add    %edx,%eax
f0118d13:	8b 00                	mov    (%eax),%eax
f0118d15:	83 e0 01             	and    $0x1,%eax
f0118d18:	85 c0                	test   %eax,%eax
f0118d1a:	74 0d                	je     f0118d29 <test_kheap_phys_addr+0xcdf>
f0118d1c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118d22:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118d27:	eb 05                	jmp    f0118d2e <test_kheap_phys_addr+0xce4>
f0118d29:	b8 00 00 00 00       	mov    $0x0,%eax
f0118d2e:	01 c8                	add    %ecx,%eax
f0118d30:	3b 85 64 ff ff ff    	cmp    -0x9c(%ebp),%eax
f0118d36:	74 1d                	je     f0118d55 <test_kheap_phys_addr+0xd0b>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f0118d38:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118d3c:	74 17                	je     f0118d55 <test_kheap_phys_addr+0xd0b>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f0118d3e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118d45:	83 ec 0c             	sub    $0xc,%esp
f0118d48:	68 96 a0 12 f0       	push   $0xf012a096
f0118d4d:	e8 49 81 fe ff       	call   f0100e9b <cprintf>
f0118d52:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
			{
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0118d55:	ff 45 cc             	incl   -0x34(%ebp)
f0118d58:	ff 45 f4             	incl   -0xc(%ebp)
f0118d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118d5e:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0118d64:	7d 0d                	jge    f0118d73 <test_kheap_phys_addr+0xd29>
f0118d66:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0118d6d:	0f 8e 4e ff ff ff    	jle    f0118cc1 <test_kheap_phys_addr+0xc77>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0118d73:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0118d7a:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0118d7e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0118d82:	0f 88 e3 fe ff ff    	js     f0118c6b <test_kheap_phys_addr+0xc21>
f0118d88:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0118d8c:	7f 0d                	jg     f0118d9b <test_kheap_phys_addr+0xd51>
f0118d8e:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0118d95:	0f 86 d0 fe ff ff    	jbe    f0118c6b <test_kheap_phys_addr+0xc21>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f0118d9b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118d9f:	74 04                	je     f0118da5 <test_kheap_phys_addr+0xd5b>
f0118da1:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	cprintf("\ntest kheap_physical_address completed. Eval = %d%\n", eval);
f0118da5:	83 ec 08             	sub    $0x8,%esp
f0118da8:	ff 75 f0             	pushl  -0x10(%ebp)
f0118dab:	68 b4 a0 12 f0       	push   $0xf012a0b4
f0118db0:	e8 e6 80 fe ff       	call   f0100e9b <cprintf>
f0118db5:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118db8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118dbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118dc0:	5b                   	pop    %ebx
f0118dc1:	5f                   	pop    %edi
f0118dc2:	5d                   	pop    %ebp
f0118dc3:	c3                   	ret    

f0118dc4 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0118dc4:	55                   	push   %ebp
f0118dc5:	89 e5                	mov    %esp,%ebp
f0118dc7:	57                   	push   %edi
f0118dc8:	56                   	push   %esi
f0118dc9:	53                   	push   %ebx
f0118dca:	81 ec 9c 01 00 00    	sub    $0x19c,%esp
f0118dd0:	89 e0                	mov    %esp,%eax
f0118dd2:	89 c6                	mov    %eax,%esi
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0118dd4:	83 ec 0c             	sub    $0xc,%esp
f0118dd7:	68 0c 99 12 f0       	push   $0xf012990c
f0118ddc:	e8 ba 80 fe ff       	call   f0100e9b <cprintf>
f0118de1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118de4:	83 ec 0c             	sub    $0xc,%esp
f0118de7:	68 3c 99 12 f0       	push   $0xf012993c
f0118dec:	e8 aa 80 fe ff       	call   f0100e9b <cprintf>
f0118df1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118df4:	83 ec 0c             	sub    $0xc,%esp
f0118df7:	68 0c 99 12 f0       	push   $0xf012990c
f0118dfc:	e8 9a 80 fe ff       	call   f0100e9b <cprintf>
f0118e01:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118e04:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
	char maxByte = 0x7F;
f0118e08:	c6 45 c6 7f          	movb   $0x7f,-0x3a(%ebp)
	short minShort = 1<<15 ;
f0118e0c:	66 c7 45 c4 00 80    	movw   $0x8000,-0x3c(%ebp)
	short maxShort = 0x7FFF;
f0118e12:	66 c7 45 c2 ff 7f    	movw   $0x7fff,-0x3e(%ebp)
	int minInt = 1<<31 ;
f0118e18:	c7 45 bc 00 00 00 80 	movl   $0x80000000,-0x44(%ebp)
	int maxInt = 0x7FFFFFFF;
f0118e1f:	c7 45 b8 ff ff ff 7f 	movl   $0x7fffffff,-0x48(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118e26:	e8 88 44 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118e2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0118e2e:	8d 95 0c ff ff ff    	lea    -0xf4(%ebp),%edx
f0118e34:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118e39:	b8 00 00 00 00       	mov    $0x0,%eax
f0118e3e:	89 d7                	mov    %edx,%edi
f0118e40:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0118e42:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0118e48:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118e4d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118e52:	89 d7                	mov    %edx,%edi
f0118e54:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f0118e56:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f0118e5d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0118e64:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0118e6a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118e6f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118e74:	89 d7                	mov    %edx,%edi
f0118e76:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118e78:	e8 36 44 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118e7d:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e80:	e8 c4 b8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118e85:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118e88:	83 ec 0c             	sub    $0xc,%esp
f0118e8b:	68 00 fc 1f 00       	push   $0x1ffc00
f0118e90:	e8 0c f7 fe ff       	call   f01085a1 <kmalloc>
f0118e95:	83 c4 10             	add    $0x10,%esp
f0118e98:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118e9e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118ea4:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0118ea9:	74 17                	je     f0118ec2 <test_kheap_virt_addr+0xfe>
f0118eab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118eb2:	83 ec 0c             	sub    $0xc,%esp
f0118eb5:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0118eba:	e8 dc 7f fe ff       	call   f0100e9b <cprintf>
f0118ebf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118ec2:	e8 82 b8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118ec7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0118eca:	74 17                	je     f0118ee3 <test_kheap_virt_addr+0x11f>
f0118ecc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118ed3:	83 ec 0c             	sub    $0xc,%esp
f0118ed6:	68 cc 99 12 f0       	push   $0xf01299cc
f0118edb:	e8 bb 7f fe ff       	call   f0100e9b <cprintf>
f0118ee0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118ee3:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118ee6:	e8 c8 43 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118eeb:	29 c3                	sub    %eax,%ebx
f0118eed:	89 d8                	mov    %ebx,%eax
f0118eef:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0118ef4:	77 17                	ja     f0118f0d <test_kheap_virt_addr+0x149>
f0118ef6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118efd:	83 ec 0c             	sub    $0xc,%esp
f0118f00:	68 38 9a 12 f0       	push   $0xf0129a38
f0118f05:	e8 91 7f fe ff       	call   f0100e9b <cprintf>
f0118f0a:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118f0d:	e8 a1 43 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118f12:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118f15:	e8 2f b8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118f1a:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118f1d:	83 ec 0c             	sub    $0xc,%esp
f0118f20:	68 00 fc 1f 00       	push   $0x1ffc00
f0118f25:	e8 77 f6 fe ff       	call   f01085a1 <kmalloc>
f0118f2a:	83 c4 10             	add    $0x10,%esp
f0118f2d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118f33:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118f39:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f0118f3e:	74 17                	je     f0118f57 <test_kheap_virt_addr+0x193>
f0118f40:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118f47:	83 ec 0c             	sub    $0xc,%esp
f0118f4a:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0118f4f:	e8 47 7f fe ff       	call   f0100e9b <cprintf>
f0118f54:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118f57:	e8 ed b7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118f5c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0118f5f:	74 17                	je     f0118f78 <test_kheap_virt_addr+0x1b4>
f0118f61:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118f68:	83 ec 0c             	sub    $0xc,%esp
f0118f6b:	68 cc 99 12 f0       	push   $0xf01299cc
f0118f70:	e8 26 7f fe ff       	call   f0100e9b <cprintf>
f0118f75:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118f78:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118f7b:	e8 33 43 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118f80:	29 c3                	sub    %eax,%ebx
f0118f82:	89 d8                	mov    %ebx,%eax
f0118f84:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0118f89:	77 17                	ja     f0118fa2 <test_kheap_virt_addr+0x1de>
f0118f8b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118f92:	83 ec 0c             	sub    $0xc,%esp
f0118f95:	68 38 9a 12 f0       	push   $0xf0129a38
f0118f9a:	e8 fc 7e fe ff       	call   f0100e9b <cprintf>
f0118f9f:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f0118fa2:	e8 0c 43 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0118fa7:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118faa:	e8 9a b7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0118faf:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f0118fb2:	83 ec 0c             	sub    $0xc,%esp
f0118fb5:	68 00 04 00 00       	push   $0x400
f0118fba:	e8 e2 f5 fe ff       	call   f01085a1 <kmalloc>
f0118fbf:	83 c4 10             	add    $0x10,%esp
f0118fc2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0118fc8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118fce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0118fd3:	76 28                	jbe    f0118ffd <test_kheap_virt_addr+0x239>
f0118fd5:	8b 9d 74 fe ff ff    	mov    -0x18c(%ebp),%ebx
f0118fdb:	83 ec 0c             	sub    $0xc,%esp
f0118fde:	6a 00                	push   $0x0
f0118fe0:	e8 58 f4 fe ff       	call   f010843d <sbrk>
f0118fe5:	83 c4 10             	add    $0x10,%esp
f0118fe8:	39 c3                	cmp    %eax,%ebx
f0118fea:	73 11                	jae    f0118ffd <test_kheap_virt_addr+0x239>
f0118fec:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118ff2:	89 c2                	mov    %eax,%edx
f0118ff4:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0118ff9:	39 c2                	cmp    %eax,%edx
f0118ffb:	72 17                	jb     f0119014 <test_kheap_virt_addr+0x250>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0118ffd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119004:	83 ec 0c             	sub    $0xc,%esp
f0119007:	68 cc 9a 12 f0       	push   $0xf0129acc
f011900c:	e8 8a 7e fe ff       	call   f0100e9b <cprintf>
f0119011:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119014:	e8 30 b7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119019:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011901c:	74 17                	je     f0119035 <test_kheap_virt_addr+0x271>
f011901e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119025:	83 ec 0c             	sub    $0xc,%esp
f0119028:	68 cc 99 12 f0       	push   $0xf01299cc
f011902d:	e8 69 7e fe ff       	call   f0100e9b <cprintf>
f0119032:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0119035:	e8 79 42 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011903a:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011903d:	e8 07 b7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119042:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f0119045:	83 ec 0c             	sub    $0xc,%esp
f0119048:	68 00 08 00 00       	push   $0x800
f011904d:	e8 4f f5 fe ff       	call   f01085a1 <kmalloc>
f0119052:	83 c4 10             	add    $0x10,%esp
f0119055:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011905b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119061:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0119066:	76 28                	jbe    f0119090 <test_kheap_virt_addr+0x2cc>
f0119068:	8b 9d 78 fe ff ff    	mov    -0x188(%ebp),%ebx
f011906e:	83 ec 0c             	sub    $0xc,%esp
f0119071:	6a 00                	push   $0x0
f0119073:	e8 c5 f3 fe ff       	call   f010843d <sbrk>
f0119078:	83 c4 10             	add    $0x10,%esp
f011907b:	39 c3                	cmp    %eax,%ebx
f011907d:	73 11                	jae    f0119090 <test_kheap_virt_addr+0x2cc>
f011907f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119085:	89 c2                	mov    %eax,%edx
f0119087:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011908c:	39 c2                	cmp    %eax,%edx
f011908e:	72 17                	jb     f01190a7 <test_kheap_virt_addr+0x2e3>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0119090:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119097:	83 ec 0c             	sub    $0xc,%esp
f011909a:	68 cc 9a 12 f0       	push   $0xf0129acc
f011909f:	e8 f7 7d fe ff       	call   f0100e9b <cprintf>
f01190a4:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01190a7:	e8 9d b6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01190ac:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01190af:	74 17                	je     f01190c8 <test_kheap_virt_addr+0x304>
f01190b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01190b8:	83 ec 0c             	sub    $0xc,%esp
f01190bb:	68 cc 99 12 f0       	push   $0xf01299cc
f01190c0:	e8 d6 7d fe ff       	call   f0100e9b <cprintf>
f01190c5:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f01190c8:	e8 e6 41 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01190cd:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01190d0:	e8 74 b6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01190d5:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f01190d8:	83 ec 0c             	sub    $0xc,%esp
f01190db:	68 00 06 00 00       	push   $0x600
f01190e0:	e8 bc f4 fe ff       	call   f01085a1 <kmalloc>
f01190e5:	83 c4 10             	add    $0x10,%esp
f01190e8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f01190ee:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01190f4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01190f9:	76 28                	jbe    f0119123 <test_kheap_virt_addr+0x35f>
f01190fb:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f0119101:	83 ec 0c             	sub    $0xc,%esp
f0119104:	6a 00                	push   $0x0
f0119106:	e8 32 f3 fe ff       	call   f010843d <sbrk>
f011910b:	83 c4 10             	add    $0x10,%esp
f011910e:	39 c3                	cmp    %eax,%ebx
f0119110:	73 11                	jae    f0119123 <test_kheap_virt_addr+0x35f>
f0119112:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119118:	89 c2                	mov    %eax,%edx
f011911a:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f011911f:	39 c2                	cmp    %eax,%edx
f0119121:	72 17                	jb     f011913a <test_kheap_virt_addr+0x376>
				{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0119123:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011912a:	83 ec 0c             	sub    $0xc,%esp
f011912d:	68 cc 9a 12 f0       	push   $0xf0129acc
f0119132:	e8 64 7d fe ff       	call   f0100e9b <cprintf>
f0119137:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011913a:	e8 0a b6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011913f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0119142:	74 17                	je     f011915b <test_kheap_virt_addr+0x397>
f0119144:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011914b:	83 ec 0c             	sub    $0xc,%esp
f011914e:	68 cc 99 12 f0       	push   $0xf01299cc
f0119153:	e8 43 7d fe ff       	call   f0100e9b <cprintf>
f0119158:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011915b:	e8 53 41 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119160:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119163:	e8 e1 b5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119168:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011916b:	83 ec 0c             	sub    $0xc,%esp
f011916e:	68 00 1c 00 00       	push   $0x1c00
f0119173:	e8 29 f4 fe ff       	call   f01085a1 <kmalloc>
f0119178:	83 c4 10             	add    $0x10,%esp
f011917b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0119181:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119187:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011918c:	74 17                	je     f01191a5 <test_kheap_virt_addr+0x3e1>
f011918e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119195:	83 ec 0c             	sub    $0xc,%esp
f0119198:	68 7c 9a 12 f0       	push   $0xf0129a7c
f011919d:	e8 f9 7c fe ff       	call   f0100e9b <cprintf>
f01191a2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01191a5:	e8 9f b5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01191aa:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01191ad:	74 17                	je     f01191c6 <test_kheap_virt_addr+0x402>
f01191af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01191b6:	83 ec 0c             	sub    $0xc,%esp
f01191b9:	68 cc 99 12 f0       	push   $0xf01299cc
f01191be:	e8 d8 7c fe ff       	call   f0100e9b <cprintf>
f01191c3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01191c6:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01191c9:	e8 e5 40 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01191ce:	29 c3                	sub    %eax,%ebx
f01191d0:	89 d8                	mov    %ebx,%eax
f01191d2:	83 f8 01             	cmp    $0x1,%eax
f01191d5:	77 17                	ja     f01191ee <test_kheap_virt_addr+0x42a>
f01191d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01191de:	83 ec 0c             	sub    $0xc,%esp
f01191e1:	68 38 9a 12 f0       	push   $0xf0129a38
f01191e6:	e8 b0 7c fe ff       	call   f0100e9b <cprintf>
f01191eb:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01191ee:	e8 c0 40 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01191f3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01191f6:	e8 4e b5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01191fb:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f01191fe:	83 ec 0c             	sub    $0xc,%esp
f0119201:	68 00 fc 2f 00       	push   $0x2ffc00
f0119206:	e8 96 f3 fe ff       	call   f01085a1 <kmalloc>
f011920b:	83 c4 10             	add    $0x10,%esp
f011920e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0119214:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011921a:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f011921f:	74 17                	je     f0119238 <test_kheap_virt_addr+0x474>
f0119221:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119228:	83 ec 0c             	sub    $0xc,%esp
f011922b:	68 7c 9a 12 f0       	push   $0xf0129a7c
f0119230:	e8 66 7c fe ff       	call   f0100e9b <cprintf>
f0119235:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119238:	e8 0c b5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011923d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0119240:	74 17                	je     f0119259 <test_kheap_virt_addr+0x495>
f0119242:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119249:	83 ec 0c             	sub    $0xc,%esp
f011924c:	68 cc 99 12 f0       	push   $0xf01299cc
f0119251:	e8 45 7c fe ff       	call   f0100e9b <cprintf>
f0119256:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0119259:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011925c:	e8 52 40 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119261:	29 c3                	sub    %eax,%ebx
f0119263:	89 d8                	mov    %ebx,%eax
f0119265:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011926a:	77 17                	ja     f0119283 <test_kheap_virt_addr+0x4bf>
f011926c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119273:	83 ec 0c             	sub    $0xc,%esp
f0119276:	68 38 9a 12 f0       	push   $0xf0129a38
f011927b:	e8 1b 7c fe ff       	call   f0100e9b <cprintf>
f0119280:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119283:	e8 2b 40 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119288:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011928b:	e8 b9 b4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119290:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f0119293:	83 ec 0c             	sub    $0xc,%esp
f0119296:	68 00 fc 5f 00       	push   $0x5ffc00
f011929b:	e8 01 f3 fe ff       	call   f01085a1 <kmalloc>
f01192a0:	83 c4 10             	add    $0x10,%esp
f01192a3:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f01192a9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01192af:	3d 00 70 70 f8       	cmp    $0xf8707000,%eax
f01192b4:	74 17                	je     f01192cd <test_kheap_virt_addr+0x509>
f01192b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01192bd:	83 ec 0c             	sub    $0xc,%esp
f01192c0:	68 7c 9a 12 f0       	push   $0xf0129a7c
f01192c5:	e8 d1 7b fe ff       	call   f0100e9b <cprintf>
f01192ca:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01192cd:	e8 77 b4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01192d2:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01192d5:	74 17                	je     f01192ee <test_kheap_virt_addr+0x52a>
f01192d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01192de:	83 ec 0c             	sub    $0xc,%esp
f01192e1:	68 cc 99 12 f0       	push   $0xf01299cc
f01192e6:	e8 b0 7b fe ff       	call   f0100e9b <cprintf>
f01192eb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01192ee:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01192f1:	e8 bd 3f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01192f6:	29 c3                	sub    %eax,%ebx
f01192f8:	89 d8                	mov    %ebx,%eax
f01192fa:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f01192ff:	77 17                	ja     f0119318 <test_kheap_virt_addr+0x554>
f0119301:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119308:	83 ec 0c             	sub    $0xc,%esp
f011930b:	68 38 9a 12 f0       	push   $0xf0129a38
f0119310:	e8 86 7b fe ff       	call   f0100e9b <cprintf>
f0119315:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0119318:	e8 96 3f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011931d:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119320:	e8 24 b4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119325:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f0119328:	83 ec 0c             	sub    $0xc,%esp
f011932b:	68 00 38 00 00       	push   $0x3800
f0119330:	e8 6c f2 fe ff       	call   f01085a1 <kmalloc>
f0119335:	83 c4 10             	add    $0x10,%esp
f0119338:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011933e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119344:	3d 00 70 d0 f8       	cmp    $0xf8d07000,%eax
f0119349:	74 17                	je     f0119362 <test_kheap_virt_addr+0x59e>
f011934b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119352:	83 ec 0c             	sub    $0xc,%esp
f0119355:	68 7c 9a 12 f0       	push   $0xf0129a7c
f011935a:	e8 3c 7b fe ff       	call   f0100e9b <cprintf>
f011935f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119362:	e8 e2 b3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119367:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011936a:	74 17                	je     f0119383 <test_kheap_virt_addr+0x5bf>
f011936c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119373:	83 ec 0c             	sub    $0xc,%esp
f0119376:	68 cc 99 12 f0       	push   $0xf01299cc
f011937b:	e8 1b 7b fe ff       	call   f0100e9b <cprintf>
f0119380:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0119383:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119386:	e8 28 3f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011938b:	29 c3                	sub    %eax,%ebx
f011938d:	89 d8                	mov    %ebx,%eax
f011938f:	83 f8 03             	cmp    $0x3,%eax
f0119392:	77 17                	ja     f01193ab <test_kheap_virt_addr+0x5e7>
f0119394:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011939b:	83 ec 0c             	sub    $0xc,%esp
f011939e:	68 38 9a 12 f0       	push   $0xf0129a38
f01193a3:	e8 f3 7a fe ff       	call   f0100e9b <cprintf>
f01193a8:	83 c4 10             	add    $0x10,%esp
	}

	uint32 allocatedSpace = (13*Mega + 24*kilo + (INITIAL_KHEAP_ALLOCATIONS));
f01193ab:	c7 45 a8 00 a0 d0 00 	movl   $0xd0a000,-0x58(%ebp)
	uint32 allPAs[allocatedSpace/PAGE_SIZE] ;
f01193b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193b5:	c1 e8 0c             	shr    $0xc,%eax
f01193b8:	89 c2                	mov    %eax,%edx
f01193ba:	4a                   	dec    %edx
f01193bb:	89 55 a4             	mov    %edx,-0x5c(%ebp)
f01193be:	c1 e0 02             	shl    $0x2,%eax
f01193c1:	8d 50 03             	lea    0x3(%eax),%edx
f01193c4:	b8 10 00 00 00       	mov    $0x10,%eax
f01193c9:	48                   	dec    %eax
f01193ca:	01 d0                	add    %edx,%eax
f01193cc:	bf 10 00 00 00       	mov    $0x10,%edi
f01193d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d6:	f7 f7                	div    %edi
f01193d8:	6b c0 10             	imul   $0x10,%eax,%eax
f01193db:	29 c4                	sub    %eax,%esp
f01193dd:	89 e0                	mov    %esp,%eax
f01193df:	83 c0 03             	add    $0x3,%eax
f01193e2:	c1 e8 02             	shr    $0x2,%eax
f01193e5:	c1 e0 02             	shl    $0x2,%eax
f01193e8:	89 45 a0             	mov    %eax,-0x60(%ebp)
	int numOfFrames = allocatedSpace/PAGE_SIZE ;
f01193eb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193ee:	c1 e8 0c             	shr    $0xc,%eax
f01193f1:	89 45 9c             	mov    %eax,-0x64(%ebp)

	//test kheap_virtual_address after kmalloc only [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f01193f4:	c7 45 98 00 b0 d0 f8 	movl   $0xf8d0b000,-0x68(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f01193fb:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f0119400:	05 00 10 00 00       	add    $0x1000,%eax
f0119405:	89 45 94             	mov    %eax,-0x6c(%ebp)
		int i = 0;
f0119408:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011940f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119412:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119415:	e9 2d 01 00 00       	jmp    f0119547 <test_kheap_virt_addr+0x783>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011941a:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011941f:	83 ec 04             	sub    $0x4,%esp
f0119422:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119428:	52                   	push   %edx
f0119429:	ff 75 dc             	pushl  -0x24(%ebp)
f011942c:	50                   	push   %eax
f011942d:	e8 79 e1 fe ff       	call   f01075ab <get_page_table>
f0119432:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0119435:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011943b:	85 c0                	test   %eax,%eax
f011943d:	75 1e                	jne    f011945d <test_kheap_virt_addr+0x699>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011943f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119446:	83 ec 04             	sub    $0x4,%esp
f0119449:	68 24 a0 12 f0       	push   $0xf012a024
f011944e:	68 5e 06 00 00       	push   $0x65e
f0119453:	68 7e a0 12 f0       	push   $0xf012a07e
f0119458:	e8 bd 6d fe ff       	call   f010021a <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011945d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119460:	c1 e8 0c             	shr    $0xc,%eax
f0119463:	25 ff 03 00 00       	and    $0x3ff,%eax
f0119468:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011946b:	e9 ba 00 00 00       	jmp    f011952a <test_kheap_virt_addr+0x766>
			{
				uint32 offset = j;
f0119470:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119473:	89 45 90             	mov    %eax,-0x70(%ebp)
				allPAs[i] = (ptr_table[j] & 0xFFFFF000) + offset;
f0119476:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011947c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011947f:	c1 e2 02             	shl    $0x2,%edx
f0119482:	01 d0                	add    %edx,%eax
f0119484:	8b 00                	mov    (%eax),%eax
f0119486:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011948b:	89 c2                	mov    %eax,%edx
f011948d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119490:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f0119493:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119496:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119499:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011949c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011949f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01194a2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01194a5:	83 ec 0c             	sub    $0xc,%esp
f01194a8:	50                   	push   %eax
f01194a9:	e8 84 f3 fe ff       	call   f0108832 <kheap_virtual_address>
f01194ae:	83 c4 10             	add    $0x10,%esp
f01194b1:	89 45 8c             	mov    %eax,-0x74(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va+offset))
f01194b4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01194b7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01194ba:	01 d0                	add    %edx,%eax
f01194bc:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01194bf:	74 5c                	je     f011951d <test_kheap_virt_addr+0x759>
				{
					if (correct)
f01194c1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01194c5:	74 56                	je     f011951d <test_kheap_virt_addr+0x759>
					{
						cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + offset /*+ j*PAGE_SIZE*/, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01194c7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01194ca:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01194cd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01194d0:	8b 95 68 fe ff ff    	mov    -0x198(%ebp),%edx
f01194d6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f01194d9:	c1 e1 02             	shl    $0x2,%ecx
f01194dc:	01 ca                	add    %ecx,%edx
f01194de:	8b 12                	mov    (%edx),%edx
f01194e0:	89 d1                	mov    %edx,%ecx
f01194e2:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01194e8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01194eb:	8b 55 90             	mov    -0x70(%ebp),%edx
f01194ee:	01 da                	add    %ebx,%edx
f01194f0:	83 ec 0c             	sub    $0xc,%esp
f01194f3:	50                   	push   %eax
f01194f4:	51                   	push   %ecx
f01194f5:	52                   	push   %edx
f01194f6:	ff 75 8c             	pushl  -0x74(%ebp)
f01194f9:	68 e8 a0 12 f0       	push   $0xf012a0e8
f01194fe:	e8 98 79 fe ff       	call   f0100e9b <cprintf>
f0119503:	83 c4 20             	add    $0x20,%esp
						correct = 0; cprintf("Wrong kheap_virtual_address\n");
f0119506:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011950d:	83 ec 0c             	sub    $0xc,%esp
f0119510:	68 2b a1 12 f0       	push   $0xf012a12b
f0119515:	e8 81 79 fe ff       	call   f0100e9b <cprintf>
f011951a:	83 c4 10             	add    $0x10,%esp
					}
				}
				va+=PAGE_SIZE;
f011951d:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f0119524:	ff 45 d4             	incl   -0x2c(%ebp)
f0119527:	ff 45 d8             	incl   -0x28(%ebp)
f011952a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011952d:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f0119530:	7d 15                	jge    f0119547 <test_kheap_virt_addr+0x783>
f0119532:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0119539:	7f 0c                	jg     f0119547 <test_kheap_virt_addr+0x783>
f011953b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011953e:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0119541:	0f 82 29 ff ff ff    	jb     f0119470 <test_kheap_virt_addr+0x6ac>
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		for (va = startVA; va < endVA; )
f0119547:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011954a:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011954d:	0f 82 c7 fe ff ff    	jb     f011941a <test_kheap_virt_addr+0x656>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f0119553:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119557:	74 04                	je     f011955d <test_kheap_virt_addr+0x799>
f0119559:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011955d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0119564:	e8 4a 3d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119569:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011956c:	e8 d8 b1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119571:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f0119574:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011957a:	83 ec 0c             	sub    $0xc,%esp
f011957d:	50                   	push   %eax
f011957e:	e8 b6 f1 fe ff       	call   f0108739 <kfree>
f0119583:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119586:	e8 be b1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011958b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011958e:	74 17                	je     f01195a7 <test_kheap_virt_addr+0x7e3>
f0119590:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119597:	83 ec 0c             	sub    $0xc,%esp
f011959a:	68 cc 99 12 f0       	push   $0xf01299cc
f011959f:	e8 f7 78 fe ff       	call   f0100e9b <cprintf>
f01195a4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f01195a7:	e8 07 3d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01195ac:	89 c2                	mov    %eax,%edx
f01195ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f01195b1:	29 c2                	sub    %eax,%edx
f01195b3:	89 d0                	mov    %edx,%eax
f01195b5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01195ba:	77 17                	ja     f01195d3 <test_kheap_virt_addr+0x80f>
f01195bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01195c3:	83 ec 0c             	sub    $0xc,%esp
f01195c6:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01195cb:	e8 cb 78 fe ff       	call   f0100e9b <cprintf>
f01195d0:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01195d3:	e8 db 3c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f01195d8:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01195db:	e8 69 b1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01195e0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f01195e3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01195e9:	83 ec 0c             	sub    $0xc,%esp
f01195ec:	50                   	push   %eax
f01195ed:	e8 47 f1 fe ff       	call   f0108739 <kfree>
f01195f2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01195f5:	e8 4f b1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01195fa:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01195fd:	74 17                	je     f0119616 <test_kheap_virt_addr+0x852>
f01195ff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119606:	83 ec 0c             	sub    $0xc,%esp
f0119609:	68 cc 99 12 f0       	push   $0xf01299cc
f011960e:	e8 88 78 fe ff       	call   f0100e9b <cprintf>
f0119613:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0119616:	e8 98 3c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011961b:	89 c2                	mov    %eax,%edx
f011961d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119620:	29 c2                	sub    %eax,%edx
f0119622:	89 d0                	mov    %edx,%eax
f0119624:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119629:	77 17                	ja     f0119642 <test_kheap_virt_addr+0x87e>
f011962b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119632:	83 ec 0c             	sub    $0xc,%esp
f0119635:	68 d0 9d 12 f0       	push   $0xf0129dd0
f011963a:	e8 5c 78 fe ff       	call   f0100e9b <cprintf>
f011963f:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119642:	e8 6c 3c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119647:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011964a:	e8 fa b0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011964f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f0119652:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119658:	83 ec 0c             	sub    $0xc,%esp
f011965b:	50                   	push   %eax
f011965c:	e8 d8 f0 fe ff       	call   f0108739 <kfree>
f0119661:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119664:	e8 e0 b0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119669:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011966c:	74 17                	je     f0119685 <test_kheap_virt_addr+0x8c1>
f011966e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119675:	83 ec 0c             	sub    $0xc,%esp
f0119678:	68 cc 99 12 f0       	push   $0xf01299cc
f011967d:	e8 19 78 fe ff       	call   f0100e9b <cprintf>
f0119682:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f0119685:	e8 29 3c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011968a:	89 c2                	mov    %eax,%edx
f011968c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011968f:	29 c2                	sub    %eax,%edx
f0119691:	89 d0                	mov    %edx,%eax
f0119693:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f0119698:	77 17                	ja     f01196b1 <test_kheap_virt_addr+0x8ed>
f011969a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01196a1:	83 ec 0c             	sub    $0xc,%esp
f01196a4:	68 d0 9d 12 f0       	push   $0xf0129dd0
f01196a9:	e8 ed 77 fe ff       	call   f0100e9b <cprintf>
f01196ae:	83 c4 10             	add    $0x10,%esp


	//test kheap_virtual_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f01196b1:	c7 45 80 00 b0 d0 f8 	movl   $0xf8d0b000,-0x80(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f01196b8:	a1 60 1c 17 f0       	mov    0xf0171c60,%eax
f01196bd:	05 00 10 00 00       	add    $0x1000,%eax
f01196c2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		int i = 0;
f01196c8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f01196cf:	c7 85 78 ff ff ff 04 	movl   $0x4,-0x88(%ebp)
f01196d6:	00 00 00 
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01196d9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01196df:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01196e2:	eb 44                	jmp    f0119728 <test_kheap_virt_addr+0x964>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01196e4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01196e7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01196ea:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01196ed:	83 ec 0c             	sub    $0xc,%esp
f01196f0:	50                   	push   %eax
f01196f1:	e8 3c f1 fe ff       	call   f0108832 <kheap_virtual_address>
f01196f6:	83 c4 10             	add    $0x10,%esp
f01196f9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			if (retrievedVA != 0)
f01196ff:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
f0119706:	74 1d                	je     f0119725 <test_kheap_virt_addr+0x961>
			{
				if (correct)
f0119708:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011970c:	74 17                	je     f0119725 <test_kheap_virt_addr+0x961>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011970e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119715:	83 ec 0c             	sub    $0xc,%esp
f0119718:	68 2b a1 12 f0       	push   $0xf012a12b
f011971d:	e8 79 77 fe ff       	call   f0100e9b <cprintf>
f0119722:	83 c4 10             	add    $0x10,%esp
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0119725:	ff 45 d0             	incl   -0x30(%ebp)
f0119728:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011972e:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0119734:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119737:	39 c2                	cmp    %eax,%edx
f0119739:	77 a9                	ja     f01196e4 <test_kheap_virt_addr+0x920>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011973b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119741:	05 00 04 00 00       	add    $0x400,%eax
f0119746:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119749:	eb 64                	jmp    f01197af <test_kheap_virt_addr+0x9eb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011974b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011974e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119751:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0119754:	83 ec 0c             	sub    $0xc,%esp
f0119757:	50                   	push   %eax
f0119758:	e8 d5 f0 fe ff       	call   f0108832 <kheap_virtual_address>
f011975d:	83 c4 10             	add    $0x10,%esp
f0119760:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f0119766:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119769:	c1 e0 0c             	shl    $0xc,%eax
f011976c:	89 c2                	mov    %eax,%edx
f011976e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119774:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f0119777:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011977a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011977d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0119780:	25 ff 0f 00 00       	and    $0xfff,%eax
f0119785:	01 c8                	add    %ecx,%eax
f0119787:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f011978d:	74 1d                	je     f01197ac <test_kheap_virt_addr+0x9e8>
			{
				if (correct)
f011978f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119793:	74 17                	je     f01197ac <test_kheap_virt_addr+0x9e8>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f0119795:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011979c:	83 ec 0c             	sub    $0xc,%esp
f011979f:	68 2b a1 12 f0       	push   $0xf012a12b
f01197a4:	e8 f2 76 fe ff       	call   f0100e9b <cprintf>
f01197a9:	83 c4 10             	add    $0x10,%esp
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f01197ac:	ff 45 d0             	incl   -0x30(%ebp)
f01197af:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01197b5:	8d 90 02 07 00 00    	lea    0x702(%eax),%edx
f01197bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01197be:	39 c2                	cmp    %eax,%edx
f01197c0:	77 89                	ja     f011974b <test_kheap_virt_addr+0x987>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f01197c2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01197c8:	05 02 07 00 00       	add    $0x702,%eax
f01197cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01197d0:	eb 44                	jmp    f0119816 <test_kheap_virt_addr+0xa52>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01197d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01197d5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01197d8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01197db:	83 ec 0c             	sub    $0xc,%esp
f01197de:	50                   	push   %eax
f01197df:	e8 4e f0 fe ff       	call   f0108832 <kheap_virtual_address>
f01197e4:	83 c4 10             	add    $0x10,%esp
f01197e7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
			if (retrievedVA != 0)
f01197ed:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%ebp)
f01197f4:	74 1d                	je     f0119813 <test_kheap_virt_addr+0xa4f>
			{
				if (correct)
f01197f6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01197fa:	74 17                	je     f0119813 <test_kheap_virt_addr+0xa4f>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f01197fc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119803:	83 ec 0c             	sub    $0xc,%esp
f0119806:	68 2b a1 12 f0       	push   $0xf012a12b
f011980b:	e8 8b 76 fe ff       	call   f0100e9b <cprintf>
f0119810:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f0119813:	ff 45 d0             	incl   -0x30(%ebp)
f0119816:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011981c:	8d 90 02 0d 00 00    	lea    0xd02(%eax),%edx
f0119822:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119825:	39 c2                	cmp    %eax,%edx
f0119827:	77 a9                	ja     f01197d2 <test_kheap_virt_addr+0xa0e>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f0119829:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011982f:	05 02 0d 00 00       	add    $0xd02,%eax
f0119834:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119837:	eb 64                	jmp    f011989d <test_kheap_virt_addr+0xad9>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0119839:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011983c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011983f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0119842:	83 ec 0c             	sub    $0xc,%esp
f0119845:	50                   	push   %eax
f0119846:	e8 e7 ef fe ff       	call   f0108832 <kheap_virtual_address>
f011984b:	83 c4 10             	add    $0x10,%esp
f011984e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f0119854:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119857:	c1 e0 0c             	shl    $0xc,%eax
f011985a:	89 c2                	mov    %eax,%edx
f011985c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119862:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f0119865:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119868:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011986b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011986e:	25 ff 0f 00 00       	and    $0xfff,%eax
f0119873:	01 c8                	add    %ecx,%eax
f0119875:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f011987b:	74 1d                	je     f011989a <test_kheap_virt_addr+0xad6>
			{
				if (correct)
f011987d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119881:	74 17                	je     f011989a <test_kheap_virt_addr+0xad6>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f0119883:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011988a:	83 ec 0c             	sub    $0xc,%esp
f011988d:	68 2b a1 12 f0       	push   $0xf012a12b
f0119892:	e8 04 76 fe ff       	call   f0100e9b <cprintf>
f0119897:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011989a:	ff 45 d0             	incl   -0x30(%ebp)
f011989d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01198a3:	8d 90 06 0d 00 00    	lea    0xd06(%eax),%edx
f01198a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01198ac:	39 c2                	cmp    %eax,%edx
f01198ae:	77 89                	ja     f0119839 <test_kheap_virt_addr+0xa75>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
	}
	if (correct)	eval+=20 ;
f01198b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01198b4:	74 04                	je     f01198ba <test_kheap_virt_addr+0xaf6>
f01198b6:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f01198ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f01198c1:	c7 45 cc 00 00 00 f6 	movl   $0xf6000000,-0x34(%ebp)
f01198c8:	e9 d1 00 00 00       	jmp    f011999e <test_kheap_virt_addr+0xbda>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01198cd:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01198d2:	83 ec 04             	sub    $0x4,%esp
f01198d5:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f01198db:	52                   	push   %edx
f01198dc:	ff 75 cc             	pushl  -0x34(%ebp)
f01198df:	50                   	push   %eax
f01198e0:	e8 c6 dc fe ff       	call   f01075ab <get_page_table>
f01198e5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01198e8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01198ee:	85 c0                	test   %eax,%eax
f01198f0:	75 1e                	jne    f0119910 <test_kheap_virt_addr+0xb4c>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f01198f2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01198f9:	83 ec 04             	sub    $0x4,%esp
f01198fc:	68 24 a0 12 f0       	push   $0xf012a024
f0119901:	68 cb 06 00 00       	push   $0x6cb
f0119906:	68 7e a0 12 f0       	push   $0xf012a07e
f011990b:	e8 0a 69 fe ff       	call   f010021a <_panic>
			pa = (ptr_table[PTX(va)] & 0xFFFFF000) + (va & 0xFFF);
f0119910:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119916:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119919:	c1 ea 0c             	shr    $0xc,%edx
f011991c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119922:	c1 e2 02             	shl    $0x2,%edx
f0119925:	01 d0                	add    %edx,%eax
f0119927:	8b 00                	mov    (%eax),%eax
f0119929:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011992e:	89 c2                	mov    %eax,%edx
f0119930:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119933:	25 ff 0f 00 00       	and    $0xfff,%eax
f0119938:	01 d0                	add    %edx,%eax
f011993a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
			uint32 retrievedVA = kheap_virtual_address(pa);
f0119940:	83 ec 0c             	sub    $0xc,%esp
f0119943:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f0119949:	e8 e4 ee fe ff       	call   f0108832 <kheap_virtual_address>
f011994e:	83 c4 10             	add    $0x10,%esp
f0119951:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			if (retrievedVA != va)
f0119957:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011995d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119960:	74 39                	je     f011999b <test_kheap_virt_addr+0xbd7>
			{
				if (correct)
f0119962:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119966:	74 33                	je     f011999b <test_kheap_virt_addr+0xbd7>
				{
					cprintf("\nPA = %x, retrievedVA = %x expectedVA = %x\n", pa, retrievedVA, va);
f0119968:	ff 75 cc             	pushl  -0x34(%ebp)
f011996b:	ff b5 60 ff ff ff    	pushl  -0xa0(%ebp)
f0119971:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f0119977:	68 48 a1 12 f0       	push   $0xf012a148
f011997c:	e8 1a 75 fe ff       	call   f0100e9b <cprintf>
f0119981:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f0119984:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011998b:	83 ec 0c             	sub    $0xc,%esp
f011998e:	68 2b a1 12 f0       	push   $0xf012a12b
f0119993:	e8 03 75 fe ff       	call   f0100e9b <cprintf>
f0119998:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011999b:	ff 45 cc             	incl   -0x34(%ebp)
f011999e:	83 ec 0c             	sub    $0xc,%esp
f01199a1:	6a 00                	push   $0x0
f01199a3:	e8 95 ea fe ff       	call   f010843d <sbrk>
f01199a8:	83 c4 10             	add    $0x10,%esp
f01199ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01199ae:	0f 87 19 ff ff ff    	ja     f01198cd <test_kheap_virt_addr+0xb09>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=40 ;
f01199b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01199b8:	74 04                	je     f01199be <test_kheap_virt_addr+0xbfa>
f01199ba:	83 45 e4 28          	addl   $0x28,-0x1c(%ebp)

	correct = 1 ;
f01199be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01199c5:	c7 45 c8 00 00 10 00 	movl   $0x100000,-0x38(%ebp)
f01199cc:	eb 5a                	jmp    f0119a28 <test_kheap_virt_addr+0xc64>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01199ce:	83 ec 0c             	sub    $0xc,%esp
f01199d1:	ff 75 c8             	pushl  -0x38(%ebp)
f01199d4:	e8 59 ee fe ff       	call   f0108832 <kheap_virtual_address>
f01199d9:	83 c4 10             	add    $0x10,%esp
f01199dc:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			if (retrievedVA != 0)
f01199e2:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
f01199e9:	74 36                	je     f0119a21 <test_kheap_virt_addr+0xc5d>
			{
				if (correct)
f01199eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01199ef:	74 30                	je     f0119a21 <test_kheap_virt_addr+0xc5d>
				{
					cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01199f1:	83 ec 04             	sub    $0x4,%esp
f01199f4:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01199fa:	ff 75 c8             	pushl  -0x38(%ebp)
f01199fd:	68 74 a1 12 f0       	push   $0xf012a174
f0119a02:	e8 94 74 fe ff       	call   f0100e9b <cprintf>
f0119a07:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f0119a0a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119a11:	83 ec 0c             	sub    $0xc,%esp
f0119a14:	68 2b a1 12 f0       	push   $0xf012a12b
f0119a19:	e8 7d 74 fe ff       	call   f0100e9b <cprintf>
f0119a1e:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0119a21:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0119a28:	b8 ec 67 45 00       	mov    $0x4567ec,%eax
f0119a2d:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0119a30:	72 9c                	jb     f01199ce <test_kheap_virt_addr+0xc0a>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=20 ;
f0119a32:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119a36:	74 04                	je     f0119a3c <test_kheap_virt_addr+0xc78>
f0119a38:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	cprintf("\ntest kheap_virtual_address completed. Eval = %d%\n", eval);
f0119a3c:	83 ec 08             	sub    $0x8,%esp
f0119a3f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0119a42:	68 90 a1 12 f0       	push   $0xf012a190
f0119a47:	e8 4f 74 fe ff       	call   f0100e9b <cprintf>
f0119a4c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119a4f:	b8 01 00 00 00       	mov    $0x1,%eax
f0119a54:	89 f4                	mov    %esi,%esp

}
f0119a56:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119a59:	5b                   	pop    %ebx
f0119a5a:	5e                   	pop    %esi
f0119a5b:	5f                   	pop    %edi
f0119a5c:	5d                   	pop    %ebp
f0119a5d:	c3                   	ret    

f0119a5e <test_kmalloc_nextfit>:




int test_kmalloc_nextfit()
{
f0119a5e:	55                   	push   %ebp
f0119a5f:	89 e5                	mov    %esp,%ebp
f0119a61:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f0119a67:	83 ec 04             	sub    $0x4,%esp
f0119a6a:	68 c4 a1 12 f0       	push   $0xf012a1c4
f0119a6f:	68 07 07 00 00       	push   $0x707
f0119a74:	68 7e a0 12 f0       	push   $0xf012a07e
f0119a79:	e8 9c 67 fe ff       	call   f010021a <_panic>

f0119a7e <test_kmalloc_bestfit1>:
	return 1;

}

int test_kmalloc_bestfit1()
{
f0119a7e:	55                   	push   %ebp
f0119a7f:	89 e5                	mov    %esp,%ebp
f0119a81:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f0119a84:	83 ec 04             	sub    $0x4,%esp
f0119a87:	68 c4 a1 12 f0       	push   $0xf012a1c4
f0119a8c:	68 ad 07 00 00       	push   $0x7ad
f0119a91:	68 7e a0 12 f0       	push   $0xf012a07e
f0119a96:	e8 7f 67 fe ff       	call   f010021a <_panic>

f0119a9b <test_kmalloc_bestfit2>:
	return 1;

}

int test_kmalloc_bestfit2()
{
f0119a9b:	55                   	push   %ebp
f0119a9c:	89 e5                	mov    %esp,%ebp
f0119a9e:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f0119aa1:	83 ec 04             	sub    $0x4,%esp
f0119aa4:	68 c4 a1 12 f0       	push   $0xf012a1c4
f0119aa9:	68 59 08 00 00       	push   $0x859
f0119aae:	68 7e a0 12 f0       	push   $0xf012a07e
f0119ab3:	e8 62 67 fe ff       	call   f010021a <_panic>

f0119ab8 <test_kmalloc_worstfit>:
	return 1;

}

int test_kmalloc_worstfit()
{
f0119ab8:	55                   	push   %ebp
f0119ab9:	89 e5                	mov    %esp,%ebp
f0119abb:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f0119ac1:	83 ec 04             	sub    $0x4,%esp
f0119ac4:	68 c4 a1 12 f0       	push   $0xf012a1c4
f0119ac9:	68 ff 08 00 00       	push   $0x8ff
f0119ace:	68 7e a0 12 f0       	push   $0xf012a07e
f0119ad3:	e8 42 67 fe ff       	call   f010021a <_panic>

f0119ad8 <test_kfree>:

	return 1;
}

int test_kfree()
{
f0119ad8:	55                   	push   %ebp
f0119ad9:	89 e5                	mov    %esp,%ebp
f0119adb:	81 ec 08 01 00 00    	sub    $0x108,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f0119ae1:	83 ec 04             	sub    $0x4,%esp
f0119ae4:	68 c4 a1 12 f0       	push   $0xf012a1c4
f0119ae9:	68 a5 09 00 00       	push   $0x9a5
f0119aee:	68 7e a0 12 f0       	push   $0xf012a07e
f0119af3:	e8 22 67 fe ff       	call   f010021a <_panic>

f0119af8 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0119af8:	55                   	push   %ebp
f0119af9:	89 e5                	mov    %esp,%ebp
f0119afb:	57                   	push   %edi
f0119afc:	56                   	push   %esi
f0119afd:	53                   	push   %ebx
f0119afe:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	if (firstCall)
f0119b04:	a0 64 1c 17 f0       	mov    0xf0171c64,%al
f0119b09:	84 c0                	test   %al,%al
f0119b0b:	74 56                	je     f0119b63 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0119b0d:	c6 05 64 1c 17 f0 00 	movb   $0x0,0xf0171c64
		initFreeFrames = sys_calculate_free_frames() ;
f0119b14:	e8 9a 37 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119b19:	a3 e8 67 45 f0       	mov    %eax,0xf04567e8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0119b1e:	e8 26 ac fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119b23:	a3 e4 67 45 f0       	mov    %eax,0xf04567e4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0119b28:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f0119b2e:	bb c9 a3 12 f0       	mov    $0xf012a3c9,%ebx
f0119b33:	ba 11 00 00 00       	mov    $0x11,%edx
f0119b38:	89 c7                	mov    %eax,%edi
f0119b3a:	89 de                	mov    %ebx,%esi
f0119b3c:	89 d1                	mov    %edx,%ecx
f0119b3e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0119b40:	8d 95 7d ff ff ff    	lea    -0x83(%ebp),%edx
f0119b46:	b9 53 00 00 00       	mov    $0x53,%ecx
f0119b4b:	b0 00                	mov    $0x0,%al
f0119b4d:	89 d7                	mov    %edx,%edi
f0119b4f:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0119b51:	83 ec 0c             	sub    $0xc,%esp
f0119b54:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f0119b5a:	50                   	push   %eax
f0119b5b:	e8 cd 80 fe ff       	call   f0101c2d <execute_command>
f0119b60:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0119b63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0119b6a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0119b71:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0119b76:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119b79:	eb 2b                	jmp    f0119ba6 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0119b7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b7e:	83 c0 5c             	add    $0x5c,%eax
f0119b81:	83 ec 08             	sub    $0x8,%esp
f0119b84:	68 09 a2 12 f0       	push   $0xf012a209
f0119b89:	50                   	push   %eax
f0119b8a:	e8 61 80 00 00       	call   f0121bf0 <strcmp>
f0119b8f:	83 c4 10             	add    $0x10,%esp
f0119b92:	85 c0                	test   %eax,%eax
f0119b94:	75 08                	jne    f0119b9e <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0119b96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0119b9c:	eb 2f                	jmp    f0119bcd <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0119b9e:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0119ba3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119ba6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119baa:	74 08                	je     f0119bb4 <test_three_creation_functions+0xbc>
f0119bac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119baf:	8b 40 44             	mov    0x44(%eax),%eax
f0119bb2:	eb 05                	jmp    f0119bb9 <test_three_creation_functions+0xc1>
f0119bb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0119bb9:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f0119bbe:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0119bc3:	85 c0                	test   %eax,%eax
f0119bc5:	75 b4                	jne    f0119b7b <test_three_creation_functions+0x83>
f0119bc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119bcb:	75 ae                	jne    f0119b7b <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0119bcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119bd0:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f0119bd6:	85 c0                	test   %eax,%eax
f0119bd8:	74 17                	je     f0119bf1 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0119bda:	83 ec 04             	sub    $0x4,%esp
f0119bdd:	68 14 a2 12 f0       	push   $0xf012a214
f0119be2:	68 81 0b 00 00       	push   $0xb81
f0119be7:	68 7e a0 12 f0       	push   $0xf012a07e
f0119bec:	e8 29 66 fe ff       	call   f010021a <_panic>

#if USE_KHEAP
		int pagesInWS = LIST_SIZE(&(e->page_WS_list));
f0119bf1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119bf4:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0119bfa:	89 45 dc             	mov    %eax,-0x24(%ebp)
#else
		int pagesInWS = env_page_ws_get_size(e);
#endif
		int curFreeFrames = sys_calculate_free_frames() ;
f0119bfd:	e8 b1 36 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119c02:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0119c05:	e8 3f ab fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119c0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c0d:	a1 e4 67 45 f0       	mov    0xf04567e4,%eax
f0119c12:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0119c15:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0119c18:	74 17                	je     f0119c31 <test_three_creation_functions+0x139>
f0119c1a:	83 ec 04             	sub    $0x4,%esp
f0119c1d:	68 64 a2 12 f0       	push   $0xf012a264
f0119c22:	68 8b 0b 00 00       	push   $0xb8b
f0119c27:	68 7e a0 12 f0       	push   $0xf012a07e
f0119c2c:	e8 e9 65 fe ff       	call   f010021a <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119c31:	a1 e8 67 45 f0       	mov    0xf04567e8,%eax
f0119c36:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0119c39:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0119c3c:	83 c2 15             	add    $0x15,%edx
f0119c3f:	39 d0                	cmp    %edx,%eax
f0119c41:	74 17                	je     f0119c5a <test_three_creation_functions+0x162>
f0119c43:	83 ec 04             	sub    $0x4,%esp
f0119c46:	68 cc a2 12 f0       	push   $0xf012a2cc
f0119c4b:	68 8d 0b 00 00       	push   $0xb8d
f0119c50:	68 7e a0 12 f0       	push   $0xf012a07e
f0119c55:	e8 c0 65 fe ff       	call   f010021a <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0119c5a:	83 ec 0c             	sub    $0xc,%esp
f0119c5d:	68 00 10 00 00       	push   $0x1000
f0119c62:	e8 3a e9 fe ff       	call   f01085a1 <kmalloc>
f0119c67:	83 c4 10             	add    $0x10,%esp
f0119c6a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0119c6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119c70:	3d 00 a0 01 f8       	cmp    $0xf801a000,%eax
f0119c75:	74 17                	je     f0119c8e <test_three_creation_functions+0x196>
f0119c77:	83 ec 04             	sub    $0x4,%esp
f0119c7a:	68 0c a3 12 f0       	push   $0xf012a30c
f0119c7f:	68 91 0b 00 00       	push   $0xb91
f0119c84:	68 7e a0 12 f0       	push   $0xf012a07e
f0119c89:	e8 8c 65 fe ff       	call   f010021a <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0119c8e:	83 ec 0c             	sub    $0xc,%esp
f0119c91:	68 7c a3 12 f0       	push   $0xf012a37c
f0119c96:	e8 00 72 fe ff       	call   f0100e9b <cprintf>
f0119c9b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119c9e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0119ca3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119ca6:	5b                   	pop    %ebx
f0119ca7:	5e                   	pop    %esi
f0119ca8:	5f                   	pop    %edi
f0119ca9:	5d                   	pop    %ebp
f0119caa:	c3                   	ret    

f0119cab <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0119cab:	55                   	push   %ebp
f0119cac:	89 e5                	mov    %esp,%ebp
f0119cae:	57                   	push   %edi
f0119caf:	53                   	push   %ebx
f0119cb0:	81 ec 30 01 00 00    	sub    $0x130,%esp
	char minByte = 1<<7;
f0119cb6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0119cba:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0119cbe:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0119cc4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0119cca:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0119cd1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0119cd8:	e8 d6 35 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119cdd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0119ce0:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
f0119ce6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119ceb:	b8 00 00 00 00       	mov    $0x0,%eax
f0119cf0:	89 d7                	mov    %edx,%edi
f0119cf2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0119cf4:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0119cfa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119cff:	b8 00 00 00 00       	mov    $0x0,%eax
f0119d04:	89 d7                	mov    %edx,%edi
f0119d06:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0119d08:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0119d0e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119d13:	b8 00 00 00 00       	mov    $0x0,%eax
f0119d18:	89 d7                	mov    %edx,%edi
f0119d1a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d1c:	e8 92 35 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119d21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d24:	e8 20 aa fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119d29:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0119d2c:	83 ec 0c             	sub    $0xc,%esp
f0119d2f:	68 00 fc 1f 00       	push   $0x1ffc00
f0119d34:	e8 68 e8 fe ff       	call   f01085a1 <kmalloc>
f0119d39:	83 c4 10             	add    $0x10,%esp
f0119d3c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f0119d42:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119d48:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f0119d4d:	74 17                	je     f0119d66 <test_kfreeall+0xbb>
f0119d4f:	83 ec 04             	sub    $0x4,%esp
f0119d52:	68 30 a4 12 f0       	push   $0xf012a430
f0119d57:	68 b8 0b 00 00       	push   $0xbb8
f0119d5c:	68 7e a0 12 f0       	push   $0xf012a07e
f0119d61:	e8 b4 64 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d66:	e8 de a9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119d6b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119d6e:	74 17                	je     f0119d87 <test_kfreeall+0xdc>
f0119d70:	83 ec 04             	sub    $0x4,%esp
f0119d73:	68 64 a2 12 f0       	push   $0xf012a264
f0119d78:	68 b9 0b 00 00       	push   $0xbb9
f0119d7d:	68 7e a0 12 f0       	push   $0xf012a07e
f0119d82:	e8 93 64 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119d87:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119d8a:	e8 24 35 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119d8f:	29 c3                	sub    %eax,%ebx
f0119d91:	89 d8                	mov    %ebx,%eax
f0119d93:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119d98:	74 17                	je     f0119db1 <test_kfreeall+0x106>
f0119d9a:	83 ec 04             	sub    $0x4,%esp
f0119d9d:	68 cc a2 12 f0       	push   $0xf012a2cc
f0119da2:	68 ba 0b 00 00       	push   $0xbba
f0119da7:	68 7e a0 12 f0       	push   $0xf012a07e
f0119dac:	e8 69 64 fe ff       	call   f010021a <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0119db1:	c7 85 70 ff ff ff ff 	movl   $0x1ffbff,-0x90(%ebp)
f0119db8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119dbb:	e8 f3 34 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119dc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119dc3:	e8 81 a9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119dc8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0119dcb:	83 ec 0c             	sub    $0xc,%esp
f0119dce:	68 00 fc 1f 00       	push   $0x1ffc00
f0119dd3:	e8 c9 e7 fe ff       	call   f01085a1 <kmalloc>
f0119dd8:	83 c4 10             	add    $0x10,%esp
f0119ddb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f0119de1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119de7:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f0119dec:	74 17                	je     f0119e05 <test_kfreeall+0x15a>
f0119dee:	83 ec 04             	sub    $0x4,%esp
f0119df1:	68 30 a4 12 f0       	push   $0xf012a430
f0119df6:	68 c1 0b 00 00       	push   $0xbc1
f0119dfb:	68 7e a0 12 f0       	push   $0xf012a07e
f0119e00:	e8 15 64 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e05:	e8 3f a9 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119e0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119e0d:	74 17                	je     f0119e26 <test_kfreeall+0x17b>
f0119e0f:	83 ec 04             	sub    $0x4,%esp
f0119e12:	68 64 a2 12 f0       	push   $0xf012a264
f0119e17:	68 c2 0b 00 00       	push   $0xbc2
f0119e1c:	68 7e a0 12 f0       	push   $0xf012a07e
f0119e21:	e8 f4 63 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119e26:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119e29:	e8 85 34 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119e2e:	29 c3                	sub    %eax,%ebx
f0119e30:	89 d8                	mov    %ebx,%eax
f0119e32:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119e37:	74 17                	je     f0119e50 <test_kfreeall+0x1a5>
f0119e39:	83 ec 04             	sub    $0x4,%esp
f0119e3c:	68 cc a2 12 f0       	push   $0xf012a2cc
f0119e41:	68 c3 0b 00 00       	push   $0xbc3
f0119e46:	68 7e a0 12 f0       	push   $0xf012a07e
f0119e4b:	e8 ca 63 fe ff       	call   f010021a <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0119e50:	c7 85 74 ff ff ff ff 	movl   $0x1ffbff,-0x8c(%ebp)
f0119e57:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119e5a:	e8 54 34 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119e5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e62:	e8 e2 a8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119e67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0119e6a:	83 ec 0c             	sub    $0xc,%esp
f0119e6d:	68 00 08 00 00       	push   $0x800
f0119e72:	e8 2a e7 fe ff       	call   f01085a1 <kmalloc>
f0119e77:	83 c4 10             	add    $0x10,%esp
f0119e7a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f0119e80:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119e86:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f0119e8b:	74 17                	je     f0119ea4 <test_kfreeall+0x1f9>
f0119e8d:	83 ec 04             	sub    $0x4,%esp
f0119e90:	68 30 a4 12 f0       	push   $0xf012a430
f0119e95:	68 ca 0b 00 00       	push   $0xbca
f0119e9a:	68 7e a0 12 f0       	push   $0xf012a07e
f0119e9f:	e8 76 63 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ea4:	e8 a0 a8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119ea9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119eac:	74 17                	je     f0119ec5 <test_kfreeall+0x21a>
f0119eae:	83 ec 04             	sub    $0x4,%esp
f0119eb1:	68 64 a2 12 f0       	push   $0xf012a264
f0119eb6:	68 cb 0b 00 00       	push   $0xbcb
f0119ebb:	68 7e a0 12 f0       	push   $0xf012a07e
f0119ec0:	e8 55 63 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119ec5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119ec8:	e8 e6 33 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119ecd:	29 c3                	sub    %eax,%ebx
f0119ecf:	89 d8                	mov    %ebx,%eax
f0119ed1:	83 f8 01             	cmp    $0x1,%eax
f0119ed4:	74 17                	je     f0119eed <test_kfreeall+0x242>
f0119ed6:	83 ec 04             	sub    $0x4,%esp
f0119ed9:	68 cc a2 12 f0       	push   $0xf012a2cc
f0119ede:	68 cc 0b 00 00       	push   $0xbcc
f0119ee3:	68 7e a0 12 f0       	push   $0xf012a07e
f0119ee8:	e8 2d 63 fe ff       	call   f010021a <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0119eed:	c7 85 78 ff ff ff ff 	movl   $0x7ff,-0x88(%ebp)
f0119ef4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0119ef7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119efd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0119f00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119f07:	eb 0e                	jmp    f0119f17 <test_kfreeall+0x26c>
		{
			ptr[i] = 2 ;
f0119f09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119f0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119f0f:	01 d0                	add    %edx,%eax
f0119f11:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0119f14:	ff 45 f4             	incl   -0xc(%ebp)
f0119f17:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119f1d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119f20:	7f e7                	jg     f0119f09 <test_kfreeall+0x25e>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119f22:	e8 8c 33 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119f27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f2a:	e8 1a a8 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119f2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0119f32:	83 ec 0c             	sub    $0xc,%esp
f0119f35:	68 00 08 00 00       	push   $0x800
f0119f3a:	e8 62 e6 fe ff       	call   f01085a1 <kmalloc>
f0119f3f:	83 c4 10             	add    $0x10,%esp
f0119f42:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f0119f48:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119f4e:	3d 00 60 40 f8       	cmp    $0xf8406000,%eax
f0119f53:	74 17                	je     f0119f6c <test_kfreeall+0x2c1>
f0119f55:	83 ec 04             	sub    $0x4,%esp
f0119f58:	68 30 a4 12 f0       	push   $0xf012a430
f0119f5d:	68 d8 0b 00 00       	push   $0xbd8
f0119f62:	68 7e a0 12 f0       	push   $0xf012a07e
f0119f67:	e8 ae 62 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f6c:	e8 d8 a7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119f71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119f74:	74 17                	je     f0119f8d <test_kfreeall+0x2e2>
f0119f76:	83 ec 04             	sub    $0x4,%esp
f0119f79:	68 64 a2 12 f0       	push   $0xf012a264
f0119f7e:	68 d9 0b 00 00       	push   $0xbd9
f0119f83:	68 7e a0 12 f0       	push   $0xf012a07e
f0119f88:	e8 8d 62 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119f8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119f90:	e8 1e 33 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119f95:	29 c3                	sub    %eax,%ebx
f0119f97:	89 d8                	mov    %ebx,%eax
f0119f99:	83 f8 01             	cmp    $0x1,%eax
f0119f9c:	74 17                	je     f0119fb5 <test_kfreeall+0x30a>
f0119f9e:	83 ec 04             	sub    $0x4,%esp
f0119fa1:	68 cc a2 12 f0       	push   $0xf012a2cc
f0119fa6:	68 da 0b 00 00       	push   $0xbda
f0119fab:	68 7e a0 12 f0       	push   $0xf012a07e
f0119fb0:	e8 65 62 fe ff       	call   f010021a <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0119fb5:	c7 85 7c ff ff ff ff 	movl   $0x7ff,-0x84(%ebp)
f0119fbc:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0119fbf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119fc5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0119fc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119fcf:	eb 0e                	jmp    f0119fdf <test_kfreeall+0x334>
		{
			ptr[i] = 3 ;
f0119fd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fd4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119fd7:	01 d0                	add    %edx,%eax
f0119fd9:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0119fdc:	ff 45 f4             	incl   -0xc(%ebp)
f0119fdf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119fe5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119fe8:	7f e7                	jg     f0119fd1 <test_kfreeall+0x326>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0119fea:	e8 c4 32 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f0119fef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ff2:	e8 52 a7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0119ff7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0119ffa:	83 ec 0c             	sub    $0xc,%esp
f0119ffd:	68 00 1c 00 00       	push   $0x1c00
f011a002:	e8 9a e5 fe ff       	call   f01085a1 <kmalloc>
f011a007:	83 c4 10             	add    $0x10,%esp
f011a00a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a010:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a016:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f011a01b:	74 17                	je     f011a034 <test_kfreeall+0x389>
f011a01d:	83 ec 04             	sub    $0x4,%esp
f011a020:	68 30 a4 12 f0       	push   $0xf012a430
f011a025:	68 e6 0b 00 00       	push   $0xbe6
f011a02a:	68 7e a0 12 f0       	push   $0xf012a07e
f011a02f:	e8 e6 61 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a034:	e8 10 a7 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a039:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a03c:	74 17                	je     f011a055 <test_kfreeall+0x3aa>
f011a03e:	83 ec 04             	sub    $0x4,%esp
f011a041:	68 64 a2 12 f0       	push   $0xf012a264
f011a046:	68 e7 0b 00 00       	push   $0xbe7
f011a04b:	68 7e a0 12 f0       	push   $0xf012a07e
f011a050:	e8 c5 61 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a055:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a058:	e8 56 32 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a05d:	29 c3                	sub    %eax,%ebx
f011a05f:	89 d8                	mov    %ebx,%eax
f011a061:	83 f8 02             	cmp    $0x2,%eax
f011a064:	74 17                	je     f011a07d <test_kfreeall+0x3d2>
f011a066:	83 ec 04             	sub    $0x4,%esp
f011a069:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a06e:	68 e8 0b 00 00       	push   $0xbe8
f011a073:	68 7e a0 12 f0       	push   $0xf012a07e
f011a078:	e8 9d 61 fe ff       	call   f010021a <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011a07d:	c7 45 80 ff 1b 00 00 	movl   $0x1bff,-0x80(%ebp)
		ptr = (char*)ptr_allocations[4];
f011a084:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a08a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011a08d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a094:	eb 0e                	jmp    f011a0a4 <test_kfreeall+0x3f9>
		{
			ptr[i] = 4 ;
f011a096:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a099:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a09c:	01 d0                	add    %edx,%eax
f011a09e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011a0a1:	ff 45 f4             	incl   -0xc(%ebp)
f011a0a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a0a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a0aa:	7f ea                	jg     f011a096 <test_kfreeall+0x3eb>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a0ac:	e8 02 32 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a0b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0b4:	e8 90 a6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a0b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011a0bc:	83 ec 0c             	sub    $0xc,%esp
f011a0bf:	68 00 fc 2f 00       	push   $0x2ffc00
f011a0c4:	e8 d8 e4 fe ff       	call   f01085a1 <kmalloc>
f011a0c9:	83 c4 10             	add    $0x10,%esp
f011a0cc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a0d2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a0d8:	3d 00 90 40 f8       	cmp    $0xf8409000,%eax
f011a0dd:	74 17                	je     f011a0f6 <test_kfreeall+0x44b>
f011a0df:	83 ec 04             	sub    $0x4,%esp
f011a0e2:	68 30 a4 12 f0       	push   $0xf012a430
f011a0e7:	68 f4 0b 00 00       	push   $0xbf4
f011a0ec:	68 7e a0 12 f0       	push   $0xf012a07e
f011a0f1:	e8 24 61 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0f6:	e8 4e a6 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a0fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a0fe:	74 17                	je     f011a117 <test_kfreeall+0x46c>
f011a100:	83 ec 04             	sub    $0x4,%esp
f011a103:	68 64 a2 12 f0       	push   $0xf012a264
f011a108:	68 f5 0b 00 00       	push   $0xbf5
f011a10d:	68 7e a0 12 f0       	push   $0xf012a07e
f011a112:	e8 03 61 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a117:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a11a:	e8 94 31 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a11f:	29 c3                	sub    %eax,%ebx
f011a121:	89 d8                	mov    %ebx,%eax
f011a123:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a128:	74 17                	je     f011a141 <test_kfreeall+0x496>
f011a12a:	83 ec 04             	sub    $0x4,%esp
f011a12d:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a132:	68 f6 0b 00 00       	push   $0xbf6
f011a137:	68 7e a0 12 f0       	push   $0xf012a07e
f011a13c:	e8 d9 60 fe ff       	call   f010021a <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011a141:	c7 45 84 ff fb 2f 00 	movl   $0x2ffbff,-0x7c(%ebp)
		ptr = (char*)ptr_allocations[5];
f011a148:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a14e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011a151:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a158:	eb 0e                	jmp    f011a168 <test_kfreeall+0x4bd>
		{
			ptr[i] = 5 ;
f011a15a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a15d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a160:	01 d0                	add    %edx,%eax
f011a162:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011a165:	ff 45 f4             	incl   -0xc(%ebp)
f011a168:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a16b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a16e:	7f ea                	jg     f011a15a <test_kfreeall+0x4af>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011a170:	e8 3e 31 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a175:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a178:	e8 cc a5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a17d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011a180:	83 ec 0c             	sub    $0xc,%esp
f011a183:	68 00 fc 5f 00       	push   $0x5ffc00
f011a188:	e8 14 e4 fe ff       	call   f01085a1 <kmalloc>
f011a18d:	83 c4 10             	add    $0x10,%esp
f011a190:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a196:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a19c:	3d 00 90 70 f8       	cmp    $0xf8709000,%eax
f011a1a1:	74 17                	je     f011a1ba <test_kfreeall+0x50f>
f011a1a3:	83 ec 04             	sub    $0x4,%esp
f011a1a6:	68 30 a4 12 f0       	push   $0xf012a430
f011a1ab:	68 02 0c 00 00       	push   $0xc02
f011a1b0:	68 7e a0 12 f0       	push   $0xf012a07e
f011a1b5:	e8 60 60 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1ba:	e8 8a a5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a1bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a1c2:	74 17                	je     f011a1db <test_kfreeall+0x530>
f011a1c4:	83 ec 04             	sub    $0x4,%esp
f011a1c7:	68 64 a2 12 f0       	push   $0xf012a264
f011a1cc:	68 03 0c 00 00       	push   $0xc03
f011a1d1:	68 7e a0 12 f0       	push   $0xf012a07e
f011a1d6:	e8 3f 60 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a1db:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a1de:	e8 d0 30 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a1e3:	29 c3                	sub    %eax,%ebx
f011a1e5:	89 d8                	mov    %ebx,%eax
f011a1e7:	3d 00 06 00 00       	cmp    $0x600,%eax
f011a1ec:	74 17                	je     f011a205 <test_kfreeall+0x55a>
f011a1ee:	83 ec 04             	sub    $0x4,%esp
f011a1f1:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a1f6:	68 04 0c 00 00       	push   $0xc04
f011a1fb:	68 7e a0 12 f0       	push   $0xf012a07e
f011a200:	e8 15 60 fe ff       	call   f010021a <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011a205:	c7 45 88 ff fb 5f 00 	movl   $0x5ffbff,-0x78(%ebp)

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011a20c:	e8 a2 30 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a211:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a214:	e8 30 a5 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a219:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011a21c:	83 ec 0c             	sub    $0xc,%esp
f011a21f:	68 00 38 00 00       	push   $0x3800
f011a224:	e8 78 e3 fe ff       	call   f01085a1 <kmalloc>
f011a229:	83 c4 10             	add    $0x10,%esp
f011a22c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a232:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a238:	3d 00 90 d0 f8       	cmp    $0xf8d09000,%eax
f011a23d:	74 17                	je     f011a256 <test_kfreeall+0x5ab>
f011a23f:	83 ec 04             	sub    $0x4,%esp
f011a242:	68 30 a4 12 f0       	push   $0xf012a430
f011a247:	68 0b 0c 00 00       	push   $0xc0b
f011a24c:	68 7e a0 12 f0       	push   $0xf012a07e
f011a251:	e8 c4 5f fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a256:	e8 ee a4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a25b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a25e:	74 17                	je     f011a277 <test_kfreeall+0x5cc>
f011a260:	83 ec 04             	sub    $0x4,%esp
f011a263:	68 64 a2 12 f0       	push   $0xf012a264
f011a268:	68 0c 0c 00 00       	push   $0xc0c
f011a26d:	68 7e a0 12 f0       	push   $0xf012a07e
f011a272:	e8 a3 5f fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a277:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a27a:	e8 34 30 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a27f:	29 c3                	sub    %eax,%ebx
f011a281:	89 d8                	mov    %ebx,%eax
f011a283:	83 f8 04             	cmp    $0x4,%eax
f011a286:	74 17                	je     f011a29f <test_kfreeall+0x5f4>
f011a288:	83 ec 04             	sub    $0x4,%esp
f011a28b:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a290:	68 0d 0c 00 00       	push   $0xc0d
f011a295:	68 7e a0 12 f0       	push   $0xf012a07e
f011a29a:	e8 7b 5f fe ff       	call   f010021a <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011a29f:	c7 45 8c ff 37 00 00 	movl   $0x37ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[7];
f011a2a6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a2ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011a2af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a2b6:	eb 0e                	jmp    f011a2c6 <test_kfreeall+0x61b>
		{
			ptr[i] = 7 ;
f011a2b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a2bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a2be:	01 d0                	add    %edx,%eax
f011a2c0:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011a2c3:	ff 45 f4             	incl   -0xc(%ebp)
f011a2c6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a2c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a2cc:	7f ea                	jg     f011a2b8 <test_kfreeall+0x60d>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011a2ce:	e8 e0 2f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a2d3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011a2d6:	e8 6e a4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a2db:	89 45 c0             	mov    %eax,-0x40(%ebp)
		kfree(ptr_allocations[0]);
f011a2de:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2e4:	83 ec 0c             	sub    $0xc,%esp
f011a2e7:	50                   	push   %eax
f011a2e8:	e8 4c e4 fe ff       	call   f0108739 <kfree>
f011a2ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2f0:	e8 54 a4 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a2f5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011a2f8:	74 17                	je     f011a311 <test_kfreeall+0x666>
f011a2fa:	83 ec 04             	sub    $0x4,%esp
f011a2fd:	68 64 a2 12 f0       	push   $0xf012a264
f011a302:	68 1c 0c 00 00       	push   $0xc1c
f011a307:	68 7e a0 12 f0       	push   $0xf012a07e
f011a30c:	e8 09 5f fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011a311:	e8 9d 2f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a316:	89 c2                	mov    %eax,%edx
f011a318:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a31b:	29 c2                	sub    %eax,%edx
f011a31d:	89 d0                	mov    %edx,%eax
f011a31f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a324:	74 17                	je     f011a33d <test_kfreeall+0x692>
f011a326:	83 ec 04             	sub    $0x4,%esp
f011a329:	68 80 a4 12 f0       	push   $0xf012a480
f011a32e:	68 1d 0c 00 00       	push   $0xc1d
f011a333:	68 7e a0 12 f0       	push   $0xf012a07e
f011a338:	e8 dd 5e fe ff       	call   f010021a <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a33d:	e8 71 2f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a342:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a345:	e8 ff a3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a34a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		kfree(ptr_allocations[1]);
f011a34d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a353:	83 ec 0c             	sub    $0xc,%esp
f011a356:	50                   	push   %eax
f011a357:	e8 dd e3 fe ff       	call   f0108739 <kfree>
f011a35c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a35f:	e8 e5 a3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a364:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011a367:	74 17                	je     f011a380 <test_kfreeall+0x6d5>
f011a369:	83 ec 04             	sub    $0x4,%esp
f011a36c:	68 64 a2 12 f0       	push   $0xf012a264
f011a371:	68 23 0c 00 00       	push   $0xc23
f011a376:	68 7e a0 12 f0       	push   $0xf012a07e
f011a37b:	e8 9a 5e fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011a380:	e8 2e 2f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a385:	89 c2                	mov    %eax,%edx
f011a387:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a38a:	29 c2                	sub    %eax,%edx
f011a38c:	89 d0                	mov    %edx,%eax
f011a38e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a393:	74 17                	je     f011a3ac <test_kfreeall+0x701>
f011a395:	83 ec 04             	sub    $0x4,%esp
f011a398:	68 80 a4 12 f0       	push   $0xf012a480
f011a39d:	68 24 0c 00 00       	push   $0xc24
f011a3a2:	68 7e a0 12 f0       	push   $0xf012a07e
f011a3a7:	e8 6e 5e fe ff       	call   f010021a <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011a3ac:	e8 02 2f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a3b1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3b4:	e8 90 a3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a3b9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		kfree(ptr_allocations[6]);
f011a3bc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a3c2:	83 ec 0c             	sub    $0xc,%esp
f011a3c5:	50                   	push   %eax
f011a3c6:	e8 6e e3 fe ff       	call   f0108739 <kfree>
f011a3cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3ce:	e8 76 a3 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a3d3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011a3d6:	74 17                	je     f011a3ef <test_kfreeall+0x744>
f011a3d8:	83 ec 04             	sub    $0x4,%esp
f011a3db:	68 64 a2 12 f0       	push   $0xf012a264
f011a3e0:	68 2a 0c 00 00       	push   $0xc2a
f011a3e5:	68 7e a0 12 f0       	push   $0xf012a07e
f011a3ea:	e8 2b 5e fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011a3ef:	e8 bf 2e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a3f4:	89 c2                	mov    %eax,%edx
f011a3f6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a3f9:	29 c2                	sub    %eax,%edx
f011a3fb:	89 d0                	mov    %edx,%eax
f011a3fd:	3d 00 06 00 00       	cmp    $0x600,%eax
f011a402:	74 17                	je     f011a41b <test_kfreeall+0x770>
f011a404:	83 ec 04             	sub    $0x4,%esp
f011a407:	68 80 a4 12 f0       	push   $0xf012a480
f011a40c:	68 2b 0c 00 00       	push   $0xc2b
f011a411:	68 7e a0 12 f0       	push   $0xf012a07e
f011a416:	e8 ff 5d fe ff       	call   f010021a <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f011a41b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a421:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011a424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a42b:	eb 1e                	jmp    f011a44b <test_kfreeall+0x7a0>
		{
			sums[2] += ptr[i] ;
f011a42d:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011a433:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a436:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a439:	01 c8                	add    %ecx,%eax
f011a43b:	8a 00                	mov    (%eax),%al
f011a43d:	0f be c0             	movsbl %al,%eax
f011a440:	01 d0                	add    %edx,%eax
f011a442:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011a448:	ff 45 f4             	incl   -0xc(%ebp)
f011a44b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a451:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a454:	7f d7                	jg     f011a42d <test_kfreeall+0x782>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011a456:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011a45c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a462:	01 c0                	add    %eax,%eax
f011a464:	39 c2                	cmp    %eax,%edx
f011a466:	74 17                	je     f011a47f <test_kfreeall+0x7d4>
f011a468:	83 ec 04             	sub    $0x4,%esp
f011a46b:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011a470:	68 37 0c 00 00       	push   $0xc37
f011a475:	68 7e a0 12 f0       	push   $0xf012a07e
f011a47a:	e8 9b 5d fe ff       	call   f010021a <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f011a47f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a485:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011a488:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a48f:	eb 1e                	jmp    f011a4af <test_kfreeall+0x804>
		{
			sums[3] += ptr[i] ;
f011a491:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011a497:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a49a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a49d:	01 c8                	add    %ecx,%eax
f011a49f:	8a 00                	mov    (%eax),%al
f011a4a1:	0f be c0             	movsbl %al,%eax
f011a4a4:	01 d0                	add    %edx,%eax
f011a4a6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011a4ac:	ff 45 f4             	incl   -0xc(%ebp)
f011a4af:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a4b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a4b8:	7f d7                	jg     f011a491 <test_kfreeall+0x7e6>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011a4ba:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011a4c0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a4c6:	89 c1                	mov    %eax,%ecx
f011a4c8:	01 c9                	add    %ecx,%ecx
f011a4ca:	01 c8                	add    %ecx,%eax
f011a4cc:	39 c2                	cmp    %eax,%edx
f011a4ce:	74 17                	je     f011a4e7 <test_kfreeall+0x83c>
f011a4d0:	83 ec 04             	sub    $0x4,%esp
f011a4d3:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011a4d8:	68 3f 0c 00 00       	push   $0xc3f
f011a4dd:	68 7e a0 12 f0       	push   $0xf012a07e
f011a4e2:	e8 33 5d fe ff       	call   f010021a <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011a4e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a4ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011a4f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a4f7:	eb 1e                	jmp    f011a517 <test_kfreeall+0x86c>
		{
			sums[4] += ptr[i] ;
f011a4f9:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011a4ff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a502:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a505:	01 c8                	add    %ecx,%eax
f011a507:	8a 00                	mov    (%eax),%al
f011a509:	0f be c0             	movsbl %al,%eax
f011a50c:	01 d0                	add    %edx,%eax
f011a50e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011a514:	ff 45 f4             	incl   -0xc(%ebp)
f011a517:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a51a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a51d:	7f da                	jg     f011a4f9 <test_kfreeall+0x84e>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011a51f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a525:	8b 55 80             	mov    -0x80(%ebp),%edx
f011a528:	c1 e2 02             	shl    $0x2,%edx
f011a52b:	39 d0                	cmp    %edx,%eax
f011a52d:	74 17                	je     f011a546 <test_kfreeall+0x89b>
f011a52f:	83 ec 04             	sub    $0x4,%esp
f011a532:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011a537:	68 47 0c 00 00       	push   $0xc47
f011a53c:	68 7e a0 12 f0       	push   $0xf012a07e
f011a541:	e8 d4 5c fe ff       	call   f010021a <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011a546:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a54c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011a54f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a556:	eb 1e                	jmp    f011a576 <test_kfreeall+0x8cb>
		{
			sums[5] += ptr[i] ;
f011a558:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011a55e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a561:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a564:	01 c8                	add    %ecx,%eax
f011a566:	8a 00                	mov    (%eax),%al
f011a568:	0f be c0             	movsbl %al,%eax
f011a56b:	01 d0                	add    %edx,%eax
f011a56d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011a573:	ff 45 f4             	incl   -0xc(%ebp)
f011a576:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a579:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a57c:	7f da                	jg     f011a558 <test_kfreeall+0x8ad>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011a57e:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f011a584:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011a587:	89 d0                	mov    %edx,%eax
f011a589:	c1 e0 02             	shl    $0x2,%eax
f011a58c:	01 d0                	add    %edx,%eax
f011a58e:	39 c1                	cmp    %eax,%ecx
f011a590:	74 17                	je     f011a5a9 <test_kfreeall+0x8fe>
f011a592:	83 ec 04             	sub    $0x4,%esp
f011a595:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011a59a:	68 4f 0c 00 00       	push   $0xc4f
f011a59f:	68 7e a0 12 f0       	push   $0xf012a07e
f011a5a4:	e8 71 5c fe ff       	call   f010021a <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011a5a9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a5af:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011a5b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a5b9:	eb 1e                	jmp    f011a5d9 <test_kfreeall+0x92e>
		{
			sums[7] += ptr[i] ;
f011a5bb:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f011a5c1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a5c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a5c7:	01 c8                	add    %ecx,%eax
f011a5c9:	8a 00                	mov    (%eax),%al
f011a5cb:	0f be c0             	movsbl %al,%eax
f011a5ce:	01 d0                	add    %edx,%eax
f011a5d0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011a5d6:	ff 45 f4             	incl   -0xc(%ebp)
f011a5d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a5dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a5df:	7f da                	jg     f011a5bb <test_kfreeall+0x910>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011a5e1:	8b 8d 3c ff ff ff    	mov    -0xc4(%ebp),%ecx
f011a5e7:	8b 55 8c             	mov    -0x74(%ebp),%edx
f011a5ea:	89 d0                	mov    %edx,%eax
f011a5ec:	01 c0                	add    %eax,%eax
f011a5ee:	01 d0                	add    %edx,%eax
f011a5f0:	01 c0                	add    %eax,%eax
f011a5f2:	01 d0                	add    %edx,%eax
f011a5f4:	39 c1                	cmp    %eax,%ecx
f011a5f6:	74 17                	je     f011a60f <test_kfreeall+0x964>
f011a5f8:	83 ec 04             	sub    $0x4,%esp
f011a5fb:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011a600:	68 57 0c 00 00       	push   $0xc57
f011a605:	68 7e a0 12 f0       	push   $0xf012a07e
f011a60a:	e8 0b 5c fe ff       	call   f010021a <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011a60f:	e8 9f 2c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a614:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a617:	e8 2d a1 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a61c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011a61f:	83 ec 0c             	sub    $0xc,%esp
f011a622:	68 00 50 00 00       	push   $0x5000
f011a627:	e8 75 df fe ff       	call   f01085a1 <kmalloc>
f011a62c:	83 c4 10             	add    $0x10,%esp
f011a62f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a635:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a63b:	3d 00 d0 d0 f8       	cmp    $0xf8d0d000,%eax
f011a640:	74 17                	je     f011a659 <test_kfreeall+0x9ae>
f011a642:	83 ec 04             	sub    $0x4,%esp
f011a645:	68 30 a4 12 f0       	push   $0xf012a430
f011a64a:	68 60 0c 00 00       	push   $0xc60
f011a64f:	68 7e a0 12 f0       	push   $0xf012a07e
f011a654:	e8 c1 5b fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a659:	e8 eb a0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a65e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a661:	74 17                	je     f011a67a <test_kfreeall+0x9cf>
f011a663:	83 ec 04             	sub    $0x4,%esp
f011a666:	68 64 a2 12 f0       	push   $0xf012a264
f011a66b:	68 61 0c 00 00       	push   $0xc61
f011a670:	68 7e a0 12 f0       	push   $0xf012a07e
f011a675:	e8 a0 5b fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a67a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a67d:	e8 31 2c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a682:	29 c3                	sub    %eax,%ebx
f011a684:	89 d8                	mov    %ebx,%eax
f011a686:	83 f8 05             	cmp    $0x5,%eax
f011a689:	74 17                	je     f011a6a2 <test_kfreeall+0x9f7>
f011a68b:	83 ec 04             	sub    $0x4,%esp
f011a68e:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a693:	68 62 0c 00 00       	push   $0xc62
f011a698:	68 7e a0 12 f0       	push   $0xf012a07e
f011a69d:	e8 78 5b fe ff       	call   f010021a <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011a6a2:	c7 45 90 ff 4f 00 00 	movl   $0x4fff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[8];
f011a6a9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a6af:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011a6b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a6b9:	eb 0e                	jmp    f011a6c9 <test_kfreeall+0xa1e>
		{
			ptr[i] = 8 ;
f011a6bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a6be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a6c1:	01 d0                	add    %edx,%eax
f011a6c3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011a6c6:	ff 45 f4             	incl   -0xc(%ebp)
f011a6c9:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a6cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a6cf:	7f ea                	jg     f011a6bb <test_kfreeall+0xa10>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6d1:	e8 dd 2b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a6d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6d9:	e8 6b a0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a6de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011a6e1:	83 ec 0c             	sub    $0xc,%esp
f011a6e4:	68 00 00 10 00       	push   $0x100000
f011a6e9:	e8 b3 de fe ff       	call   f01085a1 <kmalloc>
f011a6ee:	83 c4 10             	add    $0x10,%esp
f011a6f1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011a6f7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a6fd:	3d 00 20 d1 f8       	cmp    $0xf8d12000,%eax
f011a702:	74 17                	je     f011a71b <test_kfreeall+0xa70>
f011a704:	83 ec 04             	sub    $0x4,%esp
f011a707:	68 30 a4 12 f0       	push   $0xf012a430
f011a70c:	68 6e 0c 00 00       	push   $0xc6e
f011a711:	68 7e a0 12 f0       	push   $0xf012a07e
f011a716:	e8 ff 5a fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a71b:	e8 29 a0 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a720:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a723:	74 17                	je     f011a73c <test_kfreeall+0xa91>
f011a725:	83 ec 04             	sub    $0x4,%esp
f011a728:	68 64 a2 12 f0       	push   $0xf012a264
f011a72d:	68 6f 0c 00 00       	push   $0xc6f
f011a732:	68 7e a0 12 f0       	push   $0xf012a07e
f011a737:	e8 de 5a fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a73c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a73f:	e8 6f 2b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a744:	29 c3                	sub    %eax,%ebx
f011a746:	89 d8                	mov    %ebx,%eax
f011a748:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a74d:	74 17                	je     f011a766 <test_kfreeall+0xabb>
f011a74f:	83 ec 04             	sub    $0x4,%esp
f011a752:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a757:	68 70 0c 00 00       	push   $0xc70
f011a75c:	68 7e a0 12 f0       	push   $0xf012a07e
f011a761:	e8 b4 5a fe ff       	call   f010021a <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011a766:	c7 45 94 ff ff 0f 00 	movl   $0xfffff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[9];
f011a76d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a773:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011a776:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a77d:	eb 0e                	jmp    f011a78d <test_kfreeall+0xae2>
		{
			ptr[i] = 9 ;
f011a77f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a782:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a785:	01 d0                	add    %edx,%eax
f011a787:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011a78a:	ff 45 f4             	incl   -0xc(%ebp)
f011a78d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a790:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a793:	7f ea                	jg     f011a77f <test_kfreeall+0xad4>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f011a795:	e8 19 2b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a79a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a79d:	e8 a7 9f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a7a2:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f011a7a5:	e8 4f e1 fe ff       	call   f01088f9 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7aa:	e8 9a 9f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a7af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a7b2:	74 17                	je     f011a7cb <test_kfreeall+0xb20>
f011a7b4:	83 ec 04             	sub    $0x4,%esp
f011a7b7:	68 64 a2 12 f0       	push   $0xf012a264
f011a7bc:	68 80 0c 00 00       	push   $0xc80
f011a7c1:	68 7e a0 12 f0       	push   $0xf012a07e
f011a7c6:	e8 4f 5a fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011a7cb:	e8 e3 2a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a7d0:	89 c2                	mov    %eax,%edx
f011a7d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a7d5:	29 c2                	sub    %eax,%edx
f011a7d7:	89 d0                	mov    %edx,%eax
f011a7d9:	3d 11 04 00 00       	cmp    $0x411,%eax
f011a7de:	74 17                	je     f011a7f7 <test_kfreeall+0xb4c>
f011a7e0:	83 ec 04             	sub    $0x4,%esp
f011a7e3:	68 80 a4 12 f0       	push   $0xf012a480
f011a7e8:	68 81 0c 00 00       	push   $0xc81
f011a7ed:	68 7e a0 12 f0       	push   $0xf012a07e
f011a7f2:	e8 23 5a fe ff       	call   f010021a <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011a7f7:	83 ec 0c             	sub    $0xc,%esp
f011a7fa:	6a 03                	push   $0x3
f011a7fc:	e8 55 2f ff ff       	call   f010d756 <sys_bypassPageFault>
f011a801:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f011a804:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a80b:	e9 82 00 00 00       	jmp    f011a892 <test_kfreeall+0xbe7>
		{
			ptr = (char *) ptr_allocations[i];
f011a810:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a813:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011a81a:	89 45 c8             	mov    %eax,-0x38(%ebp)
			ptr[0] = 10;
f011a81d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a820:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011a823:	e8 1c 2f ff ff       	call   f010d744 <sys_rcr2>
f011a828:	89 c2                	mov    %eax,%edx
f011a82a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a82d:	39 c2                	cmp    %eax,%edx
f011a82f:	74 17                	je     f011a848 <test_kfreeall+0xb9d>
f011a831:	83 ec 04             	sub    $0x4,%esp
f011a834:	68 ec a4 12 f0       	push   $0xf012a4ec
f011a839:	68 8f 0c 00 00       	push   $0xc8f
f011a83e:	68 7e a0 12 f0       	push   $0xf012a07e
f011a843:	e8 d2 59 fe ff       	call   f010021a <_panic>
			ptr[lastIndices[i]] = 10;
f011a848:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a84b:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011a852:	89 c2                	mov    %eax,%edx
f011a854:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a857:	01 d0                	add    %edx,%eax
f011a859:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011a85c:	e8 e3 2e ff ff       	call   f010d744 <sys_rcr2>
f011a861:	89 c2                	mov    %eax,%edx
f011a863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a866:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011a86d:	89 c1                	mov    %eax,%ecx
f011a86f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a872:	01 c8                	add    %ecx,%eax
f011a874:	39 c2                	cmp    %eax,%edx
f011a876:	74 17                	je     f011a88f <test_kfreeall+0xbe4>
f011a878:	83 ec 04             	sub    $0x4,%esp
f011a87b:	68 ec a4 12 f0       	push   $0xf012a4ec
f011a880:	68 91 0c 00 00       	push   $0xc91
f011a885:	68 7e a0 12 f0       	push   $0xf012a07e
f011a88a:	e8 8b 59 fe ff       	call   f010021a <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011a88f:	ff 45 f4             	incl   -0xc(%ebp)
f011a892:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011a896:	0f 8e 74 ff ff ff    	jle    f011a810 <test_kfreeall+0xb65>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011a89c:	83 ec 0c             	sub    $0xc,%esp
f011a89f:	6a 00                	push   $0x0
f011a8a1:	e8 b0 2e ff ff       	call   f010d756 <sys_bypassPageFault>
f011a8a6:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8a9:	e8 05 2a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a8ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8b1:	e8 93 9e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a8b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f011a8b9:	83 ec 0c             	sub    $0xc,%esp
f011a8bc:	68 00 00 40 00       	push   $0x400000
f011a8c1:	e8 db dc fe ff       	call   f01085a1 <kmalloc>
f011a8c6:	83 c4 10             	add    $0x10,%esp
f011a8c9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f011a8cf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a8d5:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f011a8da:	74 17                	je     f011a8f3 <test_kfreeall+0xc48>
f011a8dc:	83 ec 04             	sub    $0x4,%esp
f011a8df:	68 34 a5 12 f0       	push   $0xf012a534
f011a8e4:	68 9d 0c 00 00       	push   $0xc9d
f011a8e9:	68 7e a0 12 f0       	push   $0xf012a07e
f011a8ee:	e8 27 59 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8f3:	e8 51 9e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a8f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a8fb:	74 17                	je     f011a914 <test_kfreeall+0xc69>
f011a8fd:	83 ec 04             	sub    $0x4,%esp
f011a900:	68 64 a2 12 f0       	push   $0xf012a264
f011a905:	68 9e 0c 00 00       	push   $0xc9e
f011a90a:	68 7e a0 12 f0       	push   $0xf012a07e
f011a90f:	e8 06 59 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a914:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a917:	e8 97 29 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a91c:	29 c3                	sub    %eax,%ebx
f011a91e:	89 d8                	mov    %ebx,%eax
f011a920:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a925:	74 17                	je     f011a93e <test_kfreeall+0xc93>
f011a927:	83 ec 04             	sub    $0x4,%esp
f011a92a:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a92f:	68 9f 0c 00 00       	push   $0xc9f
f011a934:	68 7e a0 12 f0       	push   $0xf012a07e
f011a939:	e8 dc 58 fe ff       	call   f010021a <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f011a93e:	e8 70 29 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a943:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a946:	e8 fe 9d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a94b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f011a94e:	83 ec 0c             	sub    $0xc,%esp
f011a951:	68 00 30 00 00       	push   $0x3000
f011a956:	e8 46 dc fe ff       	call   f01085a1 <kmalloc>
f011a95b:	83 c4 10             	add    $0x10,%esp
f011a95e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f011a964:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a96a:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f011a96f:	74 17                	je     f011a988 <test_kfreeall+0xcdd>
f011a971:	83 ec 04             	sub    $0x4,%esp
f011a974:	68 34 a5 12 f0       	push   $0xf012a534
f011a979:	68 a5 0c 00 00       	push   $0xca5
f011a97e:	68 7e a0 12 f0       	push   $0xf012a07e
f011a983:	e8 92 58 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a988:	e8 bc 9d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a98d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a990:	74 17                	je     f011a9a9 <test_kfreeall+0xcfe>
f011a992:	83 ec 04             	sub    $0x4,%esp
f011a995:	68 64 a2 12 f0       	push   $0xf012a264
f011a99a:	68 a6 0c 00 00       	push   $0xca6
f011a99f:	68 7e a0 12 f0       	push   $0xf012a07e
f011a9a4:	e8 71 58 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a9a9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a9ac:	e8 02 29 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a9b1:	29 c3                	sub    %eax,%ebx
f011a9b3:	89 d8                	mov    %ebx,%eax
f011a9b5:	83 f8 03             	cmp    $0x3,%eax
f011a9b8:	74 17                	je     f011a9d1 <test_kfreeall+0xd26>
f011a9ba:	83 ec 04             	sub    $0x4,%esp
f011a9bd:	68 cc a2 12 f0       	push   $0xf012a2cc
f011a9c2:	68 a7 0c 00 00       	push   $0xca7
f011a9c7:	68 7e a0 12 f0       	push   $0xf012a07e
f011a9cc:	e8 49 58 fe ff       	call   f010021a <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f011a9d1:	e8 dd 28 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011a9d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9d9:	e8 6b 9d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a9de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f011a9e1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a9e7:	83 ec 0c             	sub    $0xc,%esp
f011a9ea:	50                   	push   %eax
f011a9eb:	e8 49 dd fe ff       	call   f0108739 <kfree>
f011a9f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9f3:	e8 51 9d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011a9f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a9fb:	74 17                	je     f011aa14 <test_kfreeall+0xd69>
f011a9fd:	83 ec 04             	sub    $0x4,%esp
f011aa00:	68 64 a2 12 f0       	push   $0xf012a264
f011aa05:	68 b1 0c 00 00       	push   $0xcb1
f011aa0a:	68 7e a0 12 f0       	push   $0xf012a07e
f011aa0f:	e8 06 58 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011aa14:	e8 9a 28 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aa19:	89 c2                	mov    %eax,%edx
f011aa1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aa1e:	29 c2                	sub    %eax,%edx
f011aa20:	89 d0                	mov    %edx,%eax
f011aa22:	83 f8 03             	cmp    $0x3,%eax
f011aa25:	74 17                	je     f011aa3e <test_kfreeall+0xd93>
f011aa27:	83 ec 04             	sub    $0x4,%esp
f011aa2a:	68 88 a5 12 f0       	push   $0xf012a588
f011aa2f:	68 b2 0c 00 00       	push   $0xcb2
f011aa34:	68 7e a0 12 f0       	push   $0xf012a07e
f011aa39:	e8 dc 57 fe ff       	call   f010021a <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011aa3e:	e8 70 28 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aa43:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa46:	e8 fe 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011aa4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011aa4e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011aa54:	83 ec 0c             	sub    $0xc,%esp
f011aa57:	50                   	push   %eax
f011aa58:	e8 dc dc fe ff       	call   f0108739 <kfree>
f011aa5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa60:	e8 e4 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011aa65:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011aa68:	74 17                	je     f011aa81 <test_kfreeall+0xdd6>
f011aa6a:	83 ec 04             	sub    $0x4,%esp
f011aa6d:	68 64 a2 12 f0       	push   $0xf012a264
f011aa72:	68 bb 0c 00 00       	push   $0xcbb
f011aa77:	68 7e a0 12 f0       	push   $0xf012a07e
f011aa7c:	e8 99 57 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011aa81:	e8 2d 28 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aa86:	89 c2                	mov    %eax,%edx
f011aa88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aa8b:	39 c2                	cmp    %eax,%edx
f011aa8d:	74 17                	je     f011aaa6 <test_kfreeall+0xdfb>
f011aa8f:	83 ec 04             	sub    $0x4,%esp
f011aa92:	68 88 a5 12 f0       	push   $0xf012a588
f011aa97:	68 bc 0c 00 00       	push   $0xcbc
f011aa9c:	68 7e a0 12 f0       	push   $0xf012a07e
f011aaa1:	e8 74 57 fe ff       	call   f010021a <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011aaa6:	e8 08 28 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aaab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aaae:	e8 96 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011aab3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011aab6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011aabc:	83 ec 0c             	sub    $0xc,%esp
f011aabf:	50                   	push   %eax
f011aac0:	e8 74 dc fe ff       	call   f0108739 <kfree>
f011aac5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aac8:	e8 7c 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011aacd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011aad0:	74 17                	je     f011aae9 <test_kfreeall+0xe3e>
f011aad2:	83 ec 04             	sub    $0x4,%esp
f011aad5:	68 64 a2 12 f0       	push   $0xf012a264
f011aada:	68 c2 0c 00 00       	push   $0xcc2
f011aadf:	68 7e a0 12 f0       	push   $0xf012a07e
f011aae4:	e8 31 57 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011aae9:	e8 c5 27 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aaee:	89 c2                	mov    %eax,%edx
f011aaf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aaf3:	39 c2                	cmp    %eax,%edx
f011aaf5:	74 17                	je     f011ab0e <test_kfreeall+0xe63>
f011aaf7:	83 ec 04             	sub    $0x4,%esp
f011aafa:	68 88 a5 12 f0       	push   $0xf012a588
f011aaff:	68 c3 0c 00 00       	push   $0xcc3
f011ab04:	68 7e a0 12 f0       	push   $0xf012a07e
f011ab09:	e8 0c 57 fe ff       	call   f010021a <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab0e:	e8 a0 27 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ab13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab16:	e8 2e 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ab1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011ab1e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ab24:	83 ec 0c             	sub    $0xc,%esp
f011ab27:	50                   	push   %eax
f011ab28:	e8 0c dc fe ff       	call   f0108739 <kfree>
f011ab2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab30:	e8 14 9c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ab35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ab38:	74 17                	je     f011ab51 <test_kfreeall+0xea6>
f011ab3a:	83 ec 04             	sub    $0x4,%esp
f011ab3d:	68 64 a2 12 f0       	push   $0xf012a264
f011ab42:	68 c9 0c 00 00       	push   $0xcc9
f011ab47:	68 7e a0 12 f0       	push   $0xf012a07e
f011ab4c:	e8 c9 56 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011ab51:	e8 5d 27 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ab56:	89 c2                	mov    %eax,%edx
f011ab58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab5b:	39 c2                	cmp    %eax,%edx
f011ab5d:	74 17                	je     f011ab76 <test_kfreeall+0xecb>
f011ab5f:	83 ec 04             	sub    $0x4,%esp
f011ab62:	68 88 a5 12 f0       	push   $0xf012a588
f011ab67:	68 ca 0c 00 00       	push   $0xcca
f011ab6c:	68 7e a0 12 f0       	push   $0xf012a07e
f011ab71:	e8 a4 56 fe ff       	call   f010021a <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011ab76:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011ab7d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ab84:	eb 48                	jmp    f011abce <test_kfreeall+0xf23>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011ab86:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011ab89:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011ab8e:	83 ec 04             	sub    $0x4,%esp
f011ab91:	8d 8d cc fe ff ff    	lea    -0x134(%ebp),%ecx
f011ab97:	51                   	push   %ecx
f011ab98:	52                   	push   %edx
f011ab99:	50                   	push   %eax
f011ab9a:	e8 0c ca fe ff       	call   f01075ab <get_page_table>
f011ab9f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011aba2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011aba8:	85 c0                	test   %eax,%eax
f011abaa:	75 17                	jne    f011abc3 <test_kfreeall+0xf18>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011abac:	83 ec 04             	sub    $0x4,%esp
f011abaf:	68 d0 a5 12 f0       	push   $0xf012a5d0
f011abb4:	68 d7 0c 00 00       	push   $0xcd7
f011abb9:	68 7e a0 12 f0       	push   $0xf012a07e
f011abbe:	e8 57 56 fe ff       	call   f010021a <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011abc3:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011abca:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f011abce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011abd2:	78 b2                	js     f011ab86 <test_kfreeall+0xedb>
f011abd4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011abd8:	7f 09                	jg     f011abe3 <test_kfreeall+0xf38>
f011abda:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f011abe1:	76 a3                	jbe    f011ab86 <test_kfreeall+0xedb>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f011abe3:	83 ec 0c             	sub    $0xc,%esp
f011abe6:	68 38 a6 12 f0       	push   $0xf012a638
f011abeb:	e8 ab 62 fe ff       	call   f0100e9b <cprintf>
f011abf0:	83 c4 10             	add    $0x10,%esp

	return 1;
f011abf3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011abf8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011abfb:	5b                   	pop    %ebx
f011abfc:	5f                   	pop    %edi
f011abfd:	5d                   	pop    %ebp
f011abfe:	c3                   	ret    

f011abff <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f011abff:	55                   	push   %ebp
f011ac00:	89 e5                	mov    %esp,%ebp
f011ac02:	57                   	push   %edi
f011ac03:	53                   	push   %ebx
f011ac04:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	char minByte = 1<<7;
f011ac0a:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f011ac0e:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011ac12:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f011ac18:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f011ac1e:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011ac25:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011ac2c:	e8 82 26 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ac31:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011ac34:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011ac3a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ac3f:	b8 00 00 00 00       	mov    $0x0,%eax
f011ac44:	89 d7                	mov    %edx,%edi
f011ac46:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f011ac48:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011ac4e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ac53:	b8 00 00 00 00       	mov    $0x0,%eax
f011ac58:	89 d7                	mov    %edx,%edi
f011ac5a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac5c:	e8 52 26 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ac61:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac64:	e8 e0 9a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ac69:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ac6c:	83 ec 0c             	sub    $0xc,%esp
f011ac6f:	68 00 fc 1f 00       	push   $0x1ffc00
f011ac74:	e8 28 d9 fe ff       	call   f01085a1 <kmalloc>
f011ac79:	83 c4 10             	add    $0x10,%esp
f011ac7c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011ac82:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ac88:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011ac8d:	74 17                	je     f011aca6 <test_kexpand+0xa7>
f011ac8f:	83 ec 04             	sub    $0x4,%esp
f011ac92:	68 30 a4 12 f0       	push   $0xf012a430
f011ac97:	68 02 0d 00 00       	push   $0xd02
f011ac9c:	68 7e a0 12 f0       	push   $0xf012a07e
f011aca1:	e8 74 55 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aca6:	e8 9e 9a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011acab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011acae:	74 17                	je     f011acc7 <test_kexpand+0xc8>
f011acb0:	83 ec 04             	sub    $0x4,%esp
f011acb3:	68 64 a2 12 f0       	push   $0xf012a264
f011acb8:	68 03 0d 00 00       	push   $0xd03
f011acbd:	68 7e a0 12 f0       	push   $0xf012a07e
f011acc2:	e8 53 55 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011acc7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011acca:	e8 e4 25 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011accf:	29 c3                	sub    %eax,%ebx
f011acd1:	89 d8                	mov    %ebx,%eax
f011acd3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011acd8:	74 17                	je     f011acf1 <test_kexpand+0xf2>
f011acda:	83 ec 04             	sub    $0x4,%esp
f011acdd:	68 cc a2 12 f0       	push   $0xf012a2cc
f011ace2:	68 04 0d 00 00       	push   $0xd04
f011ace7:	68 7e a0 12 f0       	push   $0xf012a07e
f011acec:	e8 29 55 fe ff       	call   f010021a <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011acf1:	c7 85 7c ff ff ff ff 	movl   $0x1ffbff,-0x84(%ebp)
f011acf8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011acfb:	e8 b3 25 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ad00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad03:	e8 41 9a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ad08:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ad0b:	83 ec 0c             	sub    $0xc,%esp
f011ad0e:	68 00 fc 1f 00       	push   $0x1ffc00
f011ad13:	e8 89 d8 fe ff       	call   f01085a1 <kmalloc>
f011ad18:	83 c4 10             	add    $0x10,%esp
f011ad1b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011ad21:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad27:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f011ad2c:	74 17                	je     f011ad45 <test_kexpand+0x146>
f011ad2e:	83 ec 04             	sub    $0x4,%esp
f011ad31:	68 30 a4 12 f0       	push   $0xf012a430
f011ad36:	68 0b 0d 00 00       	push   $0xd0b
f011ad3b:	68 7e a0 12 f0       	push   $0xf012a07e
f011ad40:	e8 d5 54 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad45:	e8 ff 99 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ad4a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ad4d:	74 17                	je     f011ad66 <test_kexpand+0x167>
f011ad4f:	83 ec 04             	sub    $0x4,%esp
f011ad52:	68 64 a2 12 f0       	push   $0xf012a264
f011ad57:	68 0c 0d 00 00       	push   $0xd0c
f011ad5c:	68 7e a0 12 f0       	push   $0xf012a07e
f011ad61:	e8 b4 54 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ad66:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011ad69:	e8 45 25 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ad6e:	29 c3                	sub    %eax,%ebx
f011ad70:	89 d8                	mov    %ebx,%eax
f011ad72:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ad77:	74 17                	je     f011ad90 <test_kexpand+0x191>
f011ad79:	83 ec 04             	sub    $0x4,%esp
f011ad7c:	68 cc a2 12 f0       	push   $0xf012a2cc
f011ad81:	68 0d 0d 00 00       	push   $0xd0d
f011ad86:	68 7e a0 12 f0       	push   $0xf012a07e
f011ad8b:	e8 8a 54 fe ff       	call   f010021a <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011ad90:	c7 45 80 ff fb 1f 00 	movl   $0x1ffbff,-0x80(%ebp)

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ad97:	e8 17 25 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ad9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad9f:	e8 a5 99 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ada4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ada7:	83 ec 0c             	sub    $0xc,%esp
f011adaa:	68 00 08 00 00       	push   $0x800
f011adaf:	e8 ed d7 fe ff       	call   f01085a1 <kmalloc>
f011adb4:	83 c4 10             	add    $0x10,%esp
f011adb7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011adbd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011adc3:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011adc8:	74 17                	je     f011ade1 <test_kexpand+0x1e2>
f011adca:	83 ec 04             	sub    $0x4,%esp
f011adcd:	68 30 a4 12 f0       	push   $0xf012a430
f011add2:	68 14 0d 00 00       	push   $0xd14
f011add7:	68 7e a0 12 f0       	push   $0xf012a07e
f011addc:	e8 39 54 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ade1:	e8 63 99 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ade6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ade9:	74 17                	je     f011ae02 <test_kexpand+0x203>
f011adeb:	83 ec 04             	sub    $0x4,%esp
f011adee:	68 64 a2 12 f0       	push   $0xf012a264
f011adf3:	68 15 0d 00 00       	push   $0xd15
f011adf8:	68 7e a0 12 f0       	push   $0xf012a07e
f011adfd:	e8 18 54 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ae02:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011ae05:	e8 a9 24 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ae0a:	29 c3                	sub    %eax,%ebx
f011ae0c:	89 d8                	mov    %ebx,%eax
f011ae0e:	83 f8 01             	cmp    $0x1,%eax
f011ae11:	74 17                	je     f011ae2a <test_kexpand+0x22b>
f011ae13:	83 ec 04             	sub    $0x4,%esp
f011ae16:	68 cc a2 12 f0       	push   $0xf012a2cc
f011ae1b:	68 16 0d 00 00       	push   $0xd16
f011ae20:	68 7e a0 12 f0       	push   $0xf012a07e
f011ae25:	e8 f0 53 fe ff       	call   f010021a <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011ae2a:	c7 45 84 ff 07 00 00 	movl   $0x7ff,-0x7c(%ebp)
		ptr = (char*)ptr_allocations[2];
f011ae31:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ae37:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011ae3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ae41:	eb 0e                	jmp    f011ae51 <test_kexpand+0x252>
		{
			ptr[i] = 2 ;
f011ae43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae46:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ae49:	01 d0                	add    %edx,%eax
f011ae4b:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011ae4e:	ff 45 f4             	incl   -0xc(%ebp)
f011ae51:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ae54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ae57:	7f ea                	jg     f011ae43 <test_kexpand+0x244>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ae59:	e8 55 24 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ae5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae61:	e8 e3 98 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ae66:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ae69:	83 ec 0c             	sub    $0xc,%esp
f011ae6c:	68 00 08 00 00       	push   $0x800
f011ae71:	e8 2b d7 fe ff       	call   f01085a1 <kmalloc>
f011ae76:	83 c4 10             	add    $0x10,%esp
f011ae79:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011ae7f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ae85:	3d 00 60 40 f8       	cmp    $0xf8406000,%eax
f011ae8a:	74 17                	je     f011aea3 <test_kexpand+0x2a4>
f011ae8c:	83 ec 04             	sub    $0x4,%esp
f011ae8f:	68 30 a4 12 f0       	push   $0xf012a430
f011ae94:	68 22 0d 00 00       	push   $0xd22
f011ae99:	68 7e a0 12 f0       	push   $0xf012a07e
f011ae9e:	e8 77 53 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aea3:	e8 a1 98 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011aea8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aeab:	74 17                	je     f011aec4 <test_kexpand+0x2c5>
f011aead:	83 ec 04             	sub    $0x4,%esp
f011aeb0:	68 64 a2 12 f0       	push   $0xf012a264
f011aeb5:	68 23 0d 00 00       	push   $0xd23
f011aeba:	68 7e a0 12 f0       	push   $0xf012a07e
f011aebf:	e8 56 53 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011aec4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011aec7:	e8 e7 23 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011aecc:	29 c3                	sub    %eax,%ebx
f011aece:	89 d8                	mov    %ebx,%eax
f011aed0:	83 f8 01             	cmp    $0x1,%eax
f011aed3:	74 17                	je     f011aeec <test_kexpand+0x2ed>
f011aed5:	83 ec 04             	sub    $0x4,%esp
f011aed8:	68 cc a2 12 f0       	push   $0xf012a2cc
f011aedd:	68 24 0d 00 00       	push   $0xd24
f011aee2:	68 7e a0 12 f0       	push   $0xf012a07e
f011aee7:	e8 2e 53 fe ff       	call   f010021a <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011aeec:	c7 45 88 ff 07 00 00 	movl   $0x7ff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[3];
f011aef3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011aef9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011aefc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011af03:	eb 0e                	jmp    f011af13 <test_kexpand+0x314>
		{
			ptr[i] = 3 ;
f011af05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011af0b:	01 d0                	add    %edx,%eax
f011af0d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011af10:	ff 45 f4             	incl   -0xc(%ebp)
f011af13:	8b 45 88             	mov    -0x78(%ebp),%eax
f011af16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011af19:	7f ea                	jg     f011af05 <test_kexpand+0x306>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011af1b:	e8 93 23 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011af20:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af23:	e8 21 98 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011af28:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011af2b:	83 ec 0c             	sub    $0xc,%esp
f011af2e:	68 00 1c 00 00       	push   $0x1c00
f011af33:	e8 69 d6 fe ff       	call   f01085a1 <kmalloc>
f011af38:	83 c4 10             	add    $0x10,%esp
f011af3b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011af41:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011af47:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f011af4c:	74 17                	je     f011af65 <test_kexpand+0x366>
f011af4e:	83 ec 04             	sub    $0x4,%esp
f011af51:	68 30 a4 12 f0       	push   $0xf012a430
f011af56:	68 30 0d 00 00       	push   $0xd30
f011af5b:	68 7e a0 12 f0       	push   $0xf012a07e
f011af60:	e8 b5 52 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af65:	e8 df 97 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011af6a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af6d:	74 17                	je     f011af86 <test_kexpand+0x387>
f011af6f:	83 ec 04             	sub    $0x4,%esp
f011af72:	68 64 a2 12 f0       	push   $0xf012a264
f011af77:	68 31 0d 00 00       	push   $0xd31
f011af7c:	68 7e a0 12 f0       	push   $0xf012a07e
f011af81:	e8 94 52 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011af86:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011af89:	e8 25 23 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011af8e:	29 c3                	sub    %eax,%ebx
f011af90:	89 d8                	mov    %ebx,%eax
f011af92:	83 f8 02             	cmp    $0x2,%eax
f011af95:	74 17                	je     f011afae <test_kexpand+0x3af>
f011af97:	83 ec 04             	sub    $0x4,%esp
f011af9a:	68 cc a2 12 f0       	push   $0xf012a2cc
f011af9f:	68 32 0d 00 00       	push   $0xd32
f011afa4:	68 7e a0 12 f0       	push   $0xf012a07e
f011afa9:	e8 6c 52 fe ff       	call   f010021a <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011afae:	c7 45 8c ff 1b 00 00 	movl   $0x1bff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[4];
f011afb5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011afbb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011afbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011afc5:	eb 0e                	jmp    f011afd5 <test_kexpand+0x3d6>
		{
			ptr[i] = 4 ;
f011afc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011afca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011afcd:	01 d0                	add    %edx,%eax
f011afcf:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011afd2:	ff 45 f4             	incl   -0xc(%ebp)
f011afd5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011afd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011afdb:	7f ea                	jg     f011afc7 <test_kexpand+0x3c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011afdd:	e8 d1 22 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011afe2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afe5:	e8 5f 97 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011afea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011afed:	83 ec 0c             	sub    $0xc,%esp
f011aff0:	68 00 fc 2f 00       	push   $0x2ffc00
f011aff5:	e8 a7 d5 fe ff       	call   f01085a1 <kmalloc>
f011affa:	83 c4 10             	add    $0x10,%esp
f011affd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b003:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b009:	3d 00 90 40 f8       	cmp    $0xf8409000,%eax
f011b00e:	74 17                	je     f011b027 <test_kexpand+0x428>
f011b010:	83 ec 04             	sub    $0x4,%esp
f011b013:	68 30 a4 12 f0       	push   $0xf012a430
f011b018:	68 3e 0d 00 00       	push   $0xd3e
f011b01d:	68 7e a0 12 f0       	push   $0xf012a07e
f011b022:	e8 f3 51 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b027:	e8 1d 97 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b02c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b02f:	74 17                	je     f011b048 <test_kexpand+0x449>
f011b031:	83 ec 04             	sub    $0x4,%esp
f011b034:	68 64 a2 12 f0       	push   $0xf012a264
f011b039:	68 3f 0d 00 00       	push   $0xd3f
f011b03e:	68 7e a0 12 f0       	push   $0xf012a07e
f011b043:	e8 d2 51 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b048:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b04b:	e8 63 22 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b050:	29 c3                	sub    %eax,%ebx
f011b052:	89 d8                	mov    %ebx,%eax
f011b054:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b059:	74 17                	je     f011b072 <test_kexpand+0x473>
f011b05b:	83 ec 04             	sub    $0x4,%esp
f011b05e:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b063:	68 40 0d 00 00       	push   $0xd40
f011b068:	68 7e a0 12 f0       	push   $0xf012a07e
f011b06d:	e8 a8 51 fe ff       	call   f010021a <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011b072:	c7 45 90 ff fb 2f 00 	movl   $0x2ffbff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[5];
f011b079:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b07f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011b082:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b089:	eb 0e                	jmp    f011b099 <test_kexpand+0x49a>
		{
			ptr[i] = 5 ;
f011b08b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b08e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b091:	01 d0                	add    %edx,%eax
f011b093:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011b096:	ff 45 f4             	incl   -0xc(%ebp)
f011b099:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b09c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b09f:	7f ea                	jg     f011b08b <test_kexpand+0x48c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011b0a1:	e8 0d 22 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b0a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0a9:	e8 9b 96 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b0ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f011b0b1:	83 ec 0c             	sub    $0xc,%esp
f011b0b4:	68 00 00 60 00       	push   $0x600000
f011b0b9:	e8 e3 d4 fe ff       	call   f01085a1 <kmalloc>
f011b0be:	83 c4 10             	add    $0x10,%esp
f011b0c1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b0c7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b0cd:	3d 00 90 70 f8       	cmp    $0xf8709000,%eax
f011b0d2:	74 17                	je     f011b0eb <test_kexpand+0x4ec>
f011b0d4:	83 ec 04             	sub    $0x4,%esp
f011b0d7:	68 30 a4 12 f0       	push   $0xf012a430
f011b0dc:	68 4c 0d 00 00       	push   $0xd4c
f011b0e1:	68 7e a0 12 f0       	push   $0xf012a07e
f011b0e6:	e8 2f 51 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0eb:	e8 59 96 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b0f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b0f3:	74 17                	je     f011b10c <test_kexpand+0x50d>
f011b0f5:	83 ec 04             	sub    $0x4,%esp
f011b0f8:	68 64 a2 12 f0       	push   $0xf012a264
f011b0fd:	68 4d 0d 00 00       	push   $0xd4d
f011b102:	68 7e a0 12 f0       	push   $0xf012a07e
f011b107:	e8 0e 51 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b10c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b10f:	e8 9f 21 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b114:	29 c3                	sub    %eax,%ebx
f011b116:	89 d8                	mov    %ebx,%eax
f011b118:	3d 00 06 00 00       	cmp    $0x600,%eax
f011b11d:	74 17                	je     f011b136 <test_kexpand+0x537>
f011b11f:	83 ec 04             	sub    $0x4,%esp
f011b122:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b127:	68 4e 0d 00 00       	push   $0xd4e
f011b12c:	68 7e a0 12 f0       	push   $0xf012a07e
f011b131:	e8 e4 50 fe ff       	call   f010021a <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f011b136:	c7 45 94 ff ff 17 00 	movl   $0x17ffff,-0x6c(%ebp)
		arr = (uint32*)ptr_allocations[6];
f011b13d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b143:	89 45 d0             	mov    %eax,-0x30(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f011b146:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b14d:	eb 17                	jmp    f011b166 <test_kexpand+0x567>
		{
			arr[i] = i ;
f011b14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b152:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b159:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b15c:	01 c2                	add    %eax,%edx
f011b15e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b161:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f011b163:	ff 45 f4             	incl   -0xc(%ebp)
f011b166:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b169:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b16c:	7d e1                	jge    f011b14f <test_kexpand+0x550>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f011b16e:	c7 45 cc ff ff 1b 00 	movl   $0x1bffff,-0x34(%ebp)
	{
		freeFrames = sys_calculate_free_frames() ;
f011b175:	e8 39 21 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b17a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b17d:	e8 c7 95 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b182:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f011b185:	83 ec 0c             	sub    $0xc,%esp
f011b188:	68 00 00 70 00       	push   $0x700000
f011b18d:	e8 a1 d7 fe ff       	call   f0108933 <kexpand>
f011b192:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011b195:	e8 af 95 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b19a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b19d:	74 19                	je     f011b1b8 <test_kexpand+0x5b9>
f011b19f:	68 74 a6 12 f0       	push   $0xf012a674
f011b1a4:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b1a9:	68 5f 0d 00 00       	push   $0xd5f
f011b1ae:	68 7e a0 12 f0       	push   $0xf012a07e
f011b1b3:	e8 62 50 fe ff       	call   f010021a <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f011b1b8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b1bb:	e8 f3 20 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b1c0:	29 c3                	sub    %eax,%ebx
f011b1c2:	89 d8                	mov    %ebx,%eax
f011b1c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1c9:	74 19                	je     f011b1e4 <test_kexpand+0x5e5>
f011b1cb:	68 bc a6 12 f0       	push   $0xf012a6bc
f011b1d0:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b1d5:	68 60 0d 00 00       	push   $0xd60
f011b1da:	68 7e a0 12 f0       	push   $0xf012a07e
f011b1df:	e8 36 50 fe ff       	call   f010021a <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f011b1e4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b1e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011b1ea:	eb 17                	jmp    f011b203 <test_kexpand+0x604>
		{
			arr[i] = i ;
f011b1ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b1ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b1f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b1f9:	01 c2                	add    %eax,%edx
f011b1fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b1fe:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f011b200:	ff 45 f4             	incl   -0xc(%ebp)
f011b203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b206:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b209:	7c e1                	jl     f011b1ec <test_kexpand+0x5ed>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f011b20b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b212:	eb 34                	jmp    f011b248 <test_kexpand+0x649>
		{
			assert(arr[i] ==i);
f011b214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b217:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b21e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b221:	01 d0                	add    %edx,%eax
f011b223:	8b 10                	mov    (%eax),%edx
f011b225:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b228:	39 c2                	cmp    %eax,%edx
f011b22a:	74 19                	je     f011b245 <test_kexpand+0x646>
f011b22c:	68 ec a6 12 f0       	push   $0xf012a6ec
f011b231:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b236:	68 6c 0d 00 00       	push   $0xd6c
f011b23b:	68 7e a0 12 f0       	push   $0xf012a07e
f011b240:	e8 d5 4f fe ff       	call   f010021a <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f011b245:	ff 45 f4             	incl   -0xc(%ebp)
f011b248:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b24b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b24e:	7c c4                	jl     f011b214 <test_kexpand+0x615>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f011b250:	e8 5e 20 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b255:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b258:	e8 ec 94 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b25d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f011b260:	83 ec 0c             	sub    $0xc,%esp
f011b263:	68 00 00 a0 00       	push   $0xa00000
f011b268:	e8 c6 d6 fe ff       	call   f0108933 <kexpand>
f011b26d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011b270:	e8 d4 94 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b275:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b278:	74 19                	je     f011b293 <test_kexpand+0x694>
f011b27a:	68 74 a6 12 f0       	push   $0xf012a674
f011b27f:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b284:	68 77 0d 00 00       	push   $0xd77
f011b289:	68 7e a0 12 f0       	push   $0xf012a07e
f011b28e:	e8 87 4f fe ff       	call   f010021a <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f011b293:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b296:	e8 18 20 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b29b:	29 c3                	sub    %eax,%ebx
f011b29d:	89 d8                	mov    %ebx,%eax
f011b29f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b2a4:	74 19                	je     f011b2bf <test_kexpand+0x6c0>
f011b2a6:	68 f8 a6 12 f0       	push   $0xf012a6f8
f011b2ab:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b2b0:	68 78 0d 00 00       	push   $0xd78
f011b2b5:	68 7e a0 12 f0       	push   $0xf012a07e
f011b2ba:	e8 5b 4f fe ff       	call   f010021a <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011b2bf:	e8 ef 1f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b2c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2c7:	e8 7d 94 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b2cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f011b2cf:	83 ec 0c             	sub    $0xc,%esp
f011b2d2:	68 00 00 40 00       	push   $0x400000
f011b2d7:	e8 c5 d2 fe ff       	call   f01085a1 <kmalloc>
f011b2dc:	83 c4 10             	add    $0x10,%esp
f011b2df:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f011b2e5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2eb:	3d 00 90 10 f9       	cmp    $0xf9109000,%eax
f011b2f0:	74 17                	je     f011b309 <test_kexpand+0x70a>
f011b2f2:	83 ec 04             	sub    $0x4,%esp
f011b2f5:	68 28 a7 12 f0       	push   $0xf012a728
f011b2fa:	68 83 0d 00 00       	push   $0xd83
f011b2ff:	68 7e a0 12 f0       	push   $0xf012a07e
f011b304:	e8 11 4f fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b309:	e8 3b 94 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b30e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b311:	74 17                	je     f011b32a <test_kexpand+0x72b>
f011b313:	83 ec 04             	sub    $0x4,%esp
f011b316:	68 64 a2 12 f0       	push   $0xf012a264
f011b31b:	68 84 0d 00 00       	push   $0xd84
f011b320:	68 7e a0 12 f0       	push   $0xf012a07e
f011b325:	e8 f0 4e fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b32a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b32d:	e8 81 1f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b332:	29 c3                	sub    %eax,%ebx
f011b334:	89 d8                	mov    %ebx,%eax
f011b336:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b33b:	74 17                	je     f011b354 <test_kexpand+0x755>
f011b33d:	83 ec 04             	sub    $0x4,%esp
f011b340:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b345:	68 85 0d 00 00       	push   $0xd85
f011b34a:	68 7e a0 12 f0       	push   $0xf012a07e
f011b34f:	e8 c6 4e fe ff       	call   f010021a <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f011b354:	e8 5a 1f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b359:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b35c:	e8 e8 93 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b361:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b364:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b36a:	83 ec 0c             	sub    $0xc,%esp
f011b36d:	50                   	push   %eax
f011b36e:	e8 c6 d3 fe ff       	call   f0108739 <kfree>
f011b373:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b376:	e8 ce 93 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b37b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b37e:	74 17                	je     f011b397 <test_kexpand+0x798>
f011b380:	83 ec 04             	sub    $0x4,%esp
f011b383:	68 64 a2 12 f0       	push   $0xf012a264
f011b388:	68 8e 0d 00 00       	push   $0xd8e
f011b38d:	68 7e a0 12 f0       	push   $0xf012a07e
f011b392:	e8 83 4e fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011b397:	e8 17 1f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b39c:	89 c2                	mov    %eax,%edx
f011b39e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b3a1:	29 c2                	sub    %eax,%edx
f011b3a3:	89 d0                	mov    %edx,%eax
f011b3a5:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f011b3aa:	74 17                	je     f011b3c3 <test_kexpand+0x7c4>
f011b3ac:	83 ec 04             	sub    $0x4,%esp
f011b3af:	68 88 a5 12 f0       	push   $0xf012a588
f011b3b4:	68 8f 0d 00 00       	push   $0xd8f
f011b3b9:	68 7e a0 12 f0       	push   $0xf012a07e
f011b3be:	e8 57 4e fe ff       	call   f010021a <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f011b3c3:	e8 eb 1e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b3c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3cb:	e8 79 93 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b3d0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f011b3d3:	83 ec 0c             	sub    $0xc,%esp
f011b3d6:	68 00 50 40 00       	push   $0x405000
f011b3db:	e8 53 d5 fe ff       	call   f0108933 <kexpand>
f011b3e0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011b3e3:	e8 61 93 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b3e8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b3eb:	74 19                	je     f011b406 <test_kexpand+0x807>
f011b3ed:	68 74 a6 12 f0       	push   $0xf012a674
f011b3f2:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b3f7:	68 99 0d 00 00       	push   $0xd99
f011b3fc:	68 7e a0 12 f0       	push   $0xf012a07e
f011b401:	e8 14 4e fe ff       	call   f010021a <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f011b406:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b409:	e8 a5 1e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b40e:	29 c3                	sub    %eax,%ebx
f011b410:	89 d8                	mov    %ebx,%eax
f011b412:	83 f8 05             	cmp    $0x5,%eax
f011b415:	74 19                	je     f011b430 <test_kexpand+0x831>
f011b417:	68 50 a7 12 f0       	push   $0xf012a750
f011b41c:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b421:	68 9a 0d 00 00       	push   $0xd9a
f011b426:	68 7e a0 12 f0       	push   $0xf012a07e
f011b42b:	e8 ea 4d fe ff       	call   f010021a <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f011b430:	83 ec 0c             	sub    $0xc,%esp
f011b433:	68 38 a6 12 f0       	push   $0xf012a638
f011b438:	e8 5e 5a fe ff       	call   f0100e9b <cprintf>
f011b43d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b440:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011b445:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b448:	5b                   	pop    %ebx
f011b449:	5f                   	pop    %edi
f011b44a:	5d                   	pop    %ebp
f011b44b:	c3                   	ret    

f011b44c <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f011b44c:	55                   	push   %ebp
f011b44d:	89 e5                	mov    %esp,%ebp
f011b44f:	57                   	push   %edi
f011b450:	53                   	push   %ebx
f011b451:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	char minByte = 1<<7;
f011b457:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f011b45b:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011b45f:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f011b465:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f011b46b:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011b472:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011b479:	e8 35 1e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b47e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011b481:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011b487:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b48c:	b8 00 00 00 00       	mov    $0x0,%eax
f011b491:	89 d7                	mov    %edx,%edi
f011b493:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f011b495:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011b49b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b4a0:	b8 00 00 00 00       	mov    $0x0,%eax
f011b4a5:	89 d7                	mov    %edx,%edi
f011b4a7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b4a9:	e8 05 1e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b4ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4b1:	e8 93 92 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b4b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b4b9:	83 ec 0c             	sub    $0xc,%esp
f011b4bc:	68 00 fc 1f 00       	push   $0x1ffc00
f011b4c1:	e8 db d0 fe ff       	call   f01085a1 <kmalloc>
f011b4c6:	83 c4 10             	add    $0x10,%esp
f011b4c9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b4cf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b4d5:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011b4da:	74 17                	je     f011b4f3 <test_kshrink+0xa7>
f011b4dc:	83 ec 04             	sub    $0x4,%esp
f011b4df:	68 30 a4 12 f0       	push   $0xf012a430
f011b4e4:	68 c0 0d 00 00       	push   $0xdc0
f011b4e9:	68 7e a0 12 f0       	push   $0xf012a07e
f011b4ee:	e8 27 4d fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4f3:	e8 51 92 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b4f8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4fb:	74 17                	je     f011b514 <test_kshrink+0xc8>
f011b4fd:	83 ec 04             	sub    $0x4,%esp
f011b500:	68 64 a2 12 f0       	push   $0xf012a264
f011b505:	68 c1 0d 00 00       	push   $0xdc1
f011b50a:	68 7e a0 12 f0       	push   $0xf012a07e
f011b50f:	e8 06 4d fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b514:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b517:	e8 97 1d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b51c:	29 c3                	sub    %eax,%ebx
f011b51e:	89 d8                	mov    %ebx,%eax
f011b520:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b525:	74 17                	je     f011b53e <test_kshrink+0xf2>
f011b527:	83 ec 04             	sub    $0x4,%esp
f011b52a:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b52f:	68 c2 0d 00 00       	push   $0xdc2
f011b534:	68 7e a0 12 f0       	push   $0xf012a07e
f011b539:	e8 dc 4c fe ff       	call   f010021a <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011b53e:	c7 85 7c ff ff ff ff 	movl   $0x1ffbff,-0x84(%ebp)
f011b545:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b548:	e8 66 1d ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b54d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b550:	e8 f4 91 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b555:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b558:	83 ec 0c             	sub    $0xc,%esp
f011b55b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b560:	e8 3c d0 fe ff       	call   f01085a1 <kmalloc>
f011b565:	83 c4 10             	add    $0x10,%esp
f011b568:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b56e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b574:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f011b579:	74 17                	je     f011b592 <test_kshrink+0x146>
f011b57b:	83 ec 04             	sub    $0x4,%esp
f011b57e:	68 30 a4 12 f0       	push   $0xf012a430
f011b583:	68 c9 0d 00 00       	push   $0xdc9
f011b588:	68 7e a0 12 f0       	push   $0xf012a07e
f011b58d:	e8 88 4c fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b592:	e8 b2 91 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b597:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b59a:	74 17                	je     f011b5b3 <test_kshrink+0x167>
f011b59c:	83 ec 04             	sub    $0x4,%esp
f011b59f:	68 64 a2 12 f0       	push   $0xf012a264
f011b5a4:	68 ca 0d 00 00       	push   $0xdca
f011b5a9:	68 7e a0 12 f0       	push   $0xf012a07e
f011b5ae:	e8 67 4c fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b5b3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b5b6:	e8 f8 1c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b5bb:	29 c3                	sub    %eax,%ebx
f011b5bd:	89 d8                	mov    %ebx,%eax
f011b5bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b5c4:	74 17                	je     f011b5dd <test_kshrink+0x191>
f011b5c6:	83 ec 04             	sub    $0x4,%esp
f011b5c9:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b5ce:	68 cb 0d 00 00       	push   $0xdcb
f011b5d3:	68 7e a0 12 f0       	push   $0xf012a07e
f011b5d8:	e8 3d 4c fe ff       	call   f010021a <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011b5dd:	c7 45 80 ff fb 1f 00 	movl   $0x1ffbff,-0x80(%ebp)

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b5e4:	e8 ca 1c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b5e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5ec:	e8 58 91 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b5f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b5f4:	83 ec 0c             	sub    $0xc,%esp
f011b5f7:	68 00 08 00 00       	push   $0x800
f011b5fc:	e8 a0 cf fe ff       	call   f01085a1 <kmalloc>
f011b601:	83 c4 10             	add    $0x10,%esp
f011b604:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b60a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b610:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011b615:	74 17                	je     f011b62e <test_kshrink+0x1e2>
f011b617:	83 ec 04             	sub    $0x4,%esp
f011b61a:	68 30 a4 12 f0       	push   $0xf012a430
f011b61f:	68 d2 0d 00 00       	push   $0xdd2
f011b624:	68 7e a0 12 f0       	push   $0xf012a07e
f011b629:	e8 ec 4b fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b62e:	e8 16 91 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b633:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b636:	74 17                	je     f011b64f <test_kshrink+0x203>
f011b638:	83 ec 04             	sub    $0x4,%esp
f011b63b:	68 64 a2 12 f0       	push   $0xf012a264
f011b640:	68 d3 0d 00 00       	push   $0xdd3
f011b645:	68 7e a0 12 f0       	push   $0xf012a07e
f011b64a:	e8 cb 4b fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b64f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b652:	e8 5c 1c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b657:	29 c3                	sub    %eax,%ebx
f011b659:	89 d8                	mov    %ebx,%eax
f011b65b:	83 f8 01             	cmp    $0x1,%eax
f011b65e:	74 17                	je     f011b677 <test_kshrink+0x22b>
f011b660:	83 ec 04             	sub    $0x4,%esp
f011b663:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b668:	68 d4 0d 00 00       	push   $0xdd4
f011b66d:	68 7e a0 12 f0       	push   $0xf012a07e
f011b672:	e8 a3 4b fe ff       	call   f010021a <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011b677:	c7 45 84 ff 07 00 00 	movl   $0x7ff,-0x7c(%ebp)
		ptr = (char*)ptr_allocations[2];
f011b67e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b684:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011b687:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b68e:	eb 0e                	jmp    f011b69e <test_kshrink+0x252>
		{
			ptr[i] = 2 ;
f011b690:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b693:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b696:	01 d0                	add    %edx,%eax
f011b698:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011b69b:	ff 45 f4             	incl   -0xc(%ebp)
f011b69e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b6a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b6a4:	7f ea                	jg     f011b690 <test_kshrink+0x244>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b6a6:	e8 08 1c ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b6ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6ae:	e8 96 90 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b6b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b6b6:	83 ec 0c             	sub    $0xc,%esp
f011b6b9:	68 00 08 00 00       	push   $0x800
f011b6be:	e8 de ce fe ff       	call   f01085a1 <kmalloc>
f011b6c3:	83 c4 10             	add    $0x10,%esp
f011b6c6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b6cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b6d2:	3d 00 60 40 f8       	cmp    $0xf8406000,%eax
f011b6d7:	74 17                	je     f011b6f0 <test_kshrink+0x2a4>
f011b6d9:	83 ec 04             	sub    $0x4,%esp
f011b6dc:	68 30 a4 12 f0       	push   $0xf012a430
f011b6e1:	68 e0 0d 00 00       	push   $0xde0
f011b6e6:	68 7e a0 12 f0       	push   $0xf012a07e
f011b6eb:	e8 2a 4b fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6f0:	e8 54 90 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b6f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6f8:	74 17                	je     f011b711 <test_kshrink+0x2c5>
f011b6fa:	83 ec 04             	sub    $0x4,%esp
f011b6fd:	68 64 a2 12 f0       	push   $0xf012a264
f011b702:	68 e1 0d 00 00       	push   $0xde1
f011b707:	68 7e a0 12 f0       	push   $0xf012a07e
f011b70c:	e8 09 4b fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b711:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b714:	e8 9a 1b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b719:	29 c3                	sub    %eax,%ebx
f011b71b:	89 d8                	mov    %ebx,%eax
f011b71d:	83 f8 01             	cmp    $0x1,%eax
f011b720:	74 17                	je     f011b739 <test_kshrink+0x2ed>
f011b722:	83 ec 04             	sub    $0x4,%esp
f011b725:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b72a:	68 e2 0d 00 00       	push   $0xde2
f011b72f:	68 7e a0 12 f0       	push   $0xf012a07e
f011b734:	e8 e1 4a fe ff       	call   f010021a <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011b739:	c7 45 88 ff 07 00 00 	movl   $0x7ff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[3];
f011b740:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b746:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011b749:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b750:	eb 0e                	jmp    f011b760 <test_kshrink+0x314>
		{
			ptr[i] = 3 ;
f011b752:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b755:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b758:	01 d0                	add    %edx,%eax
f011b75a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011b75d:	ff 45 f4             	incl   -0xc(%ebp)
f011b760:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b763:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b766:	7f ea                	jg     f011b752 <test_kshrink+0x306>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b768:	e8 46 1b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b76d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b770:	e8 d4 8f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b775:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b778:	83 ec 0c             	sub    $0xc,%esp
f011b77b:	68 00 1c 00 00       	push   $0x1c00
f011b780:	e8 1c ce fe ff       	call   f01085a1 <kmalloc>
f011b785:	83 c4 10             	add    $0x10,%esp
f011b788:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b78e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b794:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f011b799:	74 17                	je     f011b7b2 <test_kshrink+0x366>
f011b79b:	83 ec 04             	sub    $0x4,%esp
f011b79e:	68 30 a4 12 f0       	push   $0xf012a430
f011b7a3:	68 ee 0d 00 00       	push   $0xdee
f011b7a8:	68 7e a0 12 f0       	push   $0xf012a07e
f011b7ad:	e8 68 4a fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7b2:	e8 92 8f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b7b7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7ba:	74 17                	je     f011b7d3 <test_kshrink+0x387>
f011b7bc:	83 ec 04             	sub    $0x4,%esp
f011b7bf:	68 64 a2 12 f0       	push   $0xf012a264
f011b7c4:	68 ef 0d 00 00       	push   $0xdef
f011b7c9:	68 7e a0 12 f0       	push   $0xf012a07e
f011b7ce:	e8 47 4a fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b7d3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b7d6:	e8 d8 1a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b7db:	29 c3                	sub    %eax,%ebx
f011b7dd:	89 d8                	mov    %ebx,%eax
f011b7df:	83 f8 02             	cmp    $0x2,%eax
f011b7e2:	74 17                	je     f011b7fb <test_kshrink+0x3af>
f011b7e4:	83 ec 04             	sub    $0x4,%esp
f011b7e7:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b7ec:	68 f0 0d 00 00       	push   $0xdf0
f011b7f1:	68 7e a0 12 f0       	push   $0xf012a07e
f011b7f6:	e8 1f 4a fe ff       	call   f010021a <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011b7fb:	c7 45 8c ff 1b 00 00 	movl   $0x1bff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[4];
f011b802:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b808:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011b80b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b812:	eb 0e                	jmp    f011b822 <test_kshrink+0x3d6>
		{
			ptr[i] = 4 ;
f011b814:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b817:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b81a:	01 d0                	add    %edx,%eax
f011b81c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011b81f:	ff 45 f4             	incl   -0xc(%ebp)
f011b822:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b825:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b828:	7f ea                	jg     f011b814 <test_kshrink+0x3c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b82a:	e8 84 1a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b82f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b832:	e8 12 8f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b837:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b83a:	83 ec 0c             	sub    $0xc,%esp
f011b83d:	68 00 fc 2f 00       	push   $0x2ffc00
f011b842:	e8 5a cd fe ff       	call   f01085a1 <kmalloc>
f011b847:	83 c4 10             	add    $0x10,%esp
f011b84a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b850:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b856:	3d 00 90 40 f8       	cmp    $0xf8409000,%eax
f011b85b:	74 17                	je     f011b874 <test_kshrink+0x428>
f011b85d:	83 ec 04             	sub    $0x4,%esp
f011b860:	68 30 a4 12 f0       	push   $0xf012a430
f011b865:	68 fc 0d 00 00       	push   $0xdfc
f011b86a:	68 7e a0 12 f0       	push   $0xf012a07e
f011b86f:	e8 a6 49 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b874:	e8 d0 8e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b879:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b87c:	74 17                	je     f011b895 <test_kshrink+0x449>
f011b87e:	83 ec 04             	sub    $0x4,%esp
f011b881:	68 64 a2 12 f0       	push   $0xf012a264
f011b886:	68 fd 0d 00 00       	push   $0xdfd
f011b88b:	68 7e a0 12 f0       	push   $0xf012a07e
f011b890:	e8 85 49 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b895:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b898:	e8 16 1a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b89d:	29 c3                	sub    %eax,%ebx
f011b89f:	89 d8                	mov    %ebx,%eax
f011b8a1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b8a6:	74 17                	je     f011b8bf <test_kshrink+0x473>
f011b8a8:	83 ec 04             	sub    $0x4,%esp
f011b8ab:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b8b0:	68 fe 0d 00 00       	push   $0xdfe
f011b8b5:	68 7e a0 12 f0       	push   $0xf012a07e
f011b8ba:	e8 5b 49 fe ff       	call   f010021a <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011b8bf:	c7 45 90 ff fb 2f 00 	movl   $0x2ffbff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[5];
f011b8c6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b8cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011b8cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b8d6:	eb 0e                	jmp    f011b8e6 <test_kshrink+0x49a>
		{
			ptr[i] = 5 ;
f011b8d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b8db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b8de:	01 d0                	add    %edx,%eax
f011b8e0:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011b8e3:	ff 45 f4             	incl   -0xc(%ebp)
f011b8e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b8e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b8ec:	7f ea                	jg     f011b8d8 <test_kshrink+0x48c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8ee:	e8 c0 19 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b8f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8f6:	e8 4e 8e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b8fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f011b8fe:	83 ec 0c             	sub    $0xc,%esp
f011b901:	68 00 00 60 00       	push   $0x600000
f011b906:	e8 96 cc fe ff       	call   f01085a1 <kmalloc>
f011b90b:	83 c4 10             	add    $0x10,%esp
f011b90e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011b914:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b91a:	3d 00 90 70 f8       	cmp    $0xf8709000,%eax
f011b91f:	74 17                	je     f011b938 <test_kshrink+0x4ec>
f011b921:	83 ec 04             	sub    $0x4,%esp
f011b924:	68 30 a4 12 f0       	push   $0xf012a430
f011b929:	68 0a 0e 00 00       	push   $0xe0a
f011b92e:	68 7e a0 12 f0       	push   $0xf012a07e
f011b933:	e8 e2 48 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b938:	e8 0c 8e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b93d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b940:	74 17                	je     f011b959 <test_kshrink+0x50d>
f011b942:	83 ec 04             	sub    $0x4,%esp
f011b945:	68 64 a2 12 f0       	push   $0xf012a264
f011b94a:	68 0b 0e 00 00       	push   $0xe0b
f011b94f:	68 7e a0 12 f0       	push   $0xf012a07e
f011b954:	e8 c1 48 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b959:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011b95c:	e8 52 19 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b961:	29 c3                	sub    %eax,%ebx
f011b963:	89 d8                	mov    %ebx,%eax
f011b965:	3d 00 06 00 00       	cmp    $0x600,%eax
f011b96a:	74 17                	je     f011b983 <test_kshrink+0x537>
f011b96c:	83 ec 04             	sub    $0x4,%esp
f011b96f:	68 cc a2 12 f0       	push   $0xf012a2cc
f011b974:	68 0c 0e 00 00       	push   $0xe0c
f011b979:	68 7e a0 12 f0       	push   $0xf012a07e
f011b97e:	e8 97 48 fe ff       	call   f010021a <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f011b983:	c7 45 94 ff ff 17 00 	movl   $0x17ffff,-0x6c(%ebp)
		arr = (uint32*)ptr_allocations[6];
f011b98a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b990:	89 45 d0             	mov    %eax,-0x30(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f011b993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b99a:	eb 17                	jmp    f011b9b3 <test_kshrink+0x567>
		{
			arr[i] = i ;
f011b99c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b99f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b9a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b9a9:	01 c2                	add    %eax,%edx
f011b9ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b9ae:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f011b9b0:	ff 45 f4             	incl   -0xc(%ebp)
f011b9b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b9b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b9b9:	7d e1                	jge    f011b99c <test_kshrink+0x550>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f011b9bb:	e8 f3 18 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011b9c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b9c3:	e8 81 8d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b9c8:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f011b9cb:	83 ec 0c             	sub    $0xc,%esp
f011b9ce:	68 00 00 50 00       	push   $0x500000
f011b9d3:	e8 3e cf fe ff       	call   f0108916 <kshrink>
f011b9d8:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011b9db:	e8 69 8d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011b9e0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b9e3:	74 19                	je     f011b9fe <test_kshrink+0x5b2>
f011b9e5:	68 74 a6 12 f0       	push   $0xf012a674
f011b9ea:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011b9ef:	68 1c 0e 00 00       	push   $0xe1c
f011b9f4:	68 7e a0 12 f0       	push   $0xf012a07e
f011b9f9:	e8 1c 48 fe ff       	call   f010021a <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f011b9fe:	e8 b0 18 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ba03:	89 c2                	mov    %eax,%edx
f011ba05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ba08:	29 c2                	sub    %eax,%edx
f011ba0a:	89 d0                	mov    %edx,%eax
f011ba0c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ba11:	74 19                	je     f011ba2c <test_kshrink+0x5e0>
f011ba13:	68 80 a7 12 f0       	push   $0xf012a780
f011ba18:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011ba1d:	68 1d 0e 00 00       	push   $0xe1d
f011ba22:	68 7e a0 12 f0       	push   $0xf012a07e
f011ba27:	e8 ee 47 fe ff       	call   f010021a <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f011ba2c:	c7 45 cc ff ff 13 00 	movl   $0x13ffff,-0x34(%ebp)
	{
		for (i = 0; i <= newLastIndex ; ++i)
f011ba33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ba3a:	eb 34                	jmp    f011ba70 <test_kshrink+0x624>
		{
			assert(arr[i] == i);
f011ba3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ba3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011ba46:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ba49:	01 d0                	add    %edx,%eax
f011ba4b:	8b 10                	mov    (%eax),%edx
f011ba4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ba50:	39 c2                	cmp    %eax,%edx
f011ba52:	74 19                	je     f011ba6d <test_kshrink+0x621>
f011ba54:	68 b0 a7 12 f0       	push   $0xf012a7b0
f011ba59:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011ba5e:	68 25 0e 00 00       	push   $0xe25
f011ba63:	68 7e a0 12 f0       	push   $0xf012a07e
f011ba68:	e8 ad 47 fe ff       	call   f010021a <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f011ba6d:	ff 45 f4             	incl   -0xc(%ebp)
f011ba70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ba73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ba76:	7e c4                	jle    f011ba3c <test_kshrink+0x5f0>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011ba78:	83 ec 0c             	sub    $0xc,%esp
f011ba7b:	6a 03                	push   $0x3
f011ba7d:	e8 d4 1c ff ff       	call   f010d756 <sys_bypassPageFault>
f011ba82:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f011ba85:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ba8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr[5*Mega] = 10;
f011ba8e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ba91:	05 00 00 50 00       	add    $0x500000,%eax
f011ba96:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f011ba99:	e8 a6 1c ff ff       	call   f010d744 <sys_rcr2>
f011ba9e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011baa1:	81 c2 00 00 50 00    	add    $0x500000,%edx
f011baa7:	39 d0                	cmp    %edx,%eax
f011baa9:	74 19                	je     f011bac4 <test_kshrink+0x678>
f011baab:	68 bc a7 12 f0       	push   $0xf012a7bc
f011bab0:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bab5:	68 2e 0e 00 00       	push   $0xe2e
f011baba:	68 7e a0 12 f0       	push   $0xf012a07e
f011babf:	e8 56 47 fe ff       	call   f010021a <_panic>

		ptr[5*Mega+4*kilo] = 10;
f011bac4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bac7:	05 00 10 50 00       	add    $0x501000,%eax
f011bacc:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f011bacf:	e8 70 1c ff ff       	call   f010d744 <sys_rcr2>
f011bad4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011bad7:	81 c2 00 10 50 00    	add    $0x501000,%edx
f011badd:	39 d0                	cmp    %edx,%eax
f011badf:	74 19                	je     f011bafa <test_kshrink+0x6ae>
f011bae1:	68 e4 a7 12 f0       	push   $0xf012a7e4
f011bae6:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011baeb:	68 31 0e 00 00       	push   $0xe31
f011baf0:	68 7e a0 12 f0       	push   $0xf012a07e
f011baf5:	e8 20 47 fe ff       	call   f010021a <_panic>

		ptr[6*Mega - kilo] = 10;
f011bafa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bafd:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f011bb02:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f011bb05:	e8 3a 1c ff ff       	call   f010d744 <sys_rcr2>
f011bb0a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011bb0d:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f011bb13:	39 d0                	cmp    %edx,%eax
f011bb15:	74 19                	je     f011bb30 <test_kshrink+0x6e4>
f011bb17:	68 10 a8 12 f0       	push   $0xf012a810
f011bb1c:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bb21:	68 34 0e 00 00       	push   $0xe34
f011bb26:	68 7e a0 12 f0       	push   $0xf012a07e
f011bb2b:	e8 ea 46 fe ff       	call   f010021a <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011bb30:	83 ec 0c             	sub    $0xc,%esp
f011bb33:	6a 00                	push   $0x0
f011bb35:	e8 1c 1c ff ff       	call   f010d756 <sys_bypassPageFault>
f011bb3a:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f011bb3d:	e8 71 17 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bb42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bb45:	e8 ff 8b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bb4a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f011bb4d:	83 ec 0c             	sub    $0xc,%esp
f011bb50:	68 00 00 20 00       	push   $0x200000
f011bb55:	e8 bc cd fe ff       	call   f0108916 <kshrink>
f011bb5a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011bb5d:	e8 e7 8b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bb62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb65:	74 19                	je     f011bb80 <test_kshrink+0x734>
f011bb67:	68 74 a6 12 f0       	push   $0xf012a674
f011bb6c:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bb71:	68 41 0e 00 00       	push   $0xe41
f011bb76:	68 7e a0 12 f0       	push   $0xf012a07e
f011bb7b:	e8 9a 46 fe ff       	call   f010021a <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f011bb80:	e8 2e 17 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bb85:	89 c2                	mov    %eax,%edx
f011bb87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bb8a:	29 c2                	sub    %eax,%edx
f011bb8c:	89 d0                	mov    %edx,%eax
f011bb8e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bb93:	74 19                	je     f011bbae <test_kshrink+0x762>
f011bb95:	68 3c a8 12 f0       	push   $0xf012a83c
f011bb9a:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bb9f:	68 42 0e 00 00       	push   $0xe42
f011bba4:	68 7e a0 12 f0       	push   $0xf012a07e
f011bba9:	e8 6c 46 fe ff       	call   f010021a <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbae:	e8 00 17 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bbb3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bbb6:	e8 8e 8b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bbbb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f011bbbe:	83 ec 0c             	sub    $0xc,%esp
f011bbc1:	68 00 00 40 00       	push   $0x400000
f011bbc6:	e8 d6 c9 fe ff       	call   f01085a1 <kmalloc>
f011bbcb:	83 c4 10             	add    $0x10,%esp
f011bbce:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f011bbd4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bbda:	83 ec 04             	sub    $0x4,%esp
f011bbdd:	68 00 90 90 f8       	push   $0xf8909000
f011bbe2:	50                   	push   %eax
f011bbe3:	68 6c a8 12 f0       	push   $0xf012a86c
f011bbe8:	e8 ae 52 fe ff       	call   f0100e9b <cprintf>
f011bbed:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f011bbf0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bbf6:	3d 00 90 90 f8       	cmp    $0xf8909000,%eax
f011bbfb:	74 17                	je     f011bc14 <test_kshrink+0x7c8>
f011bbfd:	83 ec 04             	sub    $0x4,%esp
f011bc00:	68 88 a8 12 f0       	push   $0xf012a888
f011bc05:	68 4d 0e 00 00       	push   $0xe4d
f011bc0a:	68 7e a0 12 f0       	push   $0xf012a07e
f011bc0f:	e8 06 46 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc14:	e8 30 8b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bc19:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc1c:	74 17                	je     f011bc35 <test_kshrink+0x7e9>
f011bc1e:	83 ec 04             	sub    $0x4,%esp
f011bc21:	68 64 a2 12 f0       	push   $0xf012a264
f011bc26:	68 4e 0e 00 00       	push   $0xe4e
f011bc2b:	68 7e a0 12 f0       	push   $0xf012a07e
f011bc30:	e8 e5 45 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f011bc35:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011bc38:	e8 76 16 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bc3d:	29 c3                	sub    %eax,%ebx
f011bc3f:	89 d8                	mov    %ebx,%eax
f011bc41:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bc46:	74 17                	je     f011bc5f <test_kshrink+0x813>
f011bc48:	83 ec 04             	sub    $0x4,%esp
f011bc4b:	68 cc a2 12 f0       	push   $0xf012a2cc
f011bc50:	68 4f 0e 00 00       	push   $0xe4f
f011bc55:	68 7e a0 12 f0       	push   $0xf012a07e
f011bc5a:	e8 bb 45 fe ff       	call   f010021a <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f011bc5f:	e8 4f 16 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bc64:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc67:	e8 dd 8a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bc6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011bc6f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bc75:	83 ec 0c             	sub    $0xc,%esp
f011bc78:	50                   	push   %eax
f011bc79:	e8 bb ca fe ff       	call   f0108739 <kfree>
f011bc7e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc81:	e8 c3 8a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bc86:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc89:	74 17                	je     f011bca2 <test_kshrink+0x856>
f011bc8b:	83 ec 04             	sub    $0x4,%esp
f011bc8e:	68 64 a2 12 f0       	push   $0xf012a264
f011bc93:	68 59 0e 00 00       	push   $0xe59
f011bc98:	68 7e a0 12 f0       	push   $0xf012a07e
f011bc9d:	e8 78 45 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011bca2:	e8 0c 16 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bca7:	89 c2                	mov    %eax,%edx
f011bca9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bcac:	29 c2                	sub    %eax,%edx
f011bcae:	89 d0                	mov    %edx,%eax
f011bcb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bcb5:	74 17                	je     f011bcce <test_kshrink+0x882>
f011bcb7:	83 ec 04             	sub    $0x4,%esp
f011bcba:	68 88 a5 12 f0       	push   $0xf012a588
f011bcbf:	68 5a 0e 00 00       	push   $0xe5a
f011bcc4:	68 7e a0 12 f0       	push   $0xf012a07e
f011bcc9:	e8 4c 45 fe ff       	call   f010021a <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f011bcce:	e8 e0 15 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bcd3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bcd6:	e8 6e 8a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bcdb:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f011bcde:	83 ec 0c             	sub    $0xc,%esp
f011bce1:	68 00 b0 3f 00       	push   $0x3fb000
f011bce6:	e8 2b cc fe ff       	call   f0108916 <kshrink>
f011bceb:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f011bcee:	e8 56 8a fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bcf3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcf6:	74 19                	je     f011bd11 <test_kshrink+0x8c5>
f011bcf8:	68 74 a6 12 f0       	push   $0xf012a674
f011bcfd:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bd02:	68 64 0e 00 00       	push   $0xe64
f011bd07:	68 7e a0 12 f0       	push   $0xf012a07e
f011bd0c:	e8 09 45 fe ff       	call   f010021a <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f011bd11:	e8 9d 15 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bd16:	89 c2                	mov    %eax,%edx
f011bd18:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bd1b:	29 c2                	sub    %eax,%edx
f011bd1d:	89 d0                	mov    %edx,%eax
f011bd1f:	83 f8 05             	cmp    $0x5,%eax
f011bd22:	74 19                	je     f011bd3d <test_kshrink+0x8f1>
f011bd24:	68 dc a8 12 f0       	push   $0xf012a8dc
f011bd29:	68 a5 a6 12 f0       	push   $0xf012a6a5
f011bd2e:	68 65 0e 00 00       	push   $0xe65
f011bd33:	68 7e a0 12 f0       	push   $0xf012a07e
f011bd38:	e8 dd 44 fe ff       	call   f010021a <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f011bd3d:	83 ec 0c             	sub    $0xc,%esp
f011bd40:	68 38 a6 12 f0       	push   $0xf012a638
f011bd45:	e8 51 51 fe ff       	call   f0100e9b <cprintf>
f011bd4a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011bd4d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011bd52:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bd55:	5b                   	pop    %ebx
f011bd56:	5f                   	pop    %edi
f011bd57:	5d                   	pop    %ebp
f011bd58:	c3                   	ret    

f011bd59 <test_kfreelast>:


int test_kfreelast()
{
f011bd59:	55                   	push   %ebp
f011bd5a:	89 e5                	mov    %esp,%ebp
f011bd5c:	57                   	push   %edi
f011bd5d:	53                   	push   %ebx
f011bd5e:	81 ec 30 01 00 00    	sub    $0x130,%esp
	char minByte = 1<<7;
f011bd64:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f011bd68:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f011bd6c:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f011bd72:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f011bd78:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f011bd7f:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011bd86:	e8 28 15 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bd8b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011bd8e:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f011bd94:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bd99:	b8 00 00 00 00       	mov    $0x0,%eax
f011bd9e:	89 d7                	mov    %edx,%edi
f011bda0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011bda2:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f011bda8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bdad:	b8 00 00 00 00       	mov    $0x0,%eax
f011bdb2:	89 d7                	mov    %edx,%edi
f011bdb4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011bdb6:	8d 95 d4 fe ff ff    	lea    -0x12c(%ebp),%edx
f011bdbc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bdc1:	b8 00 00 00 00       	mov    $0x0,%eax
f011bdc6:	89 d7                	mov    %edx,%edi
f011bdc8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bdca:	e8 e4 14 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bdcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bdd2:	e8 72 89 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bdd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bdda:	83 ec 0c             	sub    $0xc,%esp
f011bddd:	68 00 fc 1f 00       	push   $0x1ffc00
f011bde2:	e8 ba c7 fe ff       	call   f01085a1 <kmalloc>
f011bde7:	83 c4 10             	add    $0x10,%esp
f011bdea:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011bdf0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bdf6:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011bdfb:	74 17                	je     f011be14 <test_kfreelast+0xbb>
f011bdfd:	83 ec 04             	sub    $0x4,%esp
f011be00:	68 30 a4 12 f0       	push   $0xf012a430
f011be05:	68 89 0e 00 00       	push   $0xe89
f011be0a:	68 7e a0 12 f0       	push   $0xf012a07e
f011be0f:	e8 06 44 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be14:	e8 30 89 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011be19:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011be1c:	74 17                	je     f011be35 <test_kfreelast+0xdc>
f011be1e:	83 ec 04             	sub    $0x4,%esp
f011be21:	68 64 a2 12 f0       	push   $0xf012a264
f011be26:	68 8a 0e 00 00       	push   $0xe8a
f011be2b:	68 7e a0 12 f0       	push   $0xf012a07e
f011be30:	e8 e5 43 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011be35:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011be38:	e8 76 14 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011be3d:	29 c3                	sub    %eax,%ebx
f011be3f:	89 d8                	mov    %ebx,%eax
f011be41:	3d 00 02 00 00       	cmp    $0x200,%eax
f011be46:	74 17                	je     f011be5f <test_kfreelast+0x106>
f011be48:	83 ec 04             	sub    $0x4,%esp
f011be4b:	68 cc a2 12 f0       	push   $0xf012a2cc
f011be50:	68 8b 0e 00 00       	push   $0xe8b
f011be55:	68 7e a0 12 f0       	push   $0xf012a07e
f011be5a:	e8 bb 43 fe ff       	call   f010021a <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011be5f:	c7 85 74 ff ff ff ff 	movl   $0x1ffbff,-0x8c(%ebp)
f011be66:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011be69:	e8 45 14 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011be6e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be71:	e8 d3 88 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011be76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011be79:	83 ec 0c             	sub    $0xc,%esp
f011be7c:	68 00 fc 1f 00       	push   $0x1ffc00
f011be81:	e8 1b c7 fe ff       	call   f01085a1 <kmalloc>
f011be86:	83 c4 10             	add    $0x10,%esp
f011be89:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011be8f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011be95:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f011be9a:	74 17                	je     f011beb3 <test_kfreelast+0x15a>
f011be9c:	83 ec 04             	sub    $0x4,%esp
f011be9f:	68 30 a4 12 f0       	push   $0xf012a430
f011bea4:	68 92 0e 00 00       	push   $0xe92
f011bea9:	68 7e a0 12 f0       	push   $0xf012a07e
f011beae:	e8 67 43 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011beb3:	e8 91 88 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011beb8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011bebb:	74 17                	je     f011bed4 <test_kfreelast+0x17b>
f011bebd:	83 ec 04             	sub    $0x4,%esp
f011bec0:	68 64 a2 12 f0       	push   $0xf012a264
f011bec5:	68 93 0e 00 00       	push   $0xe93
f011beca:	68 7e a0 12 f0       	push   $0xf012a07e
f011becf:	e8 46 43 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011bed4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011bed7:	e8 d7 13 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bedc:	29 c3                	sub    %eax,%ebx
f011bede:	89 d8                	mov    %ebx,%eax
f011bee0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bee5:	74 17                	je     f011befe <test_kfreelast+0x1a5>
f011bee7:	83 ec 04             	sub    $0x4,%esp
f011beea:	68 cc a2 12 f0       	push   $0xf012a2cc
f011beef:	68 94 0e 00 00       	push   $0xe94
f011bef4:	68 7e a0 12 f0       	push   $0xf012a07e
f011bef9:	e8 1c 43 fe ff       	call   f010021a <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011befe:	c7 85 78 ff ff ff ff 	movl   $0x1ffbff,-0x88(%ebp)
f011bf05:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf08:	e8 a6 13 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bf0d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf10:	e8 34 88 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bf15:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bf18:	83 ec 0c             	sub    $0xc,%esp
f011bf1b:	68 00 08 00 00       	push   $0x800
f011bf20:	e8 7c c6 fe ff       	call   f01085a1 <kmalloc>
f011bf25:	83 c4 10             	add    $0x10,%esp
f011bf28:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011bf2e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bf34:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011bf39:	74 17                	je     f011bf52 <test_kfreelast+0x1f9>
f011bf3b:	83 ec 04             	sub    $0x4,%esp
f011bf3e:	68 30 a4 12 f0       	push   $0xf012a430
f011bf43:	68 9b 0e 00 00       	push   $0xe9b
f011bf48:	68 7e a0 12 f0       	push   $0xf012a07e
f011bf4d:	e8 c8 42 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf52:	e8 f2 87 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bf57:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011bf5a:	74 17                	je     f011bf73 <test_kfreelast+0x21a>
f011bf5c:	83 ec 04             	sub    $0x4,%esp
f011bf5f:	68 64 a2 12 f0       	push   $0xf012a264
f011bf64:	68 9c 0e 00 00       	push   $0xe9c
f011bf69:	68 7e a0 12 f0       	push   $0xf012a07e
f011bf6e:	e8 a7 42 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011bf73:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011bf76:	e8 38 13 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bf7b:	29 c3                	sub    %eax,%ebx
f011bf7d:	89 d8                	mov    %ebx,%eax
f011bf7f:	83 f8 01             	cmp    $0x1,%eax
f011bf82:	74 17                	je     f011bf9b <test_kfreelast+0x242>
f011bf84:	83 ec 04             	sub    $0x4,%esp
f011bf87:	68 cc a2 12 f0       	push   $0xf012a2cc
f011bf8c:	68 9d 0e 00 00       	push   $0xe9d
f011bf91:	68 7e a0 12 f0       	push   $0xf012a07e
f011bf96:	e8 7f 42 fe ff       	call   f010021a <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011bf9b:	c7 85 7c ff ff ff ff 	movl   $0x7ff,-0x84(%ebp)
f011bfa2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011bfa5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bfab:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011bfae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011bfb5:	eb 0e                	jmp    f011bfc5 <test_kfreelast+0x26c>
		{
			ptr[i] = 2 ;
f011bfb7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bfba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bfbd:	01 d0                	add    %edx,%eax
f011bfbf:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011bfc2:	ff 45 f4             	incl   -0xc(%ebp)
f011bfc5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bfcb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011bfce:	7f e7                	jg     f011bfb7 <test_kfreelast+0x25e>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bfd0:	e8 de 12 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011bfd5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfd8:	e8 6c 87 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011bfdd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bfe0:	83 ec 0c             	sub    $0xc,%esp
f011bfe3:	68 00 08 00 00       	push   $0x800
f011bfe8:	e8 b4 c5 fe ff       	call   f01085a1 <kmalloc>
f011bfed:	83 c4 10             	add    $0x10,%esp
f011bff0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011bff6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bffc:	3d 00 60 40 f8       	cmp    $0xf8406000,%eax
f011c001:	74 17                	je     f011c01a <test_kfreelast+0x2c1>
f011c003:	83 ec 04             	sub    $0x4,%esp
f011c006:	68 30 a4 12 f0       	push   $0xf012a430
f011c00b:	68 a9 0e 00 00       	push   $0xea9
f011c010:	68 7e a0 12 f0       	push   $0xf012a07e
f011c015:	e8 00 42 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c01a:	e8 2a 87 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c01f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c022:	74 17                	je     f011c03b <test_kfreelast+0x2e2>
f011c024:	83 ec 04             	sub    $0x4,%esp
f011c027:	68 64 a2 12 f0       	push   $0xf012a264
f011c02c:	68 aa 0e 00 00       	push   $0xeaa
f011c031:	68 7e a0 12 f0       	push   $0xf012a07e
f011c036:	e8 df 41 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c03b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c03e:	e8 70 12 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c043:	29 c3                	sub    %eax,%ebx
f011c045:	89 d8                	mov    %ebx,%eax
f011c047:	83 f8 01             	cmp    $0x1,%eax
f011c04a:	74 17                	je     f011c063 <test_kfreelast+0x30a>
f011c04c:	83 ec 04             	sub    $0x4,%esp
f011c04f:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c054:	68 ab 0e 00 00       	push   $0xeab
f011c059:	68 7e a0 12 f0       	push   $0xf012a07e
f011c05e:	e8 b7 41 fe ff       	call   f010021a <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011c063:	c7 45 80 ff 07 00 00 	movl   $0x7ff,-0x80(%ebp)
		ptr = (char*)ptr_allocations[3];
f011c06a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c070:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011c073:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c07a:	eb 0e                	jmp    f011c08a <test_kfreelast+0x331>
		{
			ptr[i] = 3 ;
f011c07c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c07f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c082:	01 d0                	add    %edx,%eax
f011c084:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011c087:	ff 45 f4             	incl   -0xc(%ebp)
f011c08a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c08d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c090:	7f ea                	jg     f011c07c <test_kfreelast+0x323>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c092:	e8 1c 12 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c097:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c09a:	e8 aa 86 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c09f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c0a2:	83 ec 0c             	sub    $0xc,%esp
f011c0a5:	68 00 1c 00 00       	push   $0x1c00
f011c0aa:	e8 f2 c4 fe ff       	call   f01085a1 <kmalloc>
f011c0af:	83 c4 10             	add    $0x10,%esp
f011c0b2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c0b8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c0be:	3d 00 70 40 f8       	cmp    $0xf8407000,%eax
f011c0c3:	74 17                	je     f011c0dc <test_kfreelast+0x383>
f011c0c5:	83 ec 04             	sub    $0x4,%esp
f011c0c8:	68 30 a4 12 f0       	push   $0xf012a430
f011c0cd:	68 b7 0e 00 00       	push   $0xeb7
f011c0d2:	68 7e a0 12 f0       	push   $0xf012a07e
f011c0d7:	e8 3e 41 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0dc:	e8 68 86 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c0e1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c0e4:	74 17                	je     f011c0fd <test_kfreelast+0x3a4>
f011c0e6:	83 ec 04             	sub    $0x4,%esp
f011c0e9:	68 64 a2 12 f0       	push   $0xf012a264
f011c0ee:	68 b8 0e 00 00       	push   $0xeb8
f011c0f3:	68 7e a0 12 f0       	push   $0xf012a07e
f011c0f8:	e8 1d 41 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c0fd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c100:	e8 ae 11 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c105:	29 c3                	sub    %eax,%ebx
f011c107:	89 d8                	mov    %ebx,%eax
f011c109:	83 f8 02             	cmp    $0x2,%eax
f011c10c:	74 17                	je     f011c125 <test_kfreelast+0x3cc>
f011c10e:	83 ec 04             	sub    $0x4,%esp
f011c111:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c116:	68 b9 0e 00 00       	push   $0xeb9
f011c11b:	68 7e a0 12 f0       	push   $0xf012a07e
f011c120:	e8 f5 40 fe ff       	call   f010021a <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011c125:	c7 45 84 ff 1b 00 00 	movl   $0x1bff,-0x7c(%ebp)
		ptr = (char*)ptr_allocations[4];
f011c12c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c132:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011c135:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c13c:	eb 0e                	jmp    f011c14c <test_kfreelast+0x3f3>
		{
			ptr[i] = 4 ;
f011c13e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c141:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c144:	01 d0                	add    %edx,%eax
f011c146:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011c149:	ff 45 f4             	incl   -0xc(%ebp)
f011c14c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c14f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c152:	7f ea                	jg     f011c13e <test_kfreelast+0x3e5>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c154:	e8 5a 11 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c159:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c15c:	e8 e8 85 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c161:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c164:	83 ec 0c             	sub    $0xc,%esp
f011c167:	68 00 fc 2f 00       	push   $0x2ffc00
f011c16c:	e8 30 c4 fe ff       	call   f01085a1 <kmalloc>
f011c171:	83 c4 10             	add    $0x10,%esp
f011c174:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c17a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c180:	3d 00 90 40 f8       	cmp    $0xf8409000,%eax
f011c185:	74 17                	je     f011c19e <test_kfreelast+0x445>
f011c187:	83 ec 04             	sub    $0x4,%esp
f011c18a:	68 30 a4 12 f0       	push   $0xf012a430
f011c18f:	68 c5 0e 00 00       	push   $0xec5
f011c194:	68 7e a0 12 f0       	push   $0xf012a07e
f011c199:	e8 7c 40 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c19e:	e8 a6 85 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c1a3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c1a6:	74 17                	je     f011c1bf <test_kfreelast+0x466>
f011c1a8:	83 ec 04             	sub    $0x4,%esp
f011c1ab:	68 64 a2 12 f0       	push   $0xf012a264
f011c1b0:	68 c6 0e 00 00       	push   $0xec6
f011c1b5:	68 7e a0 12 f0       	push   $0xf012a07e
f011c1ba:	e8 5b 40 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c1bf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c1c2:	e8 ec 10 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c1c7:	29 c3                	sub    %eax,%ebx
f011c1c9:	89 d8                	mov    %ebx,%eax
f011c1cb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c1d0:	74 17                	je     f011c1e9 <test_kfreelast+0x490>
f011c1d2:	83 ec 04             	sub    $0x4,%esp
f011c1d5:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c1da:	68 c7 0e 00 00       	push   $0xec7
f011c1df:	68 7e a0 12 f0       	push   $0xf012a07e
f011c1e4:	e8 31 40 fe ff       	call   f010021a <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011c1e9:	c7 45 88 ff fb 2f 00 	movl   $0x2ffbff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[5];
f011c1f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c1f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011c1f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c200:	eb 0e                	jmp    f011c210 <test_kfreelast+0x4b7>
		{
			ptr[i] = 5 ;
f011c202:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c205:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c208:	01 d0                	add    %edx,%eax
f011c20a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011c20d:	ff 45 f4             	incl   -0xc(%ebp)
f011c210:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c213:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c216:	7f ea                	jg     f011c202 <test_kfreelast+0x4a9>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c218:	e8 96 10 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c21d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c220:	e8 24 85 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c225:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011c228:	83 ec 0c             	sub    $0xc,%esp
f011c22b:	68 00 fc 5f 00       	push   $0x5ffc00
f011c230:	e8 6c c3 fe ff       	call   f01085a1 <kmalloc>
f011c235:	83 c4 10             	add    $0x10,%esp
f011c238:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c23e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c244:	3d 00 90 70 f8       	cmp    $0xf8709000,%eax
f011c249:	74 17                	je     f011c262 <test_kfreelast+0x509>
f011c24b:	83 ec 04             	sub    $0x4,%esp
f011c24e:	68 30 a4 12 f0       	push   $0xf012a430
f011c253:	68 d3 0e 00 00       	push   $0xed3
f011c258:	68 7e a0 12 f0       	push   $0xf012a07e
f011c25d:	e8 b8 3f fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c262:	e8 e2 84 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c267:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c26a:	74 17                	je     f011c283 <test_kfreelast+0x52a>
f011c26c:	83 ec 04             	sub    $0x4,%esp
f011c26f:	68 64 a2 12 f0       	push   $0xf012a264
f011c274:	68 d4 0e 00 00       	push   $0xed4
f011c279:	68 7e a0 12 f0       	push   $0xf012a07e
f011c27e:	e8 97 3f fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c283:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c286:	e8 28 10 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c28b:	29 c3                	sub    %eax,%ebx
f011c28d:	89 d8                	mov    %ebx,%eax
f011c28f:	3d 00 06 00 00       	cmp    $0x600,%eax
f011c294:	74 17                	je     f011c2ad <test_kfreelast+0x554>
f011c296:	83 ec 04             	sub    $0x4,%esp
f011c299:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c29e:	68 d5 0e 00 00       	push   $0xed5
f011c2a3:	68 7e a0 12 f0       	push   $0xf012a07e
f011c2a8:	e8 6d 3f fe ff       	call   f010021a <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011c2ad:	c7 45 8c ff fb 5f 00 	movl   $0x5ffbff,-0x74(%ebp)

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011c2b4:	e8 fa 0f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c2b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c2bc:	e8 88 84 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c2c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011c2c4:	83 ec 0c             	sub    $0xc,%esp
f011c2c7:	68 00 38 00 00       	push   $0x3800
f011c2cc:	e8 d0 c2 fe ff       	call   f01085a1 <kmalloc>
f011c2d1:	83 c4 10             	add    $0x10,%esp
f011c2d4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c2da:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c2e0:	3d 00 90 d0 f8       	cmp    $0xf8d09000,%eax
f011c2e5:	74 17                	je     f011c2fe <test_kfreelast+0x5a5>
f011c2e7:	83 ec 04             	sub    $0x4,%esp
f011c2ea:	68 30 a4 12 f0       	push   $0xf012a430
f011c2ef:	68 dc 0e 00 00       	push   $0xedc
f011c2f4:	68 7e a0 12 f0       	push   $0xf012a07e
f011c2f9:	e8 1c 3f fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2fe:	e8 46 84 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c303:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c306:	74 17                	je     f011c31f <test_kfreelast+0x5c6>
f011c308:	83 ec 04             	sub    $0x4,%esp
f011c30b:	68 64 a2 12 f0       	push   $0xf012a264
f011c310:	68 dd 0e 00 00       	push   $0xedd
f011c315:	68 7e a0 12 f0       	push   $0xf012a07e
f011c31a:	e8 fb 3e fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c31f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c322:	e8 8c 0f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c327:	29 c3                	sub    %eax,%ebx
f011c329:	89 d8                	mov    %ebx,%eax
f011c32b:	83 f8 04             	cmp    $0x4,%eax
f011c32e:	74 17                	je     f011c347 <test_kfreelast+0x5ee>
f011c330:	83 ec 04             	sub    $0x4,%esp
f011c333:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c338:	68 de 0e 00 00       	push   $0xede
f011c33d:	68 7e a0 12 f0       	push   $0xf012a07e
f011c342:	e8 d3 3e fe ff       	call   f010021a <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011c347:	c7 45 90 ff 37 00 00 	movl   $0x37ff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[7];
f011c34e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c354:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011c357:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c35e:	eb 0e                	jmp    f011c36e <test_kfreelast+0x615>
		{
			ptr[i] = 7 ;
f011c360:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c363:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c366:	01 d0                	add    %edx,%eax
f011c368:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011c36b:	ff 45 f4             	incl   -0xc(%ebp)
f011c36e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c371:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c374:	7f ea                	jg     f011c360 <test_kfreelast+0x607>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011c376:	e8 38 0f ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c37b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011c37e:	e8 c6 83 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c383:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[0]);
f011c386:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c38c:	83 ec 0c             	sub    $0xc,%esp
f011c38f:	50                   	push   %eax
f011c390:	e8 a4 c3 fe ff       	call   f0108739 <kfree>
f011c395:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c398:	e8 ac 83 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c39d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c3a0:	74 17                	je     f011c3b9 <test_kfreelast+0x660>
f011c3a2:	83 ec 04             	sub    $0x4,%esp
f011c3a5:	68 64 a2 12 f0       	push   $0xf012a264
f011c3aa:	68 ed 0e 00 00       	push   $0xeed
f011c3af:	68 7e a0 12 f0       	push   $0xf012a07e
f011c3b4:	e8 61 3e fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011c3b9:	e8 f5 0e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c3be:	89 c2                	mov    %eax,%edx
f011c3c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c3c3:	29 c2                	sub    %eax,%edx
f011c3c5:	89 d0                	mov    %edx,%eax
f011c3c7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3cc:	74 17                	je     f011c3e5 <test_kfreelast+0x68c>
f011c3ce:	83 ec 04             	sub    $0x4,%esp
f011c3d1:	68 80 a4 12 f0       	push   $0xf012a480
f011c3d6:	68 ee 0e 00 00       	push   $0xeee
f011c3db:	68 7e a0 12 f0       	push   $0xf012a07e
f011c3e0:	e8 35 3e fe ff       	call   f010021a <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3e5:	e8 c9 0e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c3ea:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3ed:	e8 57 83 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c3f2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[1]);
f011c3f5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c3fb:	83 ec 0c             	sub    $0xc,%esp
f011c3fe:	50                   	push   %eax
f011c3ff:	e8 35 c3 fe ff       	call   f0108739 <kfree>
f011c404:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c407:	e8 3d 83 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c40c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c40f:	74 17                	je     f011c428 <test_kfreelast+0x6cf>
f011c411:	83 ec 04             	sub    $0x4,%esp
f011c414:	68 64 a2 12 f0       	push   $0xf012a264
f011c419:	68 f4 0e 00 00       	push   $0xef4
f011c41e:	68 7e a0 12 f0       	push   $0xf012a07e
f011c423:	e8 f2 3d fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011c428:	e8 86 0e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c42d:	89 c2                	mov    %eax,%edx
f011c42f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c432:	29 c2                	sub    %eax,%edx
f011c434:	89 d0                	mov    %edx,%eax
f011c436:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c43b:	74 17                	je     f011c454 <test_kfreelast+0x6fb>
f011c43d:	83 ec 04             	sub    $0x4,%esp
f011c440:	68 80 a4 12 f0       	push   $0xf012a480
f011c445:	68 f5 0e 00 00       	push   $0xef5
f011c44a:	68 7e a0 12 f0       	push   $0xf012a07e
f011c44f:	e8 c6 3d fe ff       	call   f010021a <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c454:	e8 5a 0e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c459:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c45c:	e8 e8 82 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c461:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[6]);
f011c464:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c46a:	83 ec 0c             	sub    $0xc,%esp
f011c46d:	50                   	push   %eax
f011c46e:	e8 c6 c2 fe ff       	call   f0108739 <kfree>
f011c473:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c476:	e8 ce 82 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c47b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c47e:	74 17                	je     f011c497 <test_kfreelast+0x73e>
f011c480:	83 ec 04             	sub    $0x4,%esp
f011c483:	68 64 a2 12 f0       	push   $0xf012a264
f011c488:	68 fb 0e 00 00       	push   $0xefb
f011c48d:	68 7e a0 12 f0       	push   $0xf012a07e
f011c492:	e8 83 3d fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011c497:	e8 17 0e ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c49c:	89 c2                	mov    %eax,%edx
f011c49e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c4a1:	29 c2                	sub    %eax,%edx
f011c4a3:	89 d0                	mov    %edx,%eax
f011c4a5:	3d 00 06 00 00       	cmp    $0x600,%eax
f011c4aa:	74 17                	je     f011c4c3 <test_kfreelast+0x76a>
f011c4ac:	83 ec 04             	sub    $0x4,%esp
f011c4af:	68 80 a4 12 f0       	push   $0xf012a480
f011c4b4:	68 fc 0e 00 00       	push   $0xefc
f011c4b9:	68 7e a0 12 f0       	push   $0xf012a07e
f011c4be:	e8 57 3d fe ff       	call   f010021a <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f011c4c3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c4c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011c4cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c4d3:	eb 1e                	jmp    f011c4f3 <test_kfreelast+0x79a>
		{
			sums[2] += ptr[i] ;
f011c4d5:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011c4db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c4de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c4e1:	01 c8                	add    %ecx,%eax
f011c4e3:	8a 00                	mov    (%eax),%al
f011c4e5:	0f be c0             	movsbl %al,%eax
f011c4e8:	01 d0                	add    %edx,%eax
f011c4ea:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011c4f0:	ff 45 f4             	incl   -0xc(%ebp)
f011c4f3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c4f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c4fc:	7f d7                	jg     f011c4d5 <test_kfreelast+0x77c>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011c4fe:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011c504:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c50a:	01 c0                	add    %eax,%eax
f011c50c:	39 c2                	cmp    %eax,%edx
f011c50e:	74 17                	je     f011c527 <test_kfreelast+0x7ce>
f011c510:	83 ec 04             	sub    $0x4,%esp
f011c513:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011c518:	68 07 0f 00 00       	push   $0xf07
f011c51d:	68 7e a0 12 f0       	push   $0xf012a07e
f011c522:	e8 f3 3c fe ff       	call   f010021a <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f011c527:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c52d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011c530:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c537:	eb 1e                	jmp    f011c557 <test_kfreelast+0x7fe>
		{
			sums[3] += ptr[i] ;
f011c539:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011c53f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c542:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c545:	01 c8                	add    %ecx,%eax
f011c547:	8a 00                	mov    (%eax),%al
f011c549:	0f be c0             	movsbl %al,%eax
f011c54c:	01 d0                	add    %edx,%eax
f011c54e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011c554:	ff 45 f4             	incl   -0xc(%ebp)
f011c557:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c55a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c55d:	7f da                	jg     f011c539 <test_kfreelast+0x7e0>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011c55f:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011c565:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c568:	89 c1                	mov    %eax,%ecx
f011c56a:	01 c9                	add    %ecx,%ecx
f011c56c:	01 c8                	add    %ecx,%eax
f011c56e:	39 c2                	cmp    %eax,%edx
f011c570:	74 17                	je     f011c589 <test_kfreelast+0x830>
f011c572:	83 ec 04             	sub    $0x4,%esp
f011c575:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011c57a:	68 0f 0f 00 00       	push   $0xf0f
f011c57f:	68 7e a0 12 f0       	push   $0xf012a07e
f011c584:	e8 91 3c fe ff       	call   f010021a <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011c589:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c58f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011c592:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c599:	eb 1e                	jmp    f011c5b9 <test_kfreelast+0x860>
		{
			sums[4] += ptr[i] ;
f011c59b:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011c5a1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c5a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c5a7:	01 c8                	add    %ecx,%eax
f011c5a9:	8a 00                	mov    (%eax),%al
f011c5ab:	0f be c0             	movsbl %al,%eax
f011c5ae:	01 d0                	add    %edx,%eax
f011c5b0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011c5b6:	ff 45 f4             	incl   -0xc(%ebp)
f011c5b9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c5bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c5bf:	7f da                	jg     f011c59b <test_kfreelast+0x842>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011c5c1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c5c7:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011c5ca:	c1 e2 02             	shl    $0x2,%edx
f011c5cd:	39 d0                	cmp    %edx,%eax
f011c5cf:	74 17                	je     f011c5e8 <test_kfreelast+0x88f>
f011c5d1:	83 ec 04             	sub    $0x4,%esp
f011c5d4:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011c5d9:	68 17 0f 00 00       	push   $0xf17
f011c5de:	68 7e a0 12 f0       	push   $0xf012a07e
f011c5e3:	e8 32 3c fe ff       	call   f010021a <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011c5e8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c5ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011c5f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c5f8:	eb 1e                	jmp    f011c618 <test_kfreelast+0x8bf>
		{
			sums[5] += ptr[i] ;
f011c5fa:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f011c600:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c603:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c606:	01 c8                	add    %ecx,%eax
f011c608:	8a 00                	mov    (%eax),%al
f011c60a:	0f be c0             	movsbl %al,%eax
f011c60d:	01 d0                	add    %edx,%eax
f011c60f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011c615:	ff 45 f4             	incl   -0xc(%ebp)
f011c618:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c61b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c61e:	7f da                	jg     f011c5fa <test_kfreelast+0x8a1>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011c620:	8b 8d 38 ff ff ff    	mov    -0xc8(%ebp),%ecx
f011c626:	8b 55 88             	mov    -0x78(%ebp),%edx
f011c629:	89 d0                	mov    %edx,%eax
f011c62b:	c1 e0 02             	shl    $0x2,%eax
f011c62e:	01 d0                	add    %edx,%eax
f011c630:	39 c1                	cmp    %eax,%ecx
f011c632:	74 17                	je     f011c64b <test_kfreelast+0x8f2>
f011c634:	83 ec 04             	sub    $0x4,%esp
f011c637:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011c63c:	68 1f 0f 00 00       	push   $0xf1f
f011c641:	68 7e a0 12 f0       	push   $0xf012a07e
f011c646:	e8 cf 3b fe ff       	call   f010021a <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011c64b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c651:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011c654:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c65b:	eb 1e                	jmp    f011c67b <test_kfreelast+0x922>
		{
			sums[7] += ptr[i] ;
f011c65d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011c663:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c666:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c669:	01 c8                	add    %ecx,%eax
f011c66b:	8a 00                	mov    (%eax),%al
f011c66d:	0f be c0             	movsbl %al,%eax
f011c670:	01 d0                	add    %edx,%eax
f011c672:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011c678:	ff 45 f4             	incl   -0xc(%ebp)
f011c67b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c67e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c681:	7f da                	jg     f011c65d <test_kfreelast+0x904>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011c683:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f011c689:	8b 55 90             	mov    -0x70(%ebp),%edx
f011c68c:	89 d0                	mov    %edx,%eax
f011c68e:	01 c0                	add    %eax,%eax
f011c690:	01 d0                	add    %edx,%eax
f011c692:	01 c0                	add    %eax,%eax
f011c694:	01 d0                	add    %edx,%eax
f011c696:	39 c1                	cmp    %eax,%ecx
f011c698:	74 17                	je     f011c6b1 <test_kfreelast+0x958>
f011c69a:	83 ec 04             	sub    $0x4,%esp
f011c69d:	68 b8 a4 12 f0       	push   $0xf012a4b8
f011c6a2:	68 27 0f 00 00       	push   $0xf27
f011c6a7:	68 7e a0 12 f0       	push   $0xf012a07e
f011c6ac:	e8 69 3b fe ff       	call   f010021a <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011c6b1:	e8 fd 0b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c6b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6b9:	e8 8b 80 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c6be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011c6c1:	83 ec 0c             	sub    $0xc,%esp
f011c6c4:	68 00 50 00 00       	push   $0x5000
f011c6c9:	e8 d3 be fe ff       	call   f01085a1 <kmalloc>
f011c6ce:	83 c4 10             	add    $0x10,%esp
f011c6d1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c6d7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c6dd:	3d 00 d0 d0 f8       	cmp    $0xf8d0d000,%eax
f011c6e2:	74 17                	je     f011c6fb <test_kfreelast+0x9a2>
f011c6e4:	83 ec 04             	sub    $0x4,%esp
f011c6e7:	68 30 a4 12 f0       	push   $0xf012a430
f011c6ec:	68 30 0f 00 00       	push   $0xf30
f011c6f1:	68 7e a0 12 f0       	push   $0xf012a07e
f011c6f6:	e8 1f 3b fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6fb:	e8 49 80 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c700:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c703:	74 17                	je     f011c71c <test_kfreelast+0x9c3>
f011c705:	83 ec 04             	sub    $0x4,%esp
f011c708:	68 64 a2 12 f0       	push   $0xf012a264
f011c70d:	68 31 0f 00 00       	push   $0xf31
f011c712:	68 7e a0 12 f0       	push   $0xf012a07e
f011c717:	e8 fe 3a fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c71c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c71f:	e8 8f 0b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c724:	29 c3                	sub    %eax,%ebx
f011c726:	89 d8                	mov    %ebx,%eax
f011c728:	83 f8 05             	cmp    $0x5,%eax
f011c72b:	74 17                	je     f011c744 <test_kfreelast+0x9eb>
f011c72d:	83 ec 04             	sub    $0x4,%esp
f011c730:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c735:	68 32 0f 00 00       	push   $0xf32
f011c73a:	68 7e a0 12 f0       	push   $0xf012a07e
f011c73f:	e8 d6 3a fe ff       	call   f010021a <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011c744:	c7 45 94 ff 4f 00 00 	movl   $0x4fff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[8];
f011c74b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c751:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011c754:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c75b:	eb 0e                	jmp    f011c76b <test_kfreelast+0xa12>
		{
			ptr[i] = 8 ;
f011c75d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c760:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c763:	01 d0                	add    %edx,%eax
f011c765:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011c768:	ff 45 f4             	incl   -0xc(%ebp)
f011c76b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c76e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c771:	7f ea                	jg     f011c75d <test_kfreelast+0xa04>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c773:	e8 3b 0b ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c778:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c77b:	e8 c9 7f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c780:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011c783:	83 ec 0c             	sub    $0xc,%esp
f011c786:	68 00 00 10 00       	push   $0x100000
f011c78b:	e8 11 be fe ff       	call   f01085a1 <kmalloc>
f011c790:	83 c4 10             	add    $0x10,%esp
f011c793:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c799:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c79f:	3d 00 20 d1 f8       	cmp    $0xf8d12000,%eax
f011c7a4:	74 17                	je     f011c7bd <test_kfreelast+0xa64>
f011c7a6:	83 ec 04             	sub    $0x4,%esp
f011c7a9:	68 30 a4 12 f0       	push   $0xf012a430
f011c7ae:	68 3e 0f 00 00       	push   $0xf3e
f011c7b3:	68 7e a0 12 f0       	push   $0xf012a07e
f011c7b8:	e8 5d 3a fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7bd:	e8 87 7f fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c7c2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c7c5:	74 17                	je     f011c7de <test_kfreelast+0xa85>
f011c7c7:	83 ec 04             	sub    $0x4,%esp
f011c7ca:	68 64 a2 12 f0       	push   $0xf012a264
f011c7cf:	68 3f 0f 00 00       	push   $0xf3f
f011c7d4:	68 7e a0 12 f0       	push   $0xf012a07e
f011c7d9:	e8 3c 3a fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c7de:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c7e1:	e8 cd 0a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c7e6:	29 c3                	sub    %eax,%ebx
f011c7e8:	89 d8                	mov    %ebx,%eax
f011c7ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7ef:	74 17                	je     f011c808 <test_kfreelast+0xaaf>
f011c7f1:	83 ec 04             	sub    $0x4,%esp
f011c7f4:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c7f9:	68 40 0f 00 00       	push   $0xf40
f011c7fe:	68 7e a0 12 f0       	push   $0xf012a07e
f011c803:	e8 12 3a fe ff       	call   f010021a <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011c808:	c7 45 98 ff ff 0f 00 	movl   $0xfffff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[9];
f011c80f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c815:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011c818:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c81f:	eb 0e                	jmp    f011c82f <test_kfreelast+0xad6>
		{
			ptr[i] = 9 ;
f011c821:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c824:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c827:	01 d0                	add    %edx,%eax
f011c829:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011c82c:	ff 45 f4             	incl   -0xc(%ebp)
f011c82f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c832:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c835:	7f ea                	jg     f011c821 <test_kfreelast+0xac8>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f011c837:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c83e:	e8 70 0a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c843:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c846:	e8 fe 7e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c84b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f011c84e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c854:	83 ec 0c             	sub    $0xc,%esp
f011c857:	50                   	push   %eax
f011c858:	e8 dc be fe ff       	call   f0108739 <kfree>
f011c85d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c860:	e8 e4 7e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c865:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c868:	74 17                	je     f011c881 <test_kfreelast+0xb28>
f011c86a:	83 ec 04             	sub    $0x4,%esp
f011c86d:	68 64 a2 12 f0       	push   $0xf012a264
f011c872:	68 50 0f 00 00       	push   $0xf50
f011c877:	68 7e a0 12 f0       	push   $0xf012a07e
f011c87c:	e8 99 39 fe ff       	call   f010021a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011c881:	e8 2d 0a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c886:	89 c2                	mov    %eax,%edx
f011c888:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c88b:	29 c2                	sub    %eax,%edx
f011c88d:	89 d0                	mov    %edx,%eax
f011c88f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c894:	74 17                	je     f011c8ad <test_kfreelast+0xb54>
f011c896:	83 ec 04             	sub    $0x4,%esp
f011c899:	68 80 a4 12 f0       	push   $0xf012a480
f011c89e:	68 51 0f 00 00       	push   $0xf51
f011c8a3:	68 7e a0 12 f0       	push   $0xf012a07e
f011c8a8:	e8 6d 39 fe ff       	call   f010021a <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f011c8ad:	e8 01 0a ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c8b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8b5:	e8 8f 7e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c8ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f011c8bd:	83 ec 0c             	sub    $0xc,%esp
f011c8c0:	68 00 78 00 00       	push   $0x7800
f011c8c5:	e8 d7 bc fe ff       	call   f01085a1 <kmalloc>
f011c8ca:	83 c4 10             	add    $0x10,%esp
f011c8cd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c8d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c8d9:	3d 00 20 d1 f8       	cmp    $0xf8d12000,%eax
f011c8de:	74 17                	je     f011c8f7 <test_kfreelast+0xb9e>
f011c8e0:	83 ec 04             	sub    $0x4,%esp
f011c8e3:	68 30 a4 12 f0       	push   $0xf012a430
f011c8e8:	68 5a 0f 00 00       	push   $0xf5a
f011c8ed:	68 7e a0 12 f0       	push   $0xf012a07e
f011c8f2:	e8 23 39 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8f7:	e8 4d 7e fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c8fc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c8ff:	74 17                	je     f011c918 <test_kfreelast+0xbbf>
f011c901:	83 ec 04             	sub    $0x4,%esp
f011c904:	68 64 a2 12 f0       	push   $0xf012a264
f011c909:	68 5b 0f 00 00       	push   $0xf5b
f011c90e:	68 7e a0 12 f0       	push   $0xf012a07e
f011c913:	e8 02 39 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c918:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c91b:	e8 93 09 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c920:	29 c3                	sub    %eax,%ebx
f011c922:	89 d8                	mov    %ebx,%eax
f011c924:	83 f8 08             	cmp    $0x8,%eax
f011c927:	74 17                	je     f011c940 <test_kfreelast+0xbe7>
f011c929:	83 ec 04             	sub    $0x4,%esp
f011c92c:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c931:	68 5c 0f 00 00       	push   $0xf5c
f011c936:	68 7e a0 12 f0       	push   $0xf012a07e
f011c93b:	e8 da 38 fe ff       	call   f010021a <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f011c940:	c7 45 9c ff 77 00 00 	movl   $0x77ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[10];
f011c947:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c94d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011c950:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c957:	eb 0e                	jmp    f011c967 <test_kfreelast+0xc0e>
		{
			ptr[i] = 10 ;
f011c959:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c95c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c95f:	01 d0                	add    %edx,%eax
f011c961:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011c964:	ff 45 f4             	incl   -0xc(%ebp)
f011c967:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c96a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c96d:	7f ea                	jg     f011c959 <test_kfreelast+0xc00>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c96f:	e8 3f 09 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c974:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c977:	e8 cd 7d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c97c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f011c97f:	83 ec 0c             	sub    $0xc,%esp
f011c982:	68 00 00 10 00       	push   $0x100000
f011c987:	e8 15 bc fe ff       	call   f01085a1 <kmalloc>
f011c98c:	83 c4 10             	add    $0x10,%esp
f011c98f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
f011c995:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c99b:	3d 00 a0 d1 f8       	cmp    $0xf8d1a000,%eax
f011c9a0:	74 17                	je     f011c9b9 <test_kfreelast+0xc60>
f011c9a2:	83 ec 04             	sub    $0x4,%esp
f011c9a5:	68 30 a4 12 f0       	push   $0xf012a430
f011c9aa:	68 68 0f 00 00       	push   $0xf68
f011c9af:	68 7e a0 12 f0       	push   $0xf012a07e
f011c9b4:	e8 61 38 fe ff       	call   f010021a <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9b9:	e8 8b 7d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011c9be:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011c9c1:	74 17                	je     f011c9da <test_kfreelast+0xc81>
f011c9c3:	83 ec 04             	sub    $0x4,%esp
f011c9c6:	68 64 a2 12 f0       	push   $0xf012a264
f011c9cb:	68 69 0f 00 00       	push   $0xf69
f011c9d0:	68 7e a0 12 f0       	push   $0xf012a07e
f011c9d5:	e8 40 38 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c9da:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011c9dd:	e8 d1 08 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011c9e2:	29 c3                	sub    %eax,%ebx
f011c9e4:	89 d8                	mov    %ebx,%eax
f011c9e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c9eb:	74 17                	je     f011ca04 <test_kfreelast+0xcab>
f011c9ed:	83 ec 04             	sub    $0x4,%esp
f011c9f0:	68 cc a2 12 f0       	push   $0xf012a2cc
f011c9f5:	68 6a 0f 00 00       	push   $0xf6a
f011c9fa:	68 7e a0 12 f0       	push   $0xf012a07e
f011c9ff:	e8 16 38 fe ff       	call   f010021a <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f011ca04:	c7 45 a0 ff ff 0f 00 	movl   $0xfffff,-0x60(%ebp)
		ptr = (char*)ptr_allocations[11];
f011ca0b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ca11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011ca14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ca1b:	eb 0e                	jmp    f011ca2b <test_kfreelast+0xcd2>
		{
			ptr[i] = 11 ;
f011ca1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ca23:	01 d0                	add    %edx,%eax
f011ca25:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011ca28:	ff 45 f4             	incl   -0xc(%ebp)
f011ca2b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ca2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ca31:	7f ea                	jg     f011ca1d <test_kfreelast+0xcc4>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f011ca33:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f011ca37:	83 ec 08             	sub    $0x8,%esp
f011ca3a:	ff 75 f0             	pushl  -0x10(%ebp)
f011ca3d:	68 0c a9 12 f0       	push   $0xf012a90c
f011ca42:	e8 54 44 fe ff       	call   f0100e9b <cprintf>
f011ca47:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f011ca4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca51:	e8 5d 08 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ca56:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca59:	e8 eb 7c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ca5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f011ca61:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ca67:	83 ec 0c             	sub    $0xc,%esp
f011ca6a:	50                   	push   %eax
f011ca6b:	e8 c9 bc fe ff       	call   f0108739 <kfree>
f011ca70:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011ca73:	e8 d1 7c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ca78:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011ca7b:	74 1d                	je     f011ca9a <test_kfreelast+0xd41>
f011ca7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ca81:	75 17                	jne    f011ca9a <test_kfreelast+0xd41>
f011ca83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ca8a:	83 ec 0c             	sub    $0xc,%esp
f011ca8d:	68 34 a9 12 f0       	push   $0xf012a934
f011ca92:	e8 04 44 fe ff       	call   f0100e9b <cprintf>
f011ca97:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011ca9a:	e8 14 08 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ca9f:	89 c2                	mov    %eax,%edx
f011caa1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011caa4:	29 c2                	sub    %eax,%edx
f011caa6:	89 d0                	mov    %edx,%eax
f011caa8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011caad:	74 1d                	je     f011cacc <test_kfreelast+0xd73>
f011caaf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cab3:	75 17                	jne    f011cacc <test_kfreelast+0xd73>
f011cab5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cabc:	83 ec 0c             	sub    $0xc,%esp
f011cabf:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011cac4:	e8 d2 43 fe ff       	call   f0100e9b <cprintf>
f011cac9:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f011cacc:	e8 e2 07 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cad1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cad4:	e8 70 7c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cad9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f011cadc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cae2:	83 ec 0c             	sub    $0xc,%esp
f011cae5:	50                   	push   %eax
f011cae6:	e8 4e bc fe ff       	call   f0108739 <kfree>
f011caeb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011caee:	e8 56 7c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011caf3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011caf6:	74 1d                	je     f011cb15 <test_kfreelast+0xdbc>
f011caf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cafc:	75 17                	jne    f011cb15 <test_kfreelast+0xdbc>
f011cafe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cb05:	83 ec 0c             	sub    $0xc,%esp
f011cb08:	68 34 a9 12 f0       	push   $0xf012a934
f011cb0d:	e8 89 43 fe ff       	call   f0100e9b <cprintf>
f011cb12:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011cb15:	e8 99 07 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cb1a:	89 c2                	mov    %eax,%edx
f011cb1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cb1f:	29 c2                	sub    %eax,%edx
f011cb21:	89 d0                	mov    %edx,%eax
f011cb23:	83 f8 08             	cmp    $0x8,%eax
f011cb26:	74 1d                	je     f011cb45 <test_kfreelast+0xdec>
f011cb28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cb2c:	75 17                	jne    f011cb45 <test_kfreelast+0xdec>
f011cb2e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cb35:	83 ec 0c             	sub    $0xc,%esp
f011cb38:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011cb3d:	e8 59 43 fe ff       	call   f0100e9b <cprintf>
f011cb42:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f011cb45:	e8 69 07 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cb4a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb4d:	e8 f7 7b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cb52:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f011cb55:	83 ec 0c             	sub    $0xc,%esp
f011cb58:	68 00 28 00 00       	push   $0x2800
f011cb5d:	e8 3f ba fe ff       	call   f01085a1 <kmalloc>
f011cb62:	83 c4 10             	add    $0x10,%esp
f011cb65:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
f011cb6b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cb71:	3d 00 20 d1 f8       	cmp    $0xf8d12000,%eax
f011cb76:	74 1d                	je     f011cb95 <test_kfreelast+0xe3c>
f011cb78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cb7c:	75 17                	jne    f011cb95 <test_kfreelast+0xe3c>
f011cb7e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cb85:	83 ec 0c             	sub    $0xc,%esp
f011cb88:	68 d8 a9 12 f0       	push   $0xf012a9d8
f011cb8d:	e8 09 43 fe ff       	call   f0100e9b <cprintf>
f011cb92:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011cb95:	e8 af 7b fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cb9a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011cb9d:	74 1d                	je     f011cbbc <test_kfreelast+0xe63>
f011cb9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cba3:	75 17                	jne    f011cbbc <test_kfreelast+0xe63>
f011cba5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cbac:	83 ec 0c             	sub    $0xc,%esp
f011cbaf:	68 34 a9 12 f0       	push   $0xf012a934
f011cbb4:	e8 e2 42 fe ff       	call   f0100e9b <cprintf>
f011cbb9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f011cbbc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011cbbf:	e8 ef 06 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cbc4:	29 c3                	sub    %eax,%ebx
f011cbc6:	89 d8                	mov    %ebx,%eax
f011cbc8:	83 f8 03             	cmp    $0x3,%eax
f011cbcb:	74 1d                	je     f011cbea <test_kfreelast+0xe91>
f011cbcd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cbd1:	75 17                	jne    f011cbea <test_kfreelast+0xe91>
f011cbd3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cbda:	83 ec 0c             	sub    $0xc,%esp
f011cbdd:	68 28 aa 12 f0       	push   $0xf012aa28
f011cbe2:	e8 b4 42 fe ff       	call   f0100e9b <cprintf>
f011cbe7:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f011cbea:	c7 45 a4 ff 27 00 00 	movl   $0x27ff,-0x5c(%ebp)
		ptr = (char*)ptr_allocations[12];
f011cbf1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cbf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011cbfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cc01:	eb 0e                	jmp    f011cc11 <test_kfreelast+0xeb8>
		{
			ptr[i] = 12 ;
f011cc03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc06:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cc09:	01 d0                	add    %edx,%eax
f011cc0b:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011cc0e:	ff 45 f4             	incl   -0xc(%ebp)
f011cc11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cc14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cc17:	7f ea                	jg     f011cc03 <test_kfreelast+0xeaa>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f011cc19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cc1d:	75 17                	jne    f011cc36 <test_kfreelast+0xedd>
f011cc1f:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f011cc23:	83 ec 08             	sub    $0x8,%esp
f011cc26:	ff 75 f0             	pushl  -0x10(%ebp)
f011cc29:	68 0c a9 12 f0       	push   $0xf012a90c
f011cc2e:	e8 68 42 fe ff       	call   f0100e9b <cprintf>
f011cc33:	83 c4 10             	add    $0x10,%esp
f011cc36:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f011cc3d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cc43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011cc46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cc4d:	eb 1e                	jmp    f011cc6d <test_kfreelast+0xf14>
		{
			sums[12] += ptr[i] ;
f011cc4f:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f011cc55:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011cc58:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cc5b:	01 c8                	add    %ecx,%eax
f011cc5d:	8a 00                	mov    (%eax),%al
f011cc5f:	0f be c0             	movsbl %al,%eax
f011cc62:	01 d0                	add    %edx,%eax
f011cc64:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011cc6a:	ff 45 f4             	incl   -0xc(%ebp)
f011cc6d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cc70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cc73:	7f da                	jg     f011cc4f <test_kfreelast+0xef6>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f011cc75:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f011cc7b:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f011cc7e:	89 d0                	mov    %edx,%eax
f011cc80:	01 c0                	add    %eax,%eax
f011cc82:	01 d0                	add    %edx,%eax
f011cc84:	c1 e0 02             	shl    $0x2,%eax
f011cc87:	39 c1                	cmp    %eax,%ecx
f011cc89:	74 1d                	je     f011cca8 <test_kfreelast+0xf4f>
f011cc8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cc8f:	75 17                	jne    f011cca8 <test_kfreelast+0xf4f>
f011cc91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cc98:	83 ec 0c             	sub    $0xc,%esp
f011cc9b:	68 6c aa 12 f0       	push   $0xf012aa6c
f011cca0:	e8 f6 41 fe ff       	call   f0100e9b <cprintf>
f011cca5:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011cca8:	83 ec 0c             	sub    $0xc,%esp
f011ccab:	6a 03                	push   $0x3
f011ccad:	e8 a4 0a ff ff       	call   f010d756 <sys_bypassPageFault>
f011ccb2:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f011ccb5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ccbb:	05 00 30 00 00       	add    $0x3000,%eax
f011ccc0:	89 45 cc             	mov    %eax,-0x34(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f011ccc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ccca:	eb 3c                	jmp    f011cd08 <test_kfreelast+0xfaf>
		{
			ptr[i] = 10;
f011cccc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cccf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ccd2:	01 d0                	add    %edx,%eax
f011ccd4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f011ccd7:	e8 68 0a ff ff       	call   f010d744 <sys_rcr2>
f011ccdc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ccdf:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011cce2:	01 ca                	add    %ecx,%edx
f011cce4:	39 d0                	cmp    %edx,%eax
f011cce6:	74 1d                	je     f011cd05 <test_kfreelast+0xfac>
f011cce8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ccec:	75 17                	jne    f011cd05 <test_kfreelast+0xfac>
f011ccee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ccf5:	83 ec 0c             	sub    $0xc,%esp
f011ccf8:	68 a0 aa 12 f0       	push   $0xf012aaa0
f011ccfd:	e8 99 41 fe ff       	call   f0100e9b <cprintf>
f011cd02:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f011cd05:	ff 45 f4             	incl   -0xc(%ebp)
f011cd08:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f011cd0f:	7e bb                	jle    f011cccc <test_kfreelast+0xf73>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011cd11:	83 ec 0c             	sub    $0xc,%esp
f011cd14:	6a 00                	push   $0x0
f011cd16:	e8 3b 0a ff ff       	call   f010d756 <sys_bypassPageFault>
f011cd1b:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f011cd1e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cd22:	75 17                	jne    f011cd3b <test_kfreelast+0xfe2>
f011cd24:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f011cd28:	83 ec 08             	sub    $0x8,%esp
f011cd2b:	ff 75 f0             	pushl  -0x10(%ebp)
f011cd2e:	68 0c a9 12 f0       	push   $0xf012a90c
f011cd33:	e8 63 41 fe ff       	call   f0100e9b <cprintf>
f011cd38:	83 c4 10             	add    $0x10,%esp
f011cd3b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f011cd42:	e8 6c 05 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cd47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd4a:	e8 fa 79 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cd4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f011cd52:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cd58:	83 ec 0c             	sub    $0xc,%esp
f011cd5b:	50                   	push   %eax
f011cd5c:	e8 d8 b9 fe ff       	call   f0108739 <kfree>
f011cd61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011cd64:	e8 e0 79 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cd69:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011cd6c:	74 1d                	je     f011cd8b <test_kfreelast+0x1032>
f011cd6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cd72:	75 17                	jne    f011cd8b <test_kfreelast+0x1032>
f011cd74:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cd7b:	83 ec 0c             	sub    $0xc,%esp
f011cd7e:	68 34 a9 12 f0       	push   $0xf012a934
f011cd83:	e8 13 41 fe ff       	call   f0100e9b <cprintf>
f011cd88:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011cd8b:	e8 23 05 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cd90:	89 c2                	mov    %eax,%edx
f011cd92:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cd95:	29 c2                	sub    %eax,%edx
f011cd97:	89 d0                	mov    %edx,%eax
f011cd99:	83 f8 03             	cmp    $0x3,%eax
f011cd9c:	74 1d                	je     f011cdbb <test_kfreelast+0x1062>
f011cd9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cda2:	75 17                	jne    f011cdbb <test_kfreelast+0x1062>
f011cda4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cdab:	83 ec 0c             	sub    $0xc,%esp
f011cdae:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011cdb3:	e8 e3 40 fe ff       	call   f0100e9b <cprintf>
f011cdb8:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f011cdbb:	e8 f3 04 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cdc0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdc3:	e8 81 79 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cdc8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f011cdcb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cdd1:	83 ec 0c             	sub    $0xc,%esp
f011cdd4:	50                   	push   %eax
f011cdd5:	e8 5f b9 fe ff       	call   f0108739 <kfree>
f011cdda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011cddd:	e8 67 79 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cde2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011cde5:	74 1d                	je     f011ce04 <test_kfreelast+0x10ab>
f011cde7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cdeb:	75 17                	jne    f011ce04 <test_kfreelast+0x10ab>
f011cded:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cdf4:	83 ec 0c             	sub    $0xc,%esp
f011cdf7:	68 34 a9 12 f0       	push   $0xf012a934
f011cdfc:	e8 9a 40 fe ff       	call   f0100e9b <cprintf>
f011ce01:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011ce04:	e8 aa 04 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ce09:	89 c2                	mov    %eax,%edx
f011ce0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ce0e:	29 c2                	sub    %eax,%edx
f011ce10:	89 d0                	mov    %edx,%eax
f011ce12:	83 f8 04             	cmp    $0x4,%eax
f011ce15:	74 1d                	je     f011ce34 <test_kfreelast+0x10db>
f011ce17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ce1b:	75 17                	jne    f011ce34 <test_kfreelast+0x10db>
f011ce1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ce24:	83 ec 0c             	sub    $0xc,%esp
f011ce27:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011ce2c:	e8 6a 40 fe ff       	call   f0100e9b <cprintf>
f011ce31:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011ce34:	e8 7a 04 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ce39:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce3c:	e8 08 79 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ce41:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f011ce44:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ce4a:	83 ec 0c             	sub    $0xc,%esp
f011ce4d:	50                   	push   %eax
f011ce4e:	e8 e6 b8 fe ff       	call   f0108739 <kfree>
f011ce53:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011ce56:	e8 ee 78 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ce5b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011ce5e:	74 1d                	je     f011ce7d <test_kfreelast+0x1124>
f011ce60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ce64:	75 17                	jne    f011ce7d <test_kfreelast+0x1124>
f011ce66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ce6d:	83 ec 0c             	sub    $0xc,%esp
f011ce70:	68 34 a9 12 f0       	push   $0xf012a934
f011ce75:	e8 21 40 fe ff       	call   f0100e9b <cprintf>
f011ce7a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011ce7d:	e8 31 04 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ce82:	89 c2                	mov    %eax,%edx
f011ce84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ce87:	29 c2                	sub    %eax,%edx
f011ce89:	89 d0                	mov    %edx,%eax
f011ce8b:	83 f8 05             	cmp    $0x5,%eax
f011ce8e:	74 1d                	je     f011cead <test_kfreelast+0x1154>
f011ce90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ce94:	75 17                	jne    f011cead <test_kfreelast+0x1154>
f011ce96:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ce9d:	83 ec 0c             	sub    $0xc,%esp
f011cea0:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011cea5:	e8 f1 3f fe ff       	call   f0100e9b <cprintf>
f011ceaa:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f011cead:	e8 01 04 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ceb2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceb5:	e8 8f 78 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ceba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f011cebd:	83 ec 0c             	sub    $0xc,%esp
f011cec0:	68 00 c8 00 00       	push   $0xc800
f011cec5:	e8 d7 b6 fe ff       	call   f01085a1 <kmalloc>
f011ceca:	83 c4 10             	add    $0x10,%esp
f011cecd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
f011ced3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ced9:	3d 00 90 70 f8       	cmp    $0xf8709000,%eax
f011cede:	74 1d                	je     f011cefd <test_kfreelast+0x11a4>
f011cee0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cee4:	75 17                	jne    f011cefd <test_kfreelast+0x11a4>
f011cee6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011ceed:	83 ec 0c             	sub    $0xc,%esp
f011cef0:	68 d8 a9 12 f0       	push   $0xf012a9d8
f011cef5:	e8 a1 3f fe ff       	call   f0100e9b <cprintf>
f011cefa:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011cefd:	e8 47 78 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cf02:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011cf05:	74 1d                	je     f011cf24 <test_kfreelast+0x11cb>
f011cf07:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cf0b:	75 17                	jne    f011cf24 <test_kfreelast+0x11cb>
f011cf0d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cf14:	83 ec 0c             	sub    $0xc,%esp
f011cf17:	68 34 a9 12 f0       	push   $0xf012a934
f011cf1c:	e8 7a 3f fe ff       	call   f0100e9b <cprintf>
f011cf21:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f011cf24:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011cf27:	e8 87 03 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cf2c:	29 c3                	sub    %eax,%ebx
f011cf2e:	89 d8                	mov    %ebx,%eax
f011cf30:	83 f8 0d             	cmp    $0xd,%eax
f011cf33:	74 1d                	je     f011cf52 <test_kfreelast+0x11f9>
f011cf35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cf39:	75 17                	jne    f011cf52 <test_kfreelast+0x11f9>
f011cf3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cf42:	83 ec 0c             	sub    $0xc,%esp
f011cf45:	68 28 aa 12 f0       	push   $0xf012aa28
f011cf4a:	e8 4c 3f fe ff       	call   f0100e9b <cprintf>
f011cf4f:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f011cf52:	c7 45 a8 ff c7 00 00 	movl   $0xc7ff,-0x58(%ebp)
		ptr = (char*)ptr_allocations[13];
f011cf59:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cf5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011cf62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cf69:	eb 0e                	jmp    f011cf79 <test_kfreelast+0x1220>
		{
			ptr[i] = 13 ;
f011cf6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cf71:	01 d0                	add    %edx,%eax
f011cf73:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011cf76:	ff 45 f4             	incl   -0xc(%ebp)
f011cf79:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cf7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cf7f:	7f ea                	jg     f011cf6b <test_kfreelast+0x1212>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf81:	e8 2d 03 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011cf86:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf89:	e8 bb 77 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cf8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f011cf91:	83 ec 0c             	sub    $0xc,%esp
f011cf94:	68 00 fc 2f 00       	push   $0x2ffc00
f011cf99:	e8 03 b6 fe ff       	call   f01085a1 <kmalloc>
f011cf9e:	83 c4 10             	add    $0x10,%esp
f011cfa1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
f011cfa7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cfad:	3d 00 60 71 f8       	cmp    $0xf8716000,%eax
f011cfb2:	74 1d                	je     f011cfd1 <test_kfreelast+0x1278>
f011cfb4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cfb8:	75 17                	jne    f011cfd1 <test_kfreelast+0x1278>
f011cfba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cfc1:	83 ec 0c             	sub    $0xc,%esp
f011cfc4:	68 d8 a9 12 f0       	push   $0xf012a9d8
f011cfc9:	e8 cd 3e fe ff       	call   f0100e9b <cprintf>
f011cfce:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011cfd1:	e8 73 77 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011cfd6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011cfd9:	74 1d                	je     f011cff8 <test_kfreelast+0x129f>
f011cfdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cfdf:	75 17                	jne    f011cff8 <test_kfreelast+0x129f>
f011cfe1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011cfe8:	83 ec 0c             	sub    $0xc,%esp
f011cfeb:	68 34 a9 12 f0       	push   $0xf012a934
f011cff0:	e8 a6 3e fe ff       	call   f0100e9b <cprintf>
f011cff5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f011cff8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f011cffb:	e8 b3 02 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d000:	29 c3                	sub    %eax,%ebx
f011d002:	89 d8                	mov    %ebx,%eax
f011d004:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d009:	74 1d                	je     f011d028 <test_kfreelast+0x12cf>
f011d00b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d00f:	75 17                	jne    f011d028 <test_kfreelast+0x12cf>
f011d011:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d018:	83 ec 0c             	sub    $0xc,%esp
f011d01b:	68 28 aa 12 f0       	push   $0xf012aa28
f011d020:	e8 76 3e fe ff       	call   f0100e9b <cprintf>
f011d025:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f011d028:	c7 45 ac ff fb 2f 00 	movl   $0x2ffbff,-0x54(%ebp)
		ptr = (char*)ptr_allocations[14];
f011d02f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d035:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f011d038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d03f:	eb 0e                	jmp    f011d04f <test_kfreelast+0x12f6>
		{
			ptr[i] = 14 ;
f011d041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d044:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d047:	01 d0                	add    %edx,%eax
f011d049:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f011d04c:	ff 45 f4             	incl   -0xc(%ebp)
f011d04f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d052:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d055:	7f ea                	jg     f011d041 <test_kfreelast+0x12e8>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f011d057:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d05b:	75 17                	jne    f011d074 <test_kfreelast+0x131b>
f011d05d:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f011d061:	83 ec 08             	sub    $0x8,%esp
f011d064:	ff 75 f0             	pushl  -0x10(%ebp)
f011d067:	68 0c a9 12 f0       	push   $0xf012a90c
f011d06c:	e8 2a 3e fe ff       	call   f0100e9b <cprintf>
f011d071:	83 c4 10             	add    $0x10,%esp
f011d074:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f011d07b:	e8 33 02 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d080:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d083:	e8 c1 76 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d088:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f011d08b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d091:	83 ec 0c             	sub    $0xc,%esp
f011d094:	50                   	push   %eax
f011d095:	e8 9f b6 fe ff       	call   f0108739 <kfree>
f011d09a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d09d:	e8 a7 76 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d0a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d0a5:	74 1d                	je     f011d0c4 <test_kfreelast+0x136b>
f011d0a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d0ab:	75 17                	jne    f011d0c4 <test_kfreelast+0x136b>
f011d0ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d0b4:	83 ec 0c             	sub    $0xc,%esp
f011d0b7:	68 34 a9 12 f0       	push   $0xf012a934
f011d0bc:	e8 da 3d fe ff       	call   f0100e9b <cprintf>
f011d0c1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d0c4:	e8 ea 01 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d0c9:	89 c2                	mov    %eax,%edx
f011d0cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d0ce:	29 c2                	sub    %eax,%edx
f011d0d0:	89 d0                	mov    %edx,%eax
f011d0d2:	83 f8 0d             	cmp    $0xd,%eax
f011d0d5:	74 1d                	je     f011d0f4 <test_kfreelast+0x139b>
f011d0d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d0db:	75 17                	jne    f011d0f4 <test_kfreelast+0x139b>
f011d0dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d0e4:	83 ec 0c             	sub    $0xc,%esp
f011d0e7:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d0ec:	e8 aa 3d fe ff       	call   f0100e9b <cprintf>
f011d0f1:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011d0f4:	83 ec 0c             	sub    $0xc,%esp
f011d0f7:	6a 03                	push   $0x3
f011d0f9:	e8 58 06 ff ff       	call   f010d756 <sys_bypassPageFault>
f011d0fe:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f011d101:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d107:	89 45 cc             	mov    %eax,-0x34(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f011d10a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d111:	eb 3c                	jmp    f011d14f <test_kfreelast+0x13f6>
		{
			ptr[i] = 10;
f011d113:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d116:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d119:	01 d0                	add    %edx,%eax
f011d11b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f011d11e:	e8 21 06 ff ff       	call   f010d744 <sys_rcr2>
f011d123:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d126:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011d129:	01 ca                	add    %ecx,%edx
f011d12b:	39 d0                	cmp    %edx,%eax
f011d12d:	74 1d                	je     f011d14c <test_kfreelast+0x13f3>
f011d12f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d133:	75 17                	jne    f011d14c <test_kfreelast+0x13f3>
f011d135:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d13c:	83 ec 0c             	sub    $0xc,%esp
f011d13f:	68 a0 aa 12 f0       	push   $0xf012aaa0
f011d144:	e8 52 3d fe ff       	call   f0100e9b <cprintf>
f011d149:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f011d14c:	ff 45 f4             	incl   -0xc(%ebp)
f011d14f:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f011d156:	7e bb                	jle    f011d113 <test_kfreelast+0x13ba>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011d158:	83 ec 0c             	sub    $0xc,%esp
f011d15b:	6a 00                	push   $0x0
f011d15d:	e8 f4 05 ff ff       	call   f010d756 <sys_bypassPageFault>
f011d162:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f011d165:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d16b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f011d16e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d175:	eb 1e                	jmp    f011d195 <test_kfreelast+0x143c>
		{
			sums[14] += ptr[i] ;
f011d177:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f011d17d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d180:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d183:	01 c8                	add    %ecx,%eax
f011d185:	8a 00                	mov    (%eax),%al
f011d187:	0f be c0             	movsbl %al,%eax
f011d18a:	01 d0                	add    %edx,%eax
f011d18c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f011d192:	ff 45 f4             	incl   -0xc(%ebp)
f011d195:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d198:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d19b:	7f da                	jg     f011d177 <test_kfreelast+0x141e>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f011d19d:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f011d1a3:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011d1a6:	89 d0                	mov    %edx,%eax
f011d1a8:	01 c0                	add    %eax,%eax
f011d1aa:	01 d0                	add    %edx,%eax
f011d1ac:	01 c0                	add    %eax,%eax
f011d1ae:	01 d0                	add    %edx,%eax
f011d1b0:	01 c0                	add    %eax,%eax
f011d1b2:	39 c1                	cmp    %eax,%ecx
f011d1b4:	74 1d                	je     f011d1d3 <test_kfreelast+0x147a>
f011d1b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d1ba:	75 17                	jne    f011d1d3 <test_kfreelast+0x147a>
f011d1bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d1c3:	83 ec 0c             	sub    $0xc,%esp
f011d1c6:	68 6c aa 12 f0       	push   $0xf012aa6c
f011d1cb:	e8 cb 3c fe ff       	call   f0100e9b <cprintf>
f011d1d0:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f011d1d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d1d7:	75 17                	jne    f011d1f0 <test_kfreelast+0x1497>
f011d1d9:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f011d1dd:	83 ec 08             	sub    $0x8,%esp
f011d1e0:	ff 75 f0             	pushl  -0x10(%ebp)
f011d1e3:	68 0c a9 12 f0       	push   $0xf012a90c
f011d1e8:	e8 ae 3c fe ff       	call   f0100e9b <cprintf>
f011d1ed:	83 c4 10             	add    $0x10,%esp
f011d1f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d1f7:	e8 b7 00 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d1fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1ff:	e8 45 75 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d204:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f011d207:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d20d:	83 ec 0c             	sub    $0xc,%esp
f011d210:	50                   	push   %eax
f011d211:	e8 23 b5 fe ff       	call   f0108739 <kfree>
f011d216:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d219:	e8 2b 75 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d21e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d221:	74 1d                	je     f011d240 <test_kfreelast+0x14e7>
f011d223:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d227:	75 17                	jne    f011d240 <test_kfreelast+0x14e7>
f011d229:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d230:	83 ec 0c             	sub    $0xc,%esp
f011d233:	68 34 a9 12 f0       	push   $0xf012a934
f011d238:	e8 5e 3c fe ff       	call   f0100e9b <cprintf>
f011d23d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d240:	e8 6e 00 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d245:	89 c2                	mov    %eax,%edx
f011d247:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d24a:	29 c2                	sub    %eax,%edx
f011d24c:	89 d0                	mov    %edx,%eax
f011d24e:	83 f8 02             	cmp    $0x2,%eax
f011d251:	74 1d                	je     f011d270 <test_kfreelast+0x1517>
f011d253:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d257:	75 17                	jne    f011d270 <test_kfreelast+0x1517>
f011d259:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d260:	83 ec 0c             	sub    $0xc,%esp
f011d263:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d268:	e8 2e 3c fe ff       	call   f0100e9b <cprintf>
f011d26d:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d270:	e8 3e 00 ff ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d275:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d278:	e8 cc 74 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d27d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f011d280:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d286:	83 ec 0c             	sub    $0xc,%esp
f011d289:	50                   	push   %eax
f011d28a:	e8 aa b4 fe ff       	call   f0108739 <kfree>
f011d28f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d292:	e8 b2 74 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d297:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d29a:	74 1d                	je     f011d2b9 <test_kfreelast+0x1560>
f011d29c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d2a0:	75 17                	jne    f011d2b9 <test_kfreelast+0x1560>
f011d2a2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d2a9:	83 ec 0c             	sub    $0xc,%esp
f011d2ac:	68 34 a9 12 f0       	push   $0xf012a934
f011d2b1:	e8 e5 3b fe ff       	call   f0100e9b <cprintf>
f011d2b6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d2b9:	e8 f5 ff fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d2be:	89 c2                	mov    %eax,%edx
f011d2c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d2c3:	29 c2                	sub    %eax,%edx
f011d2c5:	89 d0                	mov    %edx,%eax
f011d2c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d2cc:	74 1d                	je     f011d2eb <test_kfreelast+0x1592>
f011d2ce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d2d2:	75 17                	jne    f011d2eb <test_kfreelast+0x1592>
f011d2d4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d2db:	83 ec 0c             	sub    $0xc,%esp
f011d2de:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d2e3:	e8 b3 3b fe ff       	call   f0100e9b <cprintf>
f011d2e8:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d2eb:	e8 c3 ff fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d2f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2f3:	e8 51 74 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d2f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f011d2fb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d301:	83 ec 0c             	sub    $0xc,%esp
f011d304:	50                   	push   %eax
f011d305:	e8 2f b4 fe ff       	call   f0108739 <kfree>
f011d30a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d30d:	e8 37 74 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d312:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d315:	74 1d                	je     f011d334 <test_kfreelast+0x15db>
f011d317:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d31b:	75 17                	jne    f011d334 <test_kfreelast+0x15db>
f011d31d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d324:	83 ec 0c             	sub    $0xc,%esp
f011d327:	68 34 a9 12 f0       	push   $0xf012a934
f011d32c:	e8 6a 3b fe ff       	call   f0100e9b <cprintf>
f011d331:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d334:	e8 7a ff fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d339:	89 c2                	mov    %eax,%edx
f011d33b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d33e:	29 c2                	sub    %eax,%edx
f011d340:	89 d0                	mov    %edx,%eax
f011d342:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d347:	74 1d                	je     f011d366 <test_kfreelast+0x160d>
f011d349:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d34d:	75 17                	jne    f011d366 <test_kfreelast+0x160d>
f011d34f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d356:	83 ec 0c             	sub    $0xc,%esp
f011d359:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d35e:	e8 38 3b fe ff       	call   f0100e9b <cprintf>
f011d363:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d366:	e8 48 ff fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d36b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d36e:	e8 d6 73 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d373:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f011d376:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d37c:	83 ec 0c             	sub    $0xc,%esp
f011d37f:	50                   	push   %eax
f011d380:	e8 b4 b3 fe ff       	call   f0108739 <kfree>
f011d385:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d388:	e8 bc 73 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d38d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d390:	74 1d                	je     f011d3af <test_kfreelast+0x1656>
f011d392:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d396:	75 17                	jne    f011d3af <test_kfreelast+0x1656>
f011d398:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d39f:	83 ec 0c             	sub    $0xc,%esp
f011d3a2:	68 34 a9 12 f0       	push   $0xf012a934
f011d3a7:	e8 ef 3a fe ff       	call   f0100e9b <cprintf>
f011d3ac:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d3af:	e8 ff fe fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d3b4:	89 c2                	mov    %eax,%edx
f011d3b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d3b9:	29 c2                	sub    %eax,%edx
f011d3bb:	89 d0                	mov    %edx,%eax
f011d3bd:	83 f8 01             	cmp    $0x1,%eax
f011d3c0:	74 1d                	je     f011d3df <test_kfreelast+0x1686>
f011d3c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d3c6:	75 17                	jne    f011d3df <test_kfreelast+0x1686>
f011d3c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d3cf:	83 ec 0c             	sub    $0xc,%esp
f011d3d2:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d3d7:	e8 bf 3a fe ff       	call   f0100e9b <cprintf>
f011d3dc:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d3df:	e8 cf fe fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d3e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3e7:	e8 5d 73 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d3ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f011d3ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d3f5:	83 ec 0c             	sub    $0xc,%esp
f011d3f8:	50                   	push   %eax
f011d3f9:	e8 3b b3 fe ff       	call   f0108739 <kfree>
f011d3fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d401:	e8 43 73 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d406:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d409:	74 1d                	je     f011d428 <test_kfreelast+0x16cf>
f011d40b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d40f:	75 17                	jne    f011d428 <test_kfreelast+0x16cf>
f011d411:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d418:	83 ec 0c             	sub    $0xc,%esp
f011d41b:	68 34 a9 12 f0       	push   $0xf012a934
f011d420:	e8 76 3a fe ff       	call   f0100e9b <cprintf>
f011d425:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f011d428:	e8 86 fe fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d42d:	89 c2                	mov    %eax,%edx
f011d42f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d432:	29 c2                	sub    %eax,%edx
f011d434:	89 d0                	mov    %edx,%eax
f011d436:	83 f8 01             	cmp    $0x1,%eax
f011d439:	74 1d                	je     f011d458 <test_kfreelast+0x16ff>
f011d43b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d43f:	75 17                	jne    f011d458 <test_kfreelast+0x16ff>
f011d441:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d448:	83 ec 0c             	sub    $0xc,%esp
f011d44b:	68 a0 a9 12 f0       	push   $0xf012a9a0
f011d450:	e8 46 3a fe ff       	call   f0100e9b <cprintf>
f011d455:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f011d458:	e8 56 fe fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d45d:	89 c2                	mov    %eax,%edx
f011d45f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d462:	39 c2                	cmp    %eax,%edx
f011d464:	74 1d                	je     f011d483 <test_kfreelast+0x172a>
f011d466:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d46a:	75 17                	jne    f011d483 <test_kfreelast+0x172a>
f011d46c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d473:	83 ec 0c             	sub    $0xc,%esp
f011d476:	68 e8 aa 12 f0       	push   $0xf012aae8
f011d47b:	e8 1b 3a fe ff       	call   f0100e9b <cprintf>
f011d480:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011d483:	83 ec 0c             	sub    $0xc,%esp
f011d486:	6a 03                	push   $0x3
f011d488:	e8 c9 02 ff ff       	call   f010d756 <sys_bypassPageFault>
f011d48d:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f011d490:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d497:	e9 8e 00 00 00       	jmp    f011d52a <test_kfreelast+0x17d1>
		{
			ptr = (char *) ptr_allocations[i];
f011d49c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d49f:	8b 84 85 d4 fe ff ff 	mov    -0x12c(%ebp,%eax,4),%eax
f011d4a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr[0] = 10;
f011d4a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d4ac:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f011d4af:	e8 90 02 ff ff       	call   f010d744 <sys_rcr2>
f011d4b4:	89 c2                	mov    %eax,%edx
f011d4b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d4b9:	39 c2                	cmp    %eax,%edx
f011d4bb:	74 1d                	je     f011d4da <test_kfreelast+0x1781>
f011d4bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d4c1:	75 17                	jne    f011d4da <test_kfreelast+0x1781>
f011d4c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d4ca:	83 ec 0c             	sub    $0xc,%esp
f011d4cd:	68 a0 aa 12 f0       	push   $0xf012aaa0
f011d4d2:	e8 c4 39 fe ff       	call   f0100e9b <cprintf>
f011d4d7:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f011d4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d4dd:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f011d4e4:	89 c2                	mov    %eax,%edx
f011d4e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d4e9:	01 d0                	add    %edx,%eax
f011d4eb:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f011d4ee:	e8 51 02 ff ff       	call   f010d744 <sys_rcr2>
f011d4f3:	89 c2                	mov    %eax,%edx
f011d4f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d4f8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f011d4ff:	89 c1                	mov    %eax,%ecx
f011d501:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d504:	01 c8                	add    %ecx,%eax
f011d506:	39 c2                	cmp    %eax,%edx
f011d508:	74 1d                	je     f011d527 <test_kfreelast+0x17ce>
f011d50a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d50e:	75 17                	jne    f011d527 <test_kfreelast+0x17ce>
f011d510:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d517:	83 ec 0c             	sub    $0xc,%esp
f011d51a:	68 a0 aa 12 f0       	push   $0xf012aaa0
f011d51f:	e8 77 39 fe ff       	call   f0100e9b <cprintf>
f011d524:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f011d527:	ff 45 f4             	incl   -0xc(%ebp)
f011d52a:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f011d52e:	0f 8e 68 ff ff ff    	jle    f011d49c <test_kfreelast+0x1743>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011d534:	83 ec 0c             	sub    $0xc,%esp
f011d537:	6a 00                	push   $0x0
f011d539:	e8 18 02 ff ff       	call   f010d756 <sys_bypassPageFault>
f011d53e:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d541:	e8 6d fd fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d546:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d549:	e8 fb 71 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d54e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f011d551:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d557:	83 ec 0c             	sub    $0xc,%esp
f011d55a:	50                   	push   %eax
f011d55b:	e8 d9 b1 fe ff       	call   f0108739 <kfree>
f011d560:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d563:	e8 e1 71 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d568:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d56b:	74 1d                	je     f011d58a <test_kfreelast+0x1831>
f011d56d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d571:	75 17                	jne    f011d58a <test_kfreelast+0x1831>
f011d573:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d57a:	83 ec 0c             	sub    $0xc,%esp
f011d57d:	68 34 a9 12 f0       	push   $0xf012a934
f011d582:	e8 14 39 fe ff       	call   f0100e9b <cprintf>
f011d587:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f011d58a:	e8 24 fd fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d58f:	89 c2                	mov    %eax,%edx
f011d591:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d594:	39 c2                	cmp    %eax,%edx
f011d596:	74 1d                	je     f011d5b5 <test_kfreelast+0x185c>
f011d598:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d59c:	75 17                	jne    f011d5b5 <test_kfreelast+0x185c>
f011d59e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d5a5:	83 ec 0c             	sub    $0xc,%esp
f011d5a8:	68 20 ab 12 f0       	push   $0xf012ab20
f011d5ad:	e8 e9 38 fe ff       	call   f0100e9b <cprintf>
f011d5b2:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d5b5:	e8 f9 fc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d5ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5bd:	e8 87 71 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d5c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f011d5c5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d5cb:	83 ec 0c             	sub    $0xc,%esp
f011d5ce:	50                   	push   %eax
f011d5cf:	e8 65 b1 fe ff       	call   f0108739 <kfree>
f011d5d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d5d7:	e8 6d 71 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d5dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d5df:	74 1d                	je     f011d5fe <test_kfreelast+0x18a5>
f011d5e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d5e5:	75 17                	jne    f011d5fe <test_kfreelast+0x18a5>
f011d5e7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d5ee:	83 ec 0c             	sub    $0xc,%esp
f011d5f1:	68 34 a9 12 f0       	push   $0xf012a934
f011d5f6:	e8 a0 38 fe ff       	call   f0100e9b <cprintf>
f011d5fb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f011d5fe:	e8 b0 fc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d603:	89 c2                	mov    %eax,%edx
f011d605:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d608:	39 c2                	cmp    %eax,%edx
f011d60a:	74 1d                	je     f011d629 <test_kfreelast+0x18d0>
f011d60c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d610:	75 17                	jne    f011d629 <test_kfreelast+0x18d0>
f011d612:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d619:	83 ec 0c             	sub    $0xc,%esp
f011d61c:	68 20 ab 12 f0       	push   $0xf012ab20
f011d621:	e8 75 38 fe ff       	call   f0100e9b <cprintf>
f011d626:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011d629:	e8 85 fc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d62e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d631:	e8 13 71 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d636:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f011d639:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d63f:	83 ec 0c             	sub    $0xc,%esp
f011d642:	50                   	push   %eax
f011d643:	e8 f1 b0 fe ff       	call   f0108739 <kfree>
f011d648:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d64b:	e8 f9 70 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d650:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d653:	74 1d                	je     f011d672 <test_kfreelast+0x1919>
f011d655:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d659:	75 17                	jne    f011d672 <test_kfreelast+0x1919>
f011d65b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d662:	83 ec 0c             	sub    $0xc,%esp
f011d665:	68 34 a9 12 f0       	push   $0xf012a934
f011d66a:	e8 2c 38 fe ff       	call   f0100e9b <cprintf>
f011d66f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f011d672:	e8 3c fc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d677:	89 c2                	mov    %eax,%edx
f011d679:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d67c:	39 c2                	cmp    %eax,%edx
f011d67e:	74 1d                	je     f011d69d <test_kfreelast+0x1944>
f011d680:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d684:	75 17                	jne    f011d69d <test_kfreelast+0x1944>
f011d686:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d68d:	83 ec 0c             	sub    $0xc,%esp
f011d690:	68 20 ab 12 f0       	push   $0xf012ab20
f011d695:	e8 01 38 fe ff       	call   f0100e9b <cprintf>
f011d69a:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d69d:	e8 11 fc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d6a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6a5:	e8 9f 70 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d6aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f011d6ad:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d6b3:	83 ec 0c             	sub    $0xc,%esp
f011d6b6:	50                   	push   %eax
f011d6b7:	e8 7d b0 fe ff       	call   f0108739 <kfree>
f011d6bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f011d6bf:	e8 85 70 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011d6c4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d6c7:	74 1d                	je     f011d6e6 <test_kfreelast+0x198d>
f011d6c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d6cd:	75 17                	jne    f011d6e6 <test_kfreelast+0x198d>
f011d6cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d6d6:	83 ec 0c             	sub    $0xc,%esp
f011d6d9:	68 34 a9 12 f0       	push   $0xf012a934
f011d6de:	e8 b8 37 fe ff       	call   f0100e9b <cprintf>
f011d6e3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f011d6e6:	e8 c8 fb fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d6eb:	89 c2                	mov    %eax,%edx
f011d6ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d6f0:	39 c2                	cmp    %eax,%edx
f011d6f2:	74 1d                	je     f011d711 <test_kfreelast+0x19b8>
f011d6f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d6f8:	75 17                	jne    f011d711 <test_kfreelast+0x19b8>
f011d6fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f011d701:	83 ec 0c             	sub    $0xc,%esp
f011d704:	68 20 ab 12 f0       	push   $0xf012ab20
f011d709:	e8 8d 37 fe ff       	call   f0100e9b <cprintf>
f011d70e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f011d711:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d715:	75 17                	jne    f011d72e <test_kfreelast+0x19d5>
f011d717:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f011d71b:	83 ec 08             	sub    $0x8,%esp
f011d71e:	ff 75 f0             	pushl  -0x10(%ebp)
f011d721:	68 0c a9 12 f0       	push   $0xf012a90c
f011d726:	e8 70 37 fe ff       	call   f0100e9b <cprintf>
f011d72b:	83 c4 10             	add    $0x10,%esp
f011d72e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f011d735:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d73a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d73d:	5b                   	pop    %ebx
f011d73e:	5f                   	pop    %edi
f011d73f:	5d                   	pop    %ebp
f011d740:	c3                   	ret    

f011d741 <test_krealloc>:

int test_krealloc() {
f011d741:	55                   	push   %ebp
f011d742:	89 e5                	mov    %esp,%ebp
f011d744:	57                   	push   %edi
f011d745:	53                   	push   %ebx
f011d746:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d74c:	83 ec 0c             	sub    $0xc,%esp
f011d74f:	68 0c 99 12 f0       	push   $0xf012990c
f011d754:	e8 42 37 fe ff       	call   f0100e9b <cprintf>
f011d759:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011d75c:	83 ec 0c             	sub    $0xc,%esp
f011d75f:	68 3c 99 12 f0       	push   $0xf012993c
f011d764:	e8 32 37 fe ff       	call   f0100e9b <cprintf>
f011d769:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011d76c:	83 ec 0c             	sub    $0xc,%esp
f011d76f:	68 0c 99 12 f0       	push   $0xf012990c
f011d774:	e8 22 37 fe ff       	call   f0100e9b <cprintf>
f011d779:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f011d77c:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f011d780:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f011d784:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f011d78a:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f011d790:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011d797:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
	lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f011d79e:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011d7a4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7a9:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7ae:	89 d7                	mov    %edx,%edi
f011d7b0:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f011d7b2:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f011d7b9:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f011d7bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7c4:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7c9:	89 d7                	mov    %edx,%edi
f011d7cb:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f011d7cd:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f011d7d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7d8:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7dd:	89 d7                	mov    %edx,%edi
f011d7df:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011d7e1:	e8 cd fa fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d7e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f011d7e9:	83 ec 08             	sub    $0x8,%esp
f011d7ec:	68 00 fc 0f 00       	push   $0xffc00
f011d7f1:	6a 00                	push   $0x0
f011d7f3:	e8 58 b1 fe ff       	call   f0108950 <krealloc>
f011d7f8:	83 c4 10             	add    $0x10,%esp
f011d7fb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f011d801:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d807:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d80c:	77 17                	ja     f011d825 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f011d80e:	83 ec 04             	sub    $0x4,%esp
f011d811:	68 68 ab 12 f0       	push   $0xf012ab68
f011d816:	68 a1 10 00 00       	push   $0x10a1
f011d81b:	68 7e a0 12 f0       	push   $0xf012a07e
f011d820:	e8 f5 29 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f011d825:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d82b:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011d830:	74 17                	je     f011d849 <test_krealloc+0x108>
			panic("krealloc: Wrong start address for allocated space");
f011d832:	83 ec 04             	sub    $0x4,%esp
f011d835:	68 a4 ab 12 f0       	push   $0xf012aba4
f011d83a:	68 a3 10 00 00       	push   $0x10a3
f011d83f:	68 7e a0 12 f0       	push   $0xf012a07e
f011d844:	e8 d1 29 fe ff       	call   f010021a <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011d849:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011d84c:	e8 62 fa fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d851:	29 c3                	sub    %eax,%ebx
f011d853:	89 d8                	mov    %ebx,%eax
f011d855:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d85a:	74 17                	je     f011d873 <test_krealloc+0x132>
			panic("krealloc: Wrong allocation: ");
f011d85c:	83 ec 04             	sub    $0x4,%esp
f011d85f:	68 d6 ab 12 f0       	push   $0xf012abd6
f011d864:	68 a6 10 00 00       	push   $0x10a6
f011d869:	68 7e a0 12 f0       	push   $0xf012a07e
f011d86e:	e8 a7 29 fe ff       	call   f010021a <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f011d873:	c7 85 f8 fe ff ff ff 	movl   $0xffbff,-0x108(%ebp)
f011d87a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011d87d:	e8 31 fa fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d882:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f011d885:	83 ec 08             	sub    $0x8,%esp
f011d888:	68 00 fc 0f 00       	push   $0xffc00
f011d88d:	6a 00                	push   $0x0
f011d88f:	e8 bc b0 fe ff       	call   f0108950 <krealloc>
f011d894:	83 c4 10             	add    $0x10,%esp
f011d897:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f011d89d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d8a3:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f011d8a8:	77 17                	ja     f011d8c1 <test_krealloc+0x180>
			panic("krealloc: Wrong start address for the allocated space... ");
f011d8aa:	83 ec 04             	sub    $0x4,%esp
f011d8ad:	68 68 ab 12 f0       	push   $0xf012ab68
f011d8b2:	68 ae 10 00 00       	push   $0x10ae
f011d8b7:	68 7e a0 12 f0       	push   $0xf012a07e
f011d8bc:	e8 59 29 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f011d8c1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d8c7:	3d 00 50 10 f8       	cmp    $0xf8105000,%eax
f011d8cc:	74 17                	je     f011d8e5 <test_krealloc+0x1a4>
			panic("krealloc: Wrong start address for allocated space");
f011d8ce:	83 ec 04             	sub    $0x4,%esp
f011d8d1:	68 a4 ab 12 f0       	push   $0xf012aba4
f011d8d6:	68 b0 10 00 00       	push   $0x10b0
f011d8db:	68 7e a0 12 f0       	push   $0xf012a07e
f011d8e0:	e8 35 29 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011d8e5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011d8e8:	e8 c6 f9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d8ed:	29 c3                	sub    %eax,%ebx
f011d8ef:	89 d8                	mov    %ebx,%eax
f011d8f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d8f6:	74 17                	je     f011d90f <test_krealloc+0x1ce>
			panic("krealloc: Wrong allocation: ");
f011d8f8:	83 ec 04             	sub    $0x4,%esp
f011d8fb:	68 d6 ab 12 f0       	push   $0xf012abd6
f011d900:	68 b2 10 00 00       	push   $0x10b2
f011d905:	68 7e a0 12 f0       	push   $0xf012a07e
f011d90a:	e8 0b 29 fe ff       	call   f010021a <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f011d90f:	c7 85 fc fe ff ff ff 	movl   $0xffbff,-0x104(%ebp)
f011d916:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011d919:	e8 95 f9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d91e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f011d921:	83 ec 08             	sub    $0x8,%esp
f011d924:	68 00 fc 0f 00       	push   $0xffc00
f011d929:	6a 00                	push   $0x0
f011d92b:	e8 20 b0 fe ff       	call   f0108950 <krealloc>
f011d930:	83 c4 10             	add    $0x10,%esp
f011d933:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f011d939:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d93f:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f011d944:	77 17                	ja     f011d95d <test_krealloc+0x21c>
			panic("krealloc: Wrong start address for the allocated space... ");
f011d946:	83 ec 04             	sub    $0x4,%esp
f011d949:	68 68 ab 12 f0       	push   $0xf012ab68
f011d94e:	68 ba 10 00 00       	push   $0x10ba
f011d953:	68 7e a0 12 f0       	push   $0xf012a07e
f011d958:	e8 bd 28 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f011d95d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d963:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f011d968:	74 17                	je     f011d981 <test_krealloc+0x240>
			panic("krealloc: Wrong start address for allocated space");
f011d96a:	83 ec 04             	sub    $0x4,%esp
f011d96d:	68 a4 ab 12 f0       	push   $0xf012aba4
f011d972:	68 bc 10 00 00       	push   $0x10bc
f011d977:	68 7e a0 12 f0       	push   $0xf012a07e
f011d97c:	e8 99 28 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011d981:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011d984:	e8 2a f9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d989:	29 c3                	sub    %eax,%ebx
f011d98b:	89 d8                	mov    %ebx,%eax
f011d98d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d992:	74 17                	je     f011d9ab <test_krealloc+0x26a>
			panic("krealloc: Wrong allocation: ");
f011d994:	83 ec 04             	sub    $0x4,%esp
f011d997:	68 d6 ab 12 f0       	push   $0xf012abd6
f011d99c:	68 be 10 00 00       	push   $0x10be
f011d9a1:	68 7e a0 12 f0       	push   $0xf012a07e
f011d9a6:	e8 6f 28 fe ff       	call   f010021a <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f011d9ab:	c7 85 00 ff ff ff ff 	movl   $0x3feff,-0x100(%ebp)
f011d9b2:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011d9b5:	e8 f9 f8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011d9ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f011d9bd:	83 ec 08             	sub    $0x8,%esp
f011d9c0:	68 00 fc 0f 00       	push   $0xffc00
f011d9c5:	6a 00                	push   $0x0
f011d9c7:	e8 84 af fe ff       	call   f0108950 <krealloc>
f011d9cc:	83 c4 10             	add    $0x10,%esp
f011d9cf:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f011d9d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d9db:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f011d9e0:	77 17                	ja     f011d9f9 <test_krealloc+0x2b8>
			panic("krealloc: Wrong start address for the allocated space... ");
f011d9e2:	83 ec 04             	sub    $0x4,%esp
f011d9e5:	68 68 ab 12 f0       	push   $0xf012ab68
f011d9ea:	68 c5 10 00 00       	push   $0x10c5
f011d9ef:	68 7e a0 12 f0       	push   $0xf012a07e
f011d9f4:	e8 21 28 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f011d9f9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d9ff:	3d 00 50 30 f8       	cmp    $0xf8305000,%eax
f011da04:	74 17                	je     f011da1d <test_krealloc+0x2dc>
			panic("krealloc: Wrong start address for allocated space");
f011da06:	83 ec 04             	sub    $0x4,%esp
f011da09:	68 a4 ab 12 f0       	push   $0xf012aba4
f011da0e:	68 c7 10 00 00       	push   $0x10c7
f011da13:	68 7e a0 12 f0       	push   $0xf012a07e
f011da18:	e8 fd 27 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011da1d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011da20:	e8 8e f8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011da25:	29 c3                	sub    %eax,%ebx
f011da27:	89 d8                	mov    %ebx,%eax
f011da29:	3d 00 01 00 00       	cmp    $0x100,%eax
f011da2e:	74 17                	je     f011da47 <test_krealloc+0x306>
			panic("krealloc: Wrong allocation: ");
f011da30:	83 ec 04             	sub    $0x4,%esp
f011da33:	68 d6 ab 12 f0       	push   $0xf012abd6
f011da38:	68 c9 10 00 00       	push   $0x10c9
f011da3d:	68 7e a0 12 f0       	push   $0xf012a07e
f011da42:	e8 d3 27 fe ff       	call   f010021a <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f011da47:	c7 85 04 ff ff ff ff 	movl   $0x3feff,-0xfc(%ebp)
f011da4e:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f011da51:	e8 5d f8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011da56:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f011da59:	83 ec 08             	sub    $0x8,%esp
f011da5c:	68 00 fc 1f 00       	push   $0x1ffc00
f011da61:	6a 00                	push   $0x0
f011da63:	e8 e8 ae fe ff       	call   f0108950 <krealloc>
f011da68:	83 c4 10             	add    $0x10,%esp
f011da6b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f011da71:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011da77:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f011da7c:	77 17                	ja     f011da95 <test_krealloc+0x354>
			panic("krealloc: Wrong start address for the allocated space... ");
f011da7e:	83 ec 04             	sub    $0x4,%esp
f011da81:	68 68 ab 12 f0       	push   $0xf012ab68
f011da86:	68 d0 10 00 00       	push   $0x10d0
f011da8b:	68 7e a0 12 f0       	push   $0xf012a07e
f011da90:	e8 85 27 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f011da95:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011da9b:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011daa0:	74 17                	je     f011dab9 <test_krealloc+0x378>
			panic("krealloc: Wrong start address for allocated space");
f011daa2:	83 ec 04             	sub    $0x4,%esp
f011daa5:	68 a4 ab 12 f0       	push   $0xf012aba4
f011daaa:	68 d2 10 00 00       	push   $0x10d2
f011daaf:	68 7e a0 12 f0       	push   $0xf012a07e
f011dab4:	e8 61 27 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f011dab9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011dabc:	e8 f2 f7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011dac1:	29 c3                	sub    %eax,%ebx
f011dac3:	89 d8                	mov    %ebx,%eax
f011dac5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011daca:	74 17                	je     f011dae3 <test_krealloc+0x3a2>
			panic("krealloc: Wrong allocation: ");
f011dacc:	83 ec 04             	sub    $0x4,%esp
f011dacf:	68 d6 ab 12 f0       	push   $0xf012abd6
f011dad4:	68 d4 10 00 00       	push   $0x10d4
f011dad9:	68 7e a0 12 f0       	push   $0xf012a07e
f011dade:	e8 37 27 fe ff       	call   f010021a <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f011dae3:	c7 85 08 ff ff ff ff 	movl   $0xffdff,-0xf8(%ebp)
f011daea:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f011daed:	e8 c1 f7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011daf2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f011daf5:	83 ec 08             	sub    $0x8,%esp
f011daf8:	68 00 fc 1f 00       	push   $0x1ffc00
f011dafd:	6a 00                	push   $0x0
f011daff:	e8 4c ae fe ff       	call   f0108950 <krealloc>
f011db04:	83 c4 10             	add    $0x10,%esp
f011db07:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f011db0d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011db13:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f011db18:	77 17                	ja     f011db31 <test_krealloc+0x3f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f011db1a:	83 ec 04             	sub    $0x4,%esp
f011db1d:	68 68 ab 12 f0       	push   $0xf012ab68
f011db22:	68 db 10 00 00       	push   $0x10db
f011db27:	68 7e a0 12 f0       	push   $0xf012a07e
f011db2c:	e8 e9 26 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f011db31:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011db37:	3d 00 50 60 f8       	cmp    $0xf8605000,%eax
f011db3c:	74 17                	je     f011db55 <test_krealloc+0x414>
			panic("krealloc: Wrong start address for allocated space");
f011db3e:	83 ec 04             	sub    $0x4,%esp
f011db41:	68 a4 ab 12 f0       	push   $0xf012aba4
f011db46:	68 dd 10 00 00       	push   $0x10dd
f011db4b:	68 7e a0 12 f0       	push   $0xf012a07e
f011db50:	e8 c5 26 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f011db55:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011db58:	e8 56 f7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011db5d:	29 c3                	sub    %eax,%ebx
f011db5f:	89 d8                	mov    %ebx,%eax
f011db61:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db66:	74 17                	je     f011db7f <test_krealloc+0x43e>
			panic("krealloc: Wrong allocation: ");
f011db68:	83 ec 04             	sub    $0x4,%esp
f011db6b:	68 d6 ab 12 f0       	push   $0xf012abd6
f011db70:	68 df 10 00 00       	push   $0x10df
f011db75:	68 7e a0 12 f0       	push   $0xf012a07e
f011db7a:	e8 9b 26 fe ff       	call   f010021a <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f011db7f:	c7 85 0c ff ff ff ff 	movl   $0xffdff,-0xf4(%ebp)
f011db86:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f011db89:	e8 25 f7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011db8e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f011db91:	83 ec 08             	sub    $0x8,%esp
f011db94:	68 00 fc 2f 00       	push   $0x2ffc00
f011db99:	6a 00                	push   $0x0
f011db9b:	e8 b0 ad fe ff       	call   f0108950 <krealloc>
f011dba0:	83 c4 10             	add    $0x10,%esp
f011dba3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f011dba9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dbaf:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f011dbb4:	77 17                	ja     f011dbcd <test_krealloc+0x48c>
			panic("krealloc: Wrong start address for the allocated space... ");
f011dbb6:	83 ec 04             	sub    $0x4,%esp
f011dbb9:	68 68 ab 12 f0       	push   $0xf012ab68
f011dbbe:	68 e6 10 00 00       	push   $0x10e6
f011dbc3:	68 7e a0 12 f0       	push   $0xf012a07e
f011dbc8:	e8 4d 26 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f011dbcd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dbd3:	3d 00 50 80 f8       	cmp    $0xf8805000,%eax
f011dbd8:	74 17                	je     f011dbf1 <test_krealloc+0x4b0>
			panic("krealloc: Wrong start address for allocated space");
f011dbda:	83 ec 04             	sub    $0x4,%esp
f011dbdd:	68 a4 ab 12 f0       	push   $0xf012aba4
f011dbe2:	68 e8 10 00 00       	push   $0x10e8
f011dbe7:	68 7e a0 12 f0       	push   $0xf012a07e
f011dbec:	e8 29 26 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f011dbf1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011dbf4:	e8 ba f6 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011dbf9:	29 c3                	sub    %eax,%ebx
f011dbfb:	89 d8                	mov    %ebx,%eax
f011dbfd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dc02:	74 17                	je     f011dc1b <test_krealloc+0x4da>
			panic("Wrong allocation: ");
f011dc04:	83 ec 04             	sub    $0x4,%esp
f011dc07:	68 f3 ab 12 f0       	push   $0xf012abf3
f011dc0c:	68 ea 10 00 00       	push   $0x10ea
f011dc11:	68 7e a0 12 f0       	push   $0xf012a07e
f011dc16:	e8 ff 25 fe ff       	call   f010021a <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f011dc1b:	c7 85 10 ff ff ff 7f 	movl   $0x5ff7f,-0xf0(%ebp)
f011dc22:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f011dc25:	e8 89 f6 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011dc2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f011dc2d:	83 ec 08             	sub    $0x8,%esp
f011dc30:	68 00 fc 2f 00       	push   $0x2ffc00
f011dc35:	6a 00                	push   $0x0
f011dc37:	e8 14 ad fe ff       	call   f0108950 <krealloc>
f011dc3c:	83 c4 10             	add    $0x10,%esp
f011dc3f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f011dc45:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dc4b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f011dc50:	77 17                	ja     f011dc69 <test_krealloc+0x528>
			panic("krealloc: Wrong start address for the allocated space... ");
f011dc52:	83 ec 04             	sub    $0x4,%esp
f011dc55:	68 68 ab 12 f0       	push   $0xf012ab68
f011dc5a:	68 f1 10 00 00       	push   $0x10f1
f011dc5f:	68 7e a0 12 f0       	push   $0xf012a07e
f011dc64:	e8 b1 25 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f011dc69:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dc6f:	3d 00 50 b0 f8       	cmp    $0xf8b05000,%eax
f011dc74:	74 17                	je     f011dc8d <test_krealloc+0x54c>
			panic("krealloc: Wrong start address for allocated space");
f011dc76:	83 ec 04             	sub    $0x4,%esp
f011dc79:	68 a4 ab 12 f0       	push   $0xf012aba4
f011dc7e:	68 f3 10 00 00       	push   $0x10f3
f011dc83:	68 7e a0 12 f0       	push   $0xf012a07e
f011dc88:	e8 8d 25 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f011dc8d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011dc90:	e8 1e f6 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011dc95:	29 c3                	sub    %eax,%ebx
f011dc97:	89 d8                	mov    %ebx,%eax
f011dc99:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dc9e:	74 17                	je     f011dcb7 <test_krealloc+0x576>
			panic("krealloc: Wrong allocation: ");
f011dca0:	83 ec 04             	sub    $0x4,%esp
f011dca3:	68 d6 ab 12 f0       	push   $0xf012abd6
f011dca8:	68 f5 10 00 00       	push   $0x10f5
f011dcad:	68 7e a0 12 f0       	push   $0xf012a07e
f011dcb2:	e8 63 25 fe ff       	call   f010021a <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f011dcb7:	c7 85 14 ff ff ff 7f 	movl   $0x5ff7f,-0xec(%ebp)
f011dcbe:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f011dcc1:	e8 ed f5 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011dcc6:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f011dcc9:	c7 45 b4 ff fb 0f 00 	movl   $0xffbff,-0x4c(%ebp)
		byteArr = (char *) ptr_allocations[0];
f011dcd0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dcd6:	89 45 b0             	mov    %eax,-0x50(%ebp)
		byteArr[0] = minByte;
f011dcd9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dcdc:	8a 55 cf             	mov    -0x31(%ebp),%dl
f011dcdf:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f011dce1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
f011dce4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dce7:	01 c2                	add    %eax,%edx
f011dce9:	8a 45 ce             	mov    -0x32(%ebp),%al
f011dcec:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f011dcee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dcf4:	89 45 ac             	mov    %eax,-0x54(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f011dcf7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011dcfe:	eb 0e                	jmp    f011dd0e <test_krealloc+0x5cd>
			ptr[i] = 2;
f011dd00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd03:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dd06:	01 d0                	add    %edx,%eax
f011dd08:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f011dd0b:	ff 45 f4             	incl   -0xc(%ebp)
f011dd0e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dd14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011dd17:	7d e7                	jge    f011dd00 <test_krealloc+0x5bf>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f011dd19:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dd1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		intArr[0] = 3;
f011dd22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dd25:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f011dd2b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dd31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011dd38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dd3b:	01 d0                	add    %edx,%eax
f011dd3d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f011dd43:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dd49:	89 45 a8             	mov    %eax,-0x58(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f011dd4c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011dd53:	eb 18                	jmp    f011dd6d <test_krealloc+0x62c>
			intArr[i] = 4;
f011dd55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd58:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011dd5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dd62:	01 d0                	add    %edx,%eax
f011dd64:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f011dd6a:	ff 45 f0             	incl   -0x10(%ebp)
f011dd6d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dd73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd76:	7d dd                	jge    f011dd55 <test_krealloc+0x614>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f011dd78:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dd7e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f011dd81:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dd88:	eb 14                	jmp    f011dd9e <test_krealloc+0x65d>
			shortArr[i] = 5;
f011dd8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011dd8d:	01 c0                	add    %eax,%eax
f011dd8f:	89 c2                	mov    %eax,%edx
f011dd91:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dd94:	01 d0                	add    %edx,%eax
f011dd96:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f011dd9b:	ff 45 ec             	incl   -0x14(%ebp)
f011dd9e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dda4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011dda7:	7d e1                	jge    f011dd8a <test_krealloc+0x649>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f011dda9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ddaf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		shortArr[0] = 6;
f011ddb2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ddb5:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f011ddba:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ddc0:	01 c0                	add    %eax,%eax
f011ddc2:	89 c2                	mov    %eax,%edx
f011ddc4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ddc7:	01 d0                	add    %edx,%eax
f011ddc9:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f011ddce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ddd4:	89 45 a0             	mov    %eax,-0x60(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f011ddd7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011ddde:	eb 40                	jmp    f011de20 <test_krealloc+0x6df>
			structArr[i].a = 7;
f011dde0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dde3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011ddea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dded:	01 d0                	add    %edx,%eax
f011ddef:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f011ddf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ddf5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011ddfc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ddff:	01 d0                	add    %edx,%eax
f011de01:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f011de07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de0a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011de11:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de14:	01 d0                	add    %edx,%eax
f011de16:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f011de1d:	ff 45 e8             	incl   -0x18(%ebp)
f011de20:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011de26:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011de29:	7d b5                	jge    f011dde0 <test_krealloc+0x69f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f011de2b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011de31:	89 45 a0             	mov    %eax,-0x60(%ebp)
		structArr[0].a = 8;
f011de34:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de37:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f011de3a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de3d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f011de43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de46:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f011de4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011de53:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011de5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de5d:	01 d0                	add    %edx,%eax
f011de5f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f011de62:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011de68:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011de6f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de72:	01 d0                	add    %edx,%eax
f011de74:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f011de7a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011de80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011de87:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de8a:	01 d0                	add    %edx,%eax
f011de8c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f011de93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011de96:	8a 00                	mov    (%eax),%al
f011de98:	3a 45 cf             	cmp    -0x31(%ebp),%al
f011de9b:	75 14                	jne    f011deb1 <test_krealloc+0x770>
f011de9d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dea3:	89 c2                	mov    %eax,%edx
f011dea5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dea8:	01 d0                	add    %edx,%eax
f011deaa:	8a 00                	mov    (%eax),%al
f011deac:	3a 45 ce             	cmp    -0x32(%ebp),%al
f011deaf:	74 17                	je     f011dec8 <test_krealloc+0x787>
			panic(
f011deb1:	83 ec 04             	sub    $0x4,%esp
f011deb4:	68 08 ac 12 f0       	push   $0xf012ac08
f011deb9:	68 38 11 00 00       	push   $0x1138
f011debe:	68 7e a0 12 f0       	push   $0xf012a07e
f011dec3:	e8 52 23 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f011dec8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dece:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f011ded1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ded4:	8a 00                	mov    (%eax),%al
f011ded6:	3c 02                	cmp    $0x2,%al
f011ded8:	75 13                	jne    f011deed <test_krealloc+0x7ac>
f011deda:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dee0:	89 c2                	mov    %eax,%edx
f011dee2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dee5:	01 d0                	add    %edx,%eax
f011dee7:	8a 00                	mov    (%eax),%al
f011dee9:	3c 02                	cmp    $0x2,%al
f011deeb:	74 1d                	je     f011df0a <test_krealloc+0x7c9>
			panic(
f011deed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011def0:	8a 00                	mov    (%eax),%al
f011def2:	0f be c0             	movsbl %al,%eax
f011def5:	50                   	push   %eax
f011def6:	68 48 ac 12 f0       	push   $0xf012ac48
f011defb:	68 3e 11 00 00       	push   $0x113e
f011df00:	68 7e a0 12 f0       	push   $0xf012a07e
f011df05:	e8 10 23 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f011df0a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011df10:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f011df13:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df16:	8b 00                	mov    (%eax),%eax
f011df18:	83 f8 03             	cmp    $0x3,%eax
f011df1b:	75 19                	jne    f011df36 <test_krealloc+0x7f5>
f011df1d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011df23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011df2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df2d:	01 d0                	add    %edx,%eax
f011df2f:	8b 00                	mov    (%eax),%eax
f011df31:	83 f8 03             	cmp    $0x3,%eax
f011df34:	74 17                	je     f011df4d <test_krealloc+0x80c>
			panic("Wrong allocation stored values are wrongly changed!");
f011df36:	83 ec 04             	sub    $0x4,%esp
f011df39:	68 94 ac 12 f0       	push   $0xf012ac94
f011df3e:	68 42 11 00 00       	push   $0x1142
f011df43:	68 7e a0 12 f0       	push   $0xf012a07e
f011df48:	e8 cd 22 fe ff       	call   f010021a <_panic>

		intArr = (int*) ptr_allocations[3];
f011df4d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011df53:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f011df56:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df59:	8b 00                	mov    (%eax),%eax
f011df5b:	83 f8 04             	cmp    $0x4,%eax
f011df5e:	75 19                	jne    f011df79 <test_krealloc+0x838>
f011df60:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011df66:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011df6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011df70:	01 d0                	add    %edx,%eax
f011df72:	8b 00                	mov    (%eax),%eax
f011df74:	83 f8 04             	cmp    $0x4,%eax
f011df77:	74 17                	je     f011df90 <test_krealloc+0x84f>
			panic(
f011df79:	83 ec 04             	sub    $0x4,%esp
f011df7c:	68 08 ac 12 f0       	push   $0xf012ac08
f011df81:	68 47 11 00 00       	push   $0x1147
f011df86:	68 7e a0 12 f0       	push   $0xf012a07e
f011df8b:	e8 8a 22 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f011df90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011df96:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f011df99:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011df9c:	66 8b 00             	mov    (%eax),%ax
f011df9f:	66 83 f8 05          	cmp    $0x5,%ax
f011dfa3:	75 18                	jne    f011dfbd <test_krealloc+0x87c>
f011dfa5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfab:	01 c0                	add    %eax,%eax
f011dfad:	89 c2                	mov    %eax,%edx
f011dfaf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dfb2:	01 d0                	add    %edx,%eax
f011dfb4:	66 8b 00             	mov    (%eax),%ax
f011dfb7:	66 83 f8 05          	cmp    $0x5,%ax
f011dfbb:	74 17                	je     f011dfd4 <test_krealloc+0x893>
			panic(
f011dfbd:	83 ec 04             	sub    $0x4,%esp
f011dfc0:	68 08 ac 12 f0       	push   $0xf012ac08
f011dfc5:	68 4c 11 00 00       	push   $0x114c
f011dfca:	68 7e a0 12 f0       	push   $0xf012a07e
f011dfcf:	e8 46 22 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f011dfd4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dfda:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f011dfdd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dfe0:	66 8b 00             	mov    (%eax),%ax
f011dfe3:	66 83 f8 06          	cmp    $0x6,%ax
f011dfe7:	75 18                	jne    f011e001 <test_krealloc+0x8c0>
f011dfe9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dfef:	01 c0                	add    %eax,%eax
f011dff1:	89 c2                	mov    %eax,%edx
f011dff3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dff6:	01 d0                	add    %edx,%eax
f011dff8:	66 8b 00             	mov    (%eax),%ax
f011dffb:	66 83 f8 06          	cmp    $0x6,%ax
f011dfff:	74 17                	je     f011e018 <test_krealloc+0x8d7>
			panic(
f011e001:	83 ec 04             	sub    $0x4,%esp
f011e004:	68 08 ac 12 f0       	push   $0xf012ac08
f011e009:	68 51 11 00 00       	push   $0x1151
f011e00e:	68 7e a0 12 f0       	push   $0xf012a07e
f011e013:	e8 02 22 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f011e018:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e01e:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f011e021:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e024:	8a 00                	mov    (%eax),%al
f011e026:	3c 07                	cmp    $0x7,%al
f011e028:	75 18                	jne    f011e042 <test_krealloc+0x901>
f011e02a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e030:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e037:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e03a:	01 d0                	add    %edx,%eax
f011e03c:	8a 00                	mov    (%eax),%al
f011e03e:	3c 07                	cmp    $0x7,%al
f011e040:	74 17                	je     f011e059 <test_krealloc+0x918>
			panic(
f011e042:	83 ec 04             	sub    $0x4,%esp
f011e045:	68 08 ac 12 f0       	push   $0xf012ac08
f011e04a:	68 56 11 00 00       	push   $0x1156
f011e04f:	68 7e a0 12 f0       	push   $0xf012a07e
f011e054:	e8 c1 21 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f011e059:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e05c:	66 8b 40 02          	mov    0x2(%eax),%ax
f011e060:	66 83 f8 07          	cmp    $0x7,%ax
f011e064:	75 1c                	jne    f011e082 <test_krealloc+0x941>
f011e066:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e06c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e073:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e076:	01 d0                	add    %edx,%eax
f011e078:	66 8b 40 02          	mov    0x2(%eax),%ax
f011e07c:	66 83 f8 07          	cmp    $0x7,%ax
f011e080:	74 17                	je     f011e099 <test_krealloc+0x958>
			panic(
f011e082:	83 ec 04             	sub    $0x4,%esp
f011e085:	68 08 ac 12 f0       	push   $0xf012ac08
f011e08a:	68 59 11 00 00       	push   $0x1159
f011e08f:	68 7e a0 12 f0       	push   $0xf012a07e
f011e094:	e8 81 21 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f011e099:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e09c:	8b 40 04             	mov    0x4(%eax),%eax
f011e09f:	83 f8 07             	cmp    $0x7,%eax
f011e0a2:	75 1a                	jne    f011e0be <test_krealloc+0x97d>
f011e0a4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e0aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e0b1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e0b4:	01 d0                	add    %edx,%eax
f011e0b6:	8b 40 04             	mov    0x4(%eax),%eax
f011e0b9:	83 f8 07             	cmp    $0x7,%eax
f011e0bc:	74 17                	je     f011e0d5 <test_krealloc+0x994>
			panic(
f011e0be:	83 ec 04             	sub    $0x4,%esp
f011e0c1:	68 08 ac 12 f0       	push   $0xf012ac08
f011e0c6:	68 5c 11 00 00       	push   $0x115c
f011e0cb:	68 7e a0 12 f0       	push   $0xf012a07e
f011e0d0:	e8 45 21 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f011e0d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e0db:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f011e0de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e0e1:	8a 00                	mov    (%eax),%al
f011e0e3:	3c 08                	cmp    $0x8,%al
f011e0e5:	75 18                	jne    f011e0ff <test_krealloc+0x9be>
f011e0e7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e0ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e0f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e0f7:	01 d0                	add    %edx,%eax
f011e0f9:	8a 00                	mov    (%eax),%al
f011e0fb:	3c 08                	cmp    $0x8,%al
f011e0fd:	74 17                	je     f011e116 <test_krealloc+0x9d5>
			panic(
f011e0ff:	83 ec 04             	sub    $0x4,%esp
f011e102:	68 08 ac 12 f0       	push   $0xf012ac08
f011e107:	68 61 11 00 00       	push   $0x1161
f011e10c:	68 7e a0 12 f0       	push   $0xf012a07e
f011e111:	e8 04 21 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f011e116:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e119:	66 8b 40 02          	mov    0x2(%eax),%ax
f011e11d:	66 83 f8 08          	cmp    $0x8,%ax
f011e121:	75 1c                	jne    f011e13f <test_krealloc+0x9fe>
f011e123:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e129:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e130:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e133:	01 d0                	add    %edx,%eax
f011e135:	66 8b 40 02          	mov    0x2(%eax),%ax
f011e139:	66 83 f8 08          	cmp    $0x8,%ax
f011e13d:	74 17                	je     f011e156 <test_krealloc+0xa15>
			panic(
f011e13f:	83 ec 04             	sub    $0x4,%esp
f011e142:	68 08 ac 12 f0       	push   $0xf012ac08
f011e147:	68 64 11 00 00       	push   $0x1164
f011e14c:	68 7e a0 12 f0       	push   $0xf012a07e
f011e151:	e8 c4 20 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f011e156:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e159:	8b 40 04             	mov    0x4(%eax),%eax
f011e15c:	83 f8 08             	cmp    $0x8,%eax
f011e15f:	75 1a                	jne    f011e17b <test_krealloc+0xa3a>
f011e161:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e167:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011e16e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e171:	01 d0                	add    %edx,%eax
f011e173:	8b 40 04             	mov    0x4(%eax),%eax
f011e176:	83 f8 08             	cmp    $0x8,%eax
f011e179:	74 17                	je     f011e192 <test_krealloc+0xa51>
			panic(
f011e17b:	83 ec 04             	sub    $0x4,%esp
f011e17e:	68 08 ac 12 f0       	push   $0xf012ac08
f011e183:	68 67 11 00 00       	push   $0x1167
f011e188:	68 7e a0 12 f0       	push   $0xf012a07e
f011e18d:	e8 88 20 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f011e192:	e8 1c f1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e197:	89 c2                	mov    %eax,%edx
f011e199:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e19c:	39 c2                	cmp    %eax,%edx
f011e19e:	74 17                	je     f011e1b7 <test_krealloc+0xa76>
			panic(
f011e1a0:	83 ec 04             	sub    $0x4,%esp
f011e1a3:	68 c8 ac 12 f0       	push   $0xf012acc8
f011e1a8:	68 6b 11 00 00       	push   $0x116b
f011e1ad:	68 7e a0 12 f0       	push   $0xf012a07e
f011e1b2:	e8 63 20 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f011e1b7:	83 ec 0c             	sub    $0xc,%esp
f011e1ba:	68 14 ad 12 f0       	push   $0xf012ad14
f011e1bf:	e8 d7 2c fe ff       	call   f0100e9b <cprintf>
f011e1c4:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f011e1c7:	e8 e7 f0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e1cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011e1cf:	e8 75 65 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e1d4:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[0], 0);
f011e1d7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e1dd:	83 ec 08             	sub    $0x8,%esp
f011e1e0:	6a 00                	push   $0x0
f011e1e2:	50                   	push   %eax
f011e1e3:	e8 68 a7 fe ff       	call   f0108950 <krealloc>
f011e1e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011e1eb:	e8 59 65 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e1f0:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011e1f3:	74 17                	je     f011e20c <test_krealloc+0xacb>
			panic(
f011e1f5:	83 ec 04             	sub    $0x4,%esp
f011e1f8:	68 38 ad 12 f0       	push   $0xf012ad38
f011e1fd:	68 78 11 00 00       	push   $0x1178
f011e202:	68 7e a0 12 f0       	push   $0xf012a07e
f011e207:	e8 0e 20 fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f011e20c:	e8 a2 f0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e211:	89 c2                	mov    %eax,%edx
f011e213:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e216:	29 c2                	sub    %eax,%edx
f011e218:	89 d0                	mov    %edx,%eax
f011e21a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e21f:	74 17                	je     f011e238 <test_krealloc+0xaf7>
			panic("krealloc: pages in memory are not freed correctly");
f011e221:	83 ec 04             	sub    $0x4,%esp
f011e224:	68 ac ad 12 f0       	push   $0xf012adac
f011e229:	68 7a 11 00 00       	push   $0x117a
f011e22e:	68 7e a0 12 f0       	push   $0xf012a07e
f011e233:	e8 e2 1f fe ff       	call   f010021a <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f011e238:	e8 76 f0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e23d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011e240:	e8 04 65 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e245:	89 45 9c             	mov    %eax,-0x64(%ebp)

		krealloc(ptr_allocations[2], 0);
f011e248:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e24e:	83 ec 08             	sub    $0x8,%esp
f011e251:	6a 00                	push   $0x0
f011e253:	50                   	push   %eax
f011e254:	e8 f7 a6 fe ff       	call   f0108950 <krealloc>
f011e259:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011e25c:	e8 e8 64 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e261:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011e264:	74 17                	je     f011e27d <test_krealloc+0xb3c>
			panic(
f011e266:	83 ec 04             	sub    $0x4,%esp
f011e269:	68 38 ad 12 f0       	push   $0xf012ad38
f011e26e:	68 83 11 00 00       	push   $0x1183
f011e273:	68 7e a0 12 f0       	push   $0xf012a07e
f011e278:	e8 9d 1f fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f011e27d:	e8 31 f0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e282:	89 c2                	mov    %eax,%edx
f011e284:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e287:	29 c2                	sub    %eax,%edx
f011e289:	89 d0                	mov    %edx,%eax
f011e28b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e290:	74 17                	je     f011e2a9 <test_krealloc+0xb68>
			panic("krealloc: pages in memory are not freed correctly");
f011e292:	83 ec 04             	sub    $0x4,%esp
f011e295:	68 ac ad 12 f0       	push   $0xf012adac
f011e29a:	68 85 11 00 00       	push   $0x1185
f011e29f:	68 7e a0 12 f0       	push   $0xf012a07e
f011e2a4:	e8 71 1f fe ff       	call   f010021a <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f011e2a9:	e8 05 f0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e2ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011e2b1:	e8 93 64 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e2b6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[5], 0);
f011e2b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e2bf:	83 ec 08             	sub    $0x8,%esp
f011e2c2:	6a 00                	push   $0x0
f011e2c4:	50                   	push   %eax
f011e2c5:	e8 86 a6 fe ff       	call   f0108950 <krealloc>
f011e2ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011e2cd:	e8 77 64 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e2d2:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011e2d5:	74 17                	je     f011e2ee <test_krealloc+0xbad>
			panic(
f011e2d7:	83 ec 04             	sub    $0x4,%esp
f011e2da:	68 64 a2 12 f0       	push   $0xf012a264
f011e2df:	68 8d 11 00 00       	push   $0x118d
f011e2e4:	68 7e a0 12 f0       	push   $0xf012a07e
f011e2e9:	e8 2c 1f fe ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f011e2ee:	e8 c0 ef fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e2f3:	89 c2                	mov    %eax,%edx
f011e2f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e2f8:	29 c2                	sub    %eax,%edx
f011e2fa:	89 d0                	mov    %edx,%eax
f011e2fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e301:	74 17                	je     f011e31a <test_krealloc+0xbd9>
			panic("krealloc: pages in memory are not freed correctly");
f011e303:	83 ec 04             	sub    $0x4,%esp
f011e306:	68 ac ad 12 f0       	push   $0xf012adac
f011e30b:	68 8f 11 00 00       	push   $0x118f
f011e310:	68 7e a0 12 f0       	push   $0xf012a07e
f011e315:	e8 00 1f fe ff       	call   f010021a <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f011e31a:	e8 94 ef fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e31f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011e322:	e8 22 64 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e327:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[7], 0);
f011e32a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e330:	83 ec 08             	sub    $0x8,%esp
f011e333:	6a 00                	push   $0x0
f011e335:	50                   	push   %eax
f011e336:	e8 15 a6 fe ff       	call   f0108950 <krealloc>
f011e33b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011e33e:	e8 06 64 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011e343:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011e346:	74 17                	je     f011e35f <test_krealloc+0xc1e>
			panic(
f011e348:	83 ec 04             	sub    $0x4,%esp
f011e34b:	68 38 ad 12 f0       	push   $0xf012ad38
f011e350:	68 97 11 00 00       	push   $0x1197
f011e355:	68 7e a0 12 f0       	push   $0xf012a07e
f011e35a:	e8 bb 1e fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f011e35f:	e8 4f ef fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e364:	89 c2                	mov    %eax,%edx
f011e366:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e369:	29 c2                	sub    %eax,%edx
f011e36b:	89 d0                	mov    %edx,%eax
f011e36d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e372:	74 17                	je     f011e38b <test_krealloc+0xc4a>
			panic(
f011e374:	83 ec 04             	sub    $0x4,%esp
f011e377:	68 e0 ad 12 f0       	push   $0xf012ade0
f011e37c:	68 9a 11 00 00       	push   $0x119a
f011e381:	68 7e a0 12 f0       	push   $0xf012a07e
f011e386:	e8 8f 1e fe ff       	call   f010021a <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011e38b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011e392:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011e399:	eb 48                	jmp    f011e3e3 <test_krealloc+0xca2>
					PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f011e39b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011e39e:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011e3a3:	83 ec 04             	sub    $0x4,%esp
f011e3a6:	8d 8d a4 fe ff ff    	lea    -0x15c(%ebp),%ecx
f011e3ac:	51                   	push   %ecx
f011e3ad:	52                   	push   %edx
f011e3ae:	50                   	push   %eax
f011e3af:	e8 f7 91 fe ff       	call   f01075ab <get_page_table>
f011e3b4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f011e3b7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e3bd:	85 c0                	test   %eax,%eax
f011e3bf:	75 17                	jne    f011e3d8 <test_krealloc+0xc97>
					panic(
f011e3c1:	83 ec 04             	sub    $0x4,%esp
f011e3c4:	68 d0 a5 12 f0       	push   $0xf012a5d0
f011e3c9:	68 a6 11 00 00       	push   $0x11a6
f011e3ce:	68 7e a0 12 f0       	push   $0xf012a07e
f011e3d3:	e8 42 1e fe ff       	call   f010021a <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011e3d8:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011e3df:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011e3e3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011e3e7:	78 b2                	js     f011e39b <test_krealloc+0xc5a>
f011e3e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011e3ed:	7f 09                	jg     f011e3f8 <test_krealloc+0xcb7>
f011e3ef:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011e3f6:	76 a3                	jbe    f011e39b <test_krealloc+0xc5a>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f011e3f8:	83 ec 0c             	sub    $0xc,%esp
f011e3fb:	68 1f ae 12 f0       	push   $0xf012ae1f
f011e400:	e8 96 2a fe ff       	call   f0100e9b <cprintf>
f011e405:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f011e408:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e40e:	89 45 ac             	mov    %eax,-0x54(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f011e411:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e418:	eb 1e                	jmp    f011e438 <test_krealloc+0xcf7>
			sums[0] += ptr[i];
f011e41a:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011e420:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011e423:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e426:	01 c8                	add    %ecx,%eax
f011e428:	8a 00                	mov    (%eax),%al
f011e42a:	0f be c0             	movsbl %al,%eax
f011e42d:	01 d0                	add    %edx,%eax
f011e42f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f011e435:	ff 45 dc             	incl   -0x24(%ebp)
f011e438:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e43e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011e441:	7d d7                	jge    f011e41a <test_krealloc+0xcd9>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f011e443:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e449:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
f011e44f:	42                   	inc    %edx
f011e450:	01 d2                	add    %edx,%edx
f011e452:	39 d0                	cmp    %edx,%eax
f011e454:	74 17                	je     f011e46d <test_krealloc+0xd2c>
			panic("krealloc: invalid read after freeing some allocations");
f011e456:	83 ec 04             	sub    $0x4,%esp
f011e459:	68 28 ae 12 f0       	push   $0xf012ae28
f011e45e:	68 b8 11 00 00       	push   $0x11b8
f011e463:	68 7e a0 12 f0       	push   $0xf012a07e
f011e468:	e8 ad 1d fe ff       	call   f010021a <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f011e46d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e473:	89 45 a8             	mov    %eax,-0x58(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f011e476:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e47d:	eb 22                	jmp    f011e4a1 <test_krealloc+0xd60>
			sums[1] += intArr[i];
f011e47f:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
f011e485:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e488:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011e48f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e492:	01 c8                	add    %ecx,%eax
f011e494:	8b 00                	mov    (%eax),%eax
f011e496:	01 d0                	add    %edx,%eax
f011e498:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f011e49e:	ff 45 dc             	incl   -0x24(%ebp)
f011e4a1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e4a7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011e4aa:	7d d3                	jge    f011e47f <test_krealloc+0xd3e>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f011e4ac:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e4b2:	8b 95 04 ff ff ff    	mov    -0xfc(%ebp),%edx
f011e4b8:	42                   	inc    %edx
f011e4b9:	c1 e2 02             	shl    $0x2,%edx
f011e4bc:	39 d0                	cmp    %edx,%eax
f011e4be:	74 17                	je     f011e4d7 <test_krealloc+0xd96>
			panic("krealloc: invalid read after freeing some allocations");
f011e4c0:	83 ec 04             	sub    $0x4,%esp
f011e4c3:	68 28 ae 12 f0       	push   $0xf012ae28
f011e4c8:	68 c2 11 00 00       	push   $0x11c2
f011e4cd:	68 7e a0 12 f0       	push   $0xf012a07e
f011e4d2:	e8 43 1d fe ff       	call   f010021a <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f011e4d7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e4dd:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f011e4e0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e4e7:	eb 21                	jmp    f011e50a <test_krealloc+0xdc9>
			sums[2] += shortArr[i];
f011e4e9:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f011e4ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e4f2:	01 c0                	add    %eax,%eax
f011e4f4:	89 c1                	mov    %eax,%ecx
f011e4f6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e4f9:	01 c8                	add    %ecx,%eax
f011e4fb:	66 8b 00             	mov    (%eax),%ax
f011e4fe:	98                   	cwtl   
f011e4ff:	01 d0                	add    %edx,%eax
f011e501:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f011e507:	ff 45 dc             	incl   -0x24(%ebp)
f011e50a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e510:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011e513:	7d d4                	jge    f011e4e9 <test_krealloc+0xda8>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f011e515:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f011e51b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e521:	8d 48 01             	lea    0x1(%eax),%ecx
f011e524:	89 c8                	mov    %ecx,%eax
f011e526:	c1 e0 02             	shl    $0x2,%eax
f011e529:	01 c8                	add    %ecx,%eax
f011e52b:	39 c2                	cmp    %eax,%edx
f011e52d:	74 17                	je     f011e546 <test_krealloc+0xe05>
			panic("krealloc: invalid read after freeing some allocations");
f011e52f:	83 ec 04             	sub    $0x4,%esp
f011e532:	68 28 ae 12 f0       	push   $0xf012ae28
f011e537:	68 cc 11 00 00       	push   $0x11cc
f011e53c:	68 7e a0 12 f0       	push   $0xf012a07e
f011e541:	e8 d4 1c fe ff       	call   f010021a <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f011e546:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e54c:	89 45 a0             	mov    %eax,-0x60(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f011e54f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e556:	eb 67                	jmp    f011e5bf <test_krealloc+0xe7e>
			sums[3] += structArr[i].a;
f011e558:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f011e55e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e561:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011e568:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e56b:	01 c8                	add    %ecx,%eax
f011e56d:	8a 00                	mov    (%eax),%al
f011e56f:	0f be c0             	movsbl %al,%eax
f011e572:	01 d0                	add    %edx,%eax
f011e574:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			sums[4] += structArr[i].b;
f011e57a:	8b 95 b8 fe ff ff    	mov    -0x148(%ebp),%edx
f011e580:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e583:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011e58a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e58d:	01 c8                	add    %ecx,%eax
f011e58f:	66 8b 40 02          	mov    0x2(%eax),%ax
f011e593:	98                   	cwtl   
f011e594:	01 d0                	add    %edx,%eax
f011e596:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			sums[5] += structArr[i].c;
f011e59c:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f011e5a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e5a5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011e5ac:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e5af:	01 c8                	add    %ecx,%eax
f011e5b1:	8b 40 04             	mov    0x4(%eax),%eax
f011e5b4:	01 d0                	add    %edx,%eax
f011e5b6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f011e5bc:	ff 45 dc             	incl   -0x24(%ebp)
f011e5bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e5c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011e5c8:	7d 8e                	jge    f011e558 <test_krealloc+0xe17>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f011e5ca:	8b 8d b4 fe ff ff    	mov    -0x14c(%ebp),%ecx
f011e5d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e5d6:	8d 50 01             	lea    0x1(%eax),%edx
f011e5d9:	89 d0                	mov    %edx,%eax
f011e5db:	01 c0                	add    %eax,%eax
f011e5dd:	01 d0                	add    %edx,%eax
f011e5df:	01 c0                	add    %eax,%eax
f011e5e1:	01 d0                	add    %edx,%eax
f011e5e3:	39 c1                	cmp    %eax,%ecx
f011e5e5:	75 3a                	jne    f011e621 <test_krealloc+0xee0>
				|| sums[4] != (lastIndices[6] + 1) * 7
f011e5e7:	8b 8d b8 fe ff ff    	mov    -0x148(%ebp),%ecx
f011e5ed:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e5f3:	8d 50 01             	lea    0x1(%eax),%edx
f011e5f6:	89 d0                	mov    %edx,%eax
f011e5f8:	01 c0                	add    %eax,%eax
f011e5fa:	01 d0                	add    %edx,%eax
f011e5fc:	01 c0                	add    %eax,%eax
f011e5fe:	01 d0                	add    %edx,%eax
f011e600:	39 c1                	cmp    %eax,%ecx
f011e602:	75 1d                	jne    f011e621 <test_krealloc+0xee0>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f011e604:	8b 8d bc fe ff ff    	mov    -0x144(%ebp),%ecx
f011e60a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e610:	8d 50 01             	lea    0x1(%eax),%edx
f011e613:	89 d0                	mov    %edx,%eax
f011e615:	01 c0                	add    %eax,%eax
f011e617:	01 d0                	add    %edx,%eax
f011e619:	01 c0                	add    %eax,%eax
f011e61b:	01 d0                	add    %edx,%eax
f011e61d:	39 c1                	cmp    %eax,%ecx
f011e61f:	74 17                	je     f011e638 <test_krealloc+0xef7>
			panic("krealloc: invalid read after freeing some allocations");
f011e621:	83 ec 04             	sub    $0x4,%esp
f011e624:	68 28 ae 12 f0       	push   $0xf012ae28
f011e629:	68 da 11 00 00       	push   $0x11da
f011e62e:	68 7e a0 12 f0       	push   $0xf012a07e
f011e633:	e8 e2 1b fe ff       	call   f010021a <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f011e638:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f011e63f:	e8 6f ec fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e644:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f011e647:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e64d:	83 ec 08             	sub    $0x8,%esp
f011e650:	68 00 3c 00 00       	push   $0x3c00
f011e655:	50                   	push   %eax
f011e656:	e8 f5 a2 fe ff       	call   f0108950 <krealloc>
f011e65b:	83 c4 10             	add    $0x10,%esp
f011e65e:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e661:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e664:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e669:	77 17                	ja     f011e682 <test_krealloc+0xf41>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e66b:	83 ec 04             	sub    $0x4,%esp
f011e66e:	68 68 ab 12 f0       	push   $0xf012ab68
f011e673:	68 e6 11 00 00       	push   $0x11e6
f011e678:	68 7e a0 12 f0       	push   $0xf012a07e
f011e67d:	e8 98 1b fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f011e682:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e688:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011e68b:	74 17                	je     f011e6a4 <test_krealloc+0xf63>
			panic(
f011e68d:	83 ec 04             	sub    $0x4,%esp
f011e690:	68 60 ae 12 f0       	push   $0xf012ae60
f011e695:	68 e9 11 00 00       	push   $0x11e9
f011e69a:	68 7e a0 12 f0       	push   $0xf012a07e
f011e69f:	e8 76 1b fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011e6a4:	e8 0a ec fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e6a9:	89 c2                	mov    %eax,%edx
f011e6ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e6ae:	39 c2                	cmp    %eax,%edx
f011e6b0:	74 17                	je     f011e6c9 <test_krealloc+0xf88>
			panic(
f011e6b2:	83 ec 04             	sub    $0x4,%esp
f011e6b5:	68 cc ae 12 f0       	push   $0xf012aecc
f011e6ba:	68 ec 11 00 00       	push   $0x11ec
f011e6bf:	68 7e a0 12 f0       	push   $0xf012a07e
f011e6c4:	e8 51 1b fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f011e6c9:	e8 e5 eb fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e6ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f011e6d1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e6d7:	83 ec 08             	sub    $0x8,%esp
f011e6da:	68 00 fc 0f 00       	push   $0xffc00
f011e6df:	50                   	push   %eax
f011e6e0:	e8 6b a2 fe ff       	call   f0108950 <krealloc>
f011e6e5:	83 c4 10             	add    $0x10,%esp
f011e6e8:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e6eb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e6ee:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e6f3:	77 17                	ja     f011e70c <test_krealloc+0xfcb>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e6f5:	83 ec 04             	sub    $0x4,%esp
f011e6f8:	68 68 ab 12 f0       	push   $0xf012ab68
f011e6fd:	68 f2 11 00 00       	push   $0x11f2
f011e702:	68 7e a0 12 f0       	push   $0xf012a07e
f011e707:	e8 0e 1b fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[4])
f011e70c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e712:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011e715:	74 17                	je     f011e72e <test_krealloc+0xfed>
			panic(
f011e717:	83 ec 04             	sub    $0x4,%esp
f011e71a:	68 60 ae 12 f0       	push   $0xf012ae60
f011e71f:	68 f5 11 00 00       	push   $0x11f5
f011e724:	68 7e a0 12 f0       	push   $0xf012a07e
f011e729:	e8 ec 1a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011e72e:	e8 80 eb fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e733:	89 c2                	mov    %eax,%edx
f011e735:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e738:	39 c2                	cmp    %eax,%edx
f011e73a:	74 17                	je     f011e753 <test_krealloc+0x1012>
			panic(
f011e73c:	83 ec 04             	sub    $0x4,%esp
f011e73f:	68 cc ae 12 f0       	push   $0xf012aecc
f011e744:	68 f8 11 00 00       	push   $0x11f8
f011e749:	68 7e a0 12 f0       	push   $0xf012a07e
f011e74e:	e8 c7 1a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f011e753:	e8 5b eb fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e758:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f011e75b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e761:	83 ec 08             	sub    $0x8,%esp
f011e764:	68 00 fc 0f 00       	push   $0xffc00
f011e769:	50                   	push   %eax
f011e76a:	e8 e1 a1 fe ff       	call   f0108950 <krealloc>
f011e76f:	83 c4 10             	add    $0x10,%esp
f011e772:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e775:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e778:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e77d:	77 17                	ja     f011e796 <test_krealloc+0x1055>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e77f:	83 ec 04             	sub    $0x4,%esp
f011e782:	68 68 ab 12 f0       	push   $0xf012ab68
f011e787:	68 fe 11 00 00       	push   $0x11fe
f011e78c:	68 7e a0 12 f0       	push   $0xf012a07e
f011e791:	e8 84 1a fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f011e796:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e79c:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011e79f:	74 17                	je     f011e7b8 <test_krealloc+0x1077>
			panic(
f011e7a1:	83 ec 04             	sub    $0x4,%esp
f011e7a4:	68 60 ae 12 f0       	push   $0xf012ae60
f011e7a9:	68 01 12 00 00       	push   $0x1201
f011e7ae:	68 7e a0 12 f0       	push   $0xf012a07e
f011e7b3:	e8 62 1a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011e7b8:	e8 f6 ea fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e7bd:	89 c2                	mov    %eax,%edx
f011e7bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e7c2:	39 c2                	cmp    %eax,%edx
f011e7c4:	74 17                	je     f011e7dd <test_krealloc+0x109c>
			panic(
f011e7c6:	83 ec 04             	sub    $0x4,%esp
f011e7c9:	68 cc ae 12 f0       	push   $0xf012aecc
f011e7ce:	68 04 12 00 00       	push   $0x1204
f011e7d3:	68 7e a0 12 f0       	push   $0xf012a07e
f011e7d8:	e8 3d 1a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f011e7dd:	e8 d1 ea fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e7e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f011e7e5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e7eb:	83 ec 08             	sub    $0x8,%esp
f011e7ee:	68 00 fc 0f 00       	push   $0xffc00
f011e7f3:	50                   	push   %eax
f011e7f4:	e8 57 a1 fe ff       	call   f0108950 <krealloc>
f011e7f9:	83 c4 10             	add    $0x10,%esp
f011e7fc:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e7ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e802:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e807:	77 17                	ja     f011e820 <test_krealloc+0x10df>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e809:	83 ec 04             	sub    $0x4,%esp
f011e80c:	68 68 ab 12 f0       	push   $0xf012ab68
f011e811:	68 0c 12 00 00       	push   $0x120c
f011e816:	68 7e a0 12 f0       	push   $0xf012a07e
f011e81b:	e8 fa 19 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[3])
f011e820:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e826:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011e829:	74 17                	je     f011e842 <test_krealloc+0x1101>
			panic(
f011e82b:	83 ec 04             	sub    $0x4,%esp
f011e82e:	68 10 af 12 f0       	push   $0xf012af10
f011e833:	68 0f 12 00 00       	push   $0x120f
f011e838:	68 7e a0 12 f0       	push   $0xf012a07e
f011e83d:	e8 d8 19 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011e842:	e8 6c ea fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e847:	89 c2                	mov    %eax,%edx
f011e849:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e84c:	39 c2                	cmp    %eax,%edx
f011e84e:	74 17                	je     f011e867 <test_krealloc+0x1126>
			panic(
f011e850:	83 ec 04             	sub    $0x4,%esp
f011e853:	68 cc ae 12 f0       	push   $0xf012aecc
f011e858:	68 12 12 00 00       	push   $0x1212
f011e85d:	68 7e a0 12 f0       	push   $0xf012a07e
f011e862:	e8 b3 19 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f011e867:	83 ec 0c             	sub    $0xc,%esp
f011e86a:	68 70 af 12 f0       	push   $0xf012af70
f011e86f:	e8 27 26 fe ff       	call   f0100e9b <cprintf>
f011e874:	83 c4 10             	add    $0x10,%esp
	{
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f011e877:	e8 37 ea fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e87c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f011e87f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e885:	83 ec 08             	sub    $0x8,%esp
f011e888:	68 00 18 10 00       	push   $0x101800
f011e88d:	50                   	push   %eax
f011e88e:	e8 bd a0 fe ff       	call   f0108950 <krealloc>
f011e893:	83 c4 10             	add    $0x10,%esp
f011e896:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e899:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e89c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e8a1:	77 17                	ja     f011e8ba <test_krealloc+0x1179>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e8a3:	83 ec 04             	sub    $0x4,%esp
f011e8a6:	68 68 ab 12 f0       	push   $0xf012ab68
f011e8ab:	68 1b 12 00 00       	push   $0x121b
f011e8b0:	68 7e a0 12 f0       	push   $0xf012a07e
f011e8b5:	e8 60 19 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f011e8ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e8c0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011e8c3:	74 17                	je     f011e8dc <test_krealloc+0x119b>
			panic(
f011e8c5:	83 ec 04             	sub    $0x4,%esp
f011e8c8:	68 78 af 12 f0       	push   $0xf012af78
f011e8cd:	68 1e 12 00 00       	push   $0x121e
f011e8d2:	68 7e a0 12 f0       	push   $0xf012a07e
f011e8d7:	e8 3e 19 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f011e8dc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011e8df:	e8 cf e9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e8e4:	29 c3                	sub    %eax,%ebx
f011e8e6:	89 d8                	mov    %ebx,%eax
f011e8e8:	83 f8 02             	cmp    $0x2,%eax
f011e8eb:	74 17                	je     f011e904 <test_krealloc+0x11c3>
			panic("krealloc: pages in memory are not loaded correctly");
f011e8ed:	83 ec 04             	sub    $0x4,%esp
f011e8f0:	68 f4 af 12 f0       	push   $0xf012aff4
f011e8f5:	68 20 12 00 00       	push   $0x1220
f011e8fa:	68 7e a0 12 f0       	push   $0xf012a07e
f011e8ff:	e8 16 19 fe ff       	call   f010021a <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f011e904:	e8 aa e9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e909:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f011e90c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e912:	83 ec 08             	sub    $0x8,%esp
f011e915:	68 00 fc 3f 00       	push   $0x3ffc00
f011e91a:	50                   	push   %eax
f011e91b:	e8 30 a0 fe ff       	call   f0108950 <krealloc>
f011e920:	83 c4 10             	add    $0x10,%esp
f011e923:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e926:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e929:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e92e:	77 17                	ja     f011e947 <test_krealloc+0x1206>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e930:	83 ec 04             	sub    $0x4,%esp
f011e933:	68 68 ab 12 f0       	push   $0xf012ab68
f011e938:	68 26 12 00 00       	push   $0x1226
f011e93d:	68 7e a0 12 f0       	push   $0xf012a07e
f011e942:	e8 d3 18 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[4])
f011e947:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e94d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011e950:	74 17                	je     f011e969 <test_krealloc+0x1228>
			panic(
f011e952:	83 ec 04             	sub    $0x4,%esp
f011e955:	68 78 af 12 f0       	push   $0xf012af78
f011e95a:	68 29 12 00 00       	push   $0x1229
f011e95f:	68 7e a0 12 f0       	push   $0xf012a07e
f011e964:	e8 b1 18 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f011e969:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011e96c:	e8 42 e9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e971:	29 c3                	sub    %eax,%ebx
f011e973:	89 d8                	mov    %ebx,%eax
f011e975:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e97a:	74 17                	je     f011e993 <test_krealloc+0x1252>
			panic("krealloc: pages in memory are not loaded correctly");
f011e97c:	83 ec 04             	sub    $0x4,%esp
f011e97f:	68 f4 af 12 f0       	push   $0xf012aff4
f011e984:	68 2c 12 00 00       	push   $0x122c
f011e989:	68 7e a0 12 f0       	push   $0xf012a07e
f011e98e:	e8 87 18 fe ff       	call   f010021a <_panic>


	}
	cprintf("\b\b\b60%");
f011e993:	83 ec 0c             	sub    $0xc,%esp
f011e996:	68 27 b0 12 f0       	push   $0xf012b027
f011e99b:	e8 fb 24 fe ff       	call   f0100e9b <cprintf>
f011e9a0:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f011e9a3:	e8 0b e9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011e9a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f011e9ab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e9b1:	83 ec 08             	sub    $0x8,%esp
f011e9b4:	68 00 fc 9f 00       	push   $0x9ffc00
f011e9b9:	50                   	push   %eax
f011e9ba:	e8 91 9f fe ff       	call   f0108950 <krealloc>
f011e9bf:	83 c4 10             	add    $0x10,%esp
f011e9c2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011e9c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e9c8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e9cd:	77 17                	ja     f011e9e6 <test_krealloc+0x12a5>
			panic("krealloc: Wrong start address for the allocated space... ");
f011e9cf:	83 ec 04             	sub    $0x4,%esp
f011e9d2:	68 68 ab 12 f0       	push   $0xf012ab68
f011e9d7:	68 37 12 00 00       	push   $0x1237
f011e9dc:	68 7e a0 12 f0       	push   $0xf012a07e
f011e9e1:	e8 34 18 fe ff       	call   f010021a <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f011e9e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e9e9:	3d 00 50 e0 f8       	cmp    $0xf8e05000,%eax
f011e9ee:	74 18                	je     f011ea08 <test_krealloc+0x12c7>
			panic(
f011e9f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e9f3:	50                   	push   %eax
f011e9f4:	68 30 b0 12 f0       	push   $0xf012b030
f011e9f9:	68 3b 12 00 00       	push   $0x123b
f011e9fe:	68 7e a0 12 f0       	push   $0xf012a07e
f011ea03:	e8 12 18 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f011ea08:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ea0e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011ea11:	75 17                	jne    f011ea2a <test_krealloc+0x12e9>
			panic(
f011ea13:	83 ec 04             	sub    $0x4,%esp
f011ea16:	68 74 b0 12 f0       	push   $0xf012b074
f011ea1b:	68 3e 12 00 00       	push   $0x123e
f011ea20:	68 7e a0 12 f0       	push   $0xf012a07e
f011ea25:	e8 f0 17 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f011ea2a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011ea2d:	e8 81 e8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ea32:	29 c3                	sub    %eax,%ebx
f011ea34:	89 d8                	mov    %ebx,%eax
f011ea36:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ea3b:	74 17                	je     f011ea54 <test_krealloc+0x1313>
			panic("krealloc: pages in memory are not loaded correctly");
f011ea3d:	83 ec 04             	sub    $0x4,%esp
f011ea40:	68 f4 af 12 f0       	push   $0xf012aff4
f011ea45:	68 41 12 00 00       	push   $0x1241
f011ea4a:	68 7e a0 12 f0       	push   $0xf012a07e
f011ea4f:	e8 c6 17 fe ff       	call   f010021a <_panic>

		ptr_allocations[4] = newAddress;
f011ea54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ea57:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f011ea5d:	e8 51 e8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ea62:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f011ea65:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ea6b:	83 ec 08             	sub    $0x8,%esp
f011ea6e:	68 00 fc 5f 00       	push   $0x5ffc00
f011ea73:	50                   	push   %eax
f011ea74:	e8 d7 9e fe ff       	call   f0108950 <krealloc>
f011ea79:	83 c4 10             	add    $0x10,%esp
f011ea7c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011ea7f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ea82:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011ea87:	77 17                	ja     f011eaa0 <test_krealloc+0x135f>
			panic("krealloc: Wrong start address for the allocated space... ");
f011ea89:	83 ec 04             	sub    $0x4,%esp
f011ea8c:	68 68 ab 12 f0       	push   $0xf012ab68
f011ea91:	68 4a 12 00 00       	push   $0x124a
f011ea96:	68 7e a0 12 f0       	push   $0xf012a07e
f011ea9b:	e8 7a 17 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[6])
f011eaa0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011eaa6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011eaa9:	74 17                	je     f011eac2 <test_krealloc+0x1381>
			panic(
f011eaab:	83 ec 04             	sub    $0x4,%esp
f011eaae:	68 78 af 12 f0       	push   $0xf012af78
f011eab3:	68 4d 12 00 00       	push   $0x124d
f011eab8:	68 7e a0 12 f0       	push   $0xf012a07e
f011eabd:	e8 58 17 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f011eac2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011eac5:	e8 e9 e7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011eaca:	29 c3                	sub    %eax,%ebx
f011eacc:	89 d8                	mov    %ebx,%eax
f011eace:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ead3:	74 17                	je     f011eaec <test_krealloc+0x13ab>
			panic("krealloc: pages in memory are not loaded correctly");
f011ead5:	83 ec 04             	sub    $0x4,%esp
f011ead8:	68 f4 af 12 f0       	push   $0xf012aff4
f011eadd:	68 50 12 00 00       	push   $0x1250
f011eae2:	68 7e a0 12 f0       	push   $0xf012a07e
f011eae7:	e8 2e 17 fe ff       	call   f010021a <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f011eaec:	e8 c2 e7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011eaf1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f011eaf4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011eafa:	83 ec 08             	sub    $0x8,%esp
f011eafd:	68 00 fc 3f 01       	push   $0x13ffc00
f011eb02:	50                   	push   %eax
f011eb03:	e8 48 9e fe ff       	call   f0108950 <krealloc>
f011eb08:	83 c4 10             	add    $0x10,%esp
f011eb0b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011eb0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011eb11:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011eb16:	77 17                	ja     f011eb2f <test_krealloc+0x13ee>
			panic("krealloc: Wrong start address for the allocated space... ");
f011eb18:	83 ec 04             	sub    $0x4,%esp
f011eb1b:	68 68 ab 12 f0       	push   $0xf012ab68
f011eb20:	68 57 12 00 00       	push   $0x1257
f011eb25:	68 7e a0 12 f0       	push   $0xf012a07e
f011eb2a:	e8 eb 16 fe ff       	call   f010021a <_panic>
		if (newAddress == ptr_allocations[6])
f011eb2f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011eb35:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011eb38:	75 17                	jne    f011eb51 <test_krealloc+0x1410>
			panic(
f011eb3a:	83 ec 04             	sub    $0x4,%esp
f011eb3d:	68 74 b0 12 f0       	push   $0xf012b074
f011eb42:	68 5a 12 00 00       	push   $0x125a
f011eb47:	68 7e a0 12 f0       	push   $0xf012a07e
f011eb4c:	e8 c9 16 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f011eb51:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011eb54:	3d 00 50 80 f9       	cmp    $0xf9805000,%eax
f011eb59:	74 17                	je     f011eb72 <test_krealloc+0x1431>
			panic("krealloc: Wrong start address for reallocated space");
f011eb5b:	83 ec 04             	sub    $0x4,%esp
f011eb5e:	68 f8 b0 12 f0       	push   $0xf012b0f8
f011eb63:	68 5c 12 00 00       	push   $0x125c
f011eb68:	68 7e a0 12 f0       	push   $0xf012a07e
f011eb6d:	e8 a8 16 fe ff       	call   f010021a <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f011eb72:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011eb75:	e8 39 e7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011eb7a:	29 c3                	sub    %eax,%ebx
f011eb7c:	89 d8                	mov    %ebx,%eax
f011eb7e:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f011eb83:	74 17                	je     f011eb9c <test_krealloc+0x145b>
			panic("krealloc: pages in memory are not loaded correctly");
f011eb85:	83 ec 04             	sub    $0x4,%esp
f011eb88:	68 f4 af 12 f0       	push   $0xf012aff4
f011eb8d:	68 5f 12 00 00       	push   $0x125f
f011eb92:	68 7e a0 12 f0       	push   $0xf012a07e
f011eb97:	e8 7e 16 fe ff       	call   f010021a <_panic>

		ptr_allocations[6] = newAddress;
f011eb9c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011eb9f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f011eba5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ebab:	89 45 ac             	mov    %eax,-0x54(%ebp)
		int i;
		sums[0] = 0;
f011ebae:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f011ebb5:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f011ebb8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011ebbf:	eb 1e                	jmp    f011ebdf <test_krealloc+0x149e>
			sums[0] += ptr[i];
f011ebc1:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011ebc7:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f011ebca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ebcd:	01 c8                	add    %ecx,%eax
f011ebcf:	8a 00                	mov    (%eax),%al
f011ebd1:	0f be c0             	movsbl %al,%eax
f011ebd4:	01 d0                	add    %edx,%eax
f011ebd6:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f011ebdc:	ff 45 d8             	incl   -0x28(%ebp)
f011ebdf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ebe5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebe8:	7d d7                	jge    f011ebc1 <test_krealloc+0x1480>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f011ebea:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ebf0:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
f011ebf6:	42                   	inc    %edx
f011ebf7:	01 d2                	add    %edx,%edx
f011ebf9:	39 d0                	cmp    %edx,%eax
f011ebfb:	74 17                	je     f011ec14 <test_krealloc+0x14d3>
			panic("krealloc: invalid read after re-allocations");
f011ebfd:	83 ec 04             	sub    $0x4,%esp
f011ec00:	68 2c b1 12 f0       	push   $0xf012b12c
f011ec05:	68 6d 12 00 00       	push   $0x126d
f011ec0a:	68 7e a0 12 f0       	push   $0xf012a07e
f011ec0f:	e8 06 16 fe ff       	call   f010021a <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f011ec14:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ec1a:	89 45 a0             	mov    %eax,-0x60(%ebp)

		sums[0] = 0;
f011ec1d:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f011ec24:	00 00 00 
		sums[1] = 0;
f011ec27:	c7 85 ac fe ff ff 00 	movl   $0x0,-0x154(%ebp)
f011ec2e:	00 00 00 
		sums[2] = 0;
f011ec31:	c7 85 b0 fe ff ff 00 	movl   $0x0,-0x150(%ebp)
f011ec38:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f011ec3b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011ec42:	eb 67                	jmp    f011ecab <test_krealloc+0x156a>
			sums[0] += structArr[i].a;
f011ec44:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011ec4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec4d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011ec54:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec57:	01 c8                	add    %ecx,%eax
f011ec59:	8a 00                	mov    (%eax),%al
f011ec5b:	0f be c0             	movsbl %al,%eax
f011ec5e:	01 d0                	add    %edx,%eax
f011ec60:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
			sums[1] += structArr[i].b;
f011ec66:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
f011ec6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec6f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011ec76:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec79:	01 c8                	add    %ecx,%eax
f011ec7b:	66 8b 40 02          	mov    0x2(%eax),%ax
f011ec7f:	98                   	cwtl   
f011ec80:	01 d0                	add    %edx,%eax
f011ec82:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
			sums[2] += structArr[i].c;
f011ec88:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f011ec8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec91:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011ec98:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec9b:	01 c8                	add    %ecx,%eax
f011ec9d:	8b 40 04             	mov    0x4(%eax),%eax
f011eca0:	01 d0                	add    %edx,%eax
f011eca2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f011eca8:	ff 45 d8             	incl   -0x28(%ebp)
f011ecab:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ecb1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ecb4:	7d 8e                	jge    f011ec44 <test_krealloc+0x1503>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f011ecb6:	8b 8d a8 fe ff ff    	mov    -0x158(%ebp),%ecx
f011ecbc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ecc2:	8d 50 01             	lea    0x1(%eax),%edx
f011ecc5:	89 d0                	mov    %edx,%eax
f011ecc7:	01 c0                	add    %eax,%eax
f011ecc9:	01 d0                	add    %edx,%eax
f011eccb:	01 c0                	add    %eax,%eax
f011eccd:	01 d0                	add    %edx,%eax
f011eccf:	39 c1                	cmp    %eax,%ecx
f011ecd1:	75 3a                	jne    f011ed0d <test_krealloc+0x15cc>
				|| sums[1] != (lastIndices[6] + 1) * 7
f011ecd3:	8b 8d ac fe ff ff    	mov    -0x154(%ebp),%ecx
f011ecd9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ecdf:	8d 50 01             	lea    0x1(%eax),%edx
f011ece2:	89 d0                	mov    %edx,%eax
f011ece4:	01 c0                	add    %eax,%eax
f011ece6:	01 d0                	add    %edx,%eax
f011ece8:	01 c0                	add    %eax,%eax
f011ecea:	01 d0                	add    %edx,%eax
f011ecec:	39 c1                	cmp    %eax,%ecx
f011ecee:	75 1d                	jne    f011ed0d <test_krealloc+0x15cc>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f011ecf0:	8b 8d b0 fe ff ff    	mov    -0x150(%ebp),%ecx
f011ecf6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ecfc:	8d 50 01             	lea    0x1(%eax),%edx
f011ecff:	89 d0                	mov    %edx,%eax
f011ed01:	01 c0                	add    %eax,%eax
f011ed03:	01 d0                	add    %edx,%eax
f011ed05:	01 c0                	add    %eax,%eax
f011ed07:	01 d0                	add    %edx,%eax
f011ed09:	39 c1                	cmp    %eax,%ecx
f011ed0b:	74 17                	je     f011ed24 <test_krealloc+0x15e3>
			panic("krealloc: invalid read after re-allocations");
f011ed0d:	83 ec 04             	sub    $0x4,%esp
f011ed10:	68 2c b1 12 f0       	push   $0xf012b12c
f011ed15:	68 7f 12 00 00       	push   $0x127f
f011ed1a:	68 7e a0 12 f0       	push   $0xf012a07e
f011ed1f:	e8 f6 14 fe ff       	call   f010021a <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f011ed24:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ed2a:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		sums[0] = 0;
f011ed2d:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f011ed34:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f011ed37:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011ed3e:	eb 21                	jmp    f011ed61 <test_krealloc+0x1620>
			sums[0] += shortArr[i];
f011ed40:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011ed46:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ed49:	01 c0                	add    %eax,%eax
f011ed4b:	89 c1                	mov    %eax,%ecx
f011ed4d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ed50:	01 c8                	add    %ecx,%eax
f011ed52:	66 8b 00             	mov    (%eax),%ax
f011ed55:	98                   	cwtl   
f011ed56:	01 d0                	add    %edx,%eax
f011ed58:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f011ed5e:	ff 45 d8             	incl   -0x28(%ebp)
f011ed61:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ed67:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ed6a:	7d d4                	jge    f011ed40 <test_krealloc+0x15ff>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f011ed6c:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011ed72:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ed78:	8d 48 01             	lea    0x1(%eax),%ecx
f011ed7b:	89 c8                	mov    %ecx,%eax
f011ed7d:	c1 e0 02             	shl    $0x2,%eax
f011ed80:	01 c8                	add    %ecx,%eax
f011ed82:	39 c2                	cmp    %eax,%edx
f011ed84:	74 17                	je     f011ed9d <test_krealloc+0x165c>
			panic("krealloc: invalid read after re-allocations");
f011ed86:	83 ec 04             	sub    $0x4,%esp
f011ed89:	68 2c b1 12 f0       	push   $0xf012b12c
f011ed8e:	68 89 12 00 00       	push   $0x1289
f011ed93:	68 7e a0 12 f0       	push   $0xf012a07e
f011ed98:	e8 7d 14 fe ff       	call   f010021a <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f011ed9d:	e8 11 e5 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011eda2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011eda5:	e8 9f 59 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011edaa:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[6], 0);
f011edad:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011edb3:	83 ec 08             	sub    $0x8,%esp
f011edb6:	6a 00                	push   $0x0
f011edb8:	50                   	push   %eax
f011edb9:	e8 92 9b fe ff       	call   f0108950 <krealloc>
f011edbe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011edc1:	e8 83 59 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011edc6:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011edc9:	74 17                	je     f011ede2 <test_krealloc+0x16a1>
			panic(
f011edcb:	83 ec 04             	sub    $0x4,%esp
f011edce:	68 64 a2 12 f0       	push   $0xf012a264
f011edd3:	68 91 12 00 00       	push   $0x1291
f011edd8:	68 7e a0 12 f0       	push   $0xf012a07e
f011eddd:	e8 38 14 fe ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f011ede2:	e8 cc e4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ede7:	89 c2                	mov    %eax,%edx
f011ede9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011edec:	29 c2                	sub    %eax,%edx
f011edee:	89 d0                	mov    %edx,%eax
f011edf0:	3d 00 14 00 00       	cmp    $0x1400,%eax
f011edf5:	74 17                	je     f011ee0e <test_krealloc+0x16cd>
			panic("krealloc: pages in memory are not freed correctly");
f011edf7:	83 ec 04             	sub    $0x4,%esp
f011edfa:	68 ac ad 12 f0       	push   $0xf012adac
f011edff:	68 93 12 00 00       	push   $0x1293
f011ee04:	68 7e a0 12 f0       	push   $0xf012a07e
f011ee09:	e8 0c 14 fe ff       	call   f010021a <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f011ee0e:	e8 a0 e4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ee13:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ee16:	e8 2e 59 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ee1b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		kfree(ptr_allocations[4]);
f011ee1e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ee24:	83 ec 0c             	sub    $0xc,%esp
f011ee27:	50                   	push   %eax
f011ee28:	e8 0c 99 fe ff       	call   f0108739 <kfree>
f011ee2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011ee30:	e8 14 59 fe ff       	call   f0104749 <pf_calculate_free_frames>
f011ee35:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011ee38:	74 17                	je     f011ee51 <test_krealloc+0x1710>
			panic(
f011ee3a:	83 ec 04             	sub    $0x4,%esp
f011ee3d:	68 64 a2 12 f0       	push   $0xf012a264
f011ee42:	68 9b 12 00 00       	push   $0x129b
f011ee47:	68 7e a0 12 f0       	push   $0xf012a07e
f011ee4c:	e8 c9 13 fe ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f011ee51:	e8 5d e4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ee56:	89 c2                	mov    %eax,%edx
f011ee58:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ee5b:	29 c2                	sub    %eax,%edx
f011ee5d:	89 d0                	mov    %edx,%eax
f011ee5f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f011ee64:	74 17                	je     f011ee7d <test_krealloc+0x173c>
			panic("krealloc: pages in memory are not freed correctly");
f011ee66:	83 ec 04             	sub    $0x4,%esp
f011ee69:	68 ac ad 12 f0       	push   $0xf012adac
f011ee6e:	68 9d 12 00 00       	push   $0x129d
f011ee73:	68 7e a0 12 f0       	push   $0xf012a07e
f011ee78:	e8 9d 13 fe ff       	call   f010021a <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011ee7d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f011ee84:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011ee8b:	eb 48                	jmp    f011eed5 <test_krealloc+0x1794>
					PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f011ee8d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee90:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011ee95:	83 ec 04             	sub    $0x4,%esp
f011ee98:	8d 8d a0 fe ff ff    	lea    -0x160(%ebp),%ecx
f011ee9e:	51                   	push   %ecx
f011ee9f:	52                   	push   %edx
f011eea0:	50                   	push   %eax
f011eea1:	e8 05 87 fe ff       	call   f01075ab <get_page_table>
f011eea6:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f011eea9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011eeaf:	85 c0                	test   %eax,%eax
f011eeb1:	75 17                	jne    f011eeca <test_krealloc+0x1789>
					panic(
f011eeb3:	83 ec 04             	sub    $0x4,%esp
f011eeb6:	68 d0 a5 12 f0       	push   $0xf012a5d0
f011eebb:	68 aa 12 00 00       	push   $0x12aa
f011eec0:	68 7e a0 12 f0       	push   $0xf012a07e
f011eec5:	e8 50 13 fe ff       	call   f010021a <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011eeca:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f011eed1:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f011eed5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011eed9:	78 b2                	js     f011ee8d <test_krealloc+0x174c>
f011eedb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011eedf:	7f 09                	jg     f011eeea <test_krealloc+0x17a9>
f011eee1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011eee8:	76 a3                	jbe    f011ee8d <test_krealloc+0x174c>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f011eeea:	83 ec 0c             	sub    $0xc,%esp
f011eeed:	68 58 b1 12 f0       	push   $0xf012b158
f011eef2:	e8 a4 1f fe ff       	call   f0100e9b <cprintf>
f011eef7:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f011eefa:	83 ec 0c             	sub    $0xc,%esp
f011eefd:	68 64 b1 12 f0       	push   $0xf012b164
f011ef02:	e8 94 1f fe ff       	call   f0100e9b <cprintf>
f011ef07:	83 c4 10             	add    $0x10,%esp
	return 0;
f011ef0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011ef0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ef12:	5b                   	pop    %ebx
f011ef13:	5f                   	pop    %edi
f011ef14:	5d                   	pop    %ebp
f011ef15:	c3                   	ret    

f011ef16 <test_krealloc_BF>:


int test_krealloc_BF() {
f011ef16:	55                   	push   %ebp
f011ef17:	89 e5                	mov    %esp,%ebp
f011ef19:	57                   	push   %edi
f011ef1a:	53                   	push   %ebx
f011ef1b:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011ef21:	83 ec 0c             	sub    $0xc,%esp
f011ef24:	68 0c 99 12 f0       	push   $0xf012990c
f011ef29:	e8 6d 1f fe ff       	call   f0100e9b <cprintf>
f011ef2e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011ef31:	83 ec 0c             	sub    $0xc,%esp
f011ef34:	68 3c 99 12 f0       	push   $0xf012993c
f011ef39:	e8 5d 1f fe ff       	call   f0100e9b <cprintf>
f011ef3e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011ef41:	83 ec 0c             	sub    $0xc,%esp
f011ef44:	68 0c 99 12 f0       	push   $0xf012990c
f011ef49:	e8 4d 1f fe ff       	call   f0100e9b <cprintf>
f011ef4e:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f011ef51:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f011ef55:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f011ef59:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f011ef5f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f011ef65:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011ef6c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
	lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f011ef73:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011ef79:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef7e:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef83:	89 d7                	mov    %edx,%edi
f011ef85:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f011ef87:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f011ef8e:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f011ef94:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef99:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef9e:	89 d7                	mov    %edx,%edi
f011efa0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f011efa2:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f011efa8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011efad:	b8 00 00 00 00       	mov    $0x0,%eax
f011efb2:	89 d7                	mov    %edx,%edi
f011efb4:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011efb6:	e8 f8 e2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011efbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f011efbe:	83 ec 08             	sub    $0x8,%esp
f011efc1:	68 00 fc 0f 00       	push   $0xffc00
f011efc6:	6a 00                	push   $0x0
f011efc8:	e8 83 99 fe ff       	call   f0108950 <krealloc>
f011efcd:	83 c4 10             	add    $0x10,%esp
f011efd0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f011efd6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011efdc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011efe1:	77 17                	ja     f011effa <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f011efe3:	83 ec 04             	sub    $0x4,%esp
f011efe6:	68 68 ab 12 f0       	push   $0xf012ab68
f011efeb:	68 d9 12 00 00       	push   $0x12d9
f011eff0:	68 7e a0 12 f0       	push   $0xf012a07e
f011eff5:	e8 20 12 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f011effa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f000:	3d 00 50 00 f8       	cmp    $0xf8005000,%eax
f011f005:	74 17                	je     f011f01e <test_krealloc_BF+0x108>
			panic("krealloc: Wrong start address for allocated space");
f011f007:	83 ec 04             	sub    $0x4,%esp
f011f00a:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f00f:	68 db 12 00 00       	push   $0x12db
f011f014:	68 7e a0 12 f0       	push   $0xf012a07e
f011f019:	e8 fc 11 fe ff       	call   f010021a <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011f01e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f021:	e8 8d e2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f026:	29 c3                	sub    %eax,%ebx
f011f028:	89 d8                	mov    %ebx,%eax
f011f02a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f02f:	74 17                	je     f011f048 <test_krealloc_BF+0x132>
			panic("krealloc: Wrong allocation: ");
f011f031:	83 ec 04             	sub    $0x4,%esp
f011f034:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f039:	68 de 12 00 00       	push   $0x12de
f011f03e:	68 7e a0 12 f0       	push   $0xf012a07e
f011f043:	e8 d2 11 fe ff       	call   f010021a <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f011f048:	c7 85 f8 fe ff ff ff 	movl   $0xffbff,-0x108(%ebp)
f011f04f:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011f052:	e8 5c e2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f057:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f011f05a:	83 ec 08             	sub    $0x8,%esp
f011f05d:	68 00 fc 0f 00       	push   $0xffc00
f011f062:	6a 00                	push   $0x0
f011f064:	e8 e7 98 fe ff       	call   f0108950 <krealloc>
f011f069:	83 c4 10             	add    $0x10,%esp
f011f06c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f011f072:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f078:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f011f07d:	77 17                	ja     f011f096 <test_krealloc_BF+0x180>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f07f:	83 ec 04             	sub    $0x4,%esp
f011f082:	68 68 ab 12 f0       	push   $0xf012ab68
f011f087:	68 e6 12 00 00       	push   $0x12e6
f011f08c:	68 7e a0 12 f0       	push   $0xf012a07e
f011f091:	e8 84 11 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f011f096:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f09c:	3d 00 50 10 f8       	cmp    $0xf8105000,%eax
f011f0a1:	74 17                	je     f011f0ba <test_krealloc_BF+0x1a4>
			panic("krealloc: Wrong start address for allocated space");
f011f0a3:	83 ec 04             	sub    $0x4,%esp
f011f0a6:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f0ab:	68 e8 12 00 00       	push   $0x12e8
f011f0b0:	68 7e a0 12 f0       	push   $0xf012a07e
f011f0b5:	e8 60 11 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011f0ba:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f0bd:	e8 f1 e1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f0c2:	29 c3                	sub    %eax,%ebx
f011f0c4:	89 d8                	mov    %ebx,%eax
f011f0c6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f0cb:	74 17                	je     f011f0e4 <test_krealloc_BF+0x1ce>
			panic("krealloc: Wrong allocation: ");
f011f0cd:	83 ec 04             	sub    $0x4,%esp
f011f0d0:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f0d5:	68 ea 12 00 00       	push   $0x12ea
f011f0da:	68 7e a0 12 f0       	push   $0xf012a07e
f011f0df:	e8 36 11 fe ff       	call   f010021a <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f011f0e4:	c7 85 fc fe ff ff ff 	movl   $0xffbff,-0x104(%ebp)
f011f0eb:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011f0ee:	e8 c0 e1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f0f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f011f0f6:	83 ec 08             	sub    $0x8,%esp
f011f0f9:	68 00 fc 0f 00       	push   $0xffc00
f011f0fe:	6a 00                	push   $0x0
f011f100:	e8 4b 98 fe ff       	call   f0108950 <krealloc>
f011f105:	83 c4 10             	add    $0x10,%esp
f011f108:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f011f10e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f114:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f011f119:	77 17                	ja     f011f132 <test_krealloc_BF+0x21c>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f11b:	83 ec 04             	sub    $0x4,%esp
f011f11e:	68 68 ab 12 f0       	push   $0xf012ab68
f011f123:	68 f2 12 00 00       	push   $0x12f2
f011f128:	68 7e a0 12 f0       	push   $0xf012a07e
f011f12d:	e8 e8 10 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f011f132:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f138:	3d 00 50 20 f8       	cmp    $0xf8205000,%eax
f011f13d:	74 17                	je     f011f156 <test_krealloc_BF+0x240>
			panic("krealloc: Wrong start address for allocated space");
f011f13f:	83 ec 04             	sub    $0x4,%esp
f011f142:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f147:	68 f4 12 00 00       	push   $0x12f4
f011f14c:	68 7e a0 12 f0       	push   $0xf012a07e
f011f151:	e8 c4 10 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011f156:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f159:	e8 55 e1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f15e:	29 c3                	sub    %eax,%ebx
f011f160:	89 d8                	mov    %ebx,%eax
f011f162:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f167:	74 17                	je     f011f180 <test_krealloc_BF+0x26a>
			panic("krealloc: Wrong allocation: ");
f011f169:	83 ec 04             	sub    $0x4,%esp
f011f16c:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f171:	68 f6 12 00 00       	push   $0x12f6
f011f176:	68 7e a0 12 f0       	push   $0xf012a07e
f011f17b:	e8 9a 10 fe ff       	call   f010021a <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f011f180:	c7 85 00 ff ff ff ff 	movl   $0x3feff,-0x100(%ebp)
f011f187:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f011f18a:	e8 24 e1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f18f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f011f192:	83 ec 08             	sub    $0x8,%esp
f011f195:	68 00 fc 0f 00       	push   $0xffc00
f011f19a:	6a 00                	push   $0x0
f011f19c:	e8 af 97 fe ff       	call   f0108950 <krealloc>
f011f1a1:	83 c4 10             	add    $0x10,%esp
f011f1a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f011f1aa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f1b0:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f011f1b5:	77 17                	ja     f011f1ce <test_krealloc_BF+0x2b8>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f1b7:	83 ec 04             	sub    $0x4,%esp
f011f1ba:	68 68 ab 12 f0       	push   $0xf012ab68
f011f1bf:	68 fd 12 00 00       	push   $0x12fd
f011f1c4:	68 7e a0 12 f0       	push   $0xf012a07e
f011f1c9:	e8 4c 10 fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f011f1ce:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f1d4:	3d 00 50 30 f8       	cmp    $0xf8305000,%eax
f011f1d9:	74 17                	je     f011f1f2 <test_krealloc_BF+0x2dc>
			panic("krealloc: Wrong start address for allocated space");
f011f1db:	83 ec 04             	sub    $0x4,%esp
f011f1de:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f1e3:	68 ff 12 00 00       	push   $0x12ff
f011f1e8:	68 7e a0 12 f0       	push   $0xf012a07e
f011f1ed:	e8 28 10 fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f011f1f2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f1f5:	e8 b9 e0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f1fa:	29 c3                	sub    %eax,%ebx
f011f1fc:	89 d8                	mov    %ebx,%eax
f011f1fe:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f203:	74 17                	je     f011f21c <test_krealloc_BF+0x306>
			panic("krealloc: Wrong allocation: ");
f011f205:	83 ec 04             	sub    $0x4,%esp
f011f208:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f20d:	68 01 13 00 00       	push   $0x1301
f011f212:	68 7e a0 12 f0       	push   $0xf012a07e
f011f217:	e8 fe 0f fe ff       	call   f010021a <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f011f21c:	c7 85 04 ff ff ff ff 	movl   $0x3feff,-0xfc(%ebp)
f011f223:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f011f226:	e8 88 e0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f22b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f011f22e:	83 ec 08             	sub    $0x8,%esp
f011f231:	68 00 fc 1f 00       	push   $0x1ffc00
f011f236:	6a 00                	push   $0x0
f011f238:	e8 13 97 fe ff       	call   f0108950 <krealloc>
f011f23d:	83 c4 10             	add    $0x10,%esp
f011f240:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f011f246:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f24c:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f011f251:	77 17                	ja     f011f26a <test_krealloc_BF+0x354>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f253:	83 ec 04             	sub    $0x4,%esp
f011f256:	68 68 ab 12 f0       	push   $0xf012ab68
f011f25b:	68 08 13 00 00       	push   $0x1308
f011f260:	68 7e a0 12 f0       	push   $0xf012a07e
f011f265:	e8 b0 0f fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f011f26a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f270:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f011f275:	74 17                	je     f011f28e <test_krealloc_BF+0x378>
			panic("krealloc: Wrong start address for allocated space");
f011f277:	83 ec 04             	sub    $0x4,%esp
f011f27a:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f27f:	68 0a 13 00 00       	push   $0x130a
f011f284:	68 7e a0 12 f0       	push   $0xf012a07e
f011f289:	e8 8c 0f fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f011f28e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f291:	e8 1d e0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f296:	29 c3                	sub    %eax,%ebx
f011f298:	89 d8                	mov    %ebx,%eax
f011f29a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f29f:	74 17                	je     f011f2b8 <test_krealloc_BF+0x3a2>
			panic("krealloc: Wrong allocation: ");
f011f2a1:	83 ec 04             	sub    $0x4,%esp
f011f2a4:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f2a9:	68 0c 13 00 00       	push   $0x130c
f011f2ae:	68 7e a0 12 f0       	push   $0xf012a07e
f011f2b3:	e8 62 0f fe ff       	call   f010021a <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f011f2b8:	c7 85 08 ff ff ff ff 	movl   $0xffdff,-0xf8(%ebp)
f011f2bf:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f011f2c2:	e8 ec df fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f2c7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f011f2ca:	83 ec 08             	sub    $0x8,%esp
f011f2cd:	68 00 fc 1f 00       	push   $0x1ffc00
f011f2d2:	6a 00                	push   $0x0
f011f2d4:	e8 77 96 fe ff       	call   f0108950 <krealloc>
f011f2d9:	83 c4 10             	add    $0x10,%esp
f011f2dc:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f011f2e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f2e8:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f011f2ed:	77 17                	ja     f011f306 <test_krealloc_BF+0x3f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f2ef:	83 ec 04             	sub    $0x4,%esp
f011f2f2:	68 68 ab 12 f0       	push   $0xf012ab68
f011f2f7:	68 13 13 00 00       	push   $0x1313
f011f2fc:	68 7e a0 12 f0       	push   $0xf012a07e
f011f301:	e8 14 0f fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f011f306:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f30c:	3d 00 50 60 f8       	cmp    $0xf8605000,%eax
f011f311:	74 17                	je     f011f32a <test_krealloc_BF+0x414>
			panic("krealloc: Wrong start address for allocated space");
f011f313:	83 ec 04             	sub    $0x4,%esp
f011f316:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f31b:	68 15 13 00 00       	push   $0x1315
f011f320:	68 7e a0 12 f0       	push   $0xf012a07e
f011f325:	e8 f0 0e fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f011f32a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f32d:	e8 81 df fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f332:	29 c3                	sub    %eax,%ebx
f011f334:	89 d8                	mov    %ebx,%eax
f011f336:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f33b:	74 17                	je     f011f354 <test_krealloc_BF+0x43e>
			panic("krealloc: Wrong allocation: ");
f011f33d:	83 ec 04             	sub    $0x4,%esp
f011f340:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f345:	68 17 13 00 00       	push   $0x1317
f011f34a:	68 7e a0 12 f0       	push   $0xf012a07e
f011f34f:	e8 c6 0e fe ff       	call   f010021a <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f011f354:	c7 85 0c ff ff ff ff 	movl   $0xffdff,-0xf4(%ebp)
f011f35b:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f011f35e:	e8 50 df fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f363:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f011f366:	83 ec 08             	sub    $0x8,%esp
f011f369:	68 00 fc 2f 00       	push   $0x2ffc00
f011f36e:	6a 00                	push   $0x0
f011f370:	e8 db 95 fe ff       	call   f0108950 <krealloc>
f011f375:	83 c4 10             	add    $0x10,%esp
f011f378:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f011f37e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f384:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f011f389:	77 17                	ja     f011f3a2 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f38b:	83 ec 04             	sub    $0x4,%esp
f011f38e:	68 68 ab 12 f0       	push   $0xf012ab68
f011f393:	68 1e 13 00 00       	push   $0x131e
f011f398:	68 7e a0 12 f0       	push   $0xf012a07e
f011f39d:	e8 78 0e fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f011f3a2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3a8:	3d 00 50 80 f8       	cmp    $0xf8805000,%eax
f011f3ad:	74 17                	je     f011f3c6 <test_krealloc_BF+0x4b0>
			panic("krealloc: Wrong start address for allocated space");
f011f3af:	83 ec 04             	sub    $0x4,%esp
f011f3b2:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f3b7:	68 20 13 00 00       	push   $0x1320
f011f3bc:	68 7e a0 12 f0       	push   $0xf012a07e
f011f3c1:	e8 54 0e fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f011f3c6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f3c9:	e8 e5 de fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f3ce:	29 c3                	sub    %eax,%ebx
f011f3d0:	89 d8                	mov    %ebx,%eax
f011f3d2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f3d7:	74 17                	je     f011f3f0 <test_krealloc_BF+0x4da>
			panic("Wrong allocation: ");
f011f3d9:	83 ec 04             	sub    $0x4,%esp
f011f3dc:	68 f3 ab 12 f0       	push   $0xf012abf3
f011f3e1:	68 22 13 00 00       	push   $0x1322
f011f3e6:	68 7e a0 12 f0       	push   $0xf012a07e
f011f3eb:	e8 2a 0e fe ff       	call   f010021a <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f011f3f0:	c7 85 10 ff ff ff 7f 	movl   $0x5ff7f,-0xf0(%ebp)
f011f3f7:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f011f3fa:	e8 b4 de fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f3ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f011f402:	83 ec 08             	sub    $0x8,%esp
f011f405:	68 00 fc 2f 00       	push   $0x2ffc00
f011f40a:	6a 00                	push   $0x0
f011f40c:	e8 3f 95 fe ff       	call   f0108950 <krealloc>
f011f411:	83 c4 10             	add    $0x10,%esp
f011f414:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f011f41a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f420:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f011f425:	77 17                	ja     f011f43e <test_krealloc_BF+0x528>
			panic("krealloc: Wrong start address for the allocated space... ");
f011f427:	83 ec 04             	sub    $0x4,%esp
f011f42a:	68 68 ab 12 f0       	push   $0xf012ab68
f011f42f:	68 29 13 00 00       	push   $0x1329
f011f434:	68 7e a0 12 f0       	push   $0xf012a07e
f011f439:	e8 dc 0d fe ff       	call   f010021a <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f011f43e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f444:	3d 00 50 b0 f8       	cmp    $0xf8b05000,%eax
f011f449:	74 17                	je     f011f462 <test_krealloc_BF+0x54c>
			panic("krealloc: Wrong start address for allocated space");
f011f44b:	83 ec 04             	sub    $0x4,%esp
f011f44e:	68 a4 ab 12 f0       	push   $0xf012aba4
f011f453:	68 2b 13 00 00       	push   $0x132b
f011f458:	68 7e a0 12 f0       	push   $0xf012a07e
f011f45d:	e8 b8 0d fe ff       	call   f010021a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f011f462:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011f465:	e8 49 de fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f46a:	29 c3                	sub    %eax,%ebx
f011f46c:	89 d8                	mov    %ebx,%eax
f011f46e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f473:	74 17                	je     f011f48c <test_krealloc_BF+0x576>
			panic("krealloc: Wrong allocation: ");
f011f475:	83 ec 04             	sub    $0x4,%esp
f011f478:	68 d6 ab 12 f0       	push   $0xf012abd6
f011f47d:	68 2d 13 00 00       	push   $0x132d
f011f482:	68 7e a0 12 f0       	push   $0xf012a07e
f011f487:	e8 8e 0d fe ff       	call   f010021a <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f011f48c:	c7 85 14 ff ff ff 7f 	movl   $0x5ff7f,-0xec(%ebp)
f011f493:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f011f496:	e8 18 de fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f49b:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f011f49e:	c7 45 b4 ff fb 0f 00 	movl   $0xffbff,-0x4c(%ebp)
		byteArr = (char *) ptr_allocations[0];
f011f4a5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f4ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
		byteArr[0] = minByte;
f011f4ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f4b1:	8a 55 cf             	mov    -0x31(%ebp),%dl
f011f4b4:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f011f4b6:	8b 55 b4             	mov    -0x4c(%ebp),%edx
f011f4b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f4bc:	01 c2                	add    %eax,%edx
f011f4be:	8a 45 ce             	mov    -0x32(%ebp),%al
f011f4c1:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f011f4c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f4c9:	89 45 ac             	mov    %eax,-0x54(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f011f4cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f4d3:	eb 0e                	jmp    f011f4e3 <test_krealloc_BF+0x5cd>
			ptr[i] = 2;
f011f4d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f4d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f4db:	01 d0                	add    %edx,%eax
f011f4dd:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f011f4e0:	ff 45 f4             	incl   -0xc(%ebp)
f011f4e3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f4e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f4ec:	7d e7                	jge    f011f4d5 <test_krealloc_BF+0x5bf>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f011f4ee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f4f4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		intArr[0] = 3;
f011f4f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f4fa:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f011f500:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f506:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f50d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f510:	01 d0                	add    %edx,%eax
f011f512:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f011f518:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f51e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f011f521:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011f528:	eb 18                	jmp    f011f542 <test_krealloc_BF+0x62c>
			intArr[i] = 4;
f011f52a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f52d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f534:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f537:	01 d0                	add    %edx,%eax
f011f539:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f011f53f:	ff 45 f0             	incl   -0x10(%ebp)
f011f542:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f548:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011f54b:	7d dd                	jge    f011f52a <test_krealloc_BF+0x614>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f011f54d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f553:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f011f556:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011f55d:	eb 14                	jmp    f011f573 <test_krealloc_BF+0x65d>
			shortArr[i] = 5;
f011f55f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011f562:	01 c0                	add    %eax,%eax
f011f564:	89 c2                	mov    %eax,%edx
f011f566:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f569:	01 d0                	add    %edx,%eax
f011f56b:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f011f570:	ff 45 ec             	incl   -0x14(%ebp)
f011f573:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f579:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f57c:	7d e1                	jge    f011f55f <test_krealloc_BF+0x649>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f011f57e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f584:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		shortArr[0] = 6;
f011f587:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f58a:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f011f58f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f595:	01 c0                	add    %eax,%eax
f011f597:	89 c2                	mov    %eax,%edx
f011f599:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f59c:	01 d0                	add    %edx,%eax
f011f59e:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f011f5a3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f5a9:	89 45 a0             	mov    %eax,-0x60(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f011f5ac:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011f5b3:	eb 40                	jmp    f011f5f5 <test_krealloc_BF+0x6df>
			structArr[i].a = 7;
f011f5b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f5b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f5bf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f5c2:	01 d0                	add    %edx,%eax
f011f5c4:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f011f5c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f5ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f5d1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f5d4:	01 d0                	add    %edx,%eax
f011f5d6:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f011f5dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f5df:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f5e6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f5e9:	01 d0                	add    %edx,%eax
f011f5eb:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f011f5f2:	ff 45 e8             	incl   -0x18(%ebp)
f011f5f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f5fb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011f5fe:	7d b5                	jge    f011f5b5 <test_krealloc_BF+0x69f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f011f600:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f606:	89 45 a0             	mov    %eax,-0x60(%ebp)
		structArr[0].a = 8;
f011f609:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f60c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f011f60f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f612:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f011f618:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f61b:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f011f622:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f628:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f62f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f632:	01 d0                	add    %edx,%eax
f011f634:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f011f637:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f63d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f644:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f647:	01 d0                	add    %edx,%eax
f011f649:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f011f64f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f655:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f65c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f65f:	01 d0                	add    %edx,%eax
f011f661:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f011f668:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f66b:	8a 00                	mov    (%eax),%al
f011f66d:	3a 45 cf             	cmp    -0x31(%ebp),%al
f011f670:	75 14                	jne    f011f686 <test_krealloc_BF+0x770>
f011f672:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f678:	89 c2                	mov    %eax,%edx
f011f67a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f67d:	01 d0                	add    %edx,%eax
f011f67f:	8a 00                	mov    (%eax),%al
f011f681:	3a 45 ce             	cmp    -0x32(%ebp),%al
f011f684:	74 17                	je     f011f69d <test_krealloc_BF+0x787>
			panic(
f011f686:	83 ec 04             	sub    $0x4,%esp
f011f689:	68 08 ac 12 f0       	push   $0xf012ac08
f011f68e:	68 70 13 00 00       	push   $0x1370
f011f693:	68 7e a0 12 f0       	push   $0xf012a07e
f011f698:	e8 7d 0b fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f011f69d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f6a3:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f011f6a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f6a9:	8a 00                	mov    (%eax),%al
f011f6ab:	3c 02                	cmp    $0x2,%al
f011f6ad:	75 13                	jne    f011f6c2 <test_krealloc_BF+0x7ac>
f011f6af:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f6b5:	89 c2                	mov    %eax,%edx
f011f6b7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f6ba:	01 d0                	add    %edx,%eax
f011f6bc:	8a 00                	mov    (%eax),%al
f011f6be:	3c 02                	cmp    $0x2,%al
f011f6c0:	74 1d                	je     f011f6df <test_krealloc_BF+0x7c9>
			panic(
f011f6c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f6c5:	8a 00                	mov    (%eax),%al
f011f6c7:	0f be c0             	movsbl %al,%eax
f011f6ca:	50                   	push   %eax
f011f6cb:	68 48 ac 12 f0       	push   $0xf012ac48
f011f6d0:	68 76 13 00 00       	push   $0x1376
f011f6d5:	68 7e a0 12 f0       	push   $0xf012a07e
f011f6da:	e8 3b 0b fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f011f6df:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f6e5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f011f6e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f6eb:	8b 00                	mov    (%eax),%eax
f011f6ed:	83 f8 03             	cmp    $0x3,%eax
f011f6f0:	75 19                	jne    f011f70b <test_krealloc_BF+0x7f5>
f011f6f2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f6f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f6ff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f702:	01 d0                	add    %edx,%eax
f011f704:	8b 00                	mov    (%eax),%eax
f011f706:	83 f8 03             	cmp    $0x3,%eax
f011f709:	74 17                	je     f011f722 <test_krealloc_BF+0x80c>
			panic("Wrong allocation stored values are wrongly changed!");
f011f70b:	83 ec 04             	sub    $0x4,%esp
f011f70e:	68 94 ac 12 f0       	push   $0xf012ac94
f011f713:	68 7a 13 00 00       	push   $0x137a
f011f718:	68 7e a0 12 f0       	push   $0xf012a07e
f011f71d:	e8 f8 0a fe ff       	call   f010021a <_panic>

		intArr = (int*) ptr_allocations[3];
f011f722:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f728:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f011f72b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f72e:	8b 00                	mov    (%eax),%eax
f011f730:	83 f8 04             	cmp    $0x4,%eax
f011f733:	75 19                	jne    f011f74e <test_krealloc_BF+0x838>
f011f735:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f73b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f742:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f745:	01 d0                	add    %edx,%eax
f011f747:	8b 00                	mov    (%eax),%eax
f011f749:	83 f8 04             	cmp    $0x4,%eax
f011f74c:	74 17                	je     f011f765 <test_krealloc_BF+0x84f>
			panic(
f011f74e:	83 ec 04             	sub    $0x4,%esp
f011f751:	68 08 ac 12 f0       	push   $0xf012ac08
f011f756:	68 7f 13 00 00       	push   $0x137f
f011f75b:	68 7e a0 12 f0       	push   $0xf012a07e
f011f760:	e8 b5 0a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f011f765:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f76b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f011f76e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f771:	66 8b 00             	mov    (%eax),%ax
f011f774:	66 83 f8 05          	cmp    $0x5,%ax
f011f778:	75 18                	jne    f011f792 <test_krealloc_BF+0x87c>
f011f77a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f780:	01 c0                	add    %eax,%eax
f011f782:	89 c2                	mov    %eax,%edx
f011f784:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f787:	01 d0                	add    %edx,%eax
f011f789:	66 8b 00             	mov    (%eax),%ax
f011f78c:	66 83 f8 05          	cmp    $0x5,%ax
f011f790:	74 17                	je     f011f7a9 <test_krealloc_BF+0x893>
			panic(
f011f792:	83 ec 04             	sub    $0x4,%esp
f011f795:	68 08 ac 12 f0       	push   $0xf012ac08
f011f79a:	68 84 13 00 00       	push   $0x1384
f011f79f:	68 7e a0 12 f0       	push   $0xf012a07e
f011f7a4:	e8 71 0a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f011f7a9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f7af:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f011f7b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f7b5:	66 8b 00             	mov    (%eax),%ax
f011f7b8:	66 83 f8 06          	cmp    $0x6,%ax
f011f7bc:	75 18                	jne    f011f7d6 <test_krealloc_BF+0x8c0>
f011f7be:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f7c4:	01 c0                	add    %eax,%eax
f011f7c6:	89 c2                	mov    %eax,%edx
f011f7c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f7cb:	01 d0                	add    %edx,%eax
f011f7cd:	66 8b 00             	mov    (%eax),%ax
f011f7d0:	66 83 f8 06          	cmp    $0x6,%ax
f011f7d4:	74 17                	je     f011f7ed <test_krealloc_BF+0x8d7>
			panic(
f011f7d6:	83 ec 04             	sub    $0x4,%esp
f011f7d9:	68 08 ac 12 f0       	push   $0xf012ac08
f011f7de:	68 89 13 00 00       	push   $0x1389
f011f7e3:	68 7e a0 12 f0       	push   $0xf012a07e
f011f7e8:	e8 2d 0a fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f011f7ed:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f7f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f011f7f6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f7f9:	8a 00                	mov    (%eax),%al
f011f7fb:	3c 07                	cmp    $0x7,%al
f011f7fd:	75 18                	jne    f011f817 <test_krealloc_BF+0x901>
f011f7ff:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f805:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f80c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f80f:	01 d0                	add    %edx,%eax
f011f811:	8a 00                	mov    (%eax),%al
f011f813:	3c 07                	cmp    $0x7,%al
f011f815:	74 17                	je     f011f82e <test_krealloc_BF+0x918>
			panic(
f011f817:	83 ec 04             	sub    $0x4,%esp
f011f81a:	68 08 ac 12 f0       	push   $0xf012ac08
f011f81f:	68 8e 13 00 00       	push   $0x138e
f011f824:	68 7e a0 12 f0       	push   $0xf012a07e
f011f829:	e8 ec 09 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f011f82e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f831:	66 8b 40 02          	mov    0x2(%eax),%ax
f011f835:	66 83 f8 07          	cmp    $0x7,%ax
f011f839:	75 1c                	jne    f011f857 <test_krealloc_BF+0x941>
f011f83b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f841:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f848:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f84b:	01 d0                	add    %edx,%eax
f011f84d:	66 8b 40 02          	mov    0x2(%eax),%ax
f011f851:	66 83 f8 07          	cmp    $0x7,%ax
f011f855:	74 17                	je     f011f86e <test_krealloc_BF+0x958>
			panic(
f011f857:	83 ec 04             	sub    $0x4,%esp
f011f85a:	68 08 ac 12 f0       	push   $0xf012ac08
f011f85f:	68 91 13 00 00       	push   $0x1391
f011f864:	68 7e a0 12 f0       	push   $0xf012a07e
f011f869:	e8 ac 09 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f011f86e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f871:	8b 40 04             	mov    0x4(%eax),%eax
f011f874:	83 f8 07             	cmp    $0x7,%eax
f011f877:	75 1a                	jne    f011f893 <test_krealloc_BF+0x97d>
f011f879:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f87f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f886:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f889:	01 d0                	add    %edx,%eax
f011f88b:	8b 40 04             	mov    0x4(%eax),%eax
f011f88e:	83 f8 07             	cmp    $0x7,%eax
f011f891:	74 17                	je     f011f8aa <test_krealloc_BF+0x994>
			panic(
f011f893:	83 ec 04             	sub    $0x4,%esp
f011f896:	68 08 ac 12 f0       	push   $0xf012ac08
f011f89b:	68 94 13 00 00       	push   $0x1394
f011f8a0:	68 7e a0 12 f0       	push   $0xf012a07e
f011f8a5:	e8 70 09 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f011f8aa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f8b0:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f011f8b3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8b6:	8a 00                	mov    (%eax),%al
f011f8b8:	3c 08                	cmp    $0x8,%al
f011f8ba:	75 18                	jne    f011f8d4 <test_krealloc_BF+0x9be>
f011f8bc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f8c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f8c9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8cc:	01 d0                	add    %edx,%eax
f011f8ce:	8a 00                	mov    (%eax),%al
f011f8d0:	3c 08                	cmp    $0x8,%al
f011f8d2:	74 17                	je     f011f8eb <test_krealloc_BF+0x9d5>
			panic(
f011f8d4:	83 ec 04             	sub    $0x4,%esp
f011f8d7:	68 08 ac 12 f0       	push   $0xf012ac08
f011f8dc:	68 99 13 00 00       	push   $0x1399
f011f8e1:	68 7e a0 12 f0       	push   $0xf012a07e
f011f8e6:	e8 2f 09 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f011f8eb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f8ee:	66 8b 40 02          	mov    0x2(%eax),%ax
f011f8f2:	66 83 f8 08          	cmp    $0x8,%ax
f011f8f6:	75 1c                	jne    f011f914 <test_krealloc_BF+0x9fe>
f011f8f8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f8fe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f905:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f908:	01 d0                	add    %edx,%eax
f011f90a:	66 8b 40 02          	mov    0x2(%eax),%ax
f011f90e:	66 83 f8 08          	cmp    $0x8,%ax
f011f912:	74 17                	je     f011f92b <test_krealloc_BF+0xa15>
			panic(
f011f914:	83 ec 04             	sub    $0x4,%esp
f011f917:	68 08 ac 12 f0       	push   $0xf012ac08
f011f91c:	68 9c 13 00 00       	push   $0x139c
f011f921:	68 7e a0 12 f0       	push   $0xf012a07e
f011f926:	e8 ef 08 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f011f92b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f92e:	8b 40 04             	mov    0x4(%eax),%eax
f011f931:	83 f8 08             	cmp    $0x8,%eax
f011f934:	75 1a                	jne    f011f950 <test_krealloc_BF+0xa3a>
f011f936:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f93c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011f943:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f946:	01 d0                	add    %edx,%eax
f011f948:	8b 40 04             	mov    0x4(%eax),%eax
f011f94b:	83 f8 08             	cmp    $0x8,%eax
f011f94e:	74 17                	je     f011f967 <test_krealloc_BF+0xa51>
			panic(
f011f950:	83 ec 04             	sub    $0x4,%esp
f011f953:	68 08 ac 12 f0       	push   $0xf012ac08
f011f958:	68 9f 13 00 00       	push   $0x139f
f011f95d:	68 7e a0 12 f0       	push   $0xf012a07e
f011f962:	e8 b3 08 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f011f967:	e8 47 d9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f96c:	89 c2                	mov    %eax,%edx
f011f96e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f971:	39 c2                	cmp    %eax,%edx
f011f973:	74 17                	je     f011f98c <test_krealloc_BF+0xa76>
			panic(
f011f975:	83 ec 04             	sub    $0x4,%esp
f011f978:	68 c8 ac 12 f0       	push   $0xf012acc8
f011f97d:	68 a3 13 00 00       	push   $0x13a3
f011f982:	68 7e a0 12 f0       	push   $0xf012a07e
f011f987:	e8 8e 08 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f011f98c:	83 ec 0c             	sub    $0xc,%esp
f011f98f:	68 14 ad 12 f0       	push   $0xf012ad14
f011f994:	e8 02 15 fe ff       	call   f0100e9b <cprintf>
f011f999:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f011f99c:	e8 12 d9 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f9a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011f9a4:	e8 a0 4d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011f9a9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[0], 0);
f011f9ac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f9b2:	83 ec 08             	sub    $0x8,%esp
f011f9b5:	6a 00                	push   $0x0
f011f9b7:	50                   	push   %eax
f011f9b8:	e8 93 8f fe ff       	call   f0108950 <krealloc>
f011f9bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011f9c0:	e8 84 4d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011f9c5:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011f9c8:	74 17                	je     f011f9e1 <test_krealloc_BF+0xacb>
			panic(
f011f9ca:	83 ec 04             	sub    $0x4,%esp
f011f9cd:	68 38 ad 12 f0       	push   $0xf012ad38
f011f9d2:	68 b0 13 00 00       	push   $0x13b0
f011f9d7:	68 7e a0 12 f0       	push   $0xf012a07e
f011f9dc:	e8 39 08 fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f011f9e1:	e8 cd d8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011f9e6:	89 c2                	mov    %eax,%edx
f011f9e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f9eb:	29 c2                	sub    %eax,%edx
f011f9ed:	89 d0                	mov    %edx,%eax
f011f9ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f9f4:	74 17                	je     f011fa0d <test_krealloc_BF+0xaf7>
			panic("krealloc: pages in memory are not freed correctly");
f011f9f6:	83 ec 04             	sub    $0x4,%esp
f011f9f9:	68 ac ad 12 f0       	push   $0xf012adac
f011f9fe:	68 b2 13 00 00       	push   $0x13b2
f011fa03:	68 7e a0 12 f0       	push   $0xf012a07e
f011fa08:	e8 0d 08 fe ff       	call   f010021a <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f011fa0d:	e8 a1 d8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fa12:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011fa15:	e8 2f 4d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011fa1a:	89 45 9c             	mov    %eax,-0x64(%ebp)

		krealloc(ptr_allocations[2], 0);
f011fa1d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fa23:	83 ec 08             	sub    $0x8,%esp
f011fa26:	6a 00                	push   $0x0
f011fa28:	50                   	push   %eax
f011fa29:	e8 22 8f fe ff       	call   f0108950 <krealloc>
f011fa2e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011fa31:	e8 13 4d fe ff       	call   f0104749 <pf_calculate_free_frames>
f011fa36:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011fa39:	74 17                	je     f011fa52 <test_krealloc_BF+0xb3c>
			panic(
f011fa3b:	83 ec 04             	sub    $0x4,%esp
f011fa3e:	68 38 ad 12 f0       	push   $0xf012ad38
f011fa43:	68 bb 13 00 00       	push   $0x13bb
f011fa48:	68 7e a0 12 f0       	push   $0xf012a07e
f011fa4d:	e8 c8 07 fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f011fa52:	e8 5c d8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fa57:	89 c2                	mov    %eax,%edx
f011fa59:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fa5c:	29 c2                	sub    %eax,%edx
f011fa5e:	89 d0                	mov    %edx,%eax
f011fa60:	3d 00 01 00 00       	cmp    $0x100,%eax
f011fa65:	74 17                	je     f011fa7e <test_krealloc_BF+0xb68>
			panic("krealloc: pages in memory are not freed correctly");
f011fa67:	83 ec 04             	sub    $0x4,%esp
f011fa6a:	68 ac ad 12 f0       	push   $0xf012adac
f011fa6f:	68 bd 13 00 00       	push   $0x13bd
f011fa74:	68 7e a0 12 f0       	push   $0xf012a07e
f011fa79:	e8 9c 07 fe ff       	call   f010021a <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f011fa7e:	e8 30 d8 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fa83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011fa86:	e8 be 4c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011fa8b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[5], 0);
f011fa8e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fa94:	83 ec 08             	sub    $0x8,%esp
f011fa97:	6a 00                	push   $0x0
f011fa99:	50                   	push   %eax
f011fa9a:	e8 b1 8e fe ff       	call   f0108950 <krealloc>
f011fa9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011faa2:	e8 a2 4c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011faa7:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011faaa:	74 17                	je     f011fac3 <test_krealloc_BF+0xbad>
			panic(
f011faac:	83 ec 04             	sub    $0x4,%esp
f011faaf:	68 64 a2 12 f0       	push   $0xf012a264
f011fab4:	68 c5 13 00 00       	push   $0x13c5
f011fab9:	68 7e a0 12 f0       	push   $0xf012a07e
f011fabe:	e8 57 07 fe ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f011fac3:	e8 eb d7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fac8:	89 c2                	mov    %eax,%edx
f011faca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011facd:	29 c2                	sub    %eax,%edx
f011facf:	89 d0                	mov    %edx,%eax
f011fad1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fad6:	74 17                	je     f011faef <test_krealloc_BF+0xbd9>
			panic("krealloc: pages in memory are not freed correctly");
f011fad8:	83 ec 04             	sub    $0x4,%esp
f011fadb:	68 ac ad 12 f0       	push   $0xf012adac
f011fae0:	68 c7 13 00 00       	push   $0x13c7
f011fae5:	68 7e a0 12 f0       	push   $0xf012a07e
f011faea:	e8 2b 07 fe ff       	call   f010021a <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f011faef:	e8 bf d7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011faf4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011faf7:	e8 4d 4c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011fafc:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[7], 0);
f011faff:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fb05:	83 ec 08             	sub    $0x8,%esp
f011fb08:	6a 00                	push   $0x0
f011fb0a:	50                   	push   %eax
f011fb0b:	e8 40 8e fe ff       	call   f0108950 <krealloc>
f011fb10:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f011fb13:	e8 31 4c fe ff       	call   f0104749 <pf_calculate_free_frames>
f011fb18:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011fb1b:	74 17                	je     f011fb34 <test_krealloc_BF+0xc1e>
			panic(
f011fb1d:	83 ec 04             	sub    $0x4,%esp
f011fb20:	68 38 ad 12 f0       	push   $0xf012ad38
f011fb25:	68 cf 13 00 00       	push   $0x13cf
f011fb2a:	68 7e a0 12 f0       	push   $0xf012a07e
f011fb2f:	e8 e6 06 fe ff       	call   f010021a <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f011fb34:	e8 7a d7 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fb39:	89 c2                	mov    %eax,%edx
f011fb3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fb3e:	29 c2                	sub    %eax,%edx
f011fb40:	89 d0                	mov    %edx,%eax
f011fb42:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fb47:	74 17                	je     f011fb60 <test_krealloc_BF+0xc4a>
			panic(
f011fb49:	83 ec 04             	sub    $0x4,%esp
f011fb4c:	68 e0 ad 12 f0       	push   $0xf012ade0
f011fb51:	68 d2 13 00 00       	push   $0x13d2
f011fb56:	68 7e a0 12 f0       	push   $0xf012a07e
f011fb5b:	e8 ba 06 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011fb60:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011fb67:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011fb6e:	eb 48                	jmp    f011fbb8 <test_krealloc_BF+0xca2>
					PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f011fb70:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011fb73:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f011fb78:	83 ec 04             	sub    $0x4,%esp
f011fb7b:	8d 8d a4 fe ff ff    	lea    -0x15c(%ebp),%ecx
f011fb81:	51                   	push   %ecx
f011fb82:	52                   	push   %edx
f011fb83:	50                   	push   %eax
f011fb84:	e8 22 7a fe ff       	call   f01075ab <get_page_table>
f011fb89:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f011fb8c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fb92:	85 c0                	test   %eax,%eax
f011fb94:	75 17                	jne    f011fbad <test_krealloc_BF+0xc97>
					panic(
f011fb96:	83 ec 04             	sub    $0x4,%esp
f011fb99:	68 d0 a5 12 f0       	push   $0xf012a5d0
f011fb9e:	68 de 13 00 00       	push   $0x13de
f011fba3:	68 7e a0 12 f0       	push   $0xf012a07e
f011fba8:	e8 6d 06 fe ff       	call   f010021a <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f011fbad:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011fbb4:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011fbb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011fbbc:	78 b2                	js     f011fb70 <test_krealloc_BF+0xc5a>
f011fbbe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011fbc2:	7f 09                	jg     f011fbcd <test_krealloc_BF+0xcb7>
f011fbc4:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011fbcb:	76 a3                	jbe    f011fb70 <test_krealloc_BF+0xc5a>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f011fbcd:	83 ec 0c             	sub    $0xc,%esp
f011fbd0:	68 1f ae 12 f0       	push   $0xf012ae1f
f011fbd5:	e8 c1 12 fe ff       	call   f0100e9b <cprintf>
f011fbda:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f011fbdd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fbe3:	89 45 ac             	mov    %eax,-0x54(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f011fbe6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011fbed:	eb 1e                	jmp    f011fc0d <test_krealloc_BF+0xcf7>
			sums[0] += ptr[i];
f011fbef:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f011fbf5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011fbf8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fbfb:	01 c8                	add    %ecx,%eax
f011fbfd:	8a 00                	mov    (%eax),%al
f011fbff:	0f be c0             	movsbl %al,%eax
f011fc02:	01 d0                	add    %edx,%eax
f011fc04:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f011fc0a:	ff 45 dc             	incl   -0x24(%ebp)
f011fc0d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011fc13:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fc16:	7d d7                	jge    f011fbef <test_krealloc_BF+0xcd9>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f011fc18:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fc1e:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
f011fc24:	42                   	inc    %edx
f011fc25:	01 d2                	add    %edx,%edx
f011fc27:	39 d0                	cmp    %edx,%eax
f011fc29:	74 17                	je     f011fc42 <test_krealloc_BF+0xd2c>
			panic("krealloc: invalid read after freeing some allocations");
f011fc2b:	83 ec 04             	sub    $0x4,%esp
f011fc2e:	68 28 ae 12 f0       	push   $0xf012ae28
f011fc33:	68 f0 13 00 00       	push   $0x13f0
f011fc38:	68 7e a0 12 f0       	push   $0xf012a07e
f011fc3d:	e8 d8 05 fe ff       	call   f010021a <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f011fc42:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fc48:	89 45 a8             	mov    %eax,-0x58(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f011fc4b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011fc52:	eb 22                	jmp    f011fc76 <test_krealloc_BF+0xd60>
			sums[1] += intArr[i];
f011fc54:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
f011fc5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fc5d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011fc64:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fc67:	01 c8                	add    %ecx,%eax
f011fc69:	8b 00                	mov    (%eax),%eax
f011fc6b:	01 d0                	add    %edx,%eax
f011fc6d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f011fc73:	ff 45 dc             	incl   -0x24(%ebp)
f011fc76:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fc7c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fc7f:	7d d3                	jge    f011fc54 <test_krealloc_BF+0xd3e>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f011fc81:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fc87:	8b 95 04 ff ff ff    	mov    -0xfc(%ebp),%edx
f011fc8d:	42                   	inc    %edx
f011fc8e:	c1 e2 02             	shl    $0x2,%edx
f011fc91:	39 d0                	cmp    %edx,%eax
f011fc93:	74 17                	je     f011fcac <test_krealloc_BF+0xd96>
			panic("krealloc: invalid read after freeing some allocations");
f011fc95:	83 ec 04             	sub    $0x4,%esp
f011fc98:	68 28 ae 12 f0       	push   $0xf012ae28
f011fc9d:	68 fa 13 00 00       	push   $0x13fa
f011fca2:	68 7e a0 12 f0       	push   $0xf012a07e
f011fca7:	e8 6e 05 fe ff       	call   f010021a <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f011fcac:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fcb2:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f011fcb5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011fcbc:	eb 21                	jmp    f011fcdf <test_krealloc_BF+0xdc9>
			sums[2] += shortArr[i];
f011fcbe:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f011fcc4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fcc7:	01 c0                	add    %eax,%eax
f011fcc9:	89 c1                	mov    %eax,%ecx
f011fccb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fcce:	01 c8                	add    %ecx,%eax
f011fcd0:	66 8b 00             	mov    (%eax),%ax
f011fcd3:	98                   	cwtl   
f011fcd4:	01 d0                	add    %edx,%eax
f011fcd6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f011fcdc:	ff 45 dc             	incl   -0x24(%ebp)
f011fcdf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fce5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fce8:	7d d4                	jge    f011fcbe <test_krealloc_BF+0xda8>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f011fcea:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f011fcf0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fcf6:	8d 48 01             	lea    0x1(%eax),%ecx
f011fcf9:	89 c8                	mov    %ecx,%eax
f011fcfb:	c1 e0 02             	shl    $0x2,%eax
f011fcfe:	01 c8                	add    %ecx,%eax
f011fd00:	39 c2                	cmp    %eax,%edx
f011fd02:	74 17                	je     f011fd1b <test_krealloc_BF+0xe05>
			panic("krealloc: invalid read after freeing some allocations");
f011fd04:	83 ec 04             	sub    $0x4,%esp
f011fd07:	68 28 ae 12 f0       	push   $0xf012ae28
f011fd0c:	68 04 14 00 00       	push   $0x1404
f011fd11:	68 7e a0 12 f0       	push   $0xf012a07e
f011fd16:	e8 ff 04 fe ff       	call   f010021a <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f011fd1b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fd21:	89 45 a0             	mov    %eax,-0x60(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f011fd24:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011fd2b:	eb 67                	jmp    f011fd94 <test_krealloc_BF+0xe7e>
			sums[3] += structArr[i].a;
f011fd2d:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f011fd33:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fd36:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011fd3d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fd40:	01 c8                	add    %ecx,%eax
f011fd42:	8a 00                	mov    (%eax),%al
f011fd44:	0f be c0             	movsbl %al,%eax
f011fd47:	01 d0                	add    %edx,%eax
f011fd49:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			sums[4] += structArr[i].b;
f011fd4f:	8b 95 b8 fe ff ff    	mov    -0x148(%ebp),%edx
f011fd55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fd58:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011fd5f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fd62:	01 c8                	add    %ecx,%eax
f011fd64:	66 8b 40 02          	mov    0x2(%eax),%ax
f011fd68:	98                   	cwtl   
f011fd69:	01 d0                	add    %edx,%eax
f011fd6b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			sums[5] += structArr[i].c;
f011fd71:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f011fd77:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fd7a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f011fd81:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fd84:	01 c8                	add    %ecx,%eax
f011fd86:	8b 40 04             	mov    0x4(%eax),%eax
f011fd89:	01 d0                	add    %edx,%eax
f011fd8b:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f011fd91:	ff 45 dc             	incl   -0x24(%ebp)
f011fd94:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fd9a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fd9d:	7d 8e                	jge    f011fd2d <test_krealloc_BF+0xe17>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f011fd9f:	8b 8d b4 fe ff ff    	mov    -0x14c(%ebp),%ecx
f011fda5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fdab:	8d 50 01             	lea    0x1(%eax),%edx
f011fdae:	89 d0                	mov    %edx,%eax
f011fdb0:	01 c0                	add    %eax,%eax
f011fdb2:	01 d0                	add    %edx,%eax
f011fdb4:	01 c0                	add    %eax,%eax
f011fdb6:	01 d0                	add    %edx,%eax
f011fdb8:	39 c1                	cmp    %eax,%ecx
f011fdba:	75 3a                	jne    f011fdf6 <test_krealloc_BF+0xee0>
				|| sums[4] != (lastIndices[6] + 1) * 7
f011fdbc:	8b 8d b8 fe ff ff    	mov    -0x148(%ebp),%ecx
f011fdc2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fdc8:	8d 50 01             	lea    0x1(%eax),%edx
f011fdcb:	89 d0                	mov    %edx,%eax
f011fdcd:	01 c0                	add    %eax,%eax
f011fdcf:	01 d0                	add    %edx,%eax
f011fdd1:	01 c0                	add    %eax,%eax
f011fdd3:	01 d0                	add    %edx,%eax
f011fdd5:	39 c1                	cmp    %eax,%ecx
f011fdd7:	75 1d                	jne    f011fdf6 <test_krealloc_BF+0xee0>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f011fdd9:	8b 8d bc fe ff ff    	mov    -0x144(%ebp),%ecx
f011fddf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fde5:	8d 50 01             	lea    0x1(%eax),%edx
f011fde8:	89 d0                	mov    %edx,%eax
f011fdea:	01 c0                	add    %eax,%eax
f011fdec:	01 d0                	add    %edx,%eax
f011fdee:	01 c0                	add    %eax,%eax
f011fdf0:	01 d0                	add    %edx,%eax
f011fdf2:	39 c1                	cmp    %eax,%ecx
f011fdf4:	74 17                	je     f011fe0d <test_krealloc_BF+0xef7>
			panic("krealloc: invalid read after freeing some allocations");
f011fdf6:	83 ec 04             	sub    $0x4,%esp
f011fdf9:	68 28 ae 12 f0       	push   $0xf012ae28
f011fdfe:	68 12 14 00 00       	push   $0x1412
f011fe03:	68 7e a0 12 f0       	push   $0xf012a07e
f011fe08:	e8 0d 04 fe ff       	call   f010021a <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f011fe0d:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f011fe14:	e8 9a d4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fe19:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f011fe1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fe22:	83 ec 08             	sub    $0x8,%esp
f011fe25:	68 00 3c 00 00       	push   $0x3c00
f011fe2a:	50                   	push   %eax
f011fe2b:	e8 20 8b fe ff       	call   f0108950 <krealloc>
f011fe30:	83 c4 10             	add    $0x10,%esp
f011fe33:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011fe36:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fe39:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011fe3e:	77 17                	ja     f011fe57 <test_krealloc_BF+0xf41>
			panic("krealloc: Wrong start address for the allocated space... ");
f011fe40:	83 ec 04             	sub    $0x4,%esp
f011fe43:	68 68 ab 12 f0       	push   $0xf012ab68
f011fe48:	68 1e 14 00 00       	push   $0x141e
f011fe4d:	68 7e a0 12 f0       	push   $0xf012a07e
f011fe52:	e8 c3 03 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f011fe57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fe5d:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011fe60:	74 17                	je     f011fe79 <test_krealloc_BF+0xf63>
			panic(
f011fe62:	83 ec 04             	sub    $0x4,%esp
f011fe65:	68 60 ae 12 f0       	push   $0xf012ae60
f011fe6a:	68 21 14 00 00       	push   $0x1421
f011fe6f:	68 7e a0 12 f0       	push   $0xf012a07e
f011fe74:	e8 a1 03 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011fe79:	e8 35 d4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fe7e:	89 c2                	mov    %eax,%edx
f011fe80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fe83:	39 c2                	cmp    %eax,%edx
f011fe85:	74 17                	je     f011fe9e <test_krealloc_BF+0xf88>
			panic(
f011fe87:	83 ec 04             	sub    $0x4,%esp
f011fe8a:	68 cc ae 12 f0       	push   $0xf012aecc
f011fe8f:	68 24 14 00 00       	push   $0x1424
f011fe94:	68 7e a0 12 f0       	push   $0xf012a07e
f011fe99:	e8 7c 03 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f011fe9e:	e8 10 d4 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011fea3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f011fea6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011feac:	83 ec 08             	sub    $0x8,%esp
f011feaf:	68 00 fc 0f 00       	push   $0xffc00
f011feb4:	50                   	push   %eax
f011feb5:	e8 96 8a fe ff       	call   f0108950 <krealloc>
f011feba:	83 c4 10             	add    $0x10,%esp
f011febd:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011fec0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fec3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011fec8:	77 17                	ja     f011fee1 <test_krealloc_BF+0xfcb>
			panic("krealloc: Wrong start address for the allocated space... ");
f011feca:	83 ec 04             	sub    $0x4,%esp
f011fecd:	68 68 ab 12 f0       	push   $0xf012ab68
f011fed2:	68 2a 14 00 00       	push   $0x142a
f011fed7:	68 7e a0 12 f0       	push   $0xf012a07e
f011fedc:	e8 39 03 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[4])
f011fee1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fee7:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011feea:	74 17                	je     f011ff03 <test_krealloc_BF+0xfed>
			panic(
f011feec:	83 ec 04             	sub    $0x4,%esp
f011feef:	68 60 ae 12 f0       	push   $0xf012ae60
f011fef4:	68 2d 14 00 00       	push   $0x142d
f011fef9:	68 7e a0 12 f0       	push   $0xf012a07e
f011fefe:	e8 17 03 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011ff03:	e8 ab d3 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ff08:	89 c2                	mov    %eax,%edx
f011ff0a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ff0d:	39 c2                	cmp    %eax,%edx
f011ff0f:	74 17                	je     f011ff28 <test_krealloc_BF+0x1012>
			panic(
f011ff11:	83 ec 04             	sub    $0x4,%esp
f011ff14:	68 cc ae 12 f0       	push   $0xf012aecc
f011ff19:	68 30 14 00 00       	push   $0x1430
f011ff1e:	68 7e a0 12 f0       	push   $0xf012a07e
f011ff23:	e8 f2 02 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f011ff28:	e8 86 d3 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ff2d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f011ff30:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff36:	83 ec 08             	sub    $0x8,%esp
f011ff39:	68 00 fc 0f 00       	push   $0xffc00
f011ff3e:	50                   	push   %eax
f011ff3f:	e8 0c 8a fe ff       	call   f0108950 <krealloc>
f011ff44:	83 c4 10             	add    $0x10,%esp
f011ff47:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011ff4a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff4d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011ff52:	77 17                	ja     f011ff6b <test_krealloc_BF+0x1055>
			panic("krealloc: Wrong start address for the allocated space... ");
f011ff54:	83 ec 04             	sub    $0x4,%esp
f011ff57:	68 68 ab 12 f0       	push   $0xf012ab68
f011ff5c:	68 36 14 00 00       	push   $0x1436
f011ff61:	68 7e a0 12 f0       	push   $0xf012a07e
f011ff66:	e8 af 02 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f011ff6b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff71:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011ff74:	74 17                	je     f011ff8d <test_krealloc_BF+0x1077>
			panic(
f011ff76:	83 ec 04             	sub    $0x4,%esp
f011ff79:	68 60 ae 12 f0       	push   $0xf012ae60
f011ff7e:	68 39 14 00 00       	push   $0x1439
f011ff83:	68 7e a0 12 f0       	push   $0xf012a07e
f011ff88:	e8 8d 02 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f011ff8d:	e8 21 d3 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ff92:	89 c2                	mov    %eax,%edx
f011ff94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ff97:	39 c2                	cmp    %eax,%edx
f011ff99:	74 17                	je     f011ffb2 <test_krealloc_BF+0x109c>
			panic(
f011ff9b:	83 ec 04             	sub    $0x4,%esp
f011ff9e:	68 cc ae 12 f0       	push   $0xf012aecc
f011ffa3:	68 3c 14 00 00       	push   $0x143c
f011ffa8:	68 7e a0 12 f0       	push   $0xf012a07e
f011ffad:	e8 68 02 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f011ffb2:	e8 fc d2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f011ffb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f011ffba:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ffc0:	83 ec 08             	sub    $0x8,%esp
f011ffc3:	68 00 fc 0f 00       	push   $0xffc00
f011ffc8:	50                   	push   %eax
f011ffc9:	e8 82 89 fe ff       	call   f0108950 <krealloc>
f011ffce:	83 c4 10             	add    $0x10,%esp
f011ffd1:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f011ffd4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ffd7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011ffdc:	77 17                	ja     f011fff5 <test_krealloc_BF+0x10df>
			panic("krealloc: Wrong start address for the allocated space... ");
f011ffde:	83 ec 04             	sub    $0x4,%esp
f011ffe1:	68 68 ab 12 f0       	push   $0xf012ab68
f011ffe6:	68 44 14 00 00       	push   $0x1444
f011ffeb:	68 7e a0 12 f0       	push   $0xf012a07e
f011fff0:	e8 25 02 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[3])
f011fff5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fffb:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011fffe:	74 17                	je     f0120017 <test_krealloc_BF+0x1101>
			panic(
f0120000:	83 ec 04             	sub    $0x4,%esp
f0120003:	68 10 af 12 f0       	push   $0xf012af10
f0120008:	68 47 14 00 00       	push   $0x1447
f012000d:	68 7e a0 12 f0       	push   $0xf012a07e
f0120012:	e8 03 02 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f0120017:	e8 97 d2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f012001c:	89 c2                	mov    %eax,%edx
f012001e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120021:	39 c2                	cmp    %eax,%edx
f0120023:	74 17                	je     f012003c <test_krealloc_BF+0x1126>
			panic(
f0120025:	83 ec 04             	sub    $0x4,%esp
f0120028:	68 cc ae 12 f0       	push   $0xf012aecc
f012002d:	68 4a 14 00 00       	push   $0x144a
f0120032:	68 7e a0 12 f0       	push   $0xf012a07e
f0120037:	e8 de 01 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012003c:	83 ec 0c             	sub    $0xc,%esp
f012003f:	68 70 af 12 f0       	push   $0xf012af70
f0120044:	e8 52 0e fe ff       	call   f0100e9b <cprintf>
f0120049:	83 c4 10             	add    $0x10,%esp
	{
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012004c:	e8 62 d2 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120051:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f0120054:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012005a:	83 ec 08             	sub    $0x8,%esp
f012005d:	68 00 18 10 00       	push   $0x101800
f0120062:	50                   	push   %eax
f0120063:	e8 e8 88 fe ff       	call   f0108950 <krealloc>
f0120068:	83 c4 10             	add    $0x10,%esp
f012006b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012006e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120071:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0120076:	77 17                	ja     f012008f <test_krealloc_BF+0x1179>
			panic("krealloc: Wrong start address for the allocated space... ");
f0120078:	83 ec 04             	sub    $0x4,%esp
f012007b:	68 68 ab 12 f0       	push   $0xf012ab68
f0120080:	68 52 14 00 00       	push   $0x1452
f0120085:	68 7e a0 12 f0       	push   $0xf012a07e
f012008a:	e8 8b 01 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[1])
f012008f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120095:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0120098:	74 17                	je     f01200b1 <test_krealloc_BF+0x119b>
			panic(
f012009a:	83 ec 04             	sub    $0x4,%esp
f012009d:	68 78 af 12 f0       	push   $0xf012af78
f01200a2:	68 55 14 00 00       	push   $0x1455
f01200a7:	68 7e a0 12 f0       	push   $0xf012a07e
f01200ac:	e8 69 01 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f01200b1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01200b4:	e8 fa d1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01200b9:	29 c3                	sub    %eax,%ebx
f01200bb:	89 d8                	mov    %ebx,%eax
f01200bd:	83 f8 02             	cmp    $0x2,%eax
f01200c0:	74 17                	je     f01200d9 <test_krealloc_BF+0x11c3>
			panic("krealloc: pages in memory are not loaded correctly");
f01200c2:	83 ec 04             	sub    $0x4,%esp
f01200c5:	68 f4 af 12 f0       	push   $0xf012aff4
f01200ca:	68 57 14 00 00       	push   $0x1457
f01200cf:	68 7e a0 12 f0       	push   $0xf012a07e
f01200d4:	e8 41 01 fe ff       	call   f010021a <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f01200d9:	e8 d5 d1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01200de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f01200e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01200e7:	83 ec 08             	sub    $0x8,%esp
f01200ea:	68 00 fc 3f 00       	push   $0x3ffc00
f01200ef:	50                   	push   %eax
f01200f0:	e8 5b 88 fe ff       	call   f0108950 <krealloc>
f01200f5:	83 c4 10             	add    $0x10,%esp
f01200f8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f01200fb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01200fe:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0120103:	77 17                	ja     f012011c <test_krealloc_BF+0x1206>
			panic("krealloc: Wrong start address for the allocated space... ");
f0120105:	83 ec 04             	sub    $0x4,%esp
f0120108:	68 68 ab 12 f0       	push   $0xf012ab68
f012010d:	68 5d 14 00 00       	push   $0x145d
f0120112:	68 7e a0 12 f0       	push   $0xf012a07e
f0120117:	e8 fe 00 fe ff       	call   f010021a <_panic>
		if (newAddress != ptr_allocations[4])
f012011c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120122:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0120125:	74 17                	je     f012013e <test_krealloc_BF+0x1228>
			panic(
f0120127:	83 ec 04             	sub    $0x4,%esp
f012012a:	68 78 af 12 f0       	push   $0xf012af78
f012012f:	68 60 14 00 00       	push   $0x1460
f0120134:	68 7e a0 12 f0       	push   $0xf012a07e
f0120139:	e8 dc 00 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012013e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0120141:	e8 6d d1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120146:	29 c3                	sub    %eax,%ebx
f0120148:	89 d8                	mov    %ebx,%eax
f012014a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012014f:	74 17                	je     f0120168 <test_krealloc_BF+0x1252>
			panic("krealloc: pages in memory are not loaded correctly");
f0120151:	83 ec 04             	sub    $0x4,%esp
f0120154:	68 f4 af 12 f0       	push   $0xf012aff4
f0120159:	68 63 14 00 00       	push   $0x1463
f012015e:	68 7e a0 12 f0       	push   $0xf012a07e
f0120163:	e8 b2 00 fe ff       	call   f010021a <_panic>


	}
	cprintf("\b\b\b60%");
f0120168:	83 ec 0c             	sub    $0xc,%esp
f012016b:	68 27 b0 12 f0       	push   $0xf012b027
f0120170:	e8 26 0d fe ff       	call   f0100e9b <cprintf>
f0120175:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f0120178:	e8 36 d1 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f012017d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f0120180:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120186:	83 ec 08             	sub    $0x8,%esp
f0120189:	68 00 fc 9f 00       	push   $0x9ffc00
f012018e:	50                   	push   %eax
f012018f:	e8 bc 87 fe ff       	call   f0108950 <krealloc>
f0120194:	83 c4 10             	add    $0x10,%esp
f0120197:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012019a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012019d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01201a2:	77 17                	ja     f01201bb <test_krealloc_BF+0x12a5>
			panic("krealloc: Wrong start address for the allocated space... ");
f01201a4:	83 ec 04             	sub    $0x4,%esp
f01201a7:	68 68 ab 12 f0       	push   $0xf012ab68
f01201ac:	68 6e 14 00 00       	push   $0x146e
f01201b1:	68 7e a0 12 f0       	push   $0xf012a07e
f01201b6:	e8 5f 00 fe ff       	call   f010021a <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f01201bb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01201be:	3d 00 50 b0 f8       	cmp    $0xf8b05000,%eax
f01201c3:	74 18                	je     f01201dd <test_krealloc_BF+0x12c7>
			panic(
f01201c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01201c8:	50                   	push   %eax
f01201c9:	68 30 b0 12 f0       	push   $0xf012b030
f01201ce:	68 72 14 00 00       	push   $0x1472
f01201d3:	68 7e a0 12 f0       	push   $0xf012a07e
f01201d8:	e8 3d 00 fe ff       	call   f010021a <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f01201dd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01201e3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01201e6:	75 17                	jne    f01201ff <test_krealloc_BF+0x12e9>
			panic(
f01201e8:	83 ec 04             	sub    $0x4,%esp
f01201eb:	68 74 b0 12 f0       	push   $0xf012b074
f01201f0:	68 75 14 00 00       	push   $0x1475
f01201f5:	68 7e a0 12 f0       	push   $0xf012a07e
f01201fa:	e8 1b 00 fe ff       	call   f010021a <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f01201ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0120202:	e8 ac d0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120207:	29 c3                	sub    %eax,%ebx
f0120209:	89 d8                	mov    %ebx,%eax
f012020b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120210:	74 17                	je     f0120229 <test_krealloc_BF+0x1313>
			panic("krealloc: pages in memory are not loaded correctly");
f0120212:	83 ec 04             	sub    $0x4,%esp
f0120215:	68 f4 af 12 f0       	push   $0xf012aff4
f012021a:	68 78 14 00 00       	push   $0x1478
f012021f:	68 7e a0 12 f0       	push   $0xf012a07e
f0120224:	e8 f1 ff fd ff       	call   f010021a <_panic>

		ptr_allocations[4] = newAddress;
f0120229:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012022c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f0120232:	e8 7c d0 fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120237:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012023a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120240:	83 ec 08             	sub    $0x8,%esp
f0120243:	68 00 fc 3f 00       	push   $0x3ffc00
f0120248:	50                   	push   %eax
f0120249:	e8 02 87 fe ff       	call   f0108950 <krealloc>
f012024e:	83 c4 10             	add    $0x10,%esp
f0120251:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0120254:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120257:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012025c:	77 17                	ja     f0120275 <test_krealloc_BF+0x135f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012025e:	83 ec 04             	sub    $0x4,%esp
f0120261:	68 68 ab 12 f0       	push   $0xf012ab68
f0120266:	68 81 14 00 00       	push   $0x1481
f012026b:	68 7e a0 12 f0       	push   $0xf012a07e
f0120270:	e8 a5 ff fd ff       	call   f010021a <_panic>
		if (newAddress == ptr_allocations[6])
f0120275:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012027b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012027e:	75 17                	jne    f0120297 <test_krealloc_BF+0x1381>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f0120280:	83 ec 04             	sub    $0x4,%esp
f0120283:	68 74 b0 12 f0       	push   $0xf012b074
f0120288:	68 83 14 00 00       	push   $0x1483
f012028d:	68 7e a0 12 f0       	push   $0xf012a07e
f0120292:	e8 83 ff fd ff       	call   f010021a <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f0120297:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012029a:	3d 00 50 40 f8       	cmp    $0xf8405000,%eax
f012029f:	74 17                	je     f01202b8 <test_krealloc_BF+0x13a2>
f01202a1:	83 ec 04             	sub    $0x4,%esp
f01202a4:	68 a4 ab 12 f0       	push   $0xf012aba4
f01202a9:	68 84 14 00 00       	push   $0x1484
f01202ae:	68 7e a0 12 f0       	push   $0xf012a07e
f01202b3:	e8 62 ff fd ff       	call   f010021a <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f01202b8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01202bb:	e8 f3 cf fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01202c0:	29 c3                	sub    %eax,%ebx
f01202c2:	89 d8                	mov    %ebx,%eax
f01202c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01202c9:	74 17                	je     f01202e2 <test_krealloc_BF+0x13cc>
			panic("krealloc: pages in memory are not loaded correctly");
f01202cb:	83 ec 04             	sub    $0x4,%esp
f01202ce:	68 f4 af 12 f0       	push   $0xf012aff4
f01202d3:	68 88 14 00 00       	push   $0x1488
f01202d8:	68 7e a0 12 f0       	push   $0xf012a07e
f01202dd:	e8 38 ff fd ff       	call   f010021a <_panic>
		ptr_allocations[6] = newAddress;
f01202e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01202e5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f01202eb:	e8 c3 cf fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01202f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f01202f3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01202f9:	83 ec 08             	sub    $0x8,%esp
f01202fc:	68 00 fc 3f 01       	push   $0x13ffc00
f0120301:	50                   	push   %eax
f0120302:	e8 49 86 fe ff       	call   f0108950 <krealloc>
f0120307:	83 c4 10             	add    $0x10,%esp
f012030a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012030d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120310:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0120315:	77 17                	ja     f012032e <test_krealloc_BF+0x1418>
			panic("krealloc: Wrong start address for the allocated space... ");
f0120317:	83 ec 04             	sub    $0x4,%esp
f012031a:	68 68 ab 12 f0       	push   $0xf012ab68
f012031f:	68 8e 14 00 00       	push   $0x148e
f0120324:	68 7e a0 12 f0       	push   $0xf012a07e
f0120329:	e8 ec fe fd ff       	call   f010021a <_panic>
		if (newAddress == ptr_allocations[6])
f012032e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120334:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0120337:	75 17                	jne    f0120350 <test_krealloc_BF+0x143a>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f0120339:	83 ec 04             	sub    $0x4,%esp
f012033c:	68 74 b0 12 f0       	push   $0xf012b074
f0120341:	68 90 14 00 00       	push   $0x1490
f0120346:	68 7e a0 12 f0       	push   $0xf012a07e
f012034b:	e8 ca fe fd ff       	call   f010021a <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f0120350:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120353:	3d 00 50 50 f9       	cmp    $0xf9505000,%eax
f0120358:	74 17                	je     f0120371 <test_krealloc_BF+0x145b>
			panic("krealloc: Wrong start address for reallocated space\n");
f012035a:	83 ec 04             	sub    $0x4,%esp
f012035d:	68 a0 b1 12 f0       	push   $0xf012b1a0
f0120362:	68 92 14 00 00       	push   $0x1492
f0120367:	68 7e a0 12 f0       	push   $0xf012a07e
f012036c:	e8 a9 fe fd ff       	call   f010021a <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f0120371:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0120374:	e8 3a cf fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120379:	29 c3                	sub    %eax,%ebx
f012037b:	89 d8                	mov    %ebx,%eax
f012037d:	3d 00 10 00 00       	cmp    $0x1000,%eax
f0120382:	74 17                	je     f012039b <test_krealloc_BF+0x1485>
			panic("krealloc: pages in memory are not loaded correctly");
f0120384:	83 ec 04             	sub    $0x4,%esp
f0120387:	68 f4 af 12 f0       	push   $0xf012aff4
f012038c:	68 95 14 00 00       	push   $0x1495
f0120391:	68 7e a0 12 f0       	push   $0xf012a07e
f0120396:	e8 7f fe fd ff       	call   f010021a <_panic>

		ptr_allocations[6] = newAddress;
f012039b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012039e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f01203a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01203aa:	89 45 ac             	mov    %eax,-0x54(%ebp)
		int i;
		sums[0] = 0;
f01203ad:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f01203b4:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f01203b7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01203be:	eb 1e                	jmp    f01203de <test_krealloc_BF+0x14c8>
			sums[0] += ptr[i];
f01203c0:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f01203c6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01203c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01203cc:	01 c8                	add    %ecx,%eax
f01203ce:	8a 00                	mov    (%eax),%al
f01203d0:	0f be c0             	movsbl %al,%eax
f01203d3:	01 d0                	add    %edx,%eax
f01203d5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01203db:	ff 45 d8             	incl   -0x28(%ebp)
f01203de:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01203e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01203e7:	7d d7                	jge    f01203c0 <test_krealloc_BF+0x14aa>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f01203e9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01203ef:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
f01203f5:	42                   	inc    %edx
f01203f6:	01 d2                	add    %edx,%edx
f01203f8:	39 d0                	cmp    %edx,%eax
f01203fa:	74 17                	je     f0120413 <test_krealloc_BF+0x14fd>
			panic("krealloc: invalid read after re-allocations");
f01203fc:	83 ec 04             	sub    $0x4,%esp
f01203ff:	68 2c b1 12 f0       	push   $0xf012b12c
f0120404:	68 a3 14 00 00       	push   $0x14a3
f0120409:	68 7e a0 12 f0       	push   $0xf012a07e
f012040e:	e8 07 fe fd ff       	call   f010021a <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0120413:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120419:	89 45 a0             	mov    %eax,-0x60(%ebp)

		sums[0] = 0;
f012041c:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f0120423:	00 00 00 
		sums[1] = 0;
f0120426:	c7 85 ac fe ff ff 00 	movl   $0x0,-0x154(%ebp)
f012042d:	00 00 00 
		sums[2] = 0;
f0120430:	c7 85 b0 fe ff ff 00 	movl   $0x0,-0x150(%ebp)
f0120437:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012043a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0120441:	eb 67                	jmp    f01204aa <test_krealloc_BF+0x1594>
			sums[0] += structArr[i].a;
f0120443:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f0120449:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012044c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0120453:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120456:	01 c8                	add    %ecx,%eax
f0120458:	8a 00                	mov    (%eax),%al
f012045a:	0f be c0             	movsbl %al,%eax
f012045d:	01 d0                	add    %edx,%eax
f012045f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
			sums[1] += structArr[i].b;
f0120465:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
f012046b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012046e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0120475:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120478:	01 c8                	add    %ecx,%eax
f012047a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012047e:	98                   	cwtl   
f012047f:	01 d0                	add    %edx,%eax
f0120481:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
			sums[2] += structArr[i].c;
f0120487:	8b 95 b0 fe ff ff    	mov    -0x150(%ebp),%edx
f012048d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0120490:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0120497:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012049a:	01 c8                	add    %ecx,%eax
f012049c:	8b 40 04             	mov    0x4(%eax),%eax
f012049f:	01 d0                	add    %edx,%eax
f01204a1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01204a7:	ff 45 d8             	incl   -0x28(%ebp)
f01204aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01204b0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01204b3:	7d 8e                	jge    f0120443 <test_krealloc_BF+0x152d>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01204b5:	8b 8d a8 fe ff ff    	mov    -0x158(%ebp),%ecx
f01204bb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01204c1:	8d 50 01             	lea    0x1(%eax),%edx
f01204c4:	89 d0                	mov    %edx,%eax
f01204c6:	01 c0                	add    %eax,%eax
f01204c8:	01 d0                	add    %edx,%eax
f01204ca:	01 c0                	add    %eax,%eax
f01204cc:	01 d0                	add    %edx,%eax
f01204ce:	39 c1                	cmp    %eax,%ecx
f01204d0:	75 3a                	jne    f012050c <test_krealloc_BF+0x15f6>
				|| sums[1] != (lastIndices[6] + 1) * 7
f01204d2:	8b 8d ac fe ff ff    	mov    -0x154(%ebp),%ecx
f01204d8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01204de:	8d 50 01             	lea    0x1(%eax),%edx
f01204e1:	89 d0                	mov    %edx,%eax
f01204e3:	01 c0                	add    %eax,%eax
f01204e5:	01 d0                	add    %edx,%eax
f01204e7:	01 c0                	add    %eax,%eax
f01204e9:	01 d0                	add    %edx,%eax
f01204eb:	39 c1                	cmp    %eax,%ecx
f01204ed:	75 1d                	jne    f012050c <test_krealloc_BF+0x15f6>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f01204ef:	8b 8d b0 fe ff ff    	mov    -0x150(%ebp),%ecx
f01204f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01204fb:	8d 50 01             	lea    0x1(%eax),%edx
f01204fe:	89 d0                	mov    %edx,%eax
f0120500:	01 c0                	add    %eax,%eax
f0120502:	01 d0                	add    %edx,%eax
f0120504:	01 c0                	add    %eax,%eax
f0120506:	01 d0                	add    %edx,%eax
f0120508:	39 c1                	cmp    %eax,%ecx
f012050a:	74 17                	je     f0120523 <test_krealloc_BF+0x160d>
			panic("krealloc: invalid read after re-allocations");
f012050c:	83 ec 04             	sub    $0x4,%esp
f012050f:	68 2c b1 12 f0       	push   $0xf012b12c
f0120514:	68 b5 14 00 00       	push   $0x14b5
f0120519:	68 7e a0 12 f0       	push   $0xf012a07e
f012051e:	e8 f7 fc fd ff       	call   f010021a <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0120523:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120529:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		sums[0] = 0;
f012052c:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%ebp)
f0120533:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0120536:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012053d:	eb 21                	jmp    f0120560 <test_krealloc_BF+0x164a>
			sums[0] += shortArr[i];
f012053f:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f0120545:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0120548:	01 c0                	add    %eax,%eax
f012054a:	89 c1                	mov    %eax,%ecx
f012054c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012054f:	01 c8                	add    %ecx,%eax
f0120551:	66 8b 00             	mov    (%eax),%ax
f0120554:	98                   	cwtl   
f0120555:	01 d0                	add    %edx,%eax
f0120557:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012055d:	ff 45 d8             	incl   -0x28(%ebp)
f0120560:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120566:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120569:	7d d4                	jge    f012053f <test_krealloc_BF+0x1629>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012056b:	8b 95 a8 fe ff ff    	mov    -0x158(%ebp),%edx
f0120571:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120577:	8d 48 01             	lea    0x1(%eax),%ecx
f012057a:	89 c8                	mov    %ecx,%eax
f012057c:	c1 e0 02             	shl    $0x2,%eax
f012057f:	01 c8                	add    %ecx,%eax
f0120581:	39 c2                	cmp    %eax,%edx
f0120583:	74 17                	je     f012059c <test_krealloc_BF+0x1686>
			panic("krealloc: invalid read after re-allocations");
f0120585:	83 ec 04             	sub    $0x4,%esp
f0120588:	68 2c b1 12 f0       	push   $0xf012b12c
f012058d:	68 bf 14 00 00       	push   $0x14bf
f0120592:	68 7e a0 12 f0       	push   $0xf012a07e
f0120597:	e8 7e fc fd ff       	call   f010021a <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012059c:	e8 12 cd fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01205a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01205a4:	e8 a0 41 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01205a9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		krealloc(ptr_allocations[6], 0);
f01205ac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01205b2:	83 ec 08             	sub    $0x8,%esp
f01205b5:	6a 00                	push   $0x0
f01205b7:	50                   	push   %eax
f01205b8:	e8 93 83 fe ff       	call   f0108950 <krealloc>
f01205bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01205c0:	e8 84 41 fe ff       	call   f0104749 <pf_calculate_free_frames>
f01205c5:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f01205c8:	74 17                	je     f01205e1 <test_krealloc_BF+0x16cb>
			panic(
f01205ca:	83 ec 04             	sub    $0x4,%esp
f01205cd:	68 64 a2 12 f0       	push   $0xf012a264
f01205d2:	68 c7 14 00 00       	push   $0x14c7
f01205d7:	68 7e a0 12 f0       	push   $0xf012a07e
f01205dc:	e8 39 fc fd ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f01205e1:	e8 cd cc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f01205e6:	89 c2                	mov    %eax,%edx
f01205e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01205eb:	29 c2                	sub    %eax,%edx
f01205ed:	89 d0                	mov    %edx,%eax
f01205ef:	3d 00 14 00 00       	cmp    $0x1400,%eax
f01205f4:	74 17                	je     f012060d <test_krealloc_BF+0x16f7>
			panic("krealloc: pages in memory are not freed correctly");
f01205f6:	83 ec 04             	sub    $0x4,%esp
f01205f9:	68 ac ad 12 f0       	push   $0xf012adac
f01205fe:	68 c9 14 00 00       	push   $0x14c9
f0120603:	68 7e a0 12 f0       	push   $0xf012a07e
f0120608:	e8 0d fc fd ff       	call   f010021a <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012060d:	e8 a1 cc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120612:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0120615:	e8 2f 41 fe ff       	call   f0104749 <pf_calculate_free_frames>
f012061a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		kfree(ptr_allocations[4]);
f012061d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120623:	83 ec 0c             	sub    $0xc,%esp
f0120626:	50                   	push   %eax
f0120627:	e8 0d 81 fe ff       	call   f0108739 <kfree>
f012062c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012062f:	e8 15 41 fe ff       	call   f0104749 <pf_calculate_free_frames>
f0120634:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f0120637:	74 17                	je     f0120650 <test_krealloc_BF+0x173a>
			panic(
f0120639:	83 ec 04             	sub    $0x4,%esp
f012063c:	68 64 a2 12 f0       	push   $0xf012a264
f0120641:	68 d1 14 00 00       	push   $0x14d1
f0120646:	68 7e a0 12 f0       	push   $0xf012a07e
f012064b:	e8 ca fb fd ff       	call   f010021a <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0120650:	e8 5e cc fe ff       	call   f010d2b3 <sys_calculate_free_frames>
f0120655:	89 c2                	mov    %eax,%edx
f0120657:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012065a:	29 c2                	sub    %eax,%edx
f012065c:	89 d0                	mov    %edx,%eax
f012065e:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0120663:	74 17                	je     f012067c <test_krealloc_BF+0x1766>
			panic("krealloc: pages in memory are not freed correctly");
f0120665:	83 ec 04             	sub    $0x4,%esp
f0120668:	68 ac ad 12 f0       	push   $0xf012adac
f012066d:	68 d3 14 00 00       	push   $0x14d3
f0120672:	68 7e a0 12 f0       	push   $0xf012a07e
f0120677:	e8 9e fb fd ff       	call   f010021a <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012067c:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0120683:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012068a:	eb 48                	jmp    f01206d4 <test_krealloc_BF+0x17be>
					PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012068c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012068f:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0120694:	83 ec 04             	sub    $0x4,%esp
f0120697:	8d 8d a0 fe ff ff    	lea    -0x160(%ebp),%ecx
f012069d:	51                   	push   %ecx
f012069e:	52                   	push   %edx
f012069f:	50                   	push   %eax
f01206a0:	e8 06 6f fe ff       	call   f01075ab <get_page_table>
f01206a5:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01206a8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01206ae:	85 c0                	test   %eax,%eax
f01206b0:	75 17                	jne    f01206c9 <test_krealloc_BF+0x17b3>
					panic(
f01206b2:	83 ec 04             	sub    $0x4,%esp
f01206b5:	68 d0 a5 12 f0       	push   $0xf012a5d0
f01206ba:	68 e0 14 00 00       	push   $0x14e0
f01206bf:	68 7e a0 12 f0       	push   $0xf012a07e
f01206c4:	e8 51 fb fd ff       	call   f010021a <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01206c9:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01206d0:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01206d4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01206d8:	78 b2                	js     f012068c <test_krealloc_BF+0x1776>
f01206da:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01206de:	7f 09                	jg     f01206e9 <test_krealloc_BF+0x17d3>
f01206e0:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01206e7:	76 a3                	jbe    f012068c <test_krealloc_BF+0x1776>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01206e9:	83 ec 0c             	sub    $0xc,%esp
f01206ec:	68 58 b1 12 f0       	push   $0xf012b158
f01206f1:	e8 a5 07 fe ff       	call   f0100e9b <cprintf>
f01206f6:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f01206f9:	83 ec 0c             	sub    $0xc,%esp
f01206fc:	68 d8 b1 12 f0       	push   $0xf012b1d8
f0120701:	e8 95 07 fe ff       	call   f0100e9b <cprintf>
f0120706:	83 c4 10             	add    $0x10,%esp
	return 0;
f0120709:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012070e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120711:	5b                   	pop    %ebx
f0120712:	5f                   	pop    %edi
f0120713:	5d                   	pop    %ebp
f0120714:	c3                   	ret    

f0120715 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0120715:	55                   	push   %ebp
f0120716:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
	 */	return 0;
f0120718:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012071d:	5d                   	pop    %ebp
f012071e:	c3                   	ret    

f012071f <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012071f:	55                   	push   %ebp
f0120720:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f0120722:	c7 05 10 40 3f f0 00 	movl   $0x0,0xf03f4010
f0120729:	00 00 00 
}
f012072c:	90                   	nop
f012072d:	5d                   	pop    %ebp
f012072e:	c3                   	ret    

f012072f <inctst>:
void inctst()
{
f012072f:	55                   	push   %ebp
f0120730:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f0120732:	a1 10 40 3f f0       	mov    0xf03f4010,%eax
f0120737:	40                   	inc    %eax
f0120738:	a3 10 40 3f f0       	mov    %eax,0xf03f4010
}
f012073d:	90                   	nop
f012073e:	5d                   	pop    %ebp
f012073f:	c3                   	ret    

f0120740 <gettst>:
uint32 gettst()
{
f0120740:	55                   	push   %ebp
f0120741:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f0120743:	a1 10 40 3f f0       	mov    0xf03f4010,%eax
}
f0120748:	5d                   	pop    %ebp
f0120749:	c3                   	ret    

f012074a <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012074a:	55                   	push   %ebp
f012074b:	89 e5                	mov    %esp,%ebp
f012074d:	83 ec 28             	sub    $0x28,%esp
f0120750:	8b 45 14             	mov    0x14(%ebp),%eax
f0120753:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f0120756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012075d:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f0120761:	83 f8 65             	cmp    $0x65,%eax
f0120764:	74 5d                	je     f01207c3 <tst+0x79>
f0120766:	83 f8 65             	cmp    $0x65,%eax
f0120769:	7f 0a                	jg     f0120775 <tst+0x2b>
f012076b:	83 f8 62             	cmp    $0x62,%eax
f012076e:	74 73                	je     f01207e3 <tst+0x99>
f0120770:	e9 91 00 00 00       	jmp    f0120806 <tst+0xbc>
f0120775:	83 f8 67             	cmp    $0x67,%eax
f0120778:	74 29                	je     f01207a3 <tst+0x59>
f012077a:	83 f8 6c             	cmp    $0x6c,%eax
f012077d:	0f 85 83 00 00 00    	jne    f0120806 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f0120783:	8b 45 08             	mov    0x8(%ebp),%eax
f0120786:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120789:	73 09                	jae    f0120794 <tst+0x4a>
			chk = 1;
f012078b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120792:	eb 68                	jmp    f01207fc <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f0120794:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120798:	74 62                	je     f01207fc <tst+0xb2>
			chk = 1;
f012079a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01207a1:	eb 59                	jmp    f01207fc <tst+0xb2>
	case 'g':
		if (n > v1)
f01207a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01207a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01207a9:	76 09                	jbe    f01207b4 <tst+0x6a>
			chk = 1;
f01207ab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f01207b2:	eb 4b                	jmp    f01207ff <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f01207b4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f01207b8:	74 45                	je     f01207ff <tst+0xb5>
			chk = 1;
f01207ba:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01207c1:	eb 3c                	jmp    f01207ff <tst+0xb5>
	case 'e':
		if (n == v1)
f01207c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01207c6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01207c9:	75 09                	jne    f01207d4 <tst+0x8a>
			chk = 1;
f01207cb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f01207d2:	eb 2e                	jmp    f0120802 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f01207d4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f01207d8:	74 28                	je     f0120802 <tst+0xb8>
			chk = 1;
f01207da:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01207e1:	eb 1f                	jmp    f0120802 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f01207e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01207e6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01207e9:	72 1a                	jb     f0120805 <tst+0xbb>
f01207eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01207ee:	3b 45 10             	cmp    0x10(%ebp),%eax
f01207f1:	77 12                	ja     f0120805 <tst+0xbb>
			chk = 1;
f01207f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01207fa:	eb 09                	jmp    f0120805 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f01207fc:	90                   	nop
f01207fd:	eb 07                	jmp    f0120806 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f01207ff:	90                   	nop
f0120800:	eb 04                	jmp    f0120806 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120802:	90                   	nop
f0120803:	eb 01                	jmp    f0120806 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f0120805:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f0120806:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012080a:	75 14                	jne    f0120820 <tst+0xd6>
f012080c:	83 ec 04             	sub    $0x4,%esp
f012080f:	68 18 b2 12 f0       	push   $0xf012b218
f0120814:	6a 3c                	push   $0x3c
f0120816:	68 2b b2 12 f0       	push   $0xf012b22b
f012081b:	e8 fa f9 fd ff       	call   f010021a <_panic>
	tstcnt++ ;
f0120820:	a1 10 40 3f f0       	mov    0xf03f4010,%eax
f0120825:	40                   	inc    %eax
f0120826:	a3 10 40 3f f0       	mov    %eax,0xf03f4010
	return;
f012082b:	90                   	nop
}
f012082c:	c9                   	leave  
f012082d:	c3                   	ret    

f012082e <chktst>:

void chktst(uint32 n)
{
f012082e:	55                   	push   %ebp
f012082f:	89 e5                	mov    %esp,%ebp
f0120831:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f0120834:	a1 10 40 3f f0       	mov    0xf03f4010,%eax
f0120839:	3b 45 08             	cmp    0x8(%ebp),%eax
f012083c:	75 12                	jne    f0120850 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012083e:	83 ec 0c             	sub    $0xc,%esp
f0120841:	68 44 b2 12 f0       	push   $0xf012b244
f0120846:	e8 50 06 fe ff       	call   f0100e9b <cprintf>
f012084b:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012084e:	eb 14                	jmp    f0120864 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f0120850:	83 ec 04             	sub    $0x4,%esp
f0120853:	68 70 b2 12 f0       	push   $0xf012b270
f0120858:	6a 46                	push   $0x46
f012085a:	68 2b b2 12 f0       	push   $0xf012b22b
f012085f:	e8 b6 f9 fd ff       	call   f010021a <_panic>
}
f0120864:	c9                   	leave  
f0120865:	c3                   	ret    

f0120866 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0120866:	55                   	push   %ebp
f0120867:	89 e5                	mov    %esp,%ebp
f0120869:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012086c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120870:	77 07                	ja     f0120879 <nearest_pow2_ceil+0x13>
f0120872:	b8 01 00 00 00       	mov    $0x1,%eax
f0120877:	eb 20                	jmp    f0120899 <nearest_pow2_ceil+0x33>
    int power = 2;
f0120879:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0120880:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0120883:	eb 08                	jmp    f012088d <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0120885:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120888:	01 c0                	add    %eax,%eax
f012088a:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012088d:	d1 6d 08             	shrl   0x8(%ebp)
f0120890:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120894:	75 ef                	jne    f0120885 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0120896:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120899:	c9                   	leave  
f012089a:	c3                   	ret    

f012089b <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012089b:	55                   	push   %ebp
f012089c:	89 e5                	mov    %esp,%ebp
f012089e:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01208a1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01208a5:	77 07                	ja     f01208ae <log2_ceil+0x13>
f01208a7:	b8 01 00 00 00       	mov    $0x1,%eax
f01208ac:	eb 1b                	jmp    f01208c9 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f01208ae:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01208b5:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01208b8:	eb 03                	jmp    f01208bd <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f01208ba:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f01208bd:	d1 6d 08             	shrl   0x8(%ebp)
f01208c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01208c4:	75 f4                	jne    f01208ba <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01208c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01208c9:	c9                   	leave  
f01208ca:	c3                   	ret    

f01208cb <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01208cb:	55                   	push   %ebp
f01208cc:	89 e5                	mov    %esp,%ebp
f01208ce:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01208d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01208d4:	8b 00                	mov    (%eax),%eax
f01208d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01208d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01208dc:	8b 00                	mov    (%eax),%eax
f01208de:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01208e1:	eb 52                	jmp    f0120935 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01208e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01208e6:	8b 00                	mov    (%eax),%eax
f01208e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01208eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01208ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208f1:	75 12                	jne    f0120905 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01208f3:	83 ec 0c             	sub    $0xc,%esp
f01208f6:	68 8c b2 12 f0       	push   $0xf012b28c
f01208fb:	e8 9b 05 fe ff       	call   f0100e9b <cprintf>
f0120900:	83 c4 10             	add    $0x10,%esp
			break;
f0120903:	eb 3f                	jmp    f0120944 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0120905:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120909:	74 38                	je     f0120943 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012090b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012090e:	8b 00                	mov    (%eax),%eax
f0120910:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0120913:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120916:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120919:	75 12                	jne    f012092d <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012091b:	83 ec 0c             	sub    $0xc,%esp
f012091e:	68 a8 b2 12 f0       	push   $0xf012b2a8
f0120923:	e8 73 05 fe ff       	call   f0100e9b <cprintf>
f0120928:	83 c4 10             	add    $0x10,%esp
			break;
f012092b:	eb 17                	jmp    f0120944 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012092d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120930:	8b 00                	mov    (%eax),%eax
f0120932:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0120935:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0120939:	74 09                	je     f0120944 <detect_loop_in_FrameInfo_list+0x79>
f012093b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012093f:	75 a2                	jne    f01208e3 <detect_loop_in_FrameInfo_list+0x18>
f0120941:	eb 01                	jmp    f0120944 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0120943:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0120944:	83 ec 0c             	sub    $0xc,%esp
f0120947:	68 bf b2 12 f0       	push   $0xf012b2bf
f012094c:	e8 4a 05 fe ff       	call   f0100e9b <cprintf>
f0120951:	83 c4 10             	add    $0x10,%esp
}
f0120954:	90                   	nop
f0120955:	c9                   	leave  
f0120956:	c3                   	ret    

f0120957 <scarce_memory>:

void scarce_memory()
{
f0120957:	55                   	push   %ebp
f0120958:	89 e5                	mov    %esp,%ebp
f012095a:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012095d:	a1 28 40 3f f0       	mov    0xf03f4028,%eax
f0120962:	ba 64 00 00 00       	mov    $0x64,%edx
f0120967:	29 c2                	sub    %eax,%edx
f0120969:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f012096e:	0f af c2             	imul   %edx,%eax
f0120971:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0120976:	f7 e2                	mul    %edx
f0120978:	89 d0                	mov    %edx,%eax
f012097a:	c1 e8 05             	shr    $0x5,%eax
f012097d:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0120980:	a1 28 40 3f f0       	mov    0xf03f4028,%eax
f0120985:	ba 64 00 00 00       	mov    $0x64,%edx
f012098a:	29 c2                	sub    %eax,%edx
f012098c:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f0120991:	89 d1                	mov    %edx,%ecx
f0120993:	0f af c8             	imul   %eax,%ecx
f0120996:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012099b:	f7 e1                	mul    %ecx
f012099d:	c1 ea 05             	shr    $0x5,%edx
f01209a0:	89 d0                	mov    %edx,%eax
f01209a2:	c1 e0 02             	shl    $0x2,%eax
f01209a5:	01 d0                	add    %edx,%eax
f01209a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01209ae:	01 d0                	add    %edx,%eax
f01209b0:	c1 e0 02             	shl    $0x2,%eax
f01209b3:	29 c1                	sub    %eax,%ecx
f01209b5:	89 ca                	mov    %ecx,%edx
f01209b7:	85 d2                	test   %edx,%edx
f01209b9:	74 03                	je     f01209be <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01209bb:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01209be:	8b 15 44 40 3f f0    	mov    0xf03f4044,%edx
f01209c4:	a1 58 40 3f f0       	mov    0xf03f4058,%eax
f01209c9:	29 c2                	sub    %eax,%edx
f01209cb:	89 d0                	mov    %edx,%eax
f01209cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01209d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01209d3:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01209d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01209d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01209e0:	eb 12                	jmp    f01209f4 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01209e2:	83 ec 0c             	sub    $0xc,%esp
f01209e5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01209e8:	50                   	push   %eax
f01209e9:	e8 fb 69 fe ff       	call   f01073e9 <allocate_frame>
f01209ee:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01209f1:	ff 45 f0             	incl   -0x10(%ebp)
f01209f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01209f7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01209fa:	76 e6                	jbe    f01209e2 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01209fc:	90                   	nop
f01209fd:	c9                   	leave  
f01209fe:	c3                   	ret    

f01209ff <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01209ff:	55                   	push   %ebp
f0120a00:	89 e5                	mov    %esp,%ebp
f0120a02:	83 ec 40             	sub    $0x40,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0120a05:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f0120a0c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0120a13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f0120a1a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120a1e:	0f 85 c6 01 00 00    	jne    f0120bea <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1eb>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0120a24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0120a2b:	e9 d9 00 00 00       	jmp    f0120b09 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10a>
		{
			struct Env * ptr_ready_env = NULL;
f0120a30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0120a37:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120a3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0120a3f:	c1 e2 04             	shl    $0x4,%edx
f0120a42:	01 d0                	add    %edx,%eax
f0120a44:	8b 00                	mov    (%eax),%eax
f0120a46:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0120a49:	e9 80 00 00 00       	jmp    f0120ace <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
#if USE_KHEAP
				int num_of_pages_in_WS = LIST_SIZE(&(ptr_ready_env->page_WS_list));
f0120a4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120a51:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0120a57:	89 45 d8             	mov    %eax,-0x28(%ebp)
#else
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
#endif
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0120a5a:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120a5f:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120a65:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0120a68:	0f af c2             	imul   %edx,%eax
f0120a6b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0120a70:	f7 e2                	mul    %edx
f0120a72:	89 d0                	mov    %edx,%eax
f0120a74:	c1 e8 05             	shr    $0x5,%eax
f0120a77:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0120a7a:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120a7f:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120a85:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0120a88:	89 d1                	mov    %edx,%ecx
f0120a8a:	0f af c8             	imul   %eax,%ecx
f0120a8d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0120a92:	f7 e1                	mul    %ecx
f0120a94:	c1 ea 05             	shr    $0x5,%edx
f0120a97:	89 d0                	mov    %edx,%eax
f0120a99:	c1 e0 02             	shl    $0x2,%eax
f0120a9c:	01 d0                	add    %edx,%eax
f0120a9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120aa5:	01 d0                	add    %edx,%eax
f0120aa7:	c1 e0 02             	shl    $0x2,%eax
f0120aaa:	29 c1                	sub    %eax,%ecx
f0120aac:	89 ca                	mov    %ecx,%edx
f0120aae:	85 d2                	test   %edx,%edx
f0120ab0:	74 03                	je     f0120ab5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb6>
					num_of_pages_to_be_removed++;
f0120ab2:	ff 45 e8             	incl   -0x18(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0120ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120ab8:	01 45 fc             	add    %eax,-0x4(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0120abb:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120ac0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0120ac3:	c1 e2 04             	shl    $0x4,%edx
f0120ac6:	01 d0                	add    %edx,%eax
f0120ac8:	8b 40 08             	mov    0x8(%eax),%eax
f0120acb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0120ace:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0120ad6:	c1 e2 04             	shl    $0x4,%edx
f0120ad9:	01 d0                	add    %edx,%eax
f0120adb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120adf:	74 08                	je     f0120ae9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xea>
f0120ae1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0120ae4:	8b 52 44             	mov    0x44(%edx),%edx
f0120ae7:	eb 05                	jmp    f0120aee <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f0120ae9:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aee:	89 50 08             	mov    %edx,0x8(%eax)
f0120af1:	8b 40 08             	mov    0x8(%eax),%eax
f0120af4:	85 c0                	test   %eax,%eax
f0120af6:	0f 85 52 ff ff ff    	jne    f0120a4e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f0120afc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120b00:	0f 85 48 ff ff ff    	jne    f0120a4e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0120b06:	ff 45 f0             	incl   -0x10(%ebp)
f0120b09:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0120b0e:	0f b6 c0             	movzbl %al,%eax
f0120b11:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0120b14:	0f 8f 16 ff ff ff    	jg     f0120a30 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0120b1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0120b21:	a1 2c 40 3f f0       	mov    0xf03f402c,%eax
f0120b26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0120b29:	eb 1a                	jmp    f0120b45 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x146>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(ptr_exit_env->page_WS_list));
f0120b2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120b2e:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0120b34:	89 45 d4             	mov    %eax,-0x2c(%ebp)
#else
			int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f0120b37:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120b3a:	01 45 f8             	add    %eax,-0x8(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0120b3d:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0120b42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0120b45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120b49:	74 08                	je     f0120b53 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x154>
f0120b4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120b4e:	8b 40 44             	mov    0x44(%eax),%eax
f0120b51:	eb 05                	jmp    f0120b58 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x159>
f0120b53:	b8 00 00 00 00       	mov    $0x0,%eax
f0120b58:	a3 34 40 3f f0       	mov    %eax,0xf03f4034
f0120b5d:	a1 34 40 3f f0       	mov    0xf03f4034,%eax
f0120b62:	85 c0                	test   %eax,%eax
f0120b64:	75 c5                	jne    f0120b2b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x12c>
f0120b66:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120b6a:	75 bf                	jne    f0120b2b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x12c>
			int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
		}

		if(curenv != NULL)
f0120b6c:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120b71:	85 c0                	test   %eax,%eax
f0120b73:	0f 84 e0 00 00 00    	je     f0120c59 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x25a>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(curenv->page_WS_list));
f0120b79:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120b7e:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0120b84:	89 45 d0             	mov    %eax,-0x30(%ebp)
#else
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
#endif
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0120b87:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120b8c:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120b92:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b95:	0f af c2             	imul   %edx,%eax
f0120b98:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0120b9d:	f7 e2                	mul    %edx
f0120b9f:	89 d0                	mov    %edx,%eax
f0120ba1:	c1 e8 05             	shr    $0x5,%eax
f0120ba4:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0120ba7:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120bac:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120bb2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120bb5:	89 d1                	mov    %edx,%ecx
f0120bb7:	0f af c8             	imul   %eax,%ecx
f0120bba:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0120bbf:	f7 e1                	mul    %ecx
f0120bc1:	c1 ea 05             	shr    $0x5,%edx
f0120bc4:	89 d0                	mov    %edx,%eax
f0120bc6:	c1 e0 02             	shl    $0x2,%eax
f0120bc9:	01 d0                	add    %edx,%eax
f0120bcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120bd2:	01 d0                	add    %edx,%eax
f0120bd4:	c1 e0 02             	shl    $0x2,%eax
f0120bd7:	29 c1                	sub    %eax,%ecx
f0120bd9:	89 ca                	mov    %ecx,%edx
f0120bdb:	85 d2                	test   %edx,%edx
f0120bdd:	74 03                	je     f0120be2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1e3>
				num_of_pages_to_be_removed++;
f0120bdf:	ff 45 e0             	incl   -0x20(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0120be2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0120be5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120be8:	eb 6f                	jmp    f0120c59 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x25a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
#if USE_KHEAP
		int num_of_pages_in_WS = LIST_SIZE(&(curenv->page_WS_list));
f0120bea:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120bef:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
f0120bf5:	89 45 cc             	mov    %eax,-0x34(%ebp)
#else
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
#endif
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0120bf8:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120bfd:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120c03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120c06:	0f af c2             	imul   %edx,%eax
f0120c09:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0120c0e:	f7 e2                	mul    %edx
f0120c10:	89 d0                	mov    %edx,%eax
f0120c12:	c1 e8 05             	shr    $0x5,%eax
f0120c15:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0120c18:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120c1d:	8b 90 c0 05 00 00    	mov    0x5c0(%eax),%edx
f0120c23:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120c26:	89 d1                	mov    %edx,%ecx
f0120c28:	0f af c8             	imul   %eax,%ecx
f0120c2b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0120c30:	f7 e1                	mul    %ecx
f0120c32:	c1 ea 05             	shr    $0x5,%edx
f0120c35:	89 d0                	mov    %edx,%eax
f0120c37:	c1 e0 02             	shl    $0x2,%eax
f0120c3a:	01 d0                	add    %edx,%eax
f0120c3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120c43:	01 d0                	add    %edx,%eax
f0120c45:	c1 e0 02             	shl    $0x2,%eax
f0120c48:	29 c1                	sub    %eax,%ecx
f0120c4a:	89 ca                	mov    %ecx,%edx
f0120c4c:	85 d2                	test   %edx,%edx
f0120c4e:	74 03                	je     f0120c53 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x254>
			num_of_pages_to_be_removed++;
f0120c50:	ff 45 dc             	incl   -0x24(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0120c53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0120c59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120c5f:	01 c2                	add    %eax,%edx
f0120c61:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120c64:	01 d0                	add    %edx,%eax
}
f0120c66:	c9                   	leave  
f0120c67:	c3                   	ret    

f0120c68 <schenv>:


void schenv()
{
f0120c68:	55                   	push   %ebp
f0120c69:	89 e5                	mov    %esp,%ebp
f0120c6b:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0120c6e:	c6 05 f4 40 3f f0 00 	movb   $0x0,0xf03f40f4
	__ne = NULL;
f0120c75:	c7 05 7c 40 3f f0 00 	movl   $0x0,0xf03f407c
f0120c7c:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0120c7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c86:	eb 3f                	jmp    f0120cc7 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0120c88:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120c8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c90:	c1 e2 04             	shl    $0x4,%edx
f0120c93:	01 d0                	add    %edx,%eax
f0120c95:	83 ec 0c             	sub    $0xc,%esp
f0120c98:	50                   	push   %eax
f0120c99:	e8 7e 41 fe ff       	call   f0104e1c <queue_size>
f0120c9e:	83 c4 10             	add    $0x10,%esp
f0120ca1:	85 c0                	test   %eax,%eax
f0120ca3:	74 1f                	je     f0120cc4 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0120ca5:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120caa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120cad:	c1 e2 04             	shl    $0x4,%edx
f0120cb0:	01 d0                	add    %edx,%eax
f0120cb2:	8b 40 04             	mov    0x4(%eax),%eax
f0120cb5:	a3 7c 40 3f f0       	mov    %eax,0xf03f407c
			__nl = i;
f0120cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120cbd:	a2 f4 40 3f f0       	mov    %al,0xf03f40f4
			break;
f0120cc2:	eb 10                	jmp    f0120cd4 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0120cc4:	ff 45 f4             	incl   -0xc(%ebp)
f0120cc7:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0120ccc:	0f b6 c0             	movzbl %al,%eax
f0120ccf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cd2:	7f b4                	jg     f0120c88 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0120cd4:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120cd9:	85 c0                	test   %eax,%eax
f0120cdb:	0f 84 86 00 00 00    	je     f0120d67 <schenv+0xff>
	{
		if (__ne != NULL)
f0120ce1:	a1 7c 40 3f f0       	mov    0xf03f407c,%eax
f0120ce6:	85 c0                	test   %eax,%eax
f0120ce8:	74 4b                	je     f0120d35 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0120cea:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120cef:	0f b6 c0             	movzbl %al,%eax
f0120cf2:	8d 50 01             	lea    0x1(%eax),%edx
f0120cf5:	a0 f4 40 3f f0       	mov    0xf03f40f4,%al
f0120cfa:	0f b6 c0             	movzbl %al,%eax
f0120cfd:	39 c2                	cmp    %eax,%edx
f0120cff:	7d 66                	jge    f0120d67 <schenv+0xff>
			{
				__ne = curenv;
f0120d01:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120d06:	a3 7c 40 3f f0       	mov    %eax,0xf03f407c
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0120d0b:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d10:	0f b6 c0             	movzbl %al,%eax
f0120d13:	8a 15 c8 40 3f f0    	mov    0xf03f40c8,%dl
f0120d19:	0f b6 d2             	movzbl %dl,%edx
f0120d1c:	4a                   	dec    %edx
f0120d1d:	39 d0                	cmp    %edx,%eax
f0120d1f:	7d 08                	jge    f0120d29 <schenv+0xc1>
f0120d21:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d26:	40                   	inc    %eax
f0120d27:	eb 05                	jmp    f0120d2e <schenv+0xc6>
f0120d29:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d2e:	a2 f4 40 3f f0       	mov    %al,0xf03f40f4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0120d33:	eb 32                	jmp    f0120d67 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0120d35:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120d3a:	a3 7c 40 3f f0       	mov    %eax,0xf03f407c
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0120d3f:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d44:	0f b6 c0             	movzbl %al,%eax
f0120d47:	8a 15 c8 40 3f f0    	mov    0xf03f40c8,%dl
f0120d4d:	0f b6 d2             	movzbl %dl,%edx
f0120d50:	4a                   	dec    %edx
f0120d51:	39 d0                	cmp    %edx,%eax
f0120d53:	7d 08                	jge    f0120d5d <schenv+0xf5>
f0120d55:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d5a:	40                   	inc    %eax
f0120d5b:	eb 05                	jmp    f0120d62 <schenv+0xfa>
f0120d5d:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120d62:	a2 f4 40 3f f0       	mov    %al,0xf03f40f4
		}
	}
}
f0120d67:	90                   	nop
f0120d68:	c9                   	leave  
f0120d69:	c3                   	ret    

f0120d6a <chksch>:

void chksch(uint8 onoff)
{
f0120d6a:	55                   	push   %ebp
f0120d6b:	89 e5                	mov    %esp,%ebp
f0120d6d:	83 ec 04             	sub    $0x4,%esp
f0120d70:	8b 45 08             	mov    0x8(%ebp),%eax
f0120d73:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0120d76:	c7 05 f0 40 3f f0 00 	movl   $0x0,0xf03f40f0
f0120d7d:	00 00 00 
	__ne = NULL;
f0120d80:	c7 05 7c 40 3f f0 00 	movl   $0x0,0xf03f407c
f0120d87:	00 00 00 
	__pl = 0 ;
f0120d8a:	c6 05 14 40 3f f0 00 	movb   $0x0,0xf03f4014
	__nl = 0 ;
f0120d91:	c6 05 f4 40 3f f0 00 	movb   $0x0,0xf03f40f4
	__chkstatus = onoff;
f0120d98:	8a 45 fc             	mov    -0x4(%ebp),%al
f0120d9b:	a2 78 40 3f f0       	mov    %al,0xf03f4078
}
f0120da0:	90                   	nop
f0120da1:	c9                   	leave  
f0120da2:	c3                   	ret    

f0120da3 <chk1>:
void chk1()
{
f0120da3:	55                   	push   %ebp
f0120da4:	89 e5                	mov    %esp,%ebp
f0120da6:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0120da9:	a0 78 40 3f f0       	mov    0xf03f4078,%al
f0120dae:	84 c0                	test   %al,%al
f0120db0:	74 2b                	je     f0120ddd <chk1+0x3a>
		return ;
	__pe = curenv;
f0120db2:	a1 38 37 3f f0       	mov    0xf03f3738,%eax
f0120db7:	a3 f0 40 3f f0       	mov    %eax,0xf03f40f0
	__pl = __nl ;
f0120dbc:	a0 f4 40 3f f0       	mov    0xf03f40f4,%al
f0120dc1:	a2 14 40 3f f0       	mov    %al,0xf03f4014
	if (__pe == NULL)
f0120dc6:	a1 f0 40 3f f0       	mov    0xf03f40f0,%eax
f0120dcb:	85 c0                	test   %eax,%eax
f0120dcd:	75 07                	jne    f0120dd6 <chk1+0x33>
	{
		__pl = 0;
f0120dcf:	c6 05 14 40 3f f0 00 	movb   $0x0,0xf03f4014
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0120dd6:	e8 8d fe ff ff       	call   f0120c68 <schenv>
f0120ddb:	eb 01                	jmp    f0120dde <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0120ddd:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0120dde:	c9                   	leave  
f0120ddf:	c3                   	ret    

f0120de0 <chk2>:
void chk2(struct Env* __se)
{
f0120de0:	55                   	push   %ebp
f0120de1:	89 e5                	mov    %esp,%ebp
f0120de3:	53                   	push   %ebx
f0120de4:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0120de7:	a0 78 40 3f f0       	mov    0xf03f4078,%al
f0120dec:	84 c0                	test   %al,%al
f0120dee:	0f 84 43 02 00 00    	je     f0121037 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0120df4:	a1 7c 40 3f f0       	mov    0xf03f407c,%eax
f0120df9:	39 45 08             	cmp    %eax,0x8(%ebp)
f0120dfc:	74 19                	je     f0120e17 <chk2+0x37>
f0120dfe:	68 d9 b2 12 f0       	push   $0xf012b2d9
f0120e03:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0120e08:	68 09 01 00 00       	push   $0x109
f0120e0d:	68 2b b2 12 f0       	push   $0xf012b22b
f0120e12:	e8 b9 f4 fd ff       	call   f01002d0 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0120e17:	a1 7c 40 3f f0       	mov    0xf03f407c,%eax
f0120e1c:	85 c0                	test   %eax,%eax
f0120e1e:	0f 84 25 01 00 00    	je     f0120f49 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0120e24:	8b 15 60 40 3f f0    	mov    0xf03f4060,%edx
f0120e2a:	a0 f4 40 3f f0       	mov    0xf03f40f4,%al
f0120e2f:	0f b6 c0             	movzbl %al,%eax
f0120e32:	01 d0                	add    %edx,%eax
f0120e34:	8a 00                	mov    (%eax),%al
f0120e36:	0f b6 d8             	movzbl %al,%ebx
f0120e39:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0120e3e:	99                   	cltd   
f0120e3f:	f7 fb                	idiv   %ebx
f0120e41:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0120e47:	8b 15 60 40 3f f0    	mov    0xf03f4060,%edx
f0120e4d:	a0 f4 40 3f f0       	mov    0xf03f40f4,%al
f0120e52:	0f b6 c0             	movzbl %al,%eax
f0120e55:	01 d0                	add    %edx,%eax
f0120e57:	8a 00                	mov    (%eax),%al
f0120e59:	0f b6 d8             	movzbl %al,%ebx
f0120e5c:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0120e61:	99                   	cltd   
f0120e62:	f7 fb                	idiv   %ebx
f0120e64:	89 c3                	mov    %eax,%ebx
f0120e66:	89 c8                	mov    %ecx,%eax
f0120e68:	99                   	cltd   
f0120e69:	f7 fb                	idiv   %ebx
f0120e6b:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0120e6f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0120e73:	83 e0 01             	and    $0x1,%eax
f0120e76:	66 85 c0             	test   %ax,%ax
f0120e79:	74 07                	je     f0120e82 <chk2+0xa2>
f0120e7b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0120e7f:	40                   	inc    %eax
f0120e80:	eb 04                	jmp    f0120e86 <chk2+0xa6>
f0120e82:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0120e86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0120e8a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0120e8e:	89 d0                	mov    %edx,%eax
f0120e90:	c1 e0 02             	shl    $0x2,%eax
f0120e93:	01 d0                	add    %edx,%eax
f0120e95:	01 c0                	add    %eax,%eax
f0120e97:	01 d0                	add    %edx,%eax
f0120e99:	c1 e0 02             	shl    $0x2,%eax
f0120e9c:	01 d0                	add    %edx,%eax
f0120e9e:	01 c0                	add    %eax,%eax
f0120ea0:	89 c1                	mov    %eax,%ecx
f0120ea2:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0120ea7:	f7 e9                	imul   %ecx
f0120ea9:	c1 fa 05             	sar    $0x5,%edx
f0120eac:	89 c8                	mov    %ecx,%eax
f0120eae:	c1 f8 1f             	sar    $0x1f,%eax
f0120eb1:	29 c2                	sub    %eax,%edx
f0120eb3:	89 d0                	mov    %edx,%eax
f0120eb5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0120eb9:	e8 64 3e fe ff       	call   f0104d22 <kclock_read_cnt0>
f0120ebe:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0120ec2:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0120ec6:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0120eca:	76 0a                	jbe    f0120ed6 <chk2+0xf6>
f0120ecc:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0120ed0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0120ed4:	76 19                	jbe    f0120eef <chk2+0x10f>
f0120ed6:	68 fc b2 12 f0       	push   $0xf012b2fc
f0120edb:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0120ee0:	68 13 01 00 00       	push   $0x113
f0120ee5:	68 2b b2 12 f0       	push   $0xf012b22b
f0120eea:	e8 e1 f3 fd ff       	call   f01002d0 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0120eef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ef6:	eb 44                	jmp    f0120f3c <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0120ef8:	a1 7c 40 3f f0       	mov    0xf03f407c,%eax
f0120efd:	8b 40 4c             	mov    0x4c(%eax),%eax
f0120f00:	89 c2                	mov    %eax,%edx
f0120f02:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120f07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f0a:	c1 e1 04             	shl    $0x4,%ecx
f0120f0d:	01 c8                	add    %ecx,%eax
f0120f0f:	83 ec 08             	sub    $0x8,%esp
f0120f12:	52                   	push   %edx
f0120f13:	50                   	push   %eax
f0120f14:	e8 1d 41 fe ff       	call   f0105036 <find_env_in_queue>
f0120f19:	83 c4 10             	add    $0x10,%esp
f0120f1c:	85 c0                	test   %eax,%eax
f0120f1e:	74 19                	je     f0120f39 <chk2+0x159>
f0120f20:	68 20 b3 12 f0       	push   $0xf012b320
f0120f25:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0120f2a:	68 17 01 00 00       	push   $0x117
f0120f2f:	68 2b b2 12 f0       	push   $0xf012b22b
f0120f34:	e8 97 f3 fd ff       	call   f01002d0 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0120f39:	ff 45 f4             	incl   -0xc(%ebp)
f0120f3c:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f0120f41:	0f b6 c0             	movzbl %al,%eax
f0120f44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f47:	7f af                	jg     f0120ef8 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0120f49:	a1 f0 40 3f f0       	mov    0xf03f40f0,%eax
f0120f4e:	85 c0                	test   %eax,%eax
f0120f50:	0f 84 e2 00 00 00    	je     f0121038 <chk2+0x258>
f0120f56:	8b 15 f0 40 3f f0    	mov    0xf03f40f0,%edx
f0120f5c:	a1 7c 40 3f f0       	mov    0xf03f407c,%eax
f0120f61:	39 c2                	cmp    %eax,%edx
f0120f63:	0f 84 cf 00 00 00    	je     f0121038 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0120f69:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120f6e:	0f b6 c0             	movzbl %al,%eax
f0120f71:	8a 15 c8 40 3f f0    	mov    0xf03f40c8,%dl
f0120f77:	0f b6 d2             	movzbl %dl,%edx
f0120f7a:	4a                   	dec    %edx
f0120f7b:	39 d0                	cmp    %edx,%eax
f0120f7d:	74 08                	je     f0120f87 <chk2+0x1a7>
f0120f7f:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120f84:	40                   	inc    %eax
f0120f85:	eb 05                	jmp    f0120f8c <chk2+0x1ac>
f0120f87:	a0 14 40 3f f0       	mov    0xf03f4014,%al
f0120f8c:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0120f8f:	a1 f0 40 3f f0       	mov    0xf03f40f0,%eax
f0120f94:	8b 40 4c             	mov    0x4c(%eax),%eax
f0120f97:	89 c2                	mov    %eax,%edx
f0120f99:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120f9e:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0120fa2:	c1 e1 04             	shl    $0x4,%ecx
f0120fa5:	01 c8                	add    %ecx,%eax
f0120fa7:	83 ec 08             	sub    $0x8,%esp
f0120faa:	52                   	push   %edx
f0120fab:	50                   	push   %eax
f0120fac:	e8 85 40 fe ff       	call   f0105036 <find_env_in_queue>
f0120fb1:	83 c4 10             	add    $0x10,%esp
f0120fb4:	85 c0                	test   %eax,%eax
f0120fb6:	75 19                	jne    f0120fd1 <chk2+0x1f1>
f0120fb8:	68 60 b3 12 f0       	push   $0xf012b360
f0120fbd:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0120fc2:	68 1d 01 00 00       	push   $0x11d
f0120fc7:	68 2b b2 12 f0       	push   $0xf012b22b
f0120fcc:	e8 ff f2 fd ff       	call   f01002d0 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0120fd1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0120fd8:	eb 4e                	jmp    f0121028 <chk2+0x248>
		{
			if (i == __tl) continue;
f0120fda:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0120fde:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0120fe1:	74 41                	je     f0121024 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0120fe3:	a1 f0 40 3f f0       	mov    0xf03f40f0,%eax
f0120fe8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0120feb:	89 c2                	mov    %eax,%edx
f0120fed:	a1 20 40 3f f0       	mov    0xf03f4020,%eax
f0120ff2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0120ff5:	c1 e1 04             	shl    $0x4,%ecx
f0120ff8:	01 c8                	add    %ecx,%eax
f0120ffa:	83 ec 08             	sub    $0x8,%esp
f0120ffd:	52                   	push   %edx
f0120ffe:	50                   	push   %eax
f0120fff:	e8 32 40 fe ff       	call   f0105036 <find_env_in_queue>
f0121004:	83 c4 10             	add    $0x10,%esp
f0121007:	85 c0                	test   %eax,%eax
f0121009:	74 1a                	je     f0121025 <chk2+0x245>
f012100b:	68 a4 b3 12 f0       	push   $0xf012b3a4
f0121010:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0121015:	68 21 01 00 00       	push   $0x121
f012101a:	68 2b b2 12 f0       	push   $0xf012b22b
f012101f:	e8 ac f2 fd ff       	call   f01002d0 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0121024:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0121025:	ff 45 f0             	incl   -0x10(%ebp)
f0121028:	a0 c8 40 3f f0       	mov    0xf03f40c8,%al
f012102d:	0f b6 c0             	movzbl %al,%eax
f0121030:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0121033:	7f a5                	jg     f0120fda <chk2+0x1fa>
f0121035:	eb 01                	jmp    f0121038 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0121037:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0121038:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012103b:	c9                   	leave  
f012103c:	c3                   	ret    

f012103d <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012103d:	55                   	push   %ebp
f012103e:	89 e5                	mov    %esp,%ebp
f0121040:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0121043:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012104a:	eb 40                	jmp    f012108c <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012104c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012104f:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0121055:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f012105a:	83 ec 08             	sub    $0x8,%esp
f012105d:	52                   	push   %edx
f012105e:	50                   	push   %eax
f012105f:	e8 9b 01 00 00       	call   f01211ff <check_va2pa>
f0121064:	83 c4 10             	add    $0x10,%esp
f0121067:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012106a:	74 19                	je     f0121085 <check_boot_pgdir+0x48>
f012106c:	68 e4 b3 12 f0       	push   $0xf012b3e4
f0121071:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0121076:	68 43 01 00 00       	push   $0x143
f012107b:	68 2b b2 12 f0       	push   $0xf012b22b
f0121080:	e8 95 f1 fd ff       	call   f010021a <_panic>

	//2016
	// check phys mem
#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0121085:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012108c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012108f:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0121095:	a1 bc 40 3f f0       	mov    0xf03f40bc,%eax
f012109a:	39 c2                	cmp    %eax,%edx
f012109c:	72 ae                	jb     f012104c <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012109e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210a5:	eb 74                	jmp    f012111b <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01210a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210aa:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01210b0:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01210b5:	83 ec 08             	sub    $0x8,%esp
f01210b8:	52                   	push   %edx
f01210b9:	50                   	push   %eax
f01210ba:	e8 40 01 00 00       	call   f01211ff <check_va2pa>
f01210bf:	83 c4 10             	add    $0x10,%esp
f01210c2:	c7 45 f0 00 90 16 f0 	movl   $0xf0169000,-0x10(%ebp)
f01210c9:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f01210d0:	77 17                	ja     f01210e9 <check_boot_pgdir+0xac>
f01210d2:	ff 75 f0             	pushl  -0x10(%ebp)
f01210d5:	68 1c b4 12 f0       	push   $0xf012b41c
f01210da:	68 4d 01 00 00       	push   $0x14d
f01210df:	68 2b b2 12 f0       	push   $0xf012b22b
f01210e4:	e8 31 f1 fd ff       	call   f010021a <_panic>
f01210e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01210ec:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f01210f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210f5:	01 ca                	add    %ecx,%edx
f01210f7:	39 d0                	cmp    %edx,%eax
f01210f9:	74 19                	je     f0121114 <check_boot_pgdir+0xd7>
f01210fb:	68 50 b4 12 f0       	push   $0xf012b450
f0121100:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0121105:	68 4d 01 00 00       	push   $0x14d
f012110a:	68 2b b2 12 f0       	push   $0xf012b22b
f012110f:	e8 06 f1 fd ff       	call   f010021a <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0121114:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012111b:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0121122:	76 83                	jbe    f01210a7 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121124:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012112b:	e9 af 00 00 00       	jmp    f01211df <check_boot_pgdir+0x1a2>
		switch (i) {
f0121130:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121133:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0121138:	74 11                	je     f012114b <check_boot_pgdir+0x10e>
f012113a:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012113f:	72 36                	jb     f0121177 <check_boot_pgdir+0x13a>
f0121141:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0121146:	83 f8 02             	cmp    $0x2,%eax
f0121149:	77 2c                	ja     f0121177 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012114b:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0121150:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121153:	c1 e2 02             	shl    $0x2,%edx
f0121156:	01 d0                	add    %edx,%eax
f0121158:	8b 00                	mov    (%eax),%eax
f012115a:	85 c0                	test   %eax,%eax
f012115c:	75 7a                	jne    f01211d8 <check_boot_pgdir+0x19b>
f012115e:	68 d2 b4 12 f0       	push   $0xf012b4d2
f0121163:	68 e6 b2 12 f0       	push   $0xf012b2e6
f0121168:	68 58 01 00 00       	push   $0x158
f012116d:	68 2b b2 12 f0       	push   $0xf012b22b
f0121172:	e8 a3 f0 fd ff       	call   f010021a <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0121177:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012117e:	76 2c                	jbe    f01211ac <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0121180:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f0121185:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121188:	c1 e2 02             	shl    $0x2,%edx
f012118b:	01 d0                	add    %edx,%eax
f012118d:	8b 00                	mov    (%eax),%eax
f012118f:	85 c0                	test   %eax,%eax
f0121191:	75 48                	jne    f01211db <check_boot_pgdir+0x19e>
f0121193:	68 d2 b4 12 f0       	push   $0xf012b4d2
f0121198:	68 e6 b2 12 f0       	push   $0xf012b2e6
f012119d:	68 5c 01 00 00       	push   $0x15c
f01211a2:	68 2b b2 12 f0       	push   $0xf012b22b
f01211a7:	e8 6e f0 fd ff       	call   f010021a <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01211ac:	a1 c0 40 3f f0       	mov    0xf03f40c0,%eax
f01211b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01211b4:	c1 e2 02             	shl    $0x2,%edx
f01211b7:	01 d0                	add    %edx,%eax
f01211b9:	8b 00                	mov    (%eax),%eax
f01211bb:	85 c0                	test   %eax,%eax
f01211bd:	74 1c                	je     f01211db <check_boot_pgdir+0x19e>
f01211bf:	68 e8 b4 12 f0       	push   $0xf012b4e8
f01211c4:	68 e6 b2 12 f0       	push   $0xf012b2e6
f01211c9:	68 5e 01 00 00       	push   $0x15e
f01211ce:	68 2b b2 12 f0       	push   $0xf012b22b
f01211d3:	e8 42 f0 fd ff       	call   f010021a <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01211d8:	90                   	nop
f01211d9:	eb 01                	jmp    f01211dc <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01211db:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01211dc:	ff 45 f4             	incl   -0xc(%ebp)
f01211df:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01211e6:	0f 86 44 ff ff ff    	jbe    f0121130 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01211ec:	83 ec 0c             	sub    $0xc,%esp
f01211ef:	68 04 b5 12 f0       	push   $0xf012b504
f01211f4:	e8 a2 fc fd ff       	call   f0100e9b <cprintf>
f01211f9:	83 c4 10             	add    $0x10,%esp
}
f01211fc:	90                   	nop
f01211fd:	c9                   	leave  
f01211fe:	c3                   	ret    

f01211ff <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01211ff:	55                   	push   %ebp
f0121200:	89 e5                	mov    %esp,%ebp
f0121202:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0121205:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121208:	c1 e8 16             	shr    $0x16,%eax
f012120b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121212:	8b 45 08             	mov    0x8(%ebp),%eax
f0121215:	01 d0                	add    %edx,%eax
f0121217:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012121a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012121d:	8b 00                	mov    (%eax),%eax
f012121f:	83 e0 01             	and    $0x1,%eax
f0121222:	85 c0                	test   %eax,%eax
f0121224:	75 0a                	jne    f0121230 <check_va2pa+0x31>
		return ~0;
f0121226:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012122b:	e9 87 00 00 00       	jmp    f01212b7 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0121230:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121233:	8b 00                	mov    (%eax),%eax
f0121235:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012123a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012123d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121240:	c1 e8 0c             	shr    $0xc,%eax
f0121243:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0121246:	a1 44 40 3f f0       	mov    0xf03f4044,%eax
f012124b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012124e:	72 17                	jb     f0121267 <check_va2pa+0x68>
f0121250:	ff 75 f0             	pushl  -0x10(%ebp)
f0121253:	68 24 b5 12 f0       	push   $0xf012b524
f0121258:	68 74 01 00 00       	push   $0x174
f012125d:	68 2b b2 12 f0       	push   $0xf012b22b
f0121262:	e8 b3 ef fd ff       	call   f010021a <_panic>
f0121267:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012126a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012126f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0121272:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121275:	c1 e8 0c             	shr    $0xc,%eax
f0121278:	25 ff 03 00 00       	and    $0x3ff,%eax
f012127d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121284:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121287:	01 d0                	add    %edx,%eax
f0121289:	8b 00                	mov    (%eax),%eax
f012128b:	83 e0 01             	and    $0x1,%eax
f012128e:	85 c0                	test   %eax,%eax
f0121290:	75 07                	jne    f0121299 <check_va2pa+0x9a>
		return ~0;
f0121292:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121297:	eb 1e                	jmp    f01212b7 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0121299:	8b 45 0c             	mov    0xc(%ebp),%eax
f012129c:	c1 e8 0c             	shr    $0xc,%eax
f012129f:	25 ff 03 00 00       	and    $0x3ff,%eax
f01212a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01212ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01212ae:	01 d0                	add    %edx,%eax
f01212b0:	8b 00                	mov    (%eax),%eax
f01212b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01212b7:	c9                   	leave  
f01212b8:	c3                   	ret    

f01212b9 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01212b9:	55                   	push   %ebp
f01212ba:	89 e5                	mov    %esp,%ebp
f01212bc:	53                   	push   %ebx
f01212bd:	83 ec 14             	sub    $0x14,%esp
f01212c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01212c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01212c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01212c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01212cc:	8b 45 18             	mov    0x18(%ebp),%eax
f01212cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01212d4:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01212d7:	77 55                	ja     f012132e <printnum+0x75>
f01212d9:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01212dc:	72 05                	jb     f01212e3 <printnum+0x2a>
f01212de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01212e1:	77 4b                	ja     f012132e <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01212e3:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01212e6:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01212e9:	8b 45 18             	mov    0x18(%ebp),%eax
f01212ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01212f1:	52                   	push   %edx
f01212f2:	50                   	push   %eax
f01212f3:	ff 75 f4             	pushl  -0xc(%ebp)
f01212f6:	ff 75 f0             	pushl  -0x10(%ebp)
f01212f9:	e8 1a 1e 00 00       	call   f0123118 <__udivdi3>
f01212fe:	83 c4 10             	add    $0x10,%esp
f0121301:	83 ec 04             	sub    $0x4,%esp
f0121304:	ff 75 20             	pushl  0x20(%ebp)
f0121307:	53                   	push   %ebx
f0121308:	ff 75 18             	pushl  0x18(%ebp)
f012130b:	52                   	push   %edx
f012130c:	50                   	push   %eax
f012130d:	ff 75 0c             	pushl  0xc(%ebp)
f0121310:	ff 75 08             	pushl  0x8(%ebp)
f0121313:	e8 a1 ff ff ff       	call   f01212b9 <printnum>
f0121318:	83 c4 20             	add    $0x20,%esp
f012131b:	eb 1a                	jmp    f0121337 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012131d:	83 ec 08             	sub    $0x8,%esp
f0121320:	ff 75 0c             	pushl  0xc(%ebp)
f0121323:	ff 75 20             	pushl  0x20(%ebp)
f0121326:	8b 45 08             	mov    0x8(%ebp),%eax
f0121329:	ff d0                	call   *%eax
f012132b:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012132e:	ff 4d 1c             	decl   0x1c(%ebp)
f0121331:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0121335:	7f e6                	jg     f012131d <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0121337:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012133a:	bb 00 00 00 00       	mov    $0x0,%ebx
f012133f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121342:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121345:	53                   	push   %ebx
f0121346:	51                   	push   %ecx
f0121347:	52                   	push   %edx
f0121348:	50                   	push   %eax
f0121349:	e8 da 1e 00 00       	call   f0123228 <__umoddi3>
f012134e:	83 c4 10             	add    $0x10,%esp
f0121351:	05 74 b7 12 f0       	add    $0xf012b774,%eax
f0121356:	8a 00                	mov    (%eax),%al
f0121358:	0f be c0             	movsbl %al,%eax
f012135b:	83 ec 08             	sub    $0x8,%esp
f012135e:	ff 75 0c             	pushl  0xc(%ebp)
f0121361:	50                   	push   %eax
f0121362:	8b 45 08             	mov    0x8(%ebp),%eax
f0121365:	ff d0                	call   *%eax
f0121367:	83 c4 10             	add    $0x10,%esp
}
f012136a:	90                   	nop
f012136b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012136e:	c9                   	leave  
f012136f:	c3                   	ret    

f0121370 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0121370:	55                   	push   %ebp
f0121371:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121373:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121377:	7e 1c                	jle    f0121395 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0121379:	8b 45 08             	mov    0x8(%ebp),%eax
f012137c:	8b 00                	mov    (%eax),%eax
f012137e:	8d 50 08             	lea    0x8(%eax),%edx
f0121381:	8b 45 08             	mov    0x8(%ebp),%eax
f0121384:	89 10                	mov    %edx,(%eax)
f0121386:	8b 45 08             	mov    0x8(%ebp),%eax
f0121389:	8b 00                	mov    (%eax),%eax
f012138b:	83 e8 08             	sub    $0x8,%eax
f012138e:	8b 50 04             	mov    0x4(%eax),%edx
f0121391:	8b 00                	mov    (%eax),%eax
f0121393:	eb 40                	jmp    f01213d5 <getuint+0x65>
	else if (lflag)
f0121395:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121399:	74 1e                	je     f01213b9 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012139b:	8b 45 08             	mov    0x8(%ebp),%eax
f012139e:	8b 00                	mov    (%eax),%eax
f01213a0:	8d 50 04             	lea    0x4(%eax),%edx
f01213a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01213a6:	89 10                	mov    %edx,(%eax)
f01213a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01213ab:	8b 00                	mov    (%eax),%eax
f01213ad:	83 e8 04             	sub    $0x4,%eax
f01213b0:	8b 00                	mov    (%eax),%eax
f01213b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01213b7:	eb 1c                	jmp    f01213d5 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01213b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01213bc:	8b 00                	mov    (%eax),%eax
f01213be:	8d 50 04             	lea    0x4(%eax),%edx
f01213c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01213c4:	89 10                	mov    %edx,(%eax)
f01213c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01213c9:	8b 00                	mov    (%eax),%eax
f01213cb:	83 e8 04             	sub    $0x4,%eax
f01213ce:	8b 00                	mov    (%eax),%eax
f01213d0:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01213d5:	5d                   	pop    %ebp
f01213d6:	c3                   	ret    

f01213d7 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01213d7:	55                   	push   %ebp
f01213d8:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01213da:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01213de:	7e 1c                	jle    f01213fc <getint+0x25>
		return va_arg(*ap, long long);
f01213e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01213e3:	8b 00                	mov    (%eax),%eax
f01213e5:	8d 50 08             	lea    0x8(%eax),%edx
f01213e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01213eb:	89 10                	mov    %edx,(%eax)
f01213ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01213f0:	8b 00                	mov    (%eax),%eax
f01213f2:	83 e8 08             	sub    $0x8,%eax
f01213f5:	8b 50 04             	mov    0x4(%eax),%edx
f01213f8:	8b 00                	mov    (%eax),%eax
f01213fa:	eb 38                	jmp    f0121434 <getint+0x5d>
	else if (lflag)
f01213fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121400:	74 1a                	je     f012141c <getint+0x45>
		return va_arg(*ap, long);
f0121402:	8b 45 08             	mov    0x8(%ebp),%eax
f0121405:	8b 00                	mov    (%eax),%eax
f0121407:	8d 50 04             	lea    0x4(%eax),%edx
f012140a:	8b 45 08             	mov    0x8(%ebp),%eax
f012140d:	89 10                	mov    %edx,(%eax)
f012140f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121412:	8b 00                	mov    (%eax),%eax
f0121414:	83 e8 04             	sub    $0x4,%eax
f0121417:	8b 00                	mov    (%eax),%eax
f0121419:	99                   	cltd   
f012141a:	eb 18                	jmp    f0121434 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012141c:	8b 45 08             	mov    0x8(%ebp),%eax
f012141f:	8b 00                	mov    (%eax),%eax
f0121421:	8d 50 04             	lea    0x4(%eax),%edx
f0121424:	8b 45 08             	mov    0x8(%ebp),%eax
f0121427:	89 10                	mov    %edx,(%eax)
f0121429:	8b 45 08             	mov    0x8(%ebp),%eax
f012142c:	8b 00                	mov    (%eax),%eax
f012142e:	83 e8 04             	sub    $0x4,%eax
f0121431:	8b 00                	mov    (%eax),%eax
f0121433:	99                   	cltd   
}
f0121434:	5d                   	pop    %ebp
f0121435:	c3                   	ret    

f0121436 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0121436:	55                   	push   %ebp
f0121437:	89 e5                	mov    %esp,%ebp
f0121439:	56                   	push   %esi
f012143a:	53                   	push   %ebx
f012143b:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012143e:	eb 17                	jmp    f0121457 <vprintfmt+0x21>
			if (ch == '\0')
f0121440:	85 db                	test   %ebx,%ebx
f0121442:	0f 84 af 03 00 00    	je     f01217f7 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0121448:	83 ec 08             	sub    $0x8,%esp
f012144b:	ff 75 0c             	pushl  0xc(%ebp)
f012144e:	53                   	push   %ebx
f012144f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121452:	ff d0                	call   *%eax
f0121454:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121457:	8b 45 10             	mov    0x10(%ebp),%eax
f012145a:	8d 50 01             	lea    0x1(%eax),%edx
f012145d:	89 55 10             	mov    %edx,0x10(%ebp)
f0121460:	8a 00                	mov    (%eax),%al
f0121462:	0f b6 d8             	movzbl %al,%ebx
f0121465:	83 fb 25             	cmp    $0x25,%ebx
f0121468:	75 d6                	jne    f0121440 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012146a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012146e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0121475:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012147c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0121483:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012148a:	8b 45 10             	mov    0x10(%ebp),%eax
f012148d:	8d 50 01             	lea    0x1(%eax),%edx
f0121490:	89 55 10             	mov    %edx,0x10(%ebp)
f0121493:	8a 00                	mov    (%eax),%al
f0121495:	0f b6 d8             	movzbl %al,%ebx
f0121498:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012149b:	83 f8 55             	cmp    $0x55,%eax
f012149e:	0f 87 2b 03 00 00    	ja     f01217cf <vprintfmt+0x399>
f01214a4:	8b 04 85 98 b7 12 f0 	mov    -0xfed4868(,%eax,4),%eax
f01214ab:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01214ad:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01214b1:	eb d7                	jmp    f012148a <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01214b3:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01214b7:	eb d1                	jmp    f012148a <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01214b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01214c0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01214c3:	89 d0                	mov    %edx,%eax
f01214c5:	c1 e0 02             	shl    $0x2,%eax
f01214c8:	01 d0                	add    %edx,%eax
f01214ca:	01 c0                	add    %eax,%eax
f01214cc:	01 d8                	add    %ebx,%eax
f01214ce:	83 e8 30             	sub    $0x30,%eax
f01214d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01214d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01214d7:	8a 00                	mov    (%eax),%al
f01214d9:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01214dc:	83 fb 2f             	cmp    $0x2f,%ebx
f01214df:	7e 3e                	jle    f012151f <vprintfmt+0xe9>
f01214e1:	83 fb 39             	cmp    $0x39,%ebx
f01214e4:	7f 39                	jg     f012151f <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01214e6:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01214e9:	eb d5                	jmp    f01214c0 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01214eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01214ee:	83 c0 04             	add    $0x4,%eax
f01214f1:	89 45 14             	mov    %eax,0x14(%ebp)
f01214f4:	8b 45 14             	mov    0x14(%ebp),%eax
f01214f7:	83 e8 04             	sub    $0x4,%eax
f01214fa:	8b 00                	mov    (%eax),%eax
f01214fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01214ff:	eb 1f                	jmp    f0121520 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0121501:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121505:	79 83                	jns    f012148a <vprintfmt+0x54>
				width = 0;
f0121507:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012150e:	e9 77 ff ff ff       	jmp    f012148a <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0121513:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012151a:	e9 6b ff ff ff       	jmp    f012148a <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012151f:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0121520:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121524:	0f 89 60 ff ff ff    	jns    f012148a <vprintfmt+0x54>
				width = precision, precision = -1;
f012152a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012152d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121530:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0121537:	e9 4e ff ff ff       	jmp    f012148a <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012153c:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012153f:	e9 46 ff ff ff       	jmp    f012148a <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0121544:	8b 45 14             	mov    0x14(%ebp),%eax
f0121547:	83 c0 04             	add    $0x4,%eax
f012154a:	89 45 14             	mov    %eax,0x14(%ebp)
f012154d:	8b 45 14             	mov    0x14(%ebp),%eax
f0121550:	83 e8 04             	sub    $0x4,%eax
f0121553:	8b 00                	mov    (%eax),%eax
f0121555:	83 ec 08             	sub    $0x8,%esp
f0121558:	ff 75 0c             	pushl  0xc(%ebp)
f012155b:	50                   	push   %eax
f012155c:	8b 45 08             	mov    0x8(%ebp),%eax
f012155f:	ff d0                	call   *%eax
f0121561:	83 c4 10             	add    $0x10,%esp
			break;
f0121564:	e9 89 02 00 00       	jmp    f01217f2 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0121569:	8b 45 14             	mov    0x14(%ebp),%eax
f012156c:	83 c0 04             	add    $0x4,%eax
f012156f:	89 45 14             	mov    %eax,0x14(%ebp)
f0121572:	8b 45 14             	mov    0x14(%ebp),%eax
f0121575:	83 e8 04             	sub    $0x4,%eax
f0121578:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012157a:	85 db                	test   %ebx,%ebx
f012157c:	79 02                	jns    f0121580 <vprintfmt+0x14a>
				err = -err;
f012157e:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0121580:	83 fb 64             	cmp    $0x64,%ebx
f0121583:	7f 0b                	jg     f0121590 <vprintfmt+0x15a>
f0121585:	8b 34 9d e0 b5 12 f0 	mov    -0xfed4a20(,%ebx,4),%esi
f012158c:	85 f6                	test   %esi,%esi
f012158e:	75 19                	jne    f01215a9 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0121590:	53                   	push   %ebx
f0121591:	68 85 b7 12 f0       	push   $0xf012b785
f0121596:	ff 75 0c             	pushl  0xc(%ebp)
f0121599:	ff 75 08             	pushl  0x8(%ebp)
f012159c:	e8 5e 02 00 00       	call   f01217ff <printfmt>
f01215a1:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01215a4:	e9 49 02 00 00       	jmp    f01217f2 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01215a9:	56                   	push   %esi
f01215aa:	68 8e b7 12 f0       	push   $0xf012b78e
f01215af:	ff 75 0c             	pushl  0xc(%ebp)
f01215b2:	ff 75 08             	pushl  0x8(%ebp)
f01215b5:	e8 45 02 00 00       	call   f01217ff <printfmt>
f01215ba:	83 c4 10             	add    $0x10,%esp
			break;
f01215bd:	e9 30 02 00 00       	jmp    f01217f2 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01215c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01215c5:	83 c0 04             	add    $0x4,%eax
f01215c8:	89 45 14             	mov    %eax,0x14(%ebp)
f01215cb:	8b 45 14             	mov    0x14(%ebp),%eax
f01215ce:	83 e8 04             	sub    $0x4,%eax
f01215d1:	8b 30                	mov    (%eax),%esi
f01215d3:	85 f6                	test   %esi,%esi
f01215d5:	75 05                	jne    f01215dc <vprintfmt+0x1a6>
				p = "(null)";
f01215d7:	be 91 b7 12 f0       	mov    $0xf012b791,%esi
			if (width > 0 && padc != '-')
f01215dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01215e0:	7e 6d                	jle    f012164f <vprintfmt+0x219>
f01215e2:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01215e6:	74 67                	je     f012164f <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01215e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01215eb:	83 ec 08             	sub    $0x8,%esp
f01215ee:	50                   	push   %eax
f01215ef:	56                   	push   %esi
f01215f0:	e8 12 05 00 00       	call   f0121b07 <strnlen>
f01215f5:	83 c4 10             	add    $0x10,%esp
f01215f8:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01215fb:	eb 16                	jmp    f0121613 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01215fd:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0121601:	83 ec 08             	sub    $0x8,%esp
f0121604:	ff 75 0c             	pushl  0xc(%ebp)
f0121607:	50                   	push   %eax
f0121608:	8b 45 08             	mov    0x8(%ebp),%eax
f012160b:	ff d0                	call   *%eax
f012160d:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0121610:	ff 4d e4             	decl   -0x1c(%ebp)
f0121613:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121617:	7f e4                	jg     f01215fd <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0121619:	eb 34                	jmp    f012164f <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012161b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012161f:	74 1c                	je     f012163d <vprintfmt+0x207>
f0121621:	83 fb 1f             	cmp    $0x1f,%ebx
f0121624:	7e 05                	jle    f012162b <vprintfmt+0x1f5>
f0121626:	83 fb 7e             	cmp    $0x7e,%ebx
f0121629:	7e 12                	jle    f012163d <vprintfmt+0x207>
					putch('?', putdat);
f012162b:	83 ec 08             	sub    $0x8,%esp
f012162e:	ff 75 0c             	pushl  0xc(%ebp)
f0121631:	6a 3f                	push   $0x3f
f0121633:	8b 45 08             	mov    0x8(%ebp),%eax
f0121636:	ff d0                	call   *%eax
f0121638:	83 c4 10             	add    $0x10,%esp
f012163b:	eb 0f                	jmp    f012164c <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012163d:	83 ec 08             	sub    $0x8,%esp
f0121640:	ff 75 0c             	pushl  0xc(%ebp)
f0121643:	53                   	push   %ebx
f0121644:	8b 45 08             	mov    0x8(%ebp),%eax
f0121647:	ff d0                	call   *%eax
f0121649:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012164c:	ff 4d e4             	decl   -0x1c(%ebp)
f012164f:	89 f0                	mov    %esi,%eax
f0121651:	8d 70 01             	lea    0x1(%eax),%esi
f0121654:	8a 00                	mov    (%eax),%al
f0121656:	0f be d8             	movsbl %al,%ebx
f0121659:	85 db                	test   %ebx,%ebx
f012165b:	74 24                	je     f0121681 <vprintfmt+0x24b>
f012165d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0121661:	78 b8                	js     f012161b <vprintfmt+0x1e5>
f0121663:	ff 4d e0             	decl   -0x20(%ebp)
f0121666:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012166a:	79 af                	jns    f012161b <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012166c:	eb 13                	jmp    f0121681 <vprintfmt+0x24b>
				putch(' ', putdat);
f012166e:	83 ec 08             	sub    $0x8,%esp
f0121671:	ff 75 0c             	pushl  0xc(%ebp)
f0121674:	6a 20                	push   $0x20
f0121676:	8b 45 08             	mov    0x8(%ebp),%eax
f0121679:	ff d0                	call   *%eax
f012167b:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012167e:	ff 4d e4             	decl   -0x1c(%ebp)
f0121681:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121685:	7f e7                	jg     f012166e <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0121687:	e9 66 01 00 00       	jmp    f01217f2 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012168c:	83 ec 08             	sub    $0x8,%esp
f012168f:	ff 75 e8             	pushl  -0x18(%ebp)
f0121692:	8d 45 14             	lea    0x14(%ebp),%eax
f0121695:	50                   	push   %eax
f0121696:	e8 3c fd ff ff       	call   f01213d7 <getint>
f012169b:	83 c4 10             	add    $0x10,%esp
f012169e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01216a1:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01216a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01216a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216aa:	85 d2                	test   %edx,%edx
f01216ac:	79 23                	jns    f01216d1 <vprintfmt+0x29b>
				putch('-', putdat);
f01216ae:	83 ec 08             	sub    $0x8,%esp
f01216b1:	ff 75 0c             	pushl  0xc(%ebp)
f01216b4:	6a 2d                	push   $0x2d
f01216b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01216b9:	ff d0                	call   *%eax
f01216bb:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01216be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01216c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216c4:	f7 d8                	neg    %eax
f01216c6:	83 d2 00             	adc    $0x0,%edx
f01216c9:	f7 da                	neg    %edx
f01216cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01216ce:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01216d1:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01216d8:	e9 bc 00 00 00       	jmp    f0121799 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01216dd:	83 ec 08             	sub    $0x8,%esp
f01216e0:	ff 75 e8             	pushl  -0x18(%ebp)
f01216e3:	8d 45 14             	lea    0x14(%ebp),%eax
f01216e6:	50                   	push   %eax
f01216e7:	e8 84 fc ff ff       	call   f0121370 <getuint>
f01216ec:	83 c4 10             	add    $0x10,%esp
f01216ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01216f2:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01216f5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01216fc:	e9 98 00 00 00       	jmp    f0121799 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0121701:	83 ec 08             	sub    $0x8,%esp
f0121704:	ff 75 0c             	pushl  0xc(%ebp)
f0121707:	6a 58                	push   $0x58
f0121709:	8b 45 08             	mov    0x8(%ebp),%eax
f012170c:	ff d0                	call   *%eax
f012170e:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0121711:	83 ec 08             	sub    $0x8,%esp
f0121714:	ff 75 0c             	pushl  0xc(%ebp)
f0121717:	6a 58                	push   $0x58
f0121719:	8b 45 08             	mov    0x8(%ebp),%eax
f012171c:	ff d0                	call   *%eax
f012171e:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0121721:	83 ec 08             	sub    $0x8,%esp
f0121724:	ff 75 0c             	pushl  0xc(%ebp)
f0121727:	6a 58                	push   $0x58
f0121729:	8b 45 08             	mov    0x8(%ebp),%eax
f012172c:	ff d0                	call   *%eax
f012172e:	83 c4 10             	add    $0x10,%esp
			break;
f0121731:	e9 bc 00 00 00       	jmp    f01217f2 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0121736:	83 ec 08             	sub    $0x8,%esp
f0121739:	ff 75 0c             	pushl  0xc(%ebp)
f012173c:	6a 30                	push   $0x30
f012173e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121741:	ff d0                	call   *%eax
f0121743:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0121746:	83 ec 08             	sub    $0x8,%esp
f0121749:	ff 75 0c             	pushl  0xc(%ebp)
f012174c:	6a 78                	push   $0x78
f012174e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121751:	ff d0                	call   *%eax
f0121753:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0121756:	8b 45 14             	mov    0x14(%ebp),%eax
f0121759:	83 c0 04             	add    $0x4,%eax
f012175c:	89 45 14             	mov    %eax,0x14(%ebp)
f012175f:	8b 45 14             	mov    0x14(%ebp),%eax
f0121762:	83 e8 04             	sub    $0x4,%eax
f0121765:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0121767:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012176a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0121771:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0121778:	eb 1f                	jmp    f0121799 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012177a:	83 ec 08             	sub    $0x8,%esp
f012177d:	ff 75 e8             	pushl  -0x18(%ebp)
f0121780:	8d 45 14             	lea    0x14(%ebp),%eax
f0121783:	50                   	push   %eax
f0121784:	e8 e7 fb ff ff       	call   f0121370 <getuint>
f0121789:	83 c4 10             	add    $0x10,%esp
f012178c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012178f:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0121792:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0121799:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012179d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01217a0:	83 ec 04             	sub    $0x4,%esp
f01217a3:	52                   	push   %edx
f01217a4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01217a7:	50                   	push   %eax
f01217a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01217ab:	ff 75 f0             	pushl  -0x10(%ebp)
f01217ae:	ff 75 0c             	pushl  0xc(%ebp)
f01217b1:	ff 75 08             	pushl  0x8(%ebp)
f01217b4:	e8 00 fb ff ff       	call   f01212b9 <printnum>
f01217b9:	83 c4 20             	add    $0x20,%esp
			break;
f01217bc:	eb 34                	jmp    f01217f2 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01217be:	83 ec 08             	sub    $0x8,%esp
f01217c1:	ff 75 0c             	pushl  0xc(%ebp)
f01217c4:	53                   	push   %ebx
f01217c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01217c8:	ff d0                	call   *%eax
f01217ca:	83 c4 10             	add    $0x10,%esp
			break;
f01217cd:	eb 23                	jmp    f01217f2 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01217cf:	83 ec 08             	sub    $0x8,%esp
f01217d2:	ff 75 0c             	pushl  0xc(%ebp)
f01217d5:	6a 25                	push   $0x25
f01217d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01217da:	ff d0                	call   *%eax
f01217dc:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01217df:	ff 4d 10             	decl   0x10(%ebp)
f01217e2:	eb 03                	jmp    f01217e7 <vprintfmt+0x3b1>
f01217e4:	ff 4d 10             	decl   0x10(%ebp)
f01217e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01217ea:	48                   	dec    %eax
f01217eb:	8a 00                	mov    (%eax),%al
f01217ed:	3c 25                	cmp    $0x25,%al
f01217ef:	75 f3                	jne    f01217e4 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01217f1:	90                   	nop
		}
	}
f01217f2:	e9 47 fc ff ff       	jmp    f012143e <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01217f7:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01217f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01217fb:	5b                   	pop    %ebx
f01217fc:	5e                   	pop    %esi
f01217fd:	5d                   	pop    %ebp
f01217fe:	c3                   	ret    

f01217ff <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01217ff:	55                   	push   %ebp
f0121800:	89 e5                	mov    %esp,%ebp
f0121802:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0121805:	8d 45 10             	lea    0x10(%ebp),%eax
f0121808:	83 c0 04             	add    $0x4,%eax
f012180b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012180e:	8b 45 10             	mov    0x10(%ebp),%eax
f0121811:	ff 75 f4             	pushl  -0xc(%ebp)
f0121814:	50                   	push   %eax
f0121815:	ff 75 0c             	pushl  0xc(%ebp)
f0121818:	ff 75 08             	pushl  0x8(%ebp)
f012181b:	e8 16 fc ff ff       	call   f0121436 <vprintfmt>
f0121820:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0121823:	90                   	nop
f0121824:	c9                   	leave  
f0121825:	c3                   	ret    

f0121826 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0121826:	55                   	push   %ebp
f0121827:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0121829:	8b 45 0c             	mov    0xc(%ebp),%eax
f012182c:	8b 40 08             	mov    0x8(%eax),%eax
f012182f:	8d 50 01             	lea    0x1(%eax),%edx
f0121832:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121835:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0121838:	8b 45 0c             	mov    0xc(%ebp),%eax
f012183b:	8b 10                	mov    (%eax),%edx
f012183d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121840:	8b 40 04             	mov    0x4(%eax),%eax
f0121843:	39 c2                	cmp    %eax,%edx
f0121845:	73 12                	jae    f0121859 <sprintputch+0x33>
		*b->buf++ = ch;
f0121847:	8b 45 0c             	mov    0xc(%ebp),%eax
f012184a:	8b 00                	mov    (%eax),%eax
f012184c:	8d 48 01             	lea    0x1(%eax),%ecx
f012184f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0121852:	89 0a                	mov    %ecx,(%edx)
f0121854:	8b 55 08             	mov    0x8(%ebp),%edx
f0121857:	88 10                	mov    %dl,(%eax)
}
f0121859:	90                   	nop
f012185a:	5d                   	pop    %ebp
f012185b:	c3                   	ret    

f012185c <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012185c:	55                   	push   %ebp
f012185d:	89 e5                	mov    %esp,%ebp
f012185f:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0121862:	8b 45 08             	mov    0x8(%ebp),%eax
f0121865:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0121868:	8b 45 0c             	mov    0xc(%ebp),%eax
f012186b:	8d 50 ff             	lea    -0x1(%eax),%edx
f012186e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121871:	01 d0                	add    %edx,%eax
f0121873:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121876:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012187d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0121881:	74 06                	je     f0121889 <vsnprintf+0x2d>
f0121883:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121887:	7f 07                	jg     f0121890 <vsnprintf+0x34>
		return -E_INVAL;
f0121889:	b8 03 00 00 00       	mov    $0x3,%eax
f012188e:	eb 20                	jmp    f01218b0 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0121890:	ff 75 14             	pushl  0x14(%ebp)
f0121893:	ff 75 10             	pushl  0x10(%ebp)
f0121896:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0121899:	50                   	push   %eax
f012189a:	68 26 18 12 f0       	push   $0xf0121826
f012189f:	e8 92 fb ff ff       	call   f0121436 <vprintfmt>
f01218a4:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01218a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01218aa:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01218ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01218b0:	c9                   	leave  
f01218b1:	c3                   	ret    

f01218b2 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01218b2:	55                   	push   %ebp
f01218b3:	89 e5                	mov    %esp,%ebp
f01218b5:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01218b8:	8d 45 10             	lea    0x10(%ebp),%eax
f01218bb:	83 c0 04             	add    $0x4,%eax
f01218be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01218c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01218c4:	ff 75 f4             	pushl  -0xc(%ebp)
f01218c7:	50                   	push   %eax
f01218c8:	ff 75 0c             	pushl  0xc(%ebp)
f01218cb:	ff 75 08             	pushl  0x8(%ebp)
f01218ce:	e8 89 ff ff ff       	call   f012185c <vsnprintf>
f01218d3:	83 c4 10             	add    $0x10,%esp
f01218d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01218d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01218dc:	c9                   	leave  
f01218dd:	c3                   	ret    

f01218de <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01218de:	55                   	push   %ebp
f01218df:	89 e5                	mov    %esp,%ebp
f01218e1:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01218e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01218e8:	74 13                	je     f01218fd <readline+0x1f>
		cprintf("%s", prompt);
f01218ea:	83 ec 08             	sub    $0x8,%esp
f01218ed:	ff 75 08             	pushl  0x8(%ebp)
f01218f0:	68 f0 b8 12 f0       	push   $0xf012b8f0
f01218f5:	e8 a1 f5 fd ff       	call   f0100e9b <cprintf>
f01218fa:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01218fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0121904:	83 ec 0c             	sub    $0xc,%esp
f0121907:	6a 00                	push   $0x0
f0121909:	e8 36 f5 fd ff       	call   f0100e44 <iscons>
f012190e:	83 c4 10             	add    $0x10,%esp
f0121911:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0121914:	e8 12 f5 fd ff       	call   f0100e2b <getchar>
f0121919:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012191c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121920:	79 22                	jns    f0121944 <readline+0x66>
			if (c != -E_EOF)
f0121922:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0121926:	0f 84 ad 00 00 00    	je     f01219d9 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012192c:	83 ec 08             	sub    $0x8,%esp
f012192f:	ff 75 ec             	pushl  -0x14(%ebp)
f0121932:	68 f3 b8 12 f0       	push   $0xf012b8f3
f0121937:	e8 5f f5 fd ff       	call   f0100e9b <cprintf>
f012193c:	83 c4 10             	add    $0x10,%esp
			return;
f012193f:	e9 95 00 00 00       	jmp    f01219d9 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0121944:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0121948:	7e 34                	jle    f012197e <readline+0xa0>
f012194a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0121951:	7f 2b                	jg     f012197e <readline+0xa0>
			if (echoing)
f0121953:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121957:	74 0e                	je     f0121967 <readline+0x89>
				cputchar(c);
f0121959:	83 ec 0c             	sub    $0xc,%esp
f012195c:	ff 75 ec             	pushl  -0x14(%ebp)
f012195f:	e8 b0 f4 fd ff       	call   f0100e14 <cputchar>
f0121964:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0121967:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012196a:	8d 50 01             	lea    0x1(%eax),%edx
f012196d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0121970:	89 c2                	mov    %eax,%edx
f0121972:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121975:	01 d0                	add    %edx,%eax
f0121977:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012197a:	88 10                	mov    %dl,(%eax)
f012197c:	eb 56                	jmp    f01219d4 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012197e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0121982:	75 1f                	jne    f01219a3 <readline+0xc5>
f0121984:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0121988:	7e 19                	jle    f01219a3 <readline+0xc5>
			if (echoing)
f012198a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012198e:	74 0e                	je     f012199e <readline+0xc0>
				cputchar(c);
f0121990:	83 ec 0c             	sub    $0xc,%esp
f0121993:	ff 75 ec             	pushl  -0x14(%ebp)
f0121996:	e8 79 f4 fd ff       	call   f0100e14 <cputchar>
f012199b:	83 c4 10             	add    $0x10,%esp

			i--;
f012199e:	ff 4d f4             	decl   -0xc(%ebp)
f01219a1:	eb 31                	jmp    f01219d4 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01219a3:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01219a7:	74 0a                	je     f01219b3 <readline+0xd5>
f01219a9:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01219ad:	0f 85 61 ff ff ff    	jne    f0121914 <readline+0x36>
			if (echoing)
f01219b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01219b7:	74 0e                	je     f01219c7 <readline+0xe9>
				cputchar(c);
f01219b9:	83 ec 0c             	sub    $0xc,%esp
f01219bc:	ff 75 ec             	pushl  -0x14(%ebp)
f01219bf:	e8 50 f4 fd ff       	call   f0100e14 <cputchar>
f01219c4:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01219c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01219ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01219cd:	01 d0                	add    %edx,%eax
f01219cf:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01219d2:	eb 06                	jmp    f01219da <readline+0xfc>
		}
	}
f01219d4:	e9 3b ff ff ff       	jmp    f0121914 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01219d9:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01219da:	c9                   	leave  
f01219db:	c3                   	ret    

f01219dc <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01219dc:	55                   	push   %ebp
f01219dd:	89 e5                	mov    %esp,%ebp
f01219df:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01219e2:	e8 50 ba fe ff       	call   f010d437 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01219e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01219eb:	74 13                	je     f0121a00 <atomic_readline+0x24>
		cprintf("%s", prompt);
f01219ed:	83 ec 08             	sub    $0x8,%esp
f01219f0:	ff 75 08             	pushl  0x8(%ebp)
f01219f3:	68 f0 b8 12 f0       	push   $0xf012b8f0
f01219f8:	e8 9e f4 fd ff       	call   f0100e9b <cprintf>
f01219fd:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0121a00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0121a07:	83 ec 0c             	sub    $0xc,%esp
f0121a0a:	6a 00                	push   $0x0
f0121a0c:	e8 33 f4 fd ff       	call   f0100e44 <iscons>
f0121a11:	83 c4 10             	add    $0x10,%esp
f0121a14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0121a17:	e8 0f f4 fd ff       	call   f0100e2b <getchar>
f0121a1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0121a1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121a23:	79 23                	jns    f0121a48 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0121a25:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0121a29:	74 13                	je     f0121a3e <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0121a2b:	83 ec 08             	sub    $0x8,%esp
f0121a2e:	ff 75 ec             	pushl  -0x14(%ebp)
f0121a31:	68 f3 b8 12 f0       	push   $0xf012b8f3
f0121a36:	e8 60 f4 fd ff       	call   f0100e9b <cprintf>
f0121a3b:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0121a3e:	e8 0e ba fe ff       	call   f010d451 <sys_enable_interrupt>
			return;
f0121a43:	e9 9a 00 00 00       	jmp    f0121ae2 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0121a48:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0121a4c:	7e 34                	jle    f0121a82 <atomic_readline+0xa6>
f0121a4e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0121a55:	7f 2b                	jg     f0121a82 <atomic_readline+0xa6>
			if (echoing)
f0121a57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121a5b:	74 0e                	je     f0121a6b <atomic_readline+0x8f>
				cputchar(c);
f0121a5d:	83 ec 0c             	sub    $0xc,%esp
f0121a60:	ff 75 ec             	pushl  -0x14(%ebp)
f0121a63:	e8 ac f3 fd ff       	call   f0100e14 <cputchar>
f0121a68:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0121a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a6e:	8d 50 01             	lea    0x1(%eax),%edx
f0121a71:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0121a74:	89 c2                	mov    %eax,%edx
f0121a76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121a79:	01 d0                	add    %edx,%eax
f0121a7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0121a7e:	88 10                	mov    %dl,(%eax)
f0121a80:	eb 5b                	jmp    f0121add <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0121a82:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0121a86:	75 1f                	jne    f0121aa7 <atomic_readline+0xcb>
f0121a88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0121a8c:	7e 19                	jle    f0121aa7 <atomic_readline+0xcb>
			if (echoing)
f0121a8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121a92:	74 0e                	je     f0121aa2 <atomic_readline+0xc6>
				cputchar(c);
f0121a94:	83 ec 0c             	sub    $0xc,%esp
f0121a97:	ff 75 ec             	pushl  -0x14(%ebp)
f0121a9a:	e8 75 f3 fd ff       	call   f0100e14 <cputchar>
f0121a9f:	83 c4 10             	add    $0x10,%esp
			i--;
f0121aa2:	ff 4d f4             	decl   -0xc(%ebp)
f0121aa5:	eb 36                	jmp    f0121add <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0121aa7:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0121aab:	74 0a                	je     f0121ab7 <atomic_readline+0xdb>
f0121aad:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0121ab1:	0f 85 60 ff ff ff    	jne    f0121a17 <atomic_readline+0x3b>
			if (echoing)
f0121ab7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121abb:	74 0e                	je     f0121acb <atomic_readline+0xef>
				cputchar(c);
f0121abd:	83 ec 0c             	sub    $0xc,%esp
f0121ac0:	ff 75 ec             	pushl  -0x14(%ebp)
f0121ac3:	e8 4c f3 fd ff       	call   f0100e14 <cputchar>
f0121ac8:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0121acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ace:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121ad1:	01 d0                	add    %edx,%eax
f0121ad3:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0121ad6:	e8 76 b9 fe ff       	call   f010d451 <sys_enable_interrupt>
			return;
f0121adb:	eb 05                	jmp    f0121ae2 <atomic_readline+0x106>
		}
	}
f0121add:	e9 35 ff ff ff       	jmp    f0121a17 <atomic_readline+0x3b>
}
f0121ae2:	c9                   	leave  
f0121ae3:	c3                   	ret    

f0121ae4 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f0121ae4:	55                   	push   %ebp
f0121ae5:	89 e5                	mov    %esp,%ebp
f0121ae7:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0121aea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0121af1:	eb 06                	jmp    f0121af9 <strlen+0x15>
		n++;
f0121af3:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0121af6:	ff 45 08             	incl   0x8(%ebp)
f0121af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0121afc:	8a 00                	mov    (%eax),%al
f0121afe:	84 c0                	test   %al,%al
f0121b00:	75 f1                	jne    f0121af3 <strlen+0xf>
		n++;
	return n;
f0121b02:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0121b05:	c9                   	leave  
f0121b06:	c3                   	ret    

f0121b07 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0121b07:	55                   	push   %ebp
f0121b08:	89 e5                	mov    %esp,%ebp
f0121b0a:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0121b0d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0121b14:	eb 09                	jmp    f0121b1f <strnlen+0x18>
		n++;
f0121b16:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0121b19:	ff 45 08             	incl   0x8(%ebp)
f0121b1c:	ff 4d 0c             	decl   0xc(%ebp)
f0121b1f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121b23:	74 09                	je     f0121b2e <strnlen+0x27>
f0121b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b28:	8a 00                	mov    (%eax),%al
f0121b2a:	84 c0                	test   %al,%al
f0121b2c:	75 e8                	jne    f0121b16 <strnlen+0xf>
		n++;
	return n;
f0121b2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0121b31:	c9                   	leave  
f0121b32:	c3                   	ret    

f0121b33 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0121b33:	55                   	push   %ebp
f0121b34:	89 e5                	mov    %esp,%ebp
f0121b36:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0121b39:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0121b3f:	90                   	nop
f0121b40:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b43:	8d 50 01             	lea    0x1(%eax),%edx
f0121b46:	89 55 08             	mov    %edx,0x8(%ebp)
f0121b49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0121b4c:	8d 4a 01             	lea    0x1(%edx),%ecx
f0121b4f:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0121b52:	8a 12                	mov    (%edx),%dl
f0121b54:	88 10                	mov    %dl,(%eax)
f0121b56:	8a 00                	mov    (%eax),%al
f0121b58:	84 c0                	test   %al,%al
f0121b5a:	75 e4                	jne    f0121b40 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0121b5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0121b5f:	c9                   	leave  
f0121b60:	c3                   	ret    

f0121b61 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0121b61:	55                   	push   %ebp
f0121b62:	89 e5                	mov    %esp,%ebp
f0121b64:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0121b67:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0121b6d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0121b74:	eb 1f                	jmp    f0121b95 <strncpy+0x34>
		*dst++ = *src;
f0121b76:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b79:	8d 50 01             	lea    0x1(%eax),%edx
f0121b7c:	89 55 08             	mov    %edx,0x8(%ebp)
f0121b7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0121b82:	8a 12                	mov    (%edx),%dl
f0121b84:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0121b86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121b89:	8a 00                	mov    (%eax),%al
f0121b8b:	84 c0                	test   %al,%al
f0121b8d:	74 03                	je     f0121b92 <strncpy+0x31>
			src++;
f0121b8f:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0121b92:	ff 45 fc             	incl   -0x4(%ebp)
f0121b95:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121b98:	3b 45 10             	cmp    0x10(%ebp),%eax
f0121b9b:	72 d9                	jb     f0121b76 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0121b9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0121ba0:	c9                   	leave  
f0121ba1:	c3                   	ret    

f0121ba2 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0121ba2:	55                   	push   %ebp
f0121ba3:	89 e5                	mov    %esp,%ebp
f0121ba5:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0121ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bab:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0121bae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121bb2:	74 30                	je     f0121be4 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0121bb4:	eb 16                	jmp    f0121bcc <strlcpy+0x2a>
			*dst++ = *src++;
f0121bb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bb9:	8d 50 01             	lea    0x1(%eax),%edx
f0121bbc:	89 55 08             	mov    %edx,0x8(%ebp)
f0121bbf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0121bc2:	8d 4a 01             	lea    0x1(%edx),%ecx
f0121bc5:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0121bc8:	8a 12                	mov    (%edx),%dl
f0121bca:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0121bcc:	ff 4d 10             	decl   0x10(%ebp)
f0121bcf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121bd3:	74 09                	je     f0121bde <strlcpy+0x3c>
f0121bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121bd8:	8a 00                	mov    (%eax),%al
f0121bda:	84 c0                	test   %al,%al
f0121bdc:	75 d8                	jne    f0121bb6 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0121bde:	8b 45 08             	mov    0x8(%ebp),%eax
f0121be1:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0121be4:	8b 55 08             	mov    0x8(%ebp),%edx
f0121be7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121bea:	29 c2                	sub    %eax,%edx
f0121bec:	89 d0                	mov    %edx,%eax
}
f0121bee:	c9                   	leave  
f0121bef:	c3                   	ret    

f0121bf0 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0121bf0:	55                   	push   %ebp
f0121bf1:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0121bf3:	eb 06                	jmp    f0121bfb <strcmp+0xb>
		p++, q++;
f0121bf5:	ff 45 08             	incl   0x8(%ebp)
f0121bf8:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0121bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bfe:	8a 00                	mov    (%eax),%al
f0121c00:	84 c0                	test   %al,%al
f0121c02:	74 0e                	je     f0121c12 <strcmp+0x22>
f0121c04:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c07:	8a 10                	mov    (%eax),%dl
f0121c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c0c:	8a 00                	mov    (%eax),%al
f0121c0e:	38 c2                	cmp    %al,%dl
f0121c10:	74 e3                	je     f0121bf5 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0121c12:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c15:	8a 00                	mov    (%eax),%al
f0121c17:	0f b6 d0             	movzbl %al,%edx
f0121c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c1d:	8a 00                	mov    (%eax),%al
f0121c1f:	0f b6 c0             	movzbl %al,%eax
f0121c22:	29 c2                	sub    %eax,%edx
f0121c24:	89 d0                	mov    %edx,%eax
}
f0121c26:	5d                   	pop    %ebp
f0121c27:	c3                   	ret    

f0121c28 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0121c28:	55                   	push   %ebp
f0121c29:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0121c2b:	eb 09                	jmp    f0121c36 <strncmp+0xe>
		n--, p++, q++;
f0121c2d:	ff 4d 10             	decl   0x10(%ebp)
f0121c30:	ff 45 08             	incl   0x8(%ebp)
f0121c33:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0121c36:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121c3a:	74 17                	je     f0121c53 <strncmp+0x2b>
f0121c3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c3f:	8a 00                	mov    (%eax),%al
f0121c41:	84 c0                	test   %al,%al
f0121c43:	74 0e                	je     f0121c53 <strncmp+0x2b>
f0121c45:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c48:	8a 10                	mov    (%eax),%dl
f0121c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c4d:	8a 00                	mov    (%eax),%al
f0121c4f:	38 c2                	cmp    %al,%dl
f0121c51:	74 da                	je     f0121c2d <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0121c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121c57:	75 07                	jne    f0121c60 <strncmp+0x38>
		return 0;
f0121c59:	b8 00 00 00 00       	mov    $0x0,%eax
f0121c5e:	eb 14                	jmp    f0121c74 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0121c60:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c63:	8a 00                	mov    (%eax),%al
f0121c65:	0f b6 d0             	movzbl %al,%edx
f0121c68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c6b:	8a 00                	mov    (%eax),%al
f0121c6d:	0f b6 c0             	movzbl %al,%eax
f0121c70:	29 c2                	sub    %eax,%edx
f0121c72:	89 d0                	mov    %edx,%eax
}
f0121c74:	5d                   	pop    %ebp
f0121c75:	c3                   	ret    

f0121c76 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0121c76:	55                   	push   %ebp
f0121c77:	89 e5                	mov    %esp,%ebp
f0121c79:	83 ec 04             	sub    $0x4,%esp
f0121c7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c7f:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0121c82:	eb 12                	jmp    f0121c96 <strchr+0x20>
		if (*s == c)
f0121c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c87:	8a 00                	mov    (%eax),%al
f0121c89:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0121c8c:	75 05                	jne    f0121c93 <strchr+0x1d>
			return (char *) s;
f0121c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c91:	eb 11                	jmp    f0121ca4 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0121c93:	ff 45 08             	incl   0x8(%ebp)
f0121c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c99:	8a 00                	mov    (%eax),%al
f0121c9b:	84 c0                	test   %al,%al
f0121c9d:	75 e5                	jne    f0121c84 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0121c9f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0121ca4:	c9                   	leave  
f0121ca5:	c3                   	ret    

f0121ca6 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0121ca6:	55                   	push   %ebp
f0121ca7:	89 e5                	mov    %esp,%ebp
f0121ca9:	83 ec 04             	sub    $0x4,%esp
f0121cac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121caf:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0121cb2:	eb 0d                	jmp    f0121cc1 <strfind+0x1b>
		if (*s == c)
f0121cb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cb7:	8a 00                	mov    (%eax),%al
f0121cb9:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0121cbc:	74 0e                	je     f0121ccc <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0121cbe:	ff 45 08             	incl   0x8(%ebp)
f0121cc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cc4:	8a 00                	mov    (%eax),%al
f0121cc6:	84 c0                	test   %al,%al
f0121cc8:	75 ea                	jne    f0121cb4 <strfind+0xe>
f0121cca:	eb 01                	jmp    f0121ccd <strfind+0x27>
		if (*s == c)
			break;
f0121ccc:	90                   	nop
	return (char *) s;
f0121ccd:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0121cd0:	c9                   	leave  
f0121cd1:	c3                   	ret    

f0121cd2 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0121cd2:	55                   	push   %ebp
f0121cd3:	89 e5                	mov    %esp,%ebp
f0121cd5:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0121cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cdb:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0121cde:	8b 45 10             	mov    0x10(%ebp),%eax
f0121ce1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0121ce4:	eb 0e                	jmp    f0121cf4 <memset+0x22>
		*p++ = c;
f0121ce6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121ce9:	8d 50 01             	lea    0x1(%eax),%edx
f0121cec:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0121cef:	8b 55 0c             	mov    0xc(%ebp),%edx
f0121cf2:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0121cf4:	ff 4d f8             	decl   -0x8(%ebp)
f0121cf7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0121cfb:	79 e9                	jns    f0121ce6 <memset+0x14>
		*p++ = c;

	return v;
f0121cfd:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0121d00:	c9                   	leave  
f0121d01:	c3                   	ret    

f0121d02 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0121d02:	55                   	push   %ebp
f0121d03:	89 e5                	mov    %esp,%ebp
f0121d05:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0121d08:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121d0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0121d0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d11:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0121d14:	eb 16                	jmp    f0121d2c <memcpy+0x2a>
		*d++ = *s++;
f0121d16:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121d19:	8d 50 01             	lea    0x1(%eax),%edx
f0121d1c:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0121d1f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0121d22:	8d 4a 01             	lea    0x1(%edx),%ecx
f0121d25:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0121d28:	8a 12                	mov    (%edx),%dl
f0121d2a:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0121d2c:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d2f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0121d32:	89 55 10             	mov    %edx,0x10(%ebp)
f0121d35:	85 c0                	test   %eax,%eax
f0121d37:	75 dd                	jne    f0121d16 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0121d39:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0121d3c:	c9                   	leave  
f0121d3d:	c3                   	ret    

f0121d3e <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0121d3e:	55                   	push   %ebp
f0121d3f:	89 e5                	mov    %esp,%ebp
f0121d41:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0121d44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121d47:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0121d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d4d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0121d50:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121d53:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0121d56:	73 50                	jae    f0121da8 <memmove+0x6a>
f0121d58:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0121d5b:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d5e:	01 d0                	add    %edx,%eax
f0121d60:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0121d63:	76 43                	jbe    f0121da8 <memmove+0x6a>
		s += n;
f0121d65:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d68:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0121d6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d6e:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0121d71:	eb 10                	jmp    f0121d83 <memmove+0x45>
			*--d = *--s;
f0121d73:	ff 4d f8             	decl   -0x8(%ebp)
f0121d76:	ff 4d fc             	decl   -0x4(%ebp)
f0121d79:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121d7c:	8a 10                	mov    (%eax),%dl
f0121d7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121d81:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0121d83:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d86:	8d 50 ff             	lea    -0x1(%eax),%edx
f0121d89:	89 55 10             	mov    %edx,0x10(%ebp)
f0121d8c:	85 c0                	test   %eax,%eax
f0121d8e:	75 e3                	jne    f0121d73 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0121d90:	eb 23                	jmp    f0121db5 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0121d92:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121d95:	8d 50 01             	lea    0x1(%eax),%edx
f0121d98:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0121d9b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0121d9e:	8d 4a 01             	lea    0x1(%edx),%ecx
f0121da1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0121da4:	8a 12                	mov    (%edx),%dl
f0121da6:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0121da8:	8b 45 10             	mov    0x10(%ebp),%eax
f0121dab:	8d 50 ff             	lea    -0x1(%eax),%edx
f0121dae:	89 55 10             	mov    %edx,0x10(%ebp)
f0121db1:	85 c0                	test   %eax,%eax
f0121db3:	75 dd                	jne    f0121d92 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0121db5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0121db8:	c9                   	leave  
f0121db9:	c3                   	ret    

f0121dba <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0121dba:	55                   	push   %ebp
f0121dbb:	89 e5                	mov    %esp,%ebp
f0121dbd:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0121dc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dc3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0121dc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121dc9:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0121dcc:	eb 2a                	jmp    f0121df8 <memcmp+0x3e>
		if (*s1 != *s2)
f0121dce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121dd1:	8a 10                	mov    (%eax),%dl
f0121dd3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121dd6:	8a 00                	mov    (%eax),%al
f0121dd8:	38 c2                	cmp    %al,%dl
f0121dda:	74 16                	je     f0121df2 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0121ddc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121ddf:	8a 00                	mov    (%eax),%al
f0121de1:	0f b6 d0             	movzbl %al,%edx
f0121de4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121de7:	8a 00                	mov    (%eax),%al
f0121de9:	0f b6 c0             	movzbl %al,%eax
f0121dec:	29 c2                	sub    %eax,%edx
f0121dee:	89 d0                	mov    %edx,%eax
f0121df0:	eb 18                	jmp    f0121e0a <memcmp+0x50>
		s1++, s2++;
f0121df2:	ff 45 fc             	incl   -0x4(%ebp)
f0121df5:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0121df8:	8b 45 10             	mov    0x10(%ebp),%eax
f0121dfb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0121dfe:	89 55 10             	mov    %edx,0x10(%ebp)
f0121e01:	85 c0                	test   %eax,%eax
f0121e03:	75 c9                	jne    f0121dce <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0121e05:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0121e0a:	c9                   	leave  
f0121e0b:	c3                   	ret    

f0121e0c <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0121e0c:	55                   	push   %ebp
f0121e0d:	89 e5                	mov    %esp,%ebp
f0121e0f:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0121e12:	8b 55 08             	mov    0x8(%ebp),%edx
f0121e15:	8b 45 10             	mov    0x10(%ebp),%eax
f0121e18:	01 d0                	add    %edx,%eax
f0121e1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0121e1d:	eb 15                	jmp    f0121e34 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0121e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e22:	8a 00                	mov    (%eax),%al
f0121e24:	0f b6 d0             	movzbl %al,%edx
f0121e27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121e2a:	0f b6 c0             	movzbl %al,%eax
f0121e2d:	39 c2                	cmp    %eax,%edx
f0121e2f:	74 0d                	je     f0121e3e <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0121e31:	ff 45 08             	incl   0x8(%ebp)
f0121e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e37:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0121e3a:	72 e3                	jb     f0121e1f <memfind+0x13>
f0121e3c:	eb 01                	jmp    f0121e3f <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0121e3e:	90                   	nop
	return (void *) s;
f0121e3f:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0121e42:	c9                   	leave  
f0121e43:	c3                   	ret    

f0121e44 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0121e44:	55                   	push   %ebp
f0121e45:	89 e5                	mov    %esp,%ebp
f0121e47:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0121e4a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0121e51:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0121e58:	eb 03                	jmp    f0121e5d <strtol+0x19>
		s++;
f0121e5a:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0121e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e60:	8a 00                	mov    (%eax),%al
f0121e62:	3c 20                	cmp    $0x20,%al
f0121e64:	74 f4                	je     f0121e5a <strtol+0x16>
f0121e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e69:	8a 00                	mov    (%eax),%al
f0121e6b:	3c 09                	cmp    $0x9,%al
f0121e6d:	74 eb                	je     f0121e5a <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0121e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e72:	8a 00                	mov    (%eax),%al
f0121e74:	3c 2b                	cmp    $0x2b,%al
f0121e76:	75 05                	jne    f0121e7d <strtol+0x39>
		s++;
f0121e78:	ff 45 08             	incl   0x8(%ebp)
f0121e7b:	eb 13                	jmp    f0121e90 <strtol+0x4c>
	else if (*s == '-')
f0121e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e80:	8a 00                	mov    (%eax),%al
f0121e82:	3c 2d                	cmp    $0x2d,%al
f0121e84:	75 0a                	jne    f0121e90 <strtol+0x4c>
		s++, neg = 1;
f0121e86:	ff 45 08             	incl   0x8(%ebp)
f0121e89:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0121e90:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121e94:	74 06                	je     f0121e9c <strtol+0x58>
f0121e96:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0121e9a:	75 20                	jne    f0121ebc <strtol+0x78>
f0121e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e9f:	8a 00                	mov    (%eax),%al
f0121ea1:	3c 30                	cmp    $0x30,%al
f0121ea3:	75 17                	jne    f0121ebc <strtol+0x78>
f0121ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ea8:	40                   	inc    %eax
f0121ea9:	8a 00                	mov    (%eax),%al
f0121eab:	3c 78                	cmp    $0x78,%al
f0121ead:	75 0d                	jne    f0121ebc <strtol+0x78>
		s += 2, base = 16;
f0121eaf:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0121eb3:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0121eba:	eb 28                	jmp    f0121ee4 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0121ebc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121ec0:	75 15                	jne    f0121ed7 <strtol+0x93>
f0121ec2:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ec5:	8a 00                	mov    (%eax),%al
f0121ec7:	3c 30                	cmp    $0x30,%al
f0121ec9:	75 0c                	jne    f0121ed7 <strtol+0x93>
		s++, base = 8;
f0121ecb:	ff 45 08             	incl   0x8(%ebp)
f0121ece:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0121ed5:	eb 0d                	jmp    f0121ee4 <strtol+0xa0>
	else if (base == 0)
f0121ed7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0121edb:	75 07                	jne    f0121ee4 <strtol+0xa0>
		base = 10;
f0121edd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0121ee4:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ee7:	8a 00                	mov    (%eax),%al
f0121ee9:	3c 2f                	cmp    $0x2f,%al
f0121eeb:	7e 19                	jle    f0121f06 <strtol+0xc2>
f0121eed:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ef0:	8a 00                	mov    (%eax),%al
f0121ef2:	3c 39                	cmp    $0x39,%al
f0121ef4:	7f 10                	jg     f0121f06 <strtol+0xc2>
			dig = *s - '0';
f0121ef6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ef9:	8a 00                	mov    (%eax),%al
f0121efb:	0f be c0             	movsbl %al,%eax
f0121efe:	83 e8 30             	sub    $0x30,%eax
f0121f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121f04:	eb 42                	jmp    f0121f48 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0121f06:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f09:	8a 00                	mov    (%eax),%al
f0121f0b:	3c 60                	cmp    $0x60,%al
f0121f0d:	7e 19                	jle    f0121f28 <strtol+0xe4>
f0121f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f12:	8a 00                	mov    (%eax),%al
f0121f14:	3c 7a                	cmp    $0x7a,%al
f0121f16:	7f 10                	jg     f0121f28 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0121f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f1b:	8a 00                	mov    (%eax),%al
f0121f1d:	0f be c0             	movsbl %al,%eax
f0121f20:	83 e8 57             	sub    $0x57,%eax
f0121f23:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121f26:	eb 20                	jmp    f0121f48 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0121f28:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f2b:	8a 00                	mov    (%eax),%al
f0121f2d:	3c 40                	cmp    $0x40,%al
f0121f2f:	7e 39                	jle    f0121f6a <strtol+0x126>
f0121f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f34:	8a 00                	mov    (%eax),%al
f0121f36:	3c 5a                	cmp    $0x5a,%al
f0121f38:	7f 30                	jg     f0121f6a <strtol+0x126>
			dig = *s - 'A' + 10;
f0121f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f3d:	8a 00                	mov    (%eax),%al
f0121f3f:	0f be c0             	movsbl %al,%eax
f0121f42:	83 e8 37             	sub    $0x37,%eax
f0121f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0121f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121f4b:	3b 45 10             	cmp    0x10(%ebp),%eax
f0121f4e:	7d 19                	jge    f0121f69 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0121f50:	ff 45 08             	incl   0x8(%ebp)
f0121f53:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121f56:	0f af 45 10          	imul   0x10(%ebp),%eax
f0121f5a:	89 c2                	mov    %eax,%edx
f0121f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121f5f:	01 d0                	add    %edx,%eax
f0121f61:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0121f64:	e9 7b ff ff ff       	jmp    f0121ee4 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0121f69:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0121f6a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121f6e:	74 08                	je     f0121f78 <strtol+0x134>
		*endptr = (char *) s;
f0121f70:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121f73:	8b 55 08             	mov    0x8(%ebp),%edx
f0121f76:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0121f78:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0121f7c:	74 07                	je     f0121f85 <strtol+0x141>
f0121f7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121f81:	f7 d8                	neg    %eax
f0121f83:	eb 03                	jmp    f0121f88 <strtol+0x144>
f0121f85:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0121f88:	c9                   	leave  
f0121f89:	c3                   	ret    

f0121f8a <ltostr>:

void
ltostr(long value, char *str)
{
f0121f8a:	55                   	push   %ebp
f0121f8b:	89 e5                	mov    %esp,%ebp
f0121f8d:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0121f90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0121f97:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0121f9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0121fa2:	79 13                	jns    f0121fb7 <ltostr+0x2d>
	{
		neg = 1;
f0121fa4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0121fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121fae:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0121fb1:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0121fb4:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0121fb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0121fba:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0121fbf:	99                   	cltd   
f0121fc0:	f7 f9                	idiv   %ecx
f0121fc2:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0121fc5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0121fc8:	8d 50 01             	lea    0x1(%eax),%edx
f0121fcb:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0121fce:	89 c2                	mov    %eax,%edx
f0121fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121fd3:	01 d0                	add    %edx,%eax
f0121fd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0121fd8:	83 c2 30             	add    $0x30,%edx
f0121fdb:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0121fdd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0121fe0:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0121fe5:	f7 e9                	imul   %ecx
f0121fe7:	c1 fa 02             	sar    $0x2,%edx
f0121fea:	89 c8                	mov    %ecx,%eax
f0121fec:	c1 f8 1f             	sar    $0x1f,%eax
f0121fef:	29 c2                	sub    %eax,%edx
f0121ff1:	89 d0                	mov    %edx,%eax
f0121ff3:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0121ff6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0121ff9:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0121ffe:	f7 e9                	imul   %ecx
f0122000:	c1 fa 02             	sar    $0x2,%edx
f0122003:	89 c8                	mov    %ecx,%eax
f0122005:	c1 f8 1f             	sar    $0x1f,%eax
f0122008:	29 c2                	sub    %eax,%edx
f012200a:	89 d0                	mov    %edx,%eax
f012200c:	c1 e0 02             	shl    $0x2,%eax
f012200f:	01 d0                	add    %edx,%eax
f0122011:	01 c0                	add    %eax,%eax
f0122013:	29 c1                	sub    %eax,%ecx
f0122015:	89 ca                	mov    %ecx,%edx
f0122017:	85 d2                	test   %edx,%edx
f0122019:	75 9c                	jne    f0121fb7 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012201b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0122022:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122025:	48                   	dec    %eax
f0122026:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0122029:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012202d:	74 3d                	je     f012206c <ltostr+0xe2>
		start = 1 ;
f012202f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0122036:	eb 34                	jmp    f012206c <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0122038:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012203b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012203e:	01 d0                	add    %edx,%eax
f0122040:	8a 00                	mov    (%eax),%al
f0122042:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0122045:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122048:	8b 45 0c             	mov    0xc(%ebp),%eax
f012204b:	01 c2                	add    %eax,%edx
f012204d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0122050:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122053:	01 c8                	add    %ecx,%eax
f0122055:	8a 00                	mov    (%eax),%al
f0122057:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0122059:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012205c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012205f:	01 c2                	add    %eax,%edx
f0122061:	8a 45 eb             	mov    -0x15(%ebp),%al
f0122064:	88 02                	mov    %al,(%edx)
		start++ ;
f0122066:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0122069:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012206c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012206f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122072:	7c c4                	jl     f0122038 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0122074:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0122077:	8b 45 0c             	mov    0xc(%ebp),%eax
f012207a:	01 d0                	add    %edx,%eax
f012207c:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012207f:	90                   	nop
f0122080:	c9                   	leave  
f0122081:	c3                   	ret    

f0122082 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0122082:	55                   	push   %ebp
f0122083:	89 e5                	mov    %esp,%ebp
f0122085:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0122088:	ff 75 08             	pushl  0x8(%ebp)
f012208b:	e8 54 fa ff ff       	call   f0121ae4 <strlen>
f0122090:	83 c4 04             	add    $0x4,%esp
f0122093:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0122096:	ff 75 0c             	pushl  0xc(%ebp)
f0122099:	e8 46 fa ff ff       	call   f0121ae4 <strlen>
f012209e:	83 c4 04             	add    $0x4,%esp
f01220a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01220a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01220ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01220b2:	eb 17                	jmp    f01220cb <strcconcat+0x49>
		final[s] = str1[s] ;
f01220b4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01220b7:	8b 45 10             	mov    0x10(%ebp),%eax
f01220ba:	01 c2                	add    %eax,%edx
f01220bc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01220bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01220c2:	01 c8                	add    %ecx,%eax
f01220c4:	8a 00                	mov    (%eax),%al
f01220c6:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01220c8:	ff 45 fc             	incl   -0x4(%ebp)
f01220cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01220ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01220d1:	7c e1                	jl     f01220b4 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01220d3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01220da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01220e1:	eb 1f                	jmp    f0122102 <strcconcat+0x80>
		final[s++] = str2[i] ;
f01220e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01220e6:	8d 50 01             	lea    0x1(%eax),%edx
f01220e9:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01220ec:	89 c2                	mov    %eax,%edx
f01220ee:	8b 45 10             	mov    0x10(%ebp),%eax
f01220f1:	01 c2                	add    %eax,%edx
f01220f3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01220f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01220f9:	01 c8                	add    %ecx,%eax
f01220fb:	8a 00                	mov    (%eax),%al
f01220fd:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01220ff:	ff 45 f8             	incl   -0x8(%ebp)
f0122102:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122105:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122108:	7c d9                	jl     f01220e3 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012210a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012210d:	8b 45 10             	mov    0x10(%ebp),%eax
f0122110:	01 d0                	add    %edx,%eax
f0122112:	c6 00 00             	movb   $0x0,(%eax)
}
f0122115:	90                   	nop
f0122116:	c9                   	leave  
f0122117:	c3                   	ret    

f0122118 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0122118:	55                   	push   %ebp
f0122119:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012211b:	8b 45 14             	mov    0x14(%ebp),%eax
f012211e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0122124:	8b 45 14             	mov    0x14(%ebp),%eax
f0122127:	8b 00                	mov    (%eax),%eax
f0122129:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122130:	8b 45 10             	mov    0x10(%ebp),%eax
f0122133:	01 d0                	add    %edx,%eax
f0122135:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012213b:	eb 0c                	jmp    f0122149 <strsplit+0x31>
			*string++ = 0;
f012213d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122140:	8d 50 01             	lea    0x1(%eax),%edx
f0122143:	89 55 08             	mov    %edx,0x8(%ebp)
f0122146:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0122149:	8b 45 08             	mov    0x8(%ebp),%eax
f012214c:	8a 00                	mov    (%eax),%al
f012214e:	84 c0                	test   %al,%al
f0122150:	74 18                	je     f012216a <strsplit+0x52>
f0122152:	8b 45 08             	mov    0x8(%ebp),%eax
f0122155:	8a 00                	mov    (%eax),%al
f0122157:	0f be c0             	movsbl %al,%eax
f012215a:	50                   	push   %eax
f012215b:	ff 75 0c             	pushl  0xc(%ebp)
f012215e:	e8 13 fb ff ff       	call   f0121c76 <strchr>
f0122163:	83 c4 08             	add    $0x8,%esp
f0122166:	85 c0                	test   %eax,%eax
f0122168:	75 d3                	jne    f012213d <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012216a:	8b 45 08             	mov    0x8(%ebp),%eax
f012216d:	8a 00                	mov    (%eax),%al
f012216f:	84 c0                	test   %al,%al
f0122171:	74 5a                	je     f01221cd <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0122173:	8b 45 14             	mov    0x14(%ebp),%eax
f0122176:	8b 00                	mov    (%eax),%eax
f0122178:	83 f8 0f             	cmp    $0xf,%eax
f012217b:	75 07                	jne    f0122184 <strsplit+0x6c>
		{
			return 0;
f012217d:	b8 00 00 00 00       	mov    $0x0,%eax
f0122182:	eb 66                	jmp    f01221ea <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0122184:	8b 45 14             	mov    0x14(%ebp),%eax
f0122187:	8b 00                	mov    (%eax),%eax
f0122189:	8d 48 01             	lea    0x1(%eax),%ecx
f012218c:	8b 55 14             	mov    0x14(%ebp),%edx
f012218f:	89 0a                	mov    %ecx,(%edx)
f0122191:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122198:	8b 45 10             	mov    0x10(%ebp),%eax
f012219b:	01 c2                	add    %eax,%edx
f012219d:	8b 45 08             	mov    0x8(%ebp),%eax
f01221a0:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01221a2:	eb 03                	jmp    f01221a7 <strsplit+0x8f>
			string++;
f01221a4:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01221a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01221aa:	8a 00                	mov    (%eax),%al
f01221ac:	84 c0                	test   %al,%al
f01221ae:	74 8b                	je     f012213b <strsplit+0x23>
f01221b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01221b3:	8a 00                	mov    (%eax),%al
f01221b5:	0f be c0             	movsbl %al,%eax
f01221b8:	50                   	push   %eax
f01221b9:	ff 75 0c             	pushl  0xc(%ebp)
f01221bc:	e8 b5 fa ff ff       	call   f0121c76 <strchr>
f01221c1:	83 c4 08             	add    $0x8,%esp
f01221c4:	85 c0                	test   %eax,%eax
f01221c6:	74 dc                	je     f01221a4 <strsplit+0x8c>
			string++;
	}
f01221c8:	e9 6e ff ff ff       	jmp    f012213b <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01221cd:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01221ce:	8b 45 14             	mov    0x14(%ebp),%eax
f01221d1:	8b 00                	mov    (%eax),%eax
f01221d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01221da:	8b 45 10             	mov    0x10(%ebp),%eax
f01221dd:	01 d0                	add    %edx,%eax
f01221df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01221e5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01221ea:	c9                   	leave  
f01221eb:	c3                   	ret    

f01221ec <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f01221ec:	55                   	push   %ebp
f01221ed:	89 e5                	mov    %esp,%ebp
f01221ef:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	int i;
	for( i=0;i<strlen(src);i++) {
f01221f2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01221f9:	eb 4c                	jmp    f0122247 <str2lower+0x5b>
	    if (src[i] >= 'A' && src[i] <= 'Z') {
f01221fb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01221fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122201:	01 d0                	add    %edx,%eax
f0122203:	8a 00                	mov    (%eax),%al
f0122205:	3c 40                	cmp    $0x40,%al
f0122207:	7e 27                	jle    f0122230 <str2lower+0x44>
f0122209:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012220c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012220f:	01 d0                	add    %edx,%eax
f0122211:	8a 00                	mov    (%eax),%al
f0122213:	3c 5a                	cmp    $0x5a,%al
f0122215:	7f 19                	jg     f0122230 <str2lower+0x44>
	      dst[i] = src[i] + 32;
f0122217:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012221a:	8b 45 08             	mov    0x8(%ebp),%eax
f012221d:	01 d0                	add    %edx,%eax
f012221f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0122222:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122225:	01 ca                	add    %ecx,%edx
f0122227:	8a 12                	mov    (%edx),%dl
f0122229:	83 c2 20             	add    $0x20,%edx
f012222c:	88 10                	mov    %dl,(%eax)
f012222e:	eb 14                	jmp    f0122244 <str2lower+0x58>
	    } else {
	      dst[i] = src[i];
f0122230:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122233:	8b 45 08             	mov    0x8(%ebp),%eax
f0122236:	01 c2                	add    %eax,%edx
f0122238:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012223b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012223e:	01 c8                	add    %ecx,%eax
f0122240:	8a 00                	mov    (%eax),%al
f0122242:	88 02                	mov    %al,(%edx)
{
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	int i;
	for( i=0;i<strlen(src);i++) {
f0122244:	ff 45 fc             	incl   -0x4(%ebp)
f0122247:	ff 75 0c             	pushl  0xc(%ebp)
f012224a:	e8 95 f8 ff ff       	call   f0121ae4 <strlen>
f012224f:	83 c4 04             	add    $0x4,%esp
f0122252:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0122255:	7f a4                	jg     f01221fb <str2lower+0xf>
	      dst[i] = src[i] + 32;
	    } else {
	      dst[i] = src[i];
	    }
	  }
	  dst[i] = '\0';
f0122257:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012225a:	8b 45 08             	mov    0x8(%ebp),%eax
f012225d:	01 d0                	add    %edx,%eax
f012225f:	c6 00 00             	movb   $0x0,(%eax)
	  return dst;
f0122262:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122265:	c9                   	leave  
f0122266:	c3                   	ret    

f0122267 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0122267:	55                   	push   %ebp
f0122268:	89 e5                	mov    %esp,%ebp
f012226a:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012226d:	90                   	nop
f012226e:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122275:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122278:	89 c2                	mov    %eax,%edx
f012227a:	ec                   	in     (%dx),%al
f012227b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012227e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0122281:	0f b6 c0             	movzbl %al,%eax
f0122284:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0122287:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012228a:	25 c0 00 00 00       	and    $0xc0,%eax
f012228f:	83 f8 40             	cmp    $0x40,%eax
f0122292:	75 da                	jne    f012226e <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0122294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122298:	74 11                	je     f01222ab <ide_wait_ready+0x44>
f012229a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012229d:	83 e0 21             	and    $0x21,%eax
f01222a0:	85 c0                	test   %eax,%eax
f01222a2:	74 07                	je     f01222ab <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01222a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01222a9:	eb 05                	jmp    f01222b0 <ide_wait_ready+0x49>
	}
	return 0;
f01222ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01222b0:	c9                   	leave  
f01222b1:	c3                   	ret    

f01222b2 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01222b2:	55                   	push   %ebp
f01222b3:	89 e5                	mov    %esp,%ebp
f01222b5:	57                   	push   %edi
f01222b6:	53                   	push   %ebx
f01222b7:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01222ba:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01222c1:	76 16                	jbe    f01222d9 <ide_read+0x27>
f01222c3:	68 03 b9 12 f0       	push   $0xf012b903
f01222c8:	68 10 b9 12 f0       	push   $0xf012b910
f01222cd:	6a 25                	push   $0x25
f01222cf:	68 25 b9 12 f0       	push   $0xf012b925
f01222d4:	e8 41 df fd ff       	call   f010021a <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f01222d9:	83 ec 0c             	sub    $0xc,%esp
f01222dc:	6a 00                	push   $0x0
f01222de:	e8 84 ff ff ff       	call   f0122267 <ide_wait_ready>
f01222e3:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f01222e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01222e9:	0f b6 c0             	movzbl %al,%eax
f01222ec:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01222f3:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01222f6:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01222f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01222fc:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01222fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0122300:	0f b6 c0             	movzbl %al,%eax
f0122303:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012230a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012230d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122310:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122313:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122314:	8b 45 08             	mov    0x8(%ebp),%eax
f0122317:	c1 e8 08             	shr    $0x8,%eax
f012231a:	0f b6 c0             	movzbl %al,%eax
f012231d:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122324:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122327:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012232a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012232d:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012232e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122331:	c1 e8 10             	shr    $0x10,%eax
f0122334:	0f b6 c0             	movzbl %al,%eax
f0122337:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012233e:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122341:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122344:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122347:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122348:	a1 ec 3f 3f f0       	mov    0xf03f3fec,%eax
f012234d:	83 e0 01             	and    $0x1,%eax
f0122350:	c1 e0 04             	shl    $0x4,%eax
f0122353:	88 c2                	mov    %al,%dl
f0122355:	8b 45 08             	mov    0x8(%ebp),%eax
f0122358:	c1 e8 18             	shr    $0x18,%eax
f012235b:	83 e0 0f             	and    $0xf,%eax
f012235e:	09 d0                	or     %edx,%eax
f0122360:	83 c8 e0             	or     $0xffffffe0,%eax
f0122363:	0f b6 c0             	movzbl %al,%eax
f0122366:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012236d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122370:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122373:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122376:	ee                   	out    %al,(%dx)
f0122377:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012237e:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0122382:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122385:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122388:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122389:	eb 55                	jmp    f01223e0 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012238b:	83 ec 0c             	sub    $0xc,%esp
f012238e:	6a 01                	push   $0x1
f0122390:	e8 d2 fe ff ff       	call   f0122267 <ide_wait_ready>
f0122395:	83 c4 10             	add    $0x10,%esp
f0122398:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012239b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012239f:	79 05                	jns    f01223a6 <ide_read+0xf4>
			return r;
f01223a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01223a4:	eb 45                	jmp    f01223eb <ide_read+0x139>
f01223a6:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01223ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01223b3:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01223ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01223bd:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01223c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01223c3:	89 cb                	mov    %ecx,%ebx
f01223c5:	89 df                	mov    %ebx,%edi
f01223c7:	89 c1                	mov    %eax,%ecx
f01223c9:	fc                   	cld    
f01223ca:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01223cc:	89 c8                	mov    %ecx,%eax
f01223ce:	89 fb                	mov    %edi,%ebx
f01223d0:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01223d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01223d6:	ff 4d 10             	decl   0x10(%ebp)
f01223d9:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01223e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01223e4:	75 a5                	jne    f012238b <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01223e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01223eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01223ee:	5b                   	pop    %ebx
f01223ef:	5f                   	pop    %edi
f01223f0:	5d                   	pop    %ebp
f01223f1:	c3                   	ret    

f01223f2 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01223f2:	55                   	push   %ebp
f01223f3:	89 e5                	mov    %esp,%ebp
f01223f5:	56                   	push   %esi
f01223f6:	53                   	push   %ebx
f01223f7:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f01223fa:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122401:	76 16                	jbe    f0122419 <ide_write+0x27>
f0122403:	68 03 b9 12 f0       	push   $0xf012b903
f0122408:	68 10 b9 12 f0       	push   $0xf012b910
f012240d:	6a 3f                	push   $0x3f
f012240f:	68 25 b9 12 f0       	push   $0xf012b925
f0122414:	e8 01 de fd ff       	call   f010021a <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0122419:	83 ec 0c             	sub    $0xc,%esp
f012241c:	6a 00                	push   $0x0
f012241e:	e8 44 fe ff ff       	call   f0122267 <ide_wait_ready>
f0122423:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0122426:	8b 45 10             	mov    0x10(%ebp),%eax
f0122429:	0f b6 c0             	movzbl %al,%eax
f012242c:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122433:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122436:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122439:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012243c:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012243d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122440:	0f b6 c0             	movzbl %al,%eax
f0122443:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012244a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012244d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122450:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122453:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122454:	8b 45 08             	mov    0x8(%ebp),%eax
f0122457:	c1 e8 08             	shr    $0x8,%eax
f012245a:	0f b6 c0             	movzbl %al,%eax
f012245d:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122464:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122467:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012246a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012246d:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012246e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122471:	c1 e8 10             	shr    $0x10,%eax
f0122474:	0f b6 c0             	movzbl %al,%eax
f0122477:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012247e:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122481:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122484:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122487:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122488:	a1 ec 3f 3f f0       	mov    0xf03f3fec,%eax
f012248d:	83 e0 01             	and    $0x1,%eax
f0122490:	c1 e0 04             	shl    $0x4,%eax
f0122493:	88 c2                	mov    %al,%dl
f0122495:	8b 45 08             	mov    0x8(%ebp),%eax
f0122498:	c1 e8 18             	shr    $0x18,%eax
f012249b:	83 e0 0f             	and    $0xf,%eax
f012249e:	09 d0                	or     %edx,%eax
f01224a0:	83 c8 e0             	or     $0xffffffe0,%eax
f01224a3:	0f b6 c0             	movzbl %al,%eax
f01224a6:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01224ad:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01224b0:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01224b3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01224b6:	ee                   	out    %al,(%dx)
f01224b7:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01224be:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01224c2:	8a 45 d7             	mov    -0x29(%ebp),%al
f01224c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01224c8:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01224c9:	eb 55                	jmp    f0122520 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01224cb:	83 ec 0c             	sub    $0xc,%esp
f01224ce:	6a 01                	push   $0x1
f01224d0:	e8 92 fd ff ff       	call   f0122267 <ide_wait_ready>
f01224d5:	83 c4 10             	add    $0x10,%esp
f01224d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01224db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01224df:	79 05                	jns    f01224e6 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01224e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01224e4:	eb 45                	jmp    f012252b <ide_write+0x139>
f01224e6:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01224ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01224f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01224f3:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f01224fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224fd:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122500:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122503:	89 cb                	mov    %ecx,%ebx
f0122505:	89 de                	mov    %ebx,%esi
f0122507:	89 c1                	mov    %eax,%ecx
f0122509:	fc                   	cld    
f012250a:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012250c:	89 c8                	mov    %ecx,%eax
f012250e:	89 f3                	mov    %esi,%ebx
f0122510:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122513:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122516:	ff 4d 10             	decl   0x10(%ebp)
f0122519:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122520:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122524:	75 a5                	jne    f01224cb <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0122526:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012252b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012252e:	5b                   	pop    %ebx
f012252f:	5e                   	pop    %esi
f0122530:	5d                   	pop    %ebp
f0122531:	c3                   	ret    

f0122532 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f0122532:	55                   	push   %ebp
f0122533:	89 e5                	mov    %esp,%ebp
f0122535:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f0122538:	8b 45 08             	mov    0x8(%ebp),%eax
f012253b:	83 e8 10             	sub    $0x10,%eax
f012253e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f0122541:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122544:	8b 00                	mov    (%eax),%eax
}
f0122546:	c9                   	leave  
f0122547:	c3                   	ret    

f0122548 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f0122548:	55                   	push   %ebp
f0122549:	89 e5                	mov    %esp,%ebp
f012254b:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012254e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122551:	83 e8 10             	sub    $0x10,%eax
f0122554:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f0122557:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012255a:	8a 40 04             	mov    0x4(%eax),%al
}
f012255d:	c9                   	leave  
f012255e:	c3                   	ret    

f012255f <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012255f:	55                   	push   %ebp
f0122560:	89 e5                	mov    %esp,%ebp
f0122562:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f0122565:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012256c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012256f:	83 f8 02             	cmp    $0x2,%eax
f0122572:	74 2b                	je     f012259f <alloc_block+0x40>
f0122574:	83 f8 02             	cmp    $0x2,%eax
f0122577:	7f 07                	jg     f0122580 <alloc_block+0x21>
f0122579:	83 f8 01             	cmp    $0x1,%eax
f012257c:	74 0e                	je     f012258c <alloc_block+0x2d>
f012257e:	eb 58                	jmp    f01225d8 <alloc_block+0x79>
f0122580:	83 f8 03             	cmp    $0x3,%eax
f0122583:	74 2d                	je     f01225b2 <alloc_block+0x53>
f0122585:	83 f8 04             	cmp    $0x4,%eax
f0122588:	74 3b                	je     f01225c5 <alloc_block+0x66>
f012258a:	eb 4c                	jmp    f01225d8 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012258c:	83 ec 0c             	sub    $0xc,%esp
f012258f:	ff 75 08             	pushl  0x8(%ebp)
f0122592:	e8 a6 01 00 00       	call   f012273d <alloc_block_FF>
f0122597:	83 c4 10             	add    $0x10,%esp
f012259a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012259d:	eb 4a                	jmp    f01225e9 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012259f:	83 ec 0c             	sub    $0xc,%esp
f01225a2:	ff 75 08             	pushl  0x8(%ebp)
f01225a5:	e8 1d 06 00 00       	call   f0122bc7 <alloc_block_NF>
f01225aa:	83 c4 10             	add    $0x10,%esp
f01225ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f01225b0:	eb 37                	jmp    f01225e9 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f01225b2:	83 ec 0c             	sub    $0xc,%esp
f01225b5:	ff 75 08             	pushl  0x8(%ebp)
f01225b8:	e8 94 04 00 00       	call   f0122a51 <alloc_block_BF>
f01225bd:	83 c4 10             	add    $0x10,%esp
f01225c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f01225c3:	eb 24                	jmp    f01225e9 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f01225c5:	83 ec 0c             	sub    $0xc,%esp
f01225c8:	ff 75 08             	pushl  0x8(%ebp)
f01225cb:	e8 da 05 00 00       	call   f0122baa <alloc_block_WF>
f01225d0:	83 c4 10             	add    $0x10,%esp
f01225d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f01225d6:	eb 11                	jmp    f01225e9 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f01225d8:	83 ec 0c             	sub    $0xc,%esp
f01225db:	68 30 b9 12 f0       	push   $0xf012b930
f01225e0:	e8 b6 e8 fd ff       	call   f0100e9b <cprintf>
f01225e5:	83 c4 10             	add    $0x10,%esp
		break;
f01225e8:	90                   	nop
	}
	return va;
f01225e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01225ec:	c9                   	leave  
f01225ed:	c3                   	ret    

f01225ee <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f01225ee:	55                   	push   %ebp
f01225ef:	89 e5                	mov    %esp,%ebp
f01225f1:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f01225f4:	83 ec 0c             	sub    $0xc,%esp
f01225f7:	68 50 b9 12 f0       	push   $0xf012b950
f01225fc:	e8 9a e8 fd ff       	call   f0100e9b <cprintf>
f0122601:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f0122604:	83 ec 0c             	sub    $0xc,%esp
f0122607:	68 7b b9 12 f0       	push   $0xf012b97b
f012260c:	e8 8a e8 fd ff       	call   f0100e9b <cprintf>
f0122611:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f0122614:	8b 45 08             	mov    0x8(%ebp),%eax
f0122617:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012261a:	eb 26                	jmp    f0122642 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012261c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012261f:	8a 40 04             	mov    0x4(%eax),%al
f0122622:	0f b6 d0             	movzbl %al,%edx
f0122625:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122628:	8b 00                	mov    (%eax),%eax
f012262a:	83 ec 04             	sub    $0x4,%esp
f012262d:	52                   	push   %edx
f012262e:	50                   	push   %eax
f012262f:	68 93 b9 12 f0       	push   $0xf012b993
f0122634:	e8 62 e8 fd ff       	call   f0100e9b <cprintf>
f0122639:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012263c:	8b 45 10             	mov    0x10(%ebp),%eax
f012263f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122642:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122646:	74 08                	je     f0122650 <print_blocks_list+0x62>
f0122648:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012264b:	8b 40 08             	mov    0x8(%eax),%eax
f012264e:	eb 05                	jmp    f0122655 <print_blocks_list+0x67>
f0122650:	b8 00 00 00 00       	mov    $0x0,%eax
f0122655:	89 45 10             	mov    %eax,0x10(%ebp)
f0122658:	8b 45 10             	mov    0x10(%ebp),%eax
f012265b:	85 c0                	test   %eax,%eax
f012265d:	75 bd                	jne    f012261c <print_blocks_list+0x2e>
f012265f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122663:	75 b7                	jne    f012261c <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f0122665:	83 ec 0c             	sub    $0xc,%esp
f0122668:	68 50 b9 12 f0       	push   $0xf012b950
f012266d:	e8 29 e8 fd ff       	call   f0100e9b <cprintf>
f0122672:	83 c4 10             	add    $0x10,%esp

}
f0122675:	90                   	nop
f0122676:	c9                   	leave  
f0122677:	c3                   	ret    

f0122678 <initialize_dynamic_allocator>:
//==================================
bool is_initialized=0;
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f0122678:	55                   	push   %ebp
f0122679:	89 e5                	mov    %esp,%ebp
f012267b:	83 ec 08             	sub    $0x8,%esp
	//=========================================
		//DON'T CHANGE THESE LINES=================
		if (initSizeOfAllocatedSpace == 0)
f012267e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122682:	0f 84 b2 00 00 00    	je     f012273a <initialize_dynamic_allocator+0xc2>
			return ;
		is_initialized=1;
f0122688:	c7 05 f0 3f 3f f0 01 	movl   $0x1,0xf03f3ff0
f012268f:	00 00 00 
		//=========================================
		//=========================================
		//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
		//panic("initialize_dynamic_allocator is not implemented yet");
		LIST_INIT(&blocklist);
f0122692:	c7 05 68 40 3f f0 00 	movl   $0x0,0xf03f4068
f0122699:	00 00 00 
f012269c:	c7 05 6c 40 3f f0 00 	movl   $0x0,0xf03f406c
f01226a3:	00 00 00 
f01226a6:	c7 05 74 40 3f f0 00 	movl   $0x0,0xf03f4074
f01226ad:	00 00 00 
		firstBlock = (struct BlockMetaData*)daStart;
f01226b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01226b3:	a3 c4 40 3f f0       	mov    %eax,0xf03f40c4
		firstBlock->size = initSizeOfAllocatedSpace;
f01226b8:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f01226bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01226c0:	89 10                	mov    %edx,(%eax)
		firstBlock->is_free=1;
f01226c2:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f01226c7:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		LIST_INSERT_HEAD(&blocklist,firstBlock);
f01226cb:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f01226d0:	85 c0                	test   %eax,%eax
f01226d2:	75 14                	jne    f01226e8 <initialize_dynamic_allocator+0x70>
f01226d4:	83 ec 04             	sub    $0x4,%esp
f01226d7:	68 ac b9 12 f0       	push   $0xf012b9ac
f01226dc:	6a 68                	push   $0x68
f01226de:	68 cf b9 12 f0       	push   $0xf012b9cf
f01226e3:	e8 32 db fd ff       	call   f010021a <_panic>
f01226e8:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f01226ed:	8b 15 68 40 3f f0    	mov    0xf03f4068,%edx
f01226f3:	89 50 08             	mov    %edx,0x8(%eax)
f01226f6:	8b 40 08             	mov    0x8(%eax),%eax
f01226f9:	85 c0                	test   %eax,%eax
f01226fb:	74 10                	je     f012270d <initialize_dynamic_allocator+0x95>
f01226fd:	a1 68 40 3f f0       	mov    0xf03f4068,%eax
f0122702:	8b 15 c4 40 3f f0    	mov    0xf03f40c4,%edx
f0122708:	89 50 0c             	mov    %edx,0xc(%eax)
f012270b:	eb 0a                	jmp    f0122717 <initialize_dynamic_allocator+0x9f>
f012270d:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f0122712:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122717:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f012271c:	a3 68 40 3f f0       	mov    %eax,0xf03f4068
f0122721:	a1 c4 40 3f f0       	mov    0xf03f40c4,%eax
f0122726:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f012272d:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122732:	40                   	inc    %eax
f0122733:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
f0122738:	eb 01                	jmp    f012273b <initialize_dynamic_allocator+0xc3>
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
	//=========================================
		//DON'T CHANGE THESE LINES=================
		if (initSizeOfAllocatedSpace == 0)
			return ;
f012273a:	90                   	nop
		LIST_INIT(&blocklist);
		firstBlock = (struct BlockMetaData*)daStart;
		firstBlock->size = initSizeOfAllocatedSpace;
		firstBlock->is_free=1;
		LIST_INSERT_HEAD(&blocklist,firstBlock);
}
f012273b:	c9                   	leave  
f012273c:	c3                   	ret    

f012273d <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size){
f012273d:	55                   	push   %ebp
f012273e:	89 e5                	mov    %esp,%ebp
f0122740:	83 ec 28             	sub    $0x28,%esp
	if (!is_initialized)
f0122743:	a1 f0 3f 3f f0       	mov    0xf03f3ff0,%eax
f0122748:	85 c0                	test   %eax,%eax
f012274a:	75 40                	jne    f012278c <alloc_block_FF+0x4f>
	{
		uint32 required_size = size + sizeOfMetaData();
f012274c:	8b 45 08             	mov    0x8(%ebp),%eax
f012274f:	83 c0 10             	add    $0x10,%eax
f0122752:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 da_start = (uint32)sbrk(required_size);
f0122755:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122758:	83 ec 0c             	sub    $0xc,%esp
f012275b:	50                   	push   %eax
f012275c:	e8 dc 5c fe ff       	call   f010843d <sbrk>
f0122761:	83 c4 10             	add    $0x10,%esp
f0122764:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//get new break since it's page aligned! thus, the size can be more than the required one
		uint32 da_break = (uint32)sbrk(0);
f0122767:	83 ec 0c             	sub    $0xc,%esp
f012276a:	6a 00                	push   $0x0
f012276c:	e8 cc 5c fe ff       	call   f010843d <sbrk>
f0122771:	83 c4 10             	add    $0x10,%esp
f0122774:	89 45 e8             	mov    %eax,-0x18(%ebp)
		initialize_dynamic_allocator(da_start, da_break - da_start);
f0122777:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012277a:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012277d:	83 ec 08             	sub    $0x8,%esp
f0122780:	50                   	push   %eax
f0122781:	ff 75 ec             	pushl  -0x14(%ebp)
f0122784:	e8 ef fe ff ff       	call   f0122678 <initialize_dynamic_allocator>
f0122789:	83 c4 10             	add    $0x10,%esp
	}

	 //print_blocks_list(blocklist);
	 if(size<=0){
f012278c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122790:	75 0a                	jne    f012279c <alloc_block_FF+0x5f>
		 return NULL;
f0122792:	b8 00 00 00 00       	mov    $0x0,%eax
f0122797:	e9 b3 02 00 00       	jmp    f0122a4f <alloc_block_FF+0x312>
	 }
	 size+=sizeOfMetaData();
f012279c:	83 45 08 10          	addl   $0x10,0x8(%ebp)
	 struct BlockMetaData* currentBlock;
	 bool found =0;
f01227a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	 LIST_FOREACH(currentBlock,&blocklist){
f01227a7:	a1 68 40 3f f0       	mov    0xf03f4068,%eax
f01227ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01227af:	e9 12 01 00 00       	jmp    f01228c6 <alloc_block_FF+0x189>
		 if (currentBlock->is_free && currentBlock->size >= size)
f01227b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227b7:	8a 40 04             	mov    0x4(%eax),%al
f01227ba:	84 c0                	test   %al,%al
f01227bc:	0f 84 fc 00 00 00    	je     f01228be <alloc_block_FF+0x181>
f01227c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227c5:	8b 00                	mov    (%eax),%eax
f01227c7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01227ca:	0f 82 ee 00 00 00    	jb     f01228be <alloc_block_FF+0x181>
		 {
			 if(currentBlock->size == size)
f01227d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227d3:	8b 00                	mov    (%eax),%eax
f01227d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01227d8:	75 12                	jne    f01227ec <alloc_block_FF+0xaf>
			 {
				 currentBlock->is_free = 0;
f01227da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227dd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				 return (uint32*)((char*)currentBlock +sizeOfMetaData());
f01227e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227e4:	83 c0 10             	add    $0x10,%eax
f01227e7:	e9 63 02 00 00       	jmp    f0122a4f <alloc_block_FF+0x312>
			 }
			 else
			 {
				 found=1;
f01227ec:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
				 currentBlock->is_free=0;
f01227f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227f6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				 if(currentBlock->size-size>=sizeOfMetaData())
f01227fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01227fd:	8b 00                	mov    (%eax),%eax
f01227ff:	2b 45 08             	sub    0x8(%ebp),%eax
f0122802:	83 f8 0f             	cmp    $0xf,%eax
f0122805:	0f 86 a8 00 00 00    	jbe    f01228b3 <alloc_block_FF+0x176>
				 {
					 struct BlockMetaData *new_block=(struct BlockMetaData*)((void*)currentBlock+size);
f012280b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012280e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122811:	01 d0                	add    %edx,%eax
f0122813:	89 45 d8             	mov    %eax,-0x28(%ebp)
					 new_block->size=currentBlock->size-size;
f0122816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122819:	8b 00                	mov    (%eax),%eax
f012281b:	2b 45 08             	sub    0x8(%ebp),%eax
f012281e:	89 c2                	mov    %eax,%edx
f0122820:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122823:	89 10                	mov    %edx,(%eax)
					 currentBlock->size=size;
f0122825:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122828:	8b 55 08             	mov    0x8(%ebp),%edx
f012282b:	89 10                	mov    %edx,(%eax)
					 new_block->is_free=1;
f012282d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122830:	c6 40 04 01          	movb   $0x1,0x4(%eax)
					 LIST_INSERT_AFTER(&blocklist,currentBlock,new_block);
f0122834:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122838:	74 06                	je     f0122840 <alloc_block_FF+0x103>
f012283a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f012283e:	75 17                	jne    f0122857 <alloc_block_FF+0x11a>
f0122840:	83 ec 04             	sub    $0x4,%esp
f0122843:	68 e8 b9 12 f0       	push   $0xf012b9e8
f0122848:	68 91 00 00 00       	push   $0x91
f012284d:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122852:	e8 c3 d9 fd ff       	call   f010021a <_panic>
f0122857:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012285a:	8b 50 08             	mov    0x8(%eax),%edx
f012285d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122860:	89 50 08             	mov    %edx,0x8(%eax)
f0122863:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122866:	8b 40 08             	mov    0x8(%eax),%eax
f0122869:	85 c0                	test   %eax,%eax
f012286b:	74 0c                	je     f0122879 <alloc_block_FF+0x13c>
f012286d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122870:	8b 40 08             	mov    0x8(%eax),%eax
f0122873:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122876:	89 50 0c             	mov    %edx,0xc(%eax)
f0122879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012287c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012287f:	89 50 08             	mov    %edx,0x8(%eax)
f0122882:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122885:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122888:	89 50 0c             	mov    %edx,0xc(%eax)
f012288b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012288e:	8b 40 08             	mov    0x8(%eax),%eax
f0122891:	85 c0                	test   %eax,%eax
f0122893:	75 08                	jne    f012289d <alloc_block_FF+0x160>
f0122895:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0122898:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f012289d:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f01228a2:	40                   	inc    %eax
f01228a3:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
					 return (uint32*)((void*)currentBlock +sizeOfMetaData());
f01228a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228ab:	83 c0 10             	add    $0x10,%eax
f01228ae:	e9 9c 01 00 00       	jmp    f0122a4f <alloc_block_FF+0x312>
				 }
				 else
					 return (uint32*)((void*)currentBlock +sizeOfMetaData());
f01228b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228b6:	83 c0 10             	add    $0x10,%eax
f01228b9:	e9 91 01 00 00       	jmp    f0122a4f <alloc_block_FF+0x312>
		 return NULL;
	 }
	 size+=sizeOfMetaData();
	 struct BlockMetaData* currentBlock;
	 bool found =0;
	 LIST_FOREACH(currentBlock,&blocklist){
f01228be:	a1 70 40 3f f0       	mov    0xf03f4070,%eax
f01228c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01228c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01228ca:	74 08                	je     f01228d4 <alloc_block_FF+0x197>
f01228cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228cf:	8b 40 08             	mov    0x8(%eax),%eax
f01228d2:	eb 05                	jmp    f01228d9 <alloc_block_FF+0x19c>
f01228d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01228d9:	a3 70 40 3f f0       	mov    %eax,0xf03f4070
f01228de:	a1 70 40 3f f0       	mov    0xf03f4070,%eax
f01228e3:	85 c0                	test   %eax,%eax
f01228e5:	0f 85 c9 fe ff ff    	jne    f01227b4 <alloc_block_FF+0x77>
f01228eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01228ef:	0f 85 bf fe ff ff    	jne    f01227b4 <alloc_block_FF+0x77>
				 else
					 return (uint32*)((void*)currentBlock +sizeOfMetaData());
			 }
		 }
	 }
	 if(found==0)
f01228f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01228f9:	0f 85 4b 01 00 00    	jne    f0122a4a <alloc_block_FF+0x30d>
	 {
		 currentBlock = sbrk(size);
f01228ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0122902:	83 ec 0c             	sub    $0xc,%esp
f0122905:	50                   	push   %eax
f0122906:	e8 32 5b fe ff       	call   f010843d <sbrk>
f012290b:	83 c4 10             	add    $0x10,%esp
f012290e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if(currentBlock!=NULL){
f0122911:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122915:	0f 84 28 01 00 00    	je     f0122a43 <alloc_block_FF+0x306>
			 struct BlockMetaData *sb;
			 sb = (struct BlockMetaData *)currentBlock;
f012291b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012291e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			 sb->size=size;
f0122921:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122924:	8b 55 08             	mov    0x8(%ebp),%edx
f0122927:	89 10                	mov    %edx,(%eax)
			 sb->is_free = 0;
f0122929:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012292c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
			 LIST_INSERT_TAIL(&blocklist, sb);
f0122930:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0122934:	75 17                	jne    f012294d <alloc_block_FF+0x210>
f0122936:	83 ec 04             	sub    $0x4,%esp
f0122939:	68 1c ba 12 f0       	push   $0xf012ba1c
f012293e:	68 a1 00 00 00       	push   $0xa1
f0122943:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122948:	e8 cd d8 fd ff       	call   f010021a <_panic>
f012294d:	8b 15 6c 40 3f f0    	mov    0xf03f406c,%edx
f0122953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122956:	89 50 0c             	mov    %edx,0xc(%eax)
f0122959:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012295c:	8b 40 0c             	mov    0xc(%eax),%eax
f012295f:	85 c0                	test   %eax,%eax
f0122961:	74 0d                	je     f0122970 <alloc_block_FF+0x233>
f0122963:	a1 6c 40 3f f0       	mov    0xf03f406c,%eax
f0122968:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012296b:	89 50 08             	mov    %edx,0x8(%eax)
f012296e:	eb 08                	jmp    f0122978 <alloc_block_FF+0x23b>
f0122970:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122973:	a3 68 40 3f f0       	mov    %eax,0xf03f4068
f0122978:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012297b:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122980:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122983:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f012298a:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f012298f:	40                   	inc    %eax
f0122990:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
			 if(PAGE_SIZE-size>=sizeOfMetaData()){
f0122995:	b8 00 10 00 00       	mov    $0x1000,%eax
f012299a:	2b 45 08             	sub    0x8(%ebp),%eax
f012299d:	83 f8 0f             	cmp    $0xf,%eax
f01229a0:	0f 86 95 00 00 00    	jbe    f0122a3b <alloc_block_FF+0x2fe>
				 struct BlockMetaData *new_block=(struct BlockMetaData*)((uint32)currentBlock+size);
f01229a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01229a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01229ac:	01 d0                	add    %edx,%eax
f01229ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
				 new_block->size=PAGE_SIZE-size;
f01229b1:	b8 00 10 00 00       	mov    $0x1000,%eax
f01229b6:	2b 45 08             	sub    0x8(%ebp),%eax
f01229b9:	89 c2                	mov    %eax,%edx
f01229bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01229be:	89 10                	mov    %edx,(%eax)
				 new_block->is_free=1;
f01229c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01229c3:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				 LIST_INSERT_AFTER(&blocklist,sb,new_block);
f01229c7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01229cb:	74 06                	je     f01229d3 <alloc_block_FF+0x296>
f01229cd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01229d1:	75 17                	jne    f01229ea <alloc_block_FF+0x2ad>
f01229d3:	83 ec 04             	sub    $0x4,%esp
f01229d6:	68 e8 b9 12 f0       	push   $0xf012b9e8
f01229db:	68 a6 00 00 00       	push   $0xa6
f01229e0:	68 cf b9 12 f0       	push   $0xf012b9cf
f01229e5:	e8 30 d8 fd ff       	call   f010021a <_panic>
f01229ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01229ed:	8b 50 08             	mov    0x8(%eax),%edx
f01229f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01229f3:	89 50 08             	mov    %edx,0x8(%eax)
f01229f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01229f9:	8b 40 08             	mov    0x8(%eax),%eax
f01229fc:	85 c0                	test   %eax,%eax
f01229fe:	74 0c                	je     f0122a0c <alloc_block_FF+0x2cf>
f0122a00:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122a03:	8b 40 08             	mov    0x8(%eax),%eax
f0122a06:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0122a09:	89 50 0c             	mov    %edx,0xc(%eax)
f0122a0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122a0f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0122a12:	89 50 08             	mov    %edx,0x8(%eax)
f0122a15:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122a18:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122a1b:	89 50 0c             	mov    %edx,0xc(%eax)
f0122a1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122a21:	8b 40 08             	mov    0x8(%eax),%eax
f0122a24:	85 c0                	test   %eax,%eax
f0122a26:	75 08                	jne    f0122a30 <alloc_block_FF+0x2f3>
f0122a28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122a2b:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122a30:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122a35:	40                   	inc    %eax
f0122a36:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
			 }
			 return (sb + 1);
f0122a3b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122a3e:	83 c0 10             	add    $0x10,%eax
f0122a41:	eb 0c                	jmp    f0122a4f <alloc_block_FF+0x312>
		 }
		 return NULL;
f0122a43:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a48:	eb 05                	jmp    f0122a4f <alloc_block_FF+0x312>
	 }
	 return NULL;
f0122a4a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
f0122a4f:	c9                   	leave  
f0122a50:	c3                   	ret    

f0122a51 <alloc_block_BF>:
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f0122a51:	55                   	push   %ebp
f0122a52:	89 e5                	mov    %esp,%ebp
f0122a54:	83 ec 18             	sub    $0x18,%esp
	size+=sizeOfMetaData();
f0122a57:	83 45 08 10          	addl   $0x10,0x8(%ebp)
    struct BlockMetaData *bestFitBlock=NULL;
f0122a5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint32 bestFitSize = 4294967295;
f0122a62:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    struct BlockMetaData *current;
    LIST_FOREACH(current,&blocklist) {
f0122a69:	a1 68 40 3f f0       	mov    0xf03f4068,%eax
f0122a6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0122a71:	eb 34                	jmp    f0122aa7 <alloc_block_BF+0x56>
        if (current->is_free && current->size >= size) {
f0122a73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122a76:	8a 40 04             	mov    0x4(%eax),%al
f0122a79:	84 c0                	test   %al,%al
f0122a7b:	74 22                	je     f0122a9f <alloc_block_BF+0x4e>
f0122a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122a80:	8b 00                	mov    (%eax),%eax
f0122a82:	3b 45 08             	cmp    0x8(%ebp),%eax
f0122a85:	72 18                	jb     f0122a9f <alloc_block_BF+0x4e>
            if (current->size<bestFitSize) {
f0122a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122a8a:	8b 00                	mov    (%eax),%eax
f0122a8c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122a8f:	73 0e                	jae    f0122a9f <alloc_block_BF+0x4e>
                bestFitBlock = current;
f0122a91:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122a94:	89 45 f4             	mov    %eax,-0xc(%ebp)
                bestFitSize = current->size;
f0122a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122a9a:	8b 00                	mov    (%eax),%eax
f0122a9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
{
	size+=sizeOfMetaData();
    struct BlockMetaData *bestFitBlock=NULL;
    uint32 bestFitSize = 4294967295;
    struct BlockMetaData *current;
    LIST_FOREACH(current,&blocklist) {
f0122a9f:	a1 70 40 3f f0       	mov    0xf03f4070,%eax
f0122aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0122aa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122aab:	74 08                	je     f0122ab5 <alloc_block_BF+0x64>
f0122aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122ab0:	8b 40 08             	mov    0x8(%eax),%eax
f0122ab3:	eb 05                	jmp    f0122aba <alloc_block_BF+0x69>
f0122ab5:	b8 00 00 00 00       	mov    $0x0,%eax
f0122aba:	a3 70 40 3f f0       	mov    %eax,0xf03f4070
f0122abf:	a1 70 40 3f f0       	mov    0xf03f4070,%eax
f0122ac4:	85 c0                	test   %eax,%eax
f0122ac6:	75 ab                	jne    f0122a73 <alloc_block_BF+0x22>
f0122ac8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122acc:	75 a5                	jne    f0122a73 <alloc_block_BF+0x22>
                bestFitBlock = current;
                bestFitSize = current->size;
            }
        }
    }
    if (bestFitBlock) {
f0122ace:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122ad2:	0f 84 cb 00 00 00    	je     f0122ba3 <alloc_block_BF+0x152>
        bestFitBlock->is_free = 0;
f0122ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122adb:	c6 40 04 00          	movb   $0x0,0x4(%eax)
        if (bestFitBlock->size>size &&bestFitBlock->size-size>=sizeOfMetaData()) {
f0122adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ae2:	8b 00                	mov    (%eax),%eax
f0122ae4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0122ae7:	0f 86 ae 00 00 00    	jbe    f0122b9b <alloc_block_BF+0x14a>
f0122aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122af0:	8b 00                	mov    (%eax),%eax
f0122af2:	2b 45 08             	sub    0x8(%ebp),%eax
f0122af5:	83 f8 0f             	cmp    $0xf,%eax
f0122af8:	0f 86 9d 00 00 00    	jbe    f0122b9b <alloc_block_BF+0x14a>
			struct BlockMetaData *new_block=(struct BlockMetaData*)((void*)bestFitBlock+size);
f0122afe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b01:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b04:	01 d0                	add    %edx,%eax
f0122b06:	89 45 e8             	mov    %eax,-0x18(%ebp)
			new_block->size = bestFitBlock->size - size;
f0122b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b0c:	8b 00                	mov    (%eax),%eax
f0122b0e:	2b 45 08             	sub    0x8(%ebp),%eax
f0122b11:	89 c2                	mov    %eax,%edx
f0122b13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b16:	89 10                	mov    %edx,(%eax)
			new_block->is_free = 1;
f0122b18:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b1b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
            bestFitBlock->size = size;
f0122b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b22:	8b 55 08             	mov    0x8(%ebp),%edx
f0122b25:	89 10                	mov    %edx,(%eax)
			LIST_INSERT_AFTER(&blocklist,bestFitBlock,new_block);
f0122b27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122b2b:	74 06                	je     f0122b33 <alloc_block_BF+0xe2>
f0122b2d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0122b31:	75 17                	jne    f0122b4a <alloc_block_BF+0xf9>
f0122b33:	83 ec 04             	sub    $0x4,%esp
f0122b36:	68 e8 b9 12 f0       	push   $0xf012b9e8
f0122b3b:	68 c6 00 00 00       	push   $0xc6
f0122b40:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122b45:	e8 d0 d6 fd ff       	call   f010021a <_panic>
f0122b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b4d:	8b 50 08             	mov    0x8(%eax),%edx
f0122b50:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b53:	89 50 08             	mov    %edx,0x8(%eax)
f0122b56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b59:	8b 40 08             	mov    0x8(%eax),%eax
f0122b5c:	85 c0                	test   %eax,%eax
f0122b5e:	74 0c                	je     f0122b6c <alloc_block_BF+0x11b>
f0122b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b63:	8b 40 08             	mov    0x8(%eax),%eax
f0122b66:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122b69:	89 50 0c             	mov    %edx,0xc(%eax)
f0122b6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b6f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122b72:	89 50 08             	mov    %edx,0x8(%eax)
f0122b75:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b7b:	89 50 0c             	mov    %edx,0xc(%eax)
f0122b7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b81:	8b 40 08             	mov    0x8(%eax),%eax
f0122b84:	85 c0                	test   %eax,%eax
f0122b86:	75 08                	jne    f0122b90 <alloc_block_BF+0x13f>
f0122b88:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0122b8b:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122b90:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122b95:	40                   	inc    %eax
f0122b96:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
        }
        return (uint32 *)((void *)bestFitBlock +sizeOfMetaData());
f0122b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b9e:	83 c0 10             	add    $0x10,%eax
f0122ba1:	eb 05                	jmp    f0122ba8 <alloc_block_BF+0x157>
    }

    return NULL;
f0122ba3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122ba8:	c9                   	leave  
f0122ba9:	c3                   	ret    

f0122baa <alloc_block_WF>:
//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f0122baa:	55                   	push   %ebp
f0122bab:	89 e5                	mov    %esp,%ebp
f0122bad:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f0122bb0:	83 ec 04             	sub    $0x4,%esp
f0122bb3:	68 40 ba 12 f0       	push   $0xf012ba40
f0122bb8:	68 d2 00 00 00       	push   $0xd2
f0122bbd:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122bc2:	e8 53 d6 fd ff       	call   f010021a <_panic>

f0122bc7 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f0122bc7:	55                   	push   %ebp
f0122bc8:	89 e5                	mov    %esp,%ebp
f0122bca:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f0122bcd:	83 ec 04             	sub    $0x4,%esp
f0122bd0:	68 68 ba 12 f0       	push   $0xf012ba68
f0122bd5:	68 db 00 00 00       	push   $0xdb
f0122bda:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122bdf:	e8 36 d6 fd ff       	call   f010021a <_panic>

f0122be4 <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
	{
f0122be4:	55                   	push   %ebp
f0122be5:	89 e5                	mov    %esp,%ebp
f0122be7:	83 ec 18             	sub    $0x18,%esp
		//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
		//panic("free_block is not implemented yet");
		if (va == NULL) {
f0122bea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122bee:	0f 84 d2 01 00 00    	je     f0122dc6 <free_block+0x1e2>
				return;
			}
			struct BlockMetaData *block =(struct BlockMetaData *)va-1;
f0122bf4:	8b 45 08             	mov    0x8(%ebp),%eax
f0122bf7:	83 e8 10             	sub    $0x10,%eax
f0122bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
			if(block->is_free){
f0122bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c00:	8a 40 04             	mov    0x4(%eax),%al
f0122c03:	84 c0                	test   %al,%al
f0122c05:	0f 85 be 01 00 00    	jne    f0122dc9 <free_block+0x1e5>
				return;
			}
			//free block
			block->is_free = 1;
f0122c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c0e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
			//check if next is free and merge with the block
			if (LIST_NEXT(block))
f0122c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c15:	8b 40 08             	mov    0x8(%eax),%eax
f0122c18:	85 c0                	test   %eax,%eax
f0122c1a:	0f 84 cc 00 00 00    	je     f0122cec <free_block+0x108>
			{
				if (LIST_NEXT(block)->is_free)
f0122c20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c23:	8b 40 08             	mov    0x8(%eax),%eax
f0122c26:	8a 40 04             	mov    0x4(%eax),%al
f0122c29:	84 c0                	test   %al,%al
f0122c2b:	0f 84 bb 00 00 00    	je     f0122cec <free_block+0x108>
				{
					block->size += LIST_NEXT(block)->size;
f0122c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c34:	8b 10                	mov    (%eax),%edx
f0122c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c39:	8b 40 08             	mov    0x8(%eax),%eax
f0122c3c:	8b 00                	mov    (%eax),%eax
f0122c3e:	01 c2                	add    %eax,%edx
f0122c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c43:	89 10                	mov    %edx,(%eax)
					LIST_NEXT(block)->is_free=0;
f0122c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c48:	8b 40 08             	mov    0x8(%eax),%eax
f0122c4b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
					LIST_NEXT(block)->size=0;
f0122c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c52:	8b 40 08             	mov    0x8(%eax),%eax
f0122c55:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					struct BlockMetaData *delnext =LIST_NEXT(block);
f0122c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c5e:	8b 40 08             	mov    0x8(%eax),%eax
f0122c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
					LIST_REMOVE(&blocklist,delnext);
f0122c64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122c68:	75 17                	jne    f0122c81 <free_block+0x9d>
f0122c6a:	83 ec 04             	sub    $0x4,%esp
f0122c6d:	68 8e ba 12 f0       	push   $0xf012ba8e
f0122c72:	68 f8 00 00 00       	push   $0xf8
f0122c77:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122c7c:	e8 99 d5 fd ff       	call   f010021a <_panic>
f0122c81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122c84:	8b 40 08             	mov    0x8(%eax),%eax
f0122c87:	85 c0                	test   %eax,%eax
f0122c89:	74 11                	je     f0122c9c <free_block+0xb8>
f0122c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122c8e:	8b 40 08             	mov    0x8(%eax),%eax
f0122c91:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122c94:	8b 52 0c             	mov    0xc(%edx),%edx
f0122c97:	89 50 0c             	mov    %edx,0xc(%eax)
f0122c9a:	eb 0b                	jmp    f0122ca7 <free_block+0xc3>
f0122c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122c9f:	8b 40 0c             	mov    0xc(%eax),%eax
f0122ca2:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122caa:	8b 40 0c             	mov    0xc(%eax),%eax
f0122cad:	85 c0                	test   %eax,%eax
f0122caf:	74 11                	je     f0122cc2 <free_block+0xde>
f0122cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122cb4:	8b 40 0c             	mov    0xc(%eax),%eax
f0122cb7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122cba:	8b 52 08             	mov    0x8(%edx),%edx
f0122cbd:	89 50 08             	mov    %edx,0x8(%eax)
f0122cc0:	eb 0b                	jmp    f0122ccd <free_block+0xe9>
f0122cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122cc5:	8b 40 08             	mov    0x8(%eax),%eax
f0122cc8:	a3 68 40 3f f0       	mov    %eax,0xf03f4068
f0122ccd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122cd0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0122cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122cda:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0122ce1:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122ce6:	48                   	dec    %eax
f0122ce7:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
				}
			}
			if( LIST_PREV(block))
f0122cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122cef:	8b 40 0c             	mov    0xc(%eax),%eax
f0122cf2:	85 c0                	test   %eax,%eax
f0122cf4:	0f 84 d0 00 00 00    	je     f0122dca <free_block+0x1e6>
			{
				if (LIST_PREV(block)->is_free)
f0122cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122cfd:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d00:	8a 40 04             	mov    0x4(%eax),%al
f0122d03:	84 c0                	test   %al,%al
f0122d05:	0f 84 bf 00 00 00    	je     f0122dca <free_block+0x1e6>
				{
					LIST_PREV(block)->size += block->size;
f0122d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d0e:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d14:	8b 52 0c             	mov    0xc(%edx),%edx
f0122d17:	8b 0a                	mov    (%edx),%ecx
f0122d19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d1c:	8b 12                	mov    (%edx),%edx
f0122d1e:	01 ca                	add    %ecx,%edx
f0122d20:	89 10                	mov    %edx,(%eax)
					LIST_PREV(block)->is_free=1;
f0122d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d25:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d28:	c6 40 04 01          	movb   $0x1,0x4(%eax)
					block->is_free=0;
f0122d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d2f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
					block->size=0;
f0122d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					LIST_REMOVE(&blocklist,block);
f0122d3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122d40:	75 17                	jne    f0122d59 <free_block+0x175>
f0122d42:	83 ec 04             	sub    $0x4,%esp
f0122d45:	68 8e ba 12 f0       	push   $0xf012ba8e
f0122d4a:	68 03 01 00 00       	push   $0x103
f0122d4f:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122d54:	e8 c1 d4 fd ff       	call   f010021a <_panic>
f0122d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d5c:	8b 40 08             	mov    0x8(%eax),%eax
f0122d5f:	85 c0                	test   %eax,%eax
f0122d61:	74 11                	je     f0122d74 <free_block+0x190>
f0122d63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d66:	8b 40 08             	mov    0x8(%eax),%eax
f0122d69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d6c:	8b 52 0c             	mov    0xc(%edx),%edx
f0122d6f:	89 50 0c             	mov    %edx,0xc(%eax)
f0122d72:	eb 0b                	jmp    f0122d7f <free_block+0x19b>
f0122d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d77:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d7a:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d82:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d85:	85 c0                	test   %eax,%eax
f0122d87:	74 11                	je     f0122d9a <free_block+0x1b6>
f0122d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d8c:	8b 40 0c             	mov    0xc(%eax),%eax
f0122d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d92:	8b 52 08             	mov    0x8(%edx),%edx
f0122d95:	89 50 08             	mov    %edx,0x8(%eax)
f0122d98:	eb 0b                	jmp    f0122da5 <free_block+0x1c1>
f0122d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122d9d:	8b 40 08             	mov    0x8(%eax),%eax
f0122da0:	a3 68 40 3f f0       	mov    %eax,0xf03f4068
f0122da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122da8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0122daf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122db2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0122db9:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122dbe:	48                   	dec    %eax
f0122dbf:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
f0122dc4:	eb 04                	jmp    f0122dca <free_block+0x1e6>
void free_block(void *va)
	{
		//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
		//panic("free_block is not implemented yet");
		if (va == NULL) {
				return;
f0122dc6:	90                   	nop
f0122dc7:	eb 01                	jmp    f0122dca <free_block+0x1e6>
			}
			struct BlockMetaData *block =(struct BlockMetaData *)va-1;
			if(block->is_free){
				return;
f0122dc9:	90                   	nop
					block->is_free=0;
					block->size=0;
					LIST_REMOVE(&blocklist,block);
				}
			}
	}
f0122dca:	c9                   	leave  
f0122dcb:	c3                   	ret    

f0122dcc <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f0122dcc:	55                   	push   %ebp
f0122dcd:	89 e5                	mov    %esp,%ebp
f0122dcf:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");
	 if (va == NULL && new_size == 0)
f0122dd2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122dd6:	75 10                	jne    f0122de8 <realloc_block_FF+0x1c>
f0122dd8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122ddc:	75 0a                	jne    f0122de8 <realloc_block_FF+0x1c>
	 {
		 return NULL;
f0122dde:	b8 00 00 00 00       	mov    $0x0,%eax
f0122de3:	e9 2e 03 00 00       	jmp    f0123116 <realloc_block_FF+0x34a>
	 }
	 if (va == NULL)
f0122de8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122dec:	75 13                	jne    f0122e01 <realloc_block_FF+0x35>
	 {
		 return alloc_block_FF(new_size);
f0122dee:	83 ec 0c             	sub    $0xc,%esp
f0122df1:	ff 75 0c             	pushl  0xc(%ebp)
f0122df4:	e8 44 f9 ff ff       	call   f012273d <alloc_block_FF>
f0122df9:	83 c4 10             	add    $0x10,%esp
f0122dfc:	e9 15 03 00 00       	jmp    f0123116 <realloc_block_FF+0x34a>
	 }
	 if (new_size == 0)
f0122e01:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122e05:	75 18                	jne    f0122e1f <realloc_block_FF+0x53>
	 {
		 free_block(va);
f0122e07:	83 ec 0c             	sub    $0xc,%esp
f0122e0a:	ff 75 08             	pushl  0x8(%ebp)
f0122e0d:	e8 d2 fd ff ff       	call   f0122be4 <free_block>
f0122e12:	83 c4 10             	add    $0x10,%esp
		 return NULL;
f0122e15:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e1a:	e9 f7 02 00 00       	jmp    f0123116 <realloc_block_FF+0x34a>
	 }
	 struct BlockMetaData* block = (struct BlockMetaData*)va - 1;
f0122e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122e22:	83 e8 10             	sub    $0x10,%eax
f0122e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 new_size += sizeOfMetaData();
f0122e28:	83 45 0c 10          	addl   $0x10,0xc(%ebp)
	     if (block->size >= new_size)
f0122e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e2f:	8b 00                	mov    (%eax),%eax
f0122e31:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0122e34:	0f 82 c8 00 00 00    	jb     f0122f02 <realloc_block_FF+0x136>
	     {
	    	 if(block->size == new_size)
f0122e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e3d:	8b 00                	mov    (%eax),%eax
f0122e3f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0122e42:	75 08                	jne    f0122e4c <realloc_block_FF+0x80>
	    	 {
	    		 return va;
f0122e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0122e47:	e9 ca 02 00 00       	jmp    f0123116 <realloc_block_FF+0x34a>
	    	 }
	    	 if(block->size - new_size >= sizeOfMetaData())
f0122e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e4f:	8b 00                	mov    (%eax),%eax
f0122e51:	2b 45 0c             	sub    0xc(%ebp),%eax
f0122e54:	83 f8 0f             	cmp    $0xf,%eax
f0122e57:	0f 86 9d 00 00 00    	jbe    f0122efa <realloc_block_FF+0x12e>
	    	 {
	    			struct BlockMetaData *new_block=(struct BlockMetaData*)((void*)block + new_size);
f0122e5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122e63:	01 d0                	add    %edx,%eax
f0122e65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    			new_block->size = block->size - new_size;
f0122e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e6b:	8b 00                	mov    (%eax),%eax
f0122e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
f0122e70:	89 c2                	mov    %eax,%edx
f0122e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122e75:	89 10                	mov    %edx,(%eax)
	    			block->size = new_size;
f0122e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e7a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122e7d:	89 10                	mov    %edx,(%eax)
	    			new_block->is_free = 1;
f0122e7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122e82:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	    			LIST_INSERT_AFTER(&blocklist,block,new_block);
f0122e86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122e8a:	74 06                	je     f0122e92 <realloc_block_FF+0xc6>
f0122e8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122e90:	75 17                	jne    f0122ea9 <realloc_block_FF+0xdd>
f0122e92:	83 ec 04             	sub    $0x4,%esp
f0122e95:	68 e8 b9 12 f0       	push   $0xf012b9e8
f0122e9a:	68 2a 01 00 00       	push   $0x12a
f0122e9f:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122ea4:	e8 71 d3 fd ff       	call   f010021a <_panic>
f0122ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122eac:	8b 50 08             	mov    0x8(%eax),%edx
f0122eaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122eb2:	89 50 08             	mov    %edx,0x8(%eax)
f0122eb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122eb8:	8b 40 08             	mov    0x8(%eax),%eax
f0122ebb:	85 c0                	test   %eax,%eax
f0122ebd:	74 0c                	je     f0122ecb <realloc_block_FF+0xff>
f0122ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ec2:	8b 40 08             	mov    0x8(%eax),%eax
f0122ec5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122ec8:	89 50 0c             	mov    %edx,0xc(%eax)
f0122ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ece:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122ed1:	89 50 08             	mov    %edx,0x8(%eax)
f0122ed4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122ed7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122eda:	89 50 0c             	mov    %edx,0xc(%eax)
f0122edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122ee0:	8b 40 08             	mov    0x8(%eax),%eax
f0122ee3:	85 c0                	test   %eax,%eax
f0122ee5:	75 08                	jne    f0122eef <realloc_block_FF+0x123>
f0122ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122eea:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122eef:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122ef4:	40                   	inc    %eax
f0122ef5:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
	    	 }
	    	 return va;
f0122efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0122efd:	e9 14 02 00 00       	jmp    f0123116 <realloc_block_FF+0x34a>
	     }
	     else
	     {
	    	 if (LIST_NEXT(block))
f0122f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f05:	8b 40 08             	mov    0x8(%eax),%eax
f0122f08:	85 c0                	test   %eax,%eax
f0122f0a:	0f 84 97 01 00 00    	je     f01230a7 <realloc_block_FF+0x2db>
	    	 {
	    		 if (LIST_NEXT(block)->is_free && block->size + LIST_NEXT(block)->size >= new_size)
f0122f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f13:	8b 40 08             	mov    0x8(%eax),%eax
f0122f16:	8a 40 04             	mov    0x4(%eax),%al
f0122f19:	84 c0                	test   %al,%al
f0122f1b:	0f 84 86 01 00 00    	je     f01230a7 <realloc_block_FF+0x2db>
f0122f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f24:	8b 10                	mov    (%eax),%edx
f0122f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f29:	8b 40 08             	mov    0x8(%eax),%eax
f0122f2c:	8b 00                	mov    (%eax),%eax
f0122f2e:	01 d0                	add    %edx,%eax
f0122f30:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0122f33:	0f 82 6e 01 00 00    	jb     f01230a7 <realloc_block_FF+0x2db>
	    		 {
	    			 block->size += LIST_NEXT(block)->size;
f0122f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f3c:	8b 10                	mov    (%eax),%edx
f0122f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f41:	8b 40 08             	mov    0x8(%eax),%eax
f0122f44:	8b 00                	mov    (%eax),%eax
f0122f46:	01 c2                	add    %eax,%edx
f0122f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f4b:	89 10                	mov    %edx,(%eax)
					 LIST_NEXT(block)->is_free=0;
f0122f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f50:	8b 40 08             	mov    0x8(%eax),%eax
f0122f53:	c6 40 04 00          	movb   $0x0,0x4(%eax)
					 LIST_NEXT(block)->size=0;
f0122f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f5a:	8b 40 08             	mov    0x8(%eax),%eax
f0122f5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					 struct BlockMetaData *delnext =LIST_NEXT(block);
f0122f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f66:	8b 40 08             	mov    0x8(%eax),%eax
f0122f69:	89 45 ec             	mov    %eax,-0x14(%ebp)
					 LIST_REMOVE(&blocklist,delnext);
f0122f6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122f70:	75 17                	jne    f0122f89 <realloc_block_FF+0x1bd>
f0122f72:	83 ec 04             	sub    $0x4,%esp
f0122f75:	68 8e ba 12 f0       	push   $0xf012ba8e
f0122f7a:	68 38 01 00 00       	push   $0x138
f0122f7f:	68 cf b9 12 f0       	push   $0xf012b9cf
f0122f84:	e8 91 d2 fd ff       	call   f010021a <_panic>
f0122f89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122f8c:	8b 40 08             	mov    0x8(%eax),%eax
f0122f8f:	85 c0                	test   %eax,%eax
f0122f91:	74 11                	je     f0122fa4 <realloc_block_FF+0x1d8>
f0122f93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122f96:	8b 40 08             	mov    0x8(%eax),%eax
f0122f99:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122f9c:	8b 52 0c             	mov    0xc(%edx),%edx
f0122f9f:	89 50 0c             	mov    %edx,0xc(%eax)
f0122fa2:	eb 0b                	jmp    f0122faf <realloc_block_FF+0x1e3>
f0122fa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fa7:	8b 40 0c             	mov    0xc(%eax),%eax
f0122faa:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0122faf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fb2:	8b 40 0c             	mov    0xc(%eax),%eax
f0122fb5:	85 c0                	test   %eax,%eax
f0122fb7:	74 11                	je     f0122fca <realloc_block_FF+0x1fe>
f0122fb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fbc:	8b 40 0c             	mov    0xc(%eax),%eax
f0122fbf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122fc2:	8b 52 08             	mov    0x8(%edx),%edx
f0122fc5:	89 50 08             	mov    %edx,0x8(%eax)
f0122fc8:	eb 0b                	jmp    f0122fd5 <realloc_block_FF+0x209>
f0122fca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fcd:	8b 40 08             	mov    0x8(%eax),%eax
f0122fd0:	a3 68 40 3f f0       	mov    %eax,0xf03f4068
f0122fd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fd8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0122fdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122fe2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0122fe9:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f0122fee:	48                   	dec    %eax
f0122fef:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
					 if(block->size - new_size >= sizeOfMetaData())
f0122ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ff7:	8b 00                	mov    (%eax),%eax
f0122ff9:	2b 45 0c             	sub    0xc(%ebp),%eax
f0122ffc:	83 f8 0f             	cmp    $0xf,%eax
f0122fff:	0f 86 9d 00 00 00    	jbe    f01230a2 <realloc_block_FF+0x2d6>
					 {
						 struct BlockMetaData *new_block=(struct BlockMetaData*)((void*)block + new_size);
f0123005:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123008:	8b 45 0c             	mov    0xc(%ebp),%eax
f012300b:	01 d0                	add    %edx,%eax
f012300d:	89 45 e8             	mov    %eax,-0x18(%ebp)
						 new_block->size = block->size - new_size;
f0123010:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123013:	8b 00                	mov    (%eax),%eax
f0123015:	2b 45 0c             	sub    0xc(%ebp),%eax
f0123018:	89 c2                	mov    %eax,%edx
f012301a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012301d:	89 10                	mov    %edx,(%eax)
						 block->size = new_size;
f012301f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123022:	8b 55 0c             	mov    0xc(%ebp),%edx
f0123025:	89 10                	mov    %edx,(%eax)
						 new_block->is_free = 1;
f0123027:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012302a:	c6 40 04 01          	movb   $0x1,0x4(%eax)
						 LIST_INSERT_AFTER(&blocklist,block,new_block);
f012302e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123032:	74 06                	je     f012303a <realloc_block_FF+0x26e>
f0123034:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0123038:	75 17                	jne    f0123051 <realloc_block_FF+0x285>
f012303a:	83 ec 04             	sub    $0x4,%esp
f012303d:	68 e8 b9 12 f0       	push   $0xf012b9e8
f0123042:	68 3f 01 00 00       	push   $0x13f
f0123047:	68 cf b9 12 f0       	push   $0xf012b9cf
f012304c:	e8 c9 d1 fd ff       	call   f010021a <_panic>
f0123051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123054:	8b 50 08             	mov    0x8(%eax),%edx
f0123057:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012305a:	89 50 08             	mov    %edx,0x8(%eax)
f012305d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0123060:	8b 40 08             	mov    0x8(%eax),%eax
f0123063:	85 c0                	test   %eax,%eax
f0123065:	74 0c                	je     f0123073 <realloc_block_FF+0x2a7>
f0123067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012306a:	8b 40 08             	mov    0x8(%eax),%eax
f012306d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123070:	89 50 0c             	mov    %edx,0xc(%eax)
f0123073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123076:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123079:	89 50 08             	mov    %edx,0x8(%eax)
f012307c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012307f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123082:	89 50 0c             	mov    %edx,0xc(%eax)
f0123085:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0123088:	8b 40 08             	mov    0x8(%eax),%eax
f012308b:	85 c0                	test   %eax,%eax
f012308d:	75 08                	jne    f0123097 <realloc_block_FF+0x2cb>
f012308f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0123092:	a3 6c 40 3f f0       	mov    %eax,0xf03f406c
f0123097:	a1 74 40 3f f0       	mov    0xf03f4074,%eax
f012309c:	40                   	inc    %eax
f012309d:	a3 74 40 3f f0       	mov    %eax,0xf03f4074
					 }
					 return va;
f01230a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01230a5:	eb 6f                	jmp    f0123116 <realloc_block_FF+0x34a>
	    		 }
	    	 }
	    	 struct BlockMetaData* new_block = alloc_block_FF(new_size - sizeOfMetaData());
f01230a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01230aa:	83 e8 10             	sub    $0x10,%eax
f01230ad:	83 ec 0c             	sub    $0xc,%esp
f01230b0:	50                   	push   %eax
f01230b1:	e8 87 f6 ff ff       	call   f012273d <alloc_block_FF>
f01230b6:	83 c4 10             	add    $0x10,%esp
f01230b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	         if (new_block == NULL)
f01230bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01230c0:	75 29                	jne    f01230eb <realloc_block_FF+0x31f>
	         {
	        	 new_block = sbrk(new_size);
f01230c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01230c5:	83 ec 0c             	sub    $0xc,%esp
f01230c8:	50                   	push   %eax
f01230c9:	e8 6f 53 fe ff       	call   f010843d <sbrk>
f01230ce:	83 c4 10             	add    $0x10,%esp
f01230d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	        	 if((int)new_block == -1)
f01230d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01230d7:	83 f8 ff             	cmp    $0xffffffff,%eax
f01230da:	75 07                	jne    f01230e3 <realloc_block_FF+0x317>
	        	 {
	        		 return NULL;
f01230dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01230e1:	eb 33                	jmp    f0123116 <realloc_block_FF+0x34a>
	        	 }
	        	 else
	        	 {
	        		 return (uint32*)((char*)new_block + sizeOfMetaData());
f01230e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01230e6:	83 c0 10             	add    $0x10,%eax
f01230e9:	eb 2b                	jmp    f0123116 <realloc_block_FF+0x34a>
	        	 }
	         }
	         else
	         {
	        	 memcpy(new_block, block, block->size);
f01230eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01230ee:	8b 00                	mov    (%eax),%eax
f01230f0:	83 ec 04             	sub    $0x4,%esp
f01230f3:	50                   	push   %eax
f01230f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01230f7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01230fa:	e8 03 ec ff ff       	call   f0121d02 <memcpy>
f01230ff:	83 c4 10             	add    $0x10,%esp
	        	 free_block(block);
f0123102:	83 ec 0c             	sub    $0xc,%esp
f0123105:	ff 75 f4             	pushl  -0xc(%ebp)
f0123108:	e8 d7 fa ff ff       	call   f0122be4 <free_block>
f012310d:	83 c4 10             	add    $0x10,%esp
	        	 return (uint32*)((char*)new_block + sizeOfMetaData());
f0123110:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123113:	83 c0 10             	add    $0x10,%eax
	         }
	     }
	}
f0123116:	c9                   	leave  
f0123117:	c3                   	ret    

f0123118 <__udivdi3>:
f0123118:	55                   	push   %ebp
f0123119:	57                   	push   %edi
f012311a:	56                   	push   %esi
f012311b:	53                   	push   %ebx
f012311c:	83 ec 1c             	sub    $0x1c,%esp
f012311f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0123123:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0123127:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012312b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012312f:	89 ca                	mov    %ecx,%edx
f0123131:	89 f8                	mov    %edi,%eax
f0123133:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0123137:	85 f6                	test   %esi,%esi
f0123139:	75 2d                	jne    f0123168 <__udivdi3+0x50>
f012313b:	39 cf                	cmp    %ecx,%edi
f012313d:	77 65                	ja     f01231a4 <__udivdi3+0x8c>
f012313f:	89 fd                	mov    %edi,%ebp
f0123141:	85 ff                	test   %edi,%edi
f0123143:	75 0b                	jne    f0123150 <__udivdi3+0x38>
f0123145:	b8 01 00 00 00       	mov    $0x1,%eax
f012314a:	31 d2                	xor    %edx,%edx
f012314c:	f7 f7                	div    %edi
f012314e:	89 c5                	mov    %eax,%ebp
f0123150:	31 d2                	xor    %edx,%edx
f0123152:	89 c8                	mov    %ecx,%eax
f0123154:	f7 f5                	div    %ebp
f0123156:	89 c1                	mov    %eax,%ecx
f0123158:	89 d8                	mov    %ebx,%eax
f012315a:	f7 f5                	div    %ebp
f012315c:	89 cf                	mov    %ecx,%edi
f012315e:	89 fa                	mov    %edi,%edx
f0123160:	83 c4 1c             	add    $0x1c,%esp
f0123163:	5b                   	pop    %ebx
f0123164:	5e                   	pop    %esi
f0123165:	5f                   	pop    %edi
f0123166:	5d                   	pop    %ebp
f0123167:	c3                   	ret    
f0123168:	39 ce                	cmp    %ecx,%esi
f012316a:	77 28                	ja     f0123194 <__udivdi3+0x7c>
f012316c:	0f bd fe             	bsr    %esi,%edi
f012316f:	83 f7 1f             	xor    $0x1f,%edi
f0123172:	75 40                	jne    f01231b4 <__udivdi3+0x9c>
f0123174:	39 ce                	cmp    %ecx,%esi
f0123176:	72 0a                	jb     f0123182 <__udivdi3+0x6a>
f0123178:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012317c:	0f 87 9e 00 00 00    	ja     f0123220 <__udivdi3+0x108>
f0123182:	b8 01 00 00 00       	mov    $0x1,%eax
f0123187:	89 fa                	mov    %edi,%edx
f0123189:	83 c4 1c             	add    $0x1c,%esp
f012318c:	5b                   	pop    %ebx
f012318d:	5e                   	pop    %esi
f012318e:	5f                   	pop    %edi
f012318f:	5d                   	pop    %ebp
f0123190:	c3                   	ret    
f0123191:	8d 76 00             	lea    0x0(%esi),%esi
f0123194:	31 ff                	xor    %edi,%edi
f0123196:	31 c0                	xor    %eax,%eax
f0123198:	89 fa                	mov    %edi,%edx
f012319a:	83 c4 1c             	add    $0x1c,%esp
f012319d:	5b                   	pop    %ebx
f012319e:	5e                   	pop    %esi
f012319f:	5f                   	pop    %edi
f01231a0:	5d                   	pop    %ebp
f01231a1:	c3                   	ret    
f01231a2:	66 90                	xchg   %ax,%ax
f01231a4:	89 d8                	mov    %ebx,%eax
f01231a6:	f7 f7                	div    %edi
f01231a8:	31 ff                	xor    %edi,%edi
f01231aa:	89 fa                	mov    %edi,%edx
f01231ac:	83 c4 1c             	add    $0x1c,%esp
f01231af:	5b                   	pop    %ebx
f01231b0:	5e                   	pop    %esi
f01231b1:	5f                   	pop    %edi
f01231b2:	5d                   	pop    %ebp
f01231b3:	c3                   	ret    
f01231b4:	bd 20 00 00 00       	mov    $0x20,%ebp
f01231b9:	89 eb                	mov    %ebp,%ebx
f01231bb:	29 fb                	sub    %edi,%ebx
f01231bd:	89 f9                	mov    %edi,%ecx
f01231bf:	d3 e6                	shl    %cl,%esi
f01231c1:	89 c5                	mov    %eax,%ebp
f01231c3:	88 d9                	mov    %bl,%cl
f01231c5:	d3 ed                	shr    %cl,%ebp
f01231c7:	89 e9                	mov    %ebp,%ecx
f01231c9:	09 f1                	or     %esi,%ecx
f01231cb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01231cf:	89 f9                	mov    %edi,%ecx
f01231d1:	d3 e0                	shl    %cl,%eax
f01231d3:	89 c5                	mov    %eax,%ebp
f01231d5:	89 d6                	mov    %edx,%esi
f01231d7:	88 d9                	mov    %bl,%cl
f01231d9:	d3 ee                	shr    %cl,%esi
f01231db:	89 f9                	mov    %edi,%ecx
f01231dd:	d3 e2                	shl    %cl,%edx
f01231df:	8b 44 24 08          	mov    0x8(%esp),%eax
f01231e3:	88 d9                	mov    %bl,%cl
f01231e5:	d3 e8                	shr    %cl,%eax
f01231e7:	09 c2                	or     %eax,%edx
f01231e9:	89 d0                	mov    %edx,%eax
f01231eb:	89 f2                	mov    %esi,%edx
f01231ed:	f7 74 24 0c          	divl   0xc(%esp)
f01231f1:	89 d6                	mov    %edx,%esi
f01231f3:	89 c3                	mov    %eax,%ebx
f01231f5:	f7 e5                	mul    %ebp
f01231f7:	39 d6                	cmp    %edx,%esi
f01231f9:	72 19                	jb     f0123214 <__udivdi3+0xfc>
f01231fb:	74 0b                	je     f0123208 <__udivdi3+0xf0>
f01231fd:	89 d8                	mov    %ebx,%eax
f01231ff:	31 ff                	xor    %edi,%edi
f0123201:	e9 58 ff ff ff       	jmp    f012315e <__udivdi3+0x46>
f0123206:	66 90                	xchg   %ax,%ax
f0123208:	8b 54 24 08          	mov    0x8(%esp),%edx
f012320c:	89 f9                	mov    %edi,%ecx
f012320e:	d3 e2                	shl    %cl,%edx
f0123210:	39 c2                	cmp    %eax,%edx
f0123212:	73 e9                	jae    f01231fd <__udivdi3+0xe5>
f0123214:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0123217:	31 ff                	xor    %edi,%edi
f0123219:	e9 40 ff ff ff       	jmp    f012315e <__udivdi3+0x46>
f012321e:	66 90                	xchg   %ax,%ax
f0123220:	31 c0                	xor    %eax,%eax
f0123222:	e9 37 ff ff ff       	jmp    f012315e <__udivdi3+0x46>
f0123227:	90                   	nop

f0123228 <__umoddi3>:
f0123228:	55                   	push   %ebp
f0123229:	57                   	push   %edi
f012322a:	56                   	push   %esi
f012322b:	53                   	push   %ebx
f012322c:	83 ec 1c             	sub    $0x1c,%esp
f012322f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0123233:	8b 74 24 34          	mov    0x34(%esp),%esi
f0123237:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012323b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012323f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0123243:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0123247:	89 f3                	mov    %esi,%ebx
f0123249:	89 fa                	mov    %edi,%edx
f012324b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012324f:	89 34 24             	mov    %esi,(%esp)
f0123252:	85 c0                	test   %eax,%eax
f0123254:	75 1a                	jne    f0123270 <__umoddi3+0x48>
f0123256:	39 f7                	cmp    %esi,%edi
f0123258:	0f 86 a2 00 00 00    	jbe    f0123300 <__umoddi3+0xd8>
f012325e:	89 c8                	mov    %ecx,%eax
f0123260:	89 f2                	mov    %esi,%edx
f0123262:	f7 f7                	div    %edi
f0123264:	89 d0                	mov    %edx,%eax
f0123266:	31 d2                	xor    %edx,%edx
f0123268:	83 c4 1c             	add    $0x1c,%esp
f012326b:	5b                   	pop    %ebx
f012326c:	5e                   	pop    %esi
f012326d:	5f                   	pop    %edi
f012326e:	5d                   	pop    %ebp
f012326f:	c3                   	ret    
f0123270:	39 f0                	cmp    %esi,%eax
f0123272:	0f 87 ac 00 00 00    	ja     f0123324 <__umoddi3+0xfc>
f0123278:	0f bd e8             	bsr    %eax,%ebp
f012327b:	83 f5 1f             	xor    $0x1f,%ebp
f012327e:	0f 84 ac 00 00 00    	je     f0123330 <__umoddi3+0x108>
f0123284:	bf 20 00 00 00       	mov    $0x20,%edi
f0123289:	29 ef                	sub    %ebp,%edi
f012328b:	89 fe                	mov    %edi,%esi
f012328d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0123291:	89 e9                	mov    %ebp,%ecx
f0123293:	d3 e0                	shl    %cl,%eax
f0123295:	89 d7                	mov    %edx,%edi
f0123297:	89 f1                	mov    %esi,%ecx
f0123299:	d3 ef                	shr    %cl,%edi
f012329b:	09 c7                	or     %eax,%edi
f012329d:	89 e9                	mov    %ebp,%ecx
f012329f:	d3 e2                	shl    %cl,%edx
f01232a1:	89 14 24             	mov    %edx,(%esp)
f01232a4:	89 d8                	mov    %ebx,%eax
f01232a6:	d3 e0                	shl    %cl,%eax
f01232a8:	89 c2                	mov    %eax,%edx
f01232aa:	8b 44 24 08          	mov    0x8(%esp),%eax
f01232ae:	d3 e0                	shl    %cl,%eax
f01232b0:	89 44 24 04          	mov    %eax,0x4(%esp)
f01232b4:	8b 44 24 08          	mov    0x8(%esp),%eax
f01232b8:	89 f1                	mov    %esi,%ecx
f01232ba:	d3 e8                	shr    %cl,%eax
f01232bc:	09 d0                	or     %edx,%eax
f01232be:	d3 eb                	shr    %cl,%ebx
f01232c0:	89 da                	mov    %ebx,%edx
f01232c2:	f7 f7                	div    %edi
f01232c4:	89 d3                	mov    %edx,%ebx
f01232c6:	f7 24 24             	mull   (%esp)
f01232c9:	89 c6                	mov    %eax,%esi
f01232cb:	89 d1                	mov    %edx,%ecx
f01232cd:	39 d3                	cmp    %edx,%ebx
f01232cf:	0f 82 87 00 00 00    	jb     f012335c <__umoddi3+0x134>
f01232d5:	0f 84 91 00 00 00    	je     f012336c <__umoddi3+0x144>
f01232db:	8b 54 24 04          	mov    0x4(%esp),%edx
f01232df:	29 f2                	sub    %esi,%edx
f01232e1:	19 cb                	sbb    %ecx,%ebx
f01232e3:	89 d8                	mov    %ebx,%eax
f01232e5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01232e9:	d3 e0                	shl    %cl,%eax
f01232eb:	89 e9                	mov    %ebp,%ecx
f01232ed:	d3 ea                	shr    %cl,%edx
f01232ef:	09 d0                	or     %edx,%eax
f01232f1:	89 e9                	mov    %ebp,%ecx
f01232f3:	d3 eb                	shr    %cl,%ebx
f01232f5:	89 da                	mov    %ebx,%edx
f01232f7:	83 c4 1c             	add    $0x1c,%esp
f01232fa:	5b                   	pop    %ebx
f01232fb:	5e                   	pop    %esi
f01232fc:	5f                   	pop    %edi
f01232fd:	5d                   	pop    %ebp
f01232fe:	c3                   	ret    
f01232ff:	90                   	nop
f0123300:	89 fd                	mov    %edi,%ebp
f0123302:	85 ff                	test   %edi,%edi
f0123304:	75 0b                	jne    f0123311 <__umoddi3+0xe9>
f0123306:	b8 01 00 00 00       	mov    $0x1,%eax
f012330b:	31 d2                	xor    %edx,%edx
f012330d:	f7 f7                	div    %edi
f012330f:	89 c5                	mov    %eax,%ebp
f0123311:	89 f0                	mov    %esi,%eax
f0123313:	31 d2                	xor    %edx,%edx
f0123315:	f7 f5                	div    %ebp
f0123317:	89 c8                	mov    %ecx,%eax
f0123319:	f7 f5                	div    %ebp
f012331b:	89 d0                	mov    %edx,%eax
f012331d:	e9 44 ff ff ff       	jmp    f0123266 <__umoddi3+0x3e>
f0123322:	66 90                	xchg   %ax,%ax
f0123324:	89 c8                	mov    %ecx,%eax
f0123326:	89 f2                	mov    %esi,%edx
f0123328:	83 c4 1c             	add    $0x1c,%esp
f012332b:	5b                   	pop    %ebx
f012332c:	5e                   	pop    %esi
f012332d:	5f                   	pop    %edi
f012332e:	5d                   	pop    %ebp
f012332f:	c3                   	ret    
f0123330:	3b 04 24             	cmp    (%esp),%eax
f0123333:	72 06                	jb     f012333b <__umoddi3+0x113>
f0123335:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0123339:	77 0f                	ja     f012334a <__umoddi3+0x122>
f012333b:	89 f2                	mov    %esi,%edx
f012333d:	29 f9                	sub    %edi,%ecx
f012333f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0123343:	89 14 24             	mov    %edx,(%esp)
f0123346:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012334a:	8b 44 24 04          	mov    0x4(%esp),%eax
f012334e:	8b 14 24             	mov    (%esp),%edx
f0123351:	83 c4 1c             	add    $0x1c,%esp
f0123354:	5b                   	pop    %ebx
f0123355:	5e                   	pop    %esi
f0123356:	5f                   	pop    %edi
f0123357:	5d                   	pop    %ebp
f0123358:	c3                   	ret    
f0123359:	8d 76 00             	lea    0x0(%esi),%esi
f012335c:	2b 04 24             	sub    (%esp),%eax
f012335f:	19 fa                	sbb    %edi,%edx
f0123361:	89 d1                	mov    %edx,%ecx
f0123363:	89 c6                	mov    %eax,%esi
f0123365:	e9 71 ff ff ff       	jmp    f01232db <__umoddi3+0xb3>
f012336a:	66 90                	xchg   %ax,%ax
f012336c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0123370:	72 ea                	jb     f012335c <__umoddi3+0x134>
f0123372:	89 d9                	mov    %ebx,%ecx
f0123374:	e9 62 ff ff ff       	jmp    f01232db <__umoddi3+0xb3>
